import { AppError, ClientError, ErrorSeverityType } from '../errors/ErrorClasses';
import { NextFunction, Request, Response } from 'express';
import { AppLoggerServiceInterface, ErrorHandlerServiceInterface, ErrorLoggerServiceInterface } from '../index/interfaces/main';
import { Sequelize } from 'sequelize';
export declare class ErrorHandlerService implements ErrorHandlerServiceInterface {
    private static instance;
    ErrorClasses: {
        AppAuthenticationError: typeof import("../errors/ErrorClasses").AppAuthenticationError;
        AuthControllerError: typeof import("../errors/ErrorClasses").AuthControllerError;
        AutoCorrectedInputWarning: typeof import("../errors/ErrorClasses").AutoCorrectedInputWarning;
        CacheServiceError: typeof import("../errors/ErrorClasses").CacheServiceError;
        ClientAuthenticationError: typeof import("../errors/ErrorClasses").ClientAuthenticationError;
        ConcurrencyError: typeof import("../errors/ErrorClasses").ConcurrencyError;
        ConfigurationError: typeof import("../errors/ErrorClasses").ConfigurationError;
        ConfigurationErrorFatal: typeof import("../errors/ErrorClasses").ConfigurationErrorFatal;
        ConflictError: typeof import("../errors/ErrorClasses").ConflictError;
        DatabaseErrorFatal: typeof import("../errors/ErrorClasses").DatabaseErrorFatal;
        DatabaseErrorRecoverable: typeof import("../errors/ErrorClasses").DatabaseErrorRecoverable;
        DataIntegrityError: typeof import("../errors/ErrorClasses").DataIntegrityError;
        DependencyErrorFatal: typeof import("../errors/ErrorClasses").DependencyErrorFatal;
        DependencyErrorRecoverable: typeof import("../errors/ErrorClasses").DependencyErrorRecoverable;
        DeprecatedApiWarning: typeof import("../errors/ErrorClasses").DeprecatedApiWarning;
        ExpressError: typeof import("../errors/ErrorClasses").ExpressError;
        ExpressRouteError: typeof import("../errors/ErrorClasses").ExpressRouteError;
        ExternalServiceError: typeof import("../errors/ErrorClasses").ExternalServiceError;
        ExternalServiceErrorFatal: typeof import("../errors/ErrorClasses").ExternalServiceErrorFatal;
        FallbackSuccessInfo: typeof import("../errors/ErrorClasses").FallbackSuccessInfo;
        FileProcessingError: typeof import("../errors/ErrorClasses").FileProcessingError;
        ForbiddenError: typeof import("../errors/ErrorClasses").ForbiddenError;
        HealthCheckError: typeof import("../errors/ErrorClasses").HealthCheckError;
        HTTPSClientErrorFatal: typeof import("../errors/ErrorClasses").HTTPSClientErrorFatal;
        HTTPSServerErrorRecoverable: typeof import("../errors/ErrorClasses").HTTPSServerErrorRecoverable;
        InsufficientStorageError: typeof import("../errors/ErrorClasses").InsufficientStorageError;
        InvalidCredentialsError: typeof import("../errors/ErrorClasses").InvalidCredentialsError;
        InvalidInputError: typeof import("../errors/ErrorClasses").InvalidInputError;
        InvalidTokenError: typeof import("../errors/ErrorClasses").InvalidTokenError;
        MiddlewareServiceError: typeof import("../errors/ErrorClasses").MiddlewareServiceError;
        MissingResourceError: typeof import("../errors/ErrorClasses").MissingResourceError;
        PassportAuthServiceError: typeof import("../errors/ErrorClasses").PassportAuthServiceError;
        PartialServiceFailureWarning: typeof import("../errors/ErrorClasses").PartialServiceFailureWarning;
        PasswordValidationError: typeof import("../errors/ErrorClasses").PasswordValidationError;
        PermissionDeniedError: typeof import("../errors/ErrorClasses").PermissionDeniedError;
        QuotaExceededErrorFatal: typeof import("../errors/ErrorClasses").QuotaExceededErrorFatal;
        QuotaExceededErrorRecoverable: typeof import("../errors/ErrorClasses").QuotaExceededErrorRecoverable;
        QuotaExceededErrorWarning: typeof import("../errors/ErrorClasses").QuotaExceededErrorWarning;
        RateLimitErrorFatal: typeof import("../errors/ErrorClasses").RateLimitErrorFatal;
        RateLimitErrorRecoverable: typeof import("../errors/ErrorClasses").RateLimitErrorRecoverable;
        RateLimitErrorWarning: typeof import("../errors/ErrorClasses").RateLimitErrorWarning;
        RedisServiceError: typeof import("../errors/ErrorClasses").RedisServiceError;
        ResourceManagerError: typeof import("../errors/ErrorClasses").ResourceManagerError;
        RootMiddlewareError: typeof import("../errors/ErrorClasses").RootMiddlewareError;
        ServerNotInitializedError: typeof import("../errors/ErrorClasses").ServerNotInitializedError;
        ServiceDegradedError: typeof import("../errors/ErrorClasses").ServiceDegradedError;
        ServiceDegradedErrorMinor: typeof import("../errors/ErrorClasses").ServiceDegradedErrorMinor;
        ServiceUnavailableError: typeof import("../errors/ErrorClasses").ServiceUnavailableError;
        ServiceUnavailableErrorFatal: typeof import("../errors/ErrorClasses").ServiceUnavailableErrorFatal;
        SessionExpiredError: typeof import("../errors/ErrorClasses").SessionExpiredError;
        SlowApiWarning: typeof import("../errors/ErrorClasses").SlowApiWarning;
        TimeoutError: typeof import("../errors/ErrorClasses").TimeoutError;
        UserActionInfo: typeof import("../errors/ErrorClasses").UserActionInfo;
        UserRegistrationError: typeof import("../errors/ErrorClasses").UserRegistrationError;
        UtilityErrorFatal: typeof import("../errors/ErrorClasses").UtilityErrorFatal;
        UtilityErrorRecoverable: typeof import("../errors/ErrorClasses").UtilityErrorRecoverable;
        ValidationError: typeof import("../errors/ErrorClasses").ValidationError;
    };
    ErrorSeverity: {
        readonly FATAL: "fatal";
        readonly RECOVERABLE: "recoverable";
        readonly WARNING: "warning";
        readonly INFO: "info";
    };
    private logger;
    private errorLogger;
    private shutdownFunction;
    private constructor();
    static getInstance(logger: AppLoggerServiceInterface, errorLogger: ErrorLoggerServiceInterface): Promise<ErrorHandlerService>;
    handleError(params: {
        error: unknown;
        req?: Request;
        details?: Record<string, unknown>;
        severity?: ErrorSeverityType;
        action?: string;
        userId?: string;
        sequelize?: Sequelize;
    }): void;
    expressErrorHandler(): (err: AppError | ClientError | Error | Record<string, unknown>, req: Request, res: Response, next: NextFunction) => void;
    handleCriticalError(params: {
        error: unknown;
        req?: Request;
        details?: Record<string, unknown>;
    }): void;
    sendClientErrorResponse({ message, res, responseId, statusCode }: {
        message: string;
        statusCode?: number;
        res: Response;
        responseId?: string;
    }): Promise<void>;
    initializeGlobalErrorHandlers(): void;
    setShutdownHandler(shutdownFn: () => Promise<void>): void;
    private performGracefulShutdown;
    shutdown(): Promise<void>;
}
//# sourceMappingURL=ErrorHandler.d.ts.map