import { UserInstanceInterface } from '../index/interfaces/models';
import { AppLoggerServiceInterface, AuthControllerInterface, CacheServiceInterface, ErrorHandlerServiceInterface, ErrorLoggerServiceInterface, MailerServiceInterface, UserControllerInterface, VaultServiceInterface } from '../index/interfaces/services';
import { UserControllerDeps } from '../index/interfaces/serviceDeps';
import { RequestHandler } from 'express';
export declare class AuthController implements AuthControllerInterface {
    private static instance;
    private backupCodeService;
    private emailMFAService;
    private JWTAuthMiddlewareService;
    private JWTService;
    private passportAuthService;
    private passportAuthMiddlewareService;
    private passwordService;
    private TOTPService;
    protected UserController: UserControllerInterface;
    protected cacheService: CacheServiceInterface;
    protected logger: AppLoggerServiceInterface;
    protected errorLogger: ErrorLoggerServiceInterface;
    protected errorHandler: ErrorHandlerServiceInterface;
    protected vault: VaultServiceInterface;
    protected mailer: MailerServiceInterface;
    private sequelize;
    private constructor();
    static getInstance(): Promise<AuthController>;
    initializeAuthMiddleware(): Promise<void>;
    initializeJWTAuthMiddleware(): RequestHandler;
    initializePassportAuthMiddleware(): RequestHandler;
    protected findUserById(userId: string): Promise<UserInstanceInterface | null>;
    protected findUserByEmail(email: string): Promise<UserInstanceInterface | null>;
    loginUser(email: string, password: string): Promise<{
        success: boolean;
        token?: string;
        requiresMFA?: boolean;
    }>;
    protected authenticateUser(userId: string, password: string): Promise<boolean>;
    private handleMFAForLogin;
    recoverPassword(email: string): Promise<void>;
    resetPassword(user: UserInstanceInterface, newPassword: string): Promise<UserInstanceInterface | null>;
    generateResetToken(user: UserInstanceInterface): Promise<string | null>;
    validateResetToken(userId: string, token: string): Promise<UserInstanceInterface | null>;
    enableMfa(userId: string): Promise<boolean>;
    disableMfa(userId: string): Promise<boolean>;
    generateBackupCodesForUser(userId: string): Promise<string[]>;
    verifyBackupCodeForUser(userId: string, inputCode: string): Promise<boolean>;
    generateEmailMFACode(email: string): Promise<boolean>;
    verifyEmailMFACode(email: string, emailMFACode: string): Promise<boolean>;
    generateTOTP(userId: string): Promise<{
        secret: string;
        qrCodeUrl: string;
    }>;
    verifyTOTP(userId: string, token: string): Promise<boolean>;
    comparePassword(user: UserInstanceInterface, password: string): Promise<boolean>;
    protected loadAxios(): Promise<UserControllerDeps['axios']>;
    protected loadBcrypt(): Promise<UserControllerDeps['bcrypt']>;
    protected loadArgon2(): Promise<UserControllerDeps['argon2']>;
    protected loadJwt(): Promise<UserControllerDeps['jwt']>;
    protected loadUuidv4(): Promise<string>;
    protected loadZxcvbn(): Promise<UserControllerDeps['zxcvbn']>;
    shutdown(): Promise<void>;
    protected handleAuthControllerError(error: unknown, errorHeader: string, errorDetails: object, customMessage: string): void;
}
//# sourceMappingURL=AuthController.d.ts.map