import app from 'express';
import { BackupCodeService } from '../auth/BackupCode';
import { CacheService } from '../services/Cache';
import { GatekeeperService } from '../services/Gatekeeper';
import { ErrorHandlerService } from '../services/ErrorHandler';
import { FIDO2Service } from '../auth/FIDO2';
import { PasswordService } from '../auth/Password';
import { TOTPService } from '../auth/TOTP';
import { CSRFMiddlewareService } from '../middleware/CSRF';
import { AccessControlMiddlewareServiceInterface, AppLoggerServiceInterface, AuthControllerInterface, BaseRouterInterface, DatabaseControllerInterface, EmailMFAServiceInterface, EnvConfigServiceInterface, ErrorLoggerServiceInterface, HealthCheckServiceInterface, HelmetMiddlewareServiceInterface, HTTPSServerInterface, JWTAuthMiddlewareServiceInterface, JWTServiceInterface, MailerServiceInterface, MiddlewareStatusServiceInterface, MulterUploadServiceInterface, PassportAuthMiddlewareServiceInterface, PassportServiceInterface, RedisServiceInterface, ResourceManagerInterface, RootMiddlewareServiceInterface, UserControllerInterface, VaultServiceInterface, YubicoOTPServiceInterface } from './interfaces/services';
export declare class ServiceFactory {
    private static loggerService;
    private static errorLoggerService;
    private static errorHandlerService;
    private static envConfigService;
    static getAccessControlMiddlewareService(): Promise<AccessControlMiddlewareServiceInterface>;
    static getAuthController(): Promise<AuthControllerInterface>;
    static getBackupCodeService(): Promise<BackupCodeService>;
    static getBaseRouter(): Promise<BaseRouterInterface>;
    static getCacheService(): Promise<CacheService>;
    static getCSRFMiddlewareService(): Promise<CSRFMiddlewareService>;
    static getDatabaseController(): Promise<DatabaseControllerInterface>;
    static getEmailMFAService(): Promise<EmailMFAServiceInterface>;
    static getEnvConfigService(): Promise<EnvConfigServiceInterface>;
    static getErrorHandlerService(): Promise<ErrorHandlerService>;
    static getErrorLoggerService(): Promise<ErrorLoggerServiceInterface>;
    static getFIDO2Service(): Promise<FIDO2Service>;
    static getGatekeeperService(): Promise<GatekeeperService>;
    static getHealthCheckService(): Promise<HealthCheckServiceInterface>;
    static getHelmetMiddlewareService(): Promise<HelmetMiddlewareServiceInterface>;
    static getHTTPSServer(app: app.Application): Promise<HTTPSServerInterface>;
    static getJWTAuthMiddlewareService(): Promise<JWTAuthMiddlewareServiceInterface>;
    static getJWTService(): Promise<JWTServiceInterface>;
    static getLoggerService(): Promise<AppLoggerServiceInterface>;
    static getMailerService(): Promise<MailerServiceInterface>;
    static getMiddlewareStatusService(): Promise<MiddlewareStatusServiceInterface>;
    static getMulterUploadService(): Promise<MulterUploadServiceInterface>;
    static getPassportService(): Promise<PassportServiceInterface>;
    static getPassportAuthMiddlewareService(): Promise<PassportAuthMiddlewareServiceInterface>;
    static getPasswordService(): Promise<PasswordService>;
    static getRedisService(): Promise<RedisServiceInterface>;
    static getResourceManager(): Promise<ResourceManagerInterface>;
    static getRootMiddlewareService(): Promise<RootMiddlewareServiceInterface>;
    static getVaultService(): Promise<VaultServiceInterface>;
    static getTOTPService(): Promise<TOTPService>;
    static getUserController(): Promise<UserControllerInterface>;
    static getYubicoOTPService(): Promise<YubicoOTPServiceInterface>;
}
//# sourceMappingURL=factory.d.ts.map