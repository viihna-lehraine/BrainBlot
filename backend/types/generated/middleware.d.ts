import express, { Application } from 'express';
import session from 'express-session';
import morgan from 'morgan';
import cookieParser from 'cookie-parser';
import cors from 'cors';
import hpp from 'hpp';
import passport, { AuthenticateOptions } from 'passport';
import RedisStore from 'connect-redis';
import { randomBytes } from 'crypto';
import { initializeCsrfMiddleware } from './middleware/csrf';
import { expressErrorHandler } from './middleware/expressErrorHandler';
import { initializeSecurityHeaders } from './middleware/securityHeaders';
import { ipBlacklistMiddleware } from './middleware/ipBlacklist';
import { initializeJwtAuthMiddleware } from './middleware/jwtAuth';
import { initializeRateLimitMiddleware } from './middleware/rateLimit';
import { FeatureFlags } from './config/environmentConfig';
import { Logger } from './config/logger';
import { getRedisClient } from './config/redis';
import { SecretsMap } from './utils/sops';
import { initializePassportAuthMiddleware } from './middleware/passportAuth';
import { initializeValidatorMiddleware } from './middleware/validator';
import { initializeSlowdownMiddleware } from './middleware/slowdown';
import { processError } from './utils/processError';
interface MiddlewareDependencies {
    express: typeof express;
    session: typeof session;
    cookieParser: typeof cookieParser;
    cors: typeof cors;
    hpp: typeof hpp;
    morgan: typeof morgan;
    passport: typeof passport;
    randomBytes: typeof randomBytes;
    RedisStore: typeof RedisStore;
    initializeCsrfMiddleware: typeof initializeCsrfMiddleware;
    getRedisClient: typeof getRedisClient;
    ipBlacklistMiddleware: typeof ipBlacklistMiddleware;
    initializeRateLimitMiddleware: typeof initializeRateLimitMiddleware;
    initializeSecurityHeaders: typeof initializeSecurityHeaders;
    createMemoryMonitor: () => void;
    logger: Logger;
    staticRootPath: string;
    featureFlags: FeatureFlags;
    expressErrorHandler: typeof expressErrorHandler;
    processError: typeof processError;
    secrets: SecretsMap;
    verifyJwt: (token: string) => Promise<string | object | null>;
    initializeJwtAuthMiddleware: typeof initializeJwtAuthMiddleware;
    initializePassportAuthMiddleware: typeof initializePassportAuthMiddleware;
    authenticateOptions: AuthenticateOptions;
    initializeValidatorMiddleware: typeof initializeValidatorMiddleware;
    initializeSlowdownMiddleware: typeof initializeSlowdownMiddleware;
}
export declare function initializeMiddleware({ express, session, cookieParser, cors, hpp, morgan, passport, randomBytes, RedisStore, initializeCsrfMiddleware, getRedisClient, ipBlacklistMiddleware, initializeRateLimitMiddleware, initializeSecurityHeaders, createMemoryMonitor, logger, staticRootPath, featureFlags, expressErrorHandler, processError, verifyJwt, initializeJwtAuthMiddleware, initializePassportAuthMiddleware, authenticateOptions, initializeValidatorMiddleware }: MiddlewareDependencies): Promise<Application>;
export {};
//# sourceMappingURL=middleware.d.ts.map