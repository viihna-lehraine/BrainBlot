import { DataTypes, Model } from 'sequelize';
import { User } from './User.mjs';
import { processError } from '../utils/processError.mjs';
import { validateDependencies } from '../utils/validateDependencies.mjs';
class SecurityEvent extends Model {
	id;
	eventId;
	eventType;
	eventDescription;
	ipAddress;
	userAgent;
	securityEventDate;
	securityEventLastUpdated;
}
export default function createSecurityEventModel(sequelize, logger) {
	try {
		validateDependencies(
			[{ name: 'sequelize', instance: sequelize }],
			logger || console
		);
		SecurityEvent.init(
			{
				id: {
					type: DataTypes.UUID,
					defaultValue: DataTypes.UUIDV4,
					primaryKey: true,
					allowNull: false,
					unique: true,
					references: {
						model: User,
						key: 'id'
					}
				},
				eventId: {
					type: DataTypes.INTEGER,
					autoIncrement: true,
					allowNull: false,
					unique: true
				},
				eventType: {
					type: DataTypes.STRING,
					allowNull: false,
					validate: {
						isIn: [
							[
								'login',
								'failed-login',
								'password-change',
								'2fa-enabled',
								'2fa-disabled',
								'account-lock',
								'other'
							]
						]
					}
				},
				eventDescription: {
					type: DataTypes.TEXT,
					allowNull: true
				},
				ipAddress: {
					type: DataTypes.STRING,
					allowNull: false,
					validate: {
						isIP: true
					}
				},
				userAgent: {
					type: DataTypes.STRING,
					allowNull: false
				},
				securityEventDate: {
					type: DataTypes.DATE,
					defaultValue: DataTypes.NOW,
					allowNull: false
				},
				securityEventLastUpdated: {
					type: DataTypes.DATE,
					defaultValue: DataTypes.NOW,
					allowNull: false
				}
			},
			{
				sequelize,
				modelName: 'SecurityEvent',
				timestamps: true
			}
		);
		return SecurityEvent;
	} catch (error) {
		processError(error, logger || console);
		throw error;
	}
}
export { SecurityEvent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VjdXJpdHlFdmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvU2VjdXJpdHlFdmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRU4sU0FBUyxFQUdULEtBQUssRUFFTCxNQUFNLFdBQVcsQ0FBQztBQUNuQixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRTlCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQWFyRSxNQUFNLGFBQ0wsU0FBUSxLQUdQO0lBR00sRUFBRSxDQUFVO0lBQ1osT0FBTyxDQUFVO0lBQ2pCLFNBQVMsQ0FBVTtJQUNuQixnQkFBZ0IsQ0FBaUI7SUFDakMsU0FBUyxDQUFVO0lBQ25CLFNBQVMsQ0FBVTtJQUNuQixpQkFBaUIsQ0FBUTtJQUN6Qix3QkFBd0IsQ0FBMEI7Q0FDekQ7QUFFRCxNQUFNLENBQUMsT0FBTyxVQUFVLHdCQUF3QixDQUMvQyxTQUFvQixFQUNwQixNQUFjO0lBRWQsSUFBSSxDQUFDO1FBQ0osb0JBQW9CLENBQ25CLENBQUMsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUM1QyxNQUFNLElBQUksT0FBTyxDQUNqQixDQUFDO1FBRUYsYUFBYSxDQUFDLElBQUksQ0FDakI7WUFDQyxFQUFFLEVBQUU7Z0JBQ0gsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJO2dCQUNwQixZQUFZLEVBQUUsU0FBUyxDQUFDLE1BQU07Z0JBQzlCLFVBQVUsRUFBRSxJQUFJO2dCQUNoQixTQUFTLEVBQUUsS0FBSztnQkFDaEIsTUFBTSxFQUFFLElBQUk7Z0JBQ1osVUFBVSxFQUFFO29CQUNYLEtBQUssRUFBRSxJQUFJO29CQUNYLEdBQUcsRUFBRSxJQUFJO2lCQUNUO2FBQ0Q7WUFDRCxPQUFPLEVBQUU7Z0JBQ1IsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPO2dCQUN2QixhQUFhLEVBQUUsSUFBSTtnQkFDbkIsU0FBUyxFQUFFLEtBQUs7Z0JBQ2hCLE1BQU0sRUFBRSxJQUFJO2FBQ1o7WUFDRCxTQUFTLEVBQUU7Z0JBQ1YsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNO2dCQUN0QixTQUFTLEVBQUUsS0FBSztnQkFDaEIsUUFBUSxFQUFFO29CQUNULElBQUksRUFBRTt3QkFDTDs0QkFDQyxPQUFPOzRCQUNQLGNBQWM7NEJBQ2QsaUJBQWlCOzRCQUNqQixhQUFhOzRCQUNiLGNBQWM7NEJBQ2QsY0FBYzs0QkFDZCxPQUFPO3lCQUNQO3FCQUNEO2lCQUNEO2FBQ0Q7WUFDRCxnQkFBZ0IsRUFBRTtnQkFDakIsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJO2dCQUNwQixTQUFTLEVBQUUsSUFBSTthQUNmO1lBQ0QsU0FBUyxFQUFFO2dCQUNWLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTTtnQkFDdEIsU0FBUyxFQUFFLEtBQUs7Z0JBQ2hCLFFBQVEsRUFBRTtvQkFDVCxJQUFJLEVBQUUsSUFBSTtpQkFDVjthQUNEO1lBQ0QsU0FBUyxFQUFFO2dCQUNWLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTTtnQkFDdEIsU0FBUyxFQUFFLEtBQUs7YUFDaEI7WUFDRCxpQkFBaUIsRUFBRTtnQkFDbEIsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJO2dCQUNwQixZQUFZLEVBQUUsU0FBUyxDQUFDLEdBQUc7Z0JBQzNCLFNBQVMsRUFBRSxLQUFLO2FBQ2hCO1lBQ0Qsd0JBQXdCLEVBQUU7Z0JBQ3pCLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSTtnQkFDcEIsWUFBWSxFQUFFLFNBQVMsQ0FBQyxHQUFHO2dCQUMzQixTQUFTLEVBQUUsS0FBSzthQUNoQjtTQUNELEVBQ0Q7WUFDQyxTQUFTO1lBQ1QsU0FBUyxFQUFFLGVBQWU7WUFDMUIsVUFBVSxFQUFFLElBQUk7U0FDaEIsQ0FDRCxDQUFDO1FBRUYsT0FBTyxhQUFhLENBQUM7SUFDdEIsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsWUFBWSxDQUFDLEtBQUssRUFBRSxNQUFNLElBQUksT0FBTyxDQUFDLENBQUM7UUFDdkMsTUFBTSxLQUFLLENBQUM7SUFDYixDQUFDO0FBQ0YsQ0FBQztBQUVELE9BQU8sRUFBRSxhQUFhLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENyZWF0aW9uT3B0aW9uYWwsXG5cdERhdGFUeXBlcyxcblx0SW5mZXJBdHRyaWJ1dGVzLFxuXHRJbmZlckNyZWF0aW9uQXR0cmlidXRlcyxcblx0TW9kZWwsXG5cdFNlcXVlbGl6ZVxufSBmcm9tICdzZXF1ZWxpemUnO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4vVXNlcic7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9jb25maWcvbG9nZ2VyJztcbmltcG9ydCB7IHByb2Nlc3NFcnJvciB9IGZyb20gJy4uL3V0aWxzL3Byb2Nlc3NFcnJvcic7XG5pbXBvcnQgeyB2YWxpZGF0ZURlcGVuZGVuY2llcyB9IGZyb20gJy4uL3V0aWxzL3ZhbGlkYXRlRGVwZW5kZW5jaWVzJztcblxuaW50ZXJmYWNlIFNlY3VyaXR5RXZlbnRBdHRyaWJ1dGVzIHtcblx0aWQ6IHN0cmluZzsgLy8gVVVJRCBmb3Igc2VjdXJpdHkgZXZlbnQsIHByaW1hcnkga2V5IChmcm9tIFVzZXIgbW9kZWwpXG5cdGV2ZW50SWQ6IHN0cmluZzsgLy8gdW5pcXVlIGV2ZW50IElELCBhdXRvLWluY3JlbWVudGVkXG5cdGV2ZW50VHlwZTogc3RyaW5nO1xuXHRldmVudERlc2NyaXB0aW9uPzogc3RyaW5nIHwgbnVsbDtcblx0aXBBZGRyZXNzOiBzdHJpbmc7XG5cdHVzZXJBZ2VudDogc3RyaW5nO1xuXHRzZWN1cml0eUV2ZW50RGF0ZTogRGF0ZTtcblx0c2VjdXJpdHlFdmVudExhc3RVcGRhdGVkOiBEYXRlO1xufVxuXG5jbGFzcyBTZWN1cml0eUV2ZW50XG5cdGV4dGVuZHMgTW9kZWw8XG5cdFx0SW5mZXJBdHRyaWJ1dGVzPFNlY3VyaXR5RXZlbnQ+LFxuXHRcdEluZmVyQ3JlYXRpb25BdHRyaWJ1dGVzPFNlY3VyaXR5RXZlbnQ+XG5cdD5cblx0aW1wbGVtZW50cyBTZWN1cml0eUV2ZW50QXR0cmlidXRlc1xue1xuXHRwdWJsaWMgaWQhOiBzdHJpbmc7XG5cdHB1YmxpYyBldmVudElkITogc3RyaW5nO1xuXHRwdWJsaWMgZXZlbnRUeXBlITogc3RyaW5nO1xuXHRwdWJsaWMgZXZlbnREZXNjcmlwdGlvbiE6IHN0cmluZyB8IG51bGw7XG5cdHB1YmxpYyBpcEFkZHJlc3MhOiBzdHJpbmc7XG5cdHB1YmxpYyB1c2VyQWdlbnQhOiBzdHJpbmc7XG5cdHB1YmxpYyBzZWN1cml0eUV2ZW50RGF0ZSE6IERhdGU7XG5cdHB1YmxpYyBzZWN1cml0eUV2ZW50TGFzdFVwZGF0ZWQhOiBDcmVhdGlvbk9wdGlvbmFsPERhdGU+O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTZWN1cml0eUV2ZW50TW9kZWwoXG5cdHNlcXVlbGl6ZTogU2VxdWVsaXplLFxuXHRsb2dnZXI6IExvZ2dlclxuKTogdHlwZW9mIFNlY3VyaXR5RXZlbnQge1xuXHR0cnkge1xuXHRcdHZhbGlkYXRlRGVwZW5kZW5jaWVzKFxuXHRcdFx0W3sgbmFtZTogJ3NlcXVlbGl6ZScsIGluc3RhbmNlOiBzZXF1ZWxpemUgfV0sXG5cdFx0XHRsb2dnZXIgfHwgY29uc29sZVxuXHRcdCk7XG5cblx0XHRTZWN1cml0eUV2ZW50LmluaXQoXG5cdFx0XHR7XG5cdFx0XHRcdGlkOiB7XG5cdFx0XHRcdFx0dHlwZTogRGF0YVR5cGVzLlVVSUQsXG5cdFx0XHRcdFx0ZGVmYXVsdFZhbHVlOiBEYXRhVHlwZXMuVVVJRFY0LFxuXHRcdFx0XHRcdHByaW1hcnlLZXk6IHRydWUsXG5cdFx0XHRcdFx0YWxsb3dOdWxsOiBmYWxzZSxcblx0XHRcdFx0XHR1bmlxdWU6IHRydWUsXG5cdFx0XHRcdFx0cmVmZXJlbmNlczoge1xuXHRcdFx0XHRcdFx0bW9kZWw6IFVzZXIsXG5cdFx0XHRcdFx0XHRrZXk6ICdpZCdcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGV2ZW50SWQ6IHtcblx0XHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuSU5URUdFUixcblx0XHRcdFx0XHRhdXRvSW5jcmVtZW50OiB0cnVlLFxuXHRcdFx0XHRcdGFsbG93TnVsbDogZmFsc2UsXG5cdFx0XHRcdFx0dW5pcXVlOiB0cnVlXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGV2ZW50VHlwZToge1xuXHRcdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5TVFJJTkcsXG5cdFx0XHRcdFx0YWxsb3dOdWxsOiBmYWxzZSxcblx0XHRcdFx0XHR2YWxpZGF0ZToge1xuXHRcdFx0XHRcdFx0aXNJbjogW1xuXHRcdFx0XHRcdFx0XHRbXG5cdFx0XHRcdFx0XHRcdFx0J2xvZ2luJyxcblx0XHRcdFx0XHRcdFx0XHQnZmFpbGVkLWxvZ2luJyxcblx0XHRcdFx0XHRcdFx0XHQncGFzc3dvcmQtY2hhbmdlJyxcblx0XHRcdFx0XHRcdFx0XHQnMmZhLWVuYWJsZWQnLFxuXHRcdFx0XHRcdFx0XHRcdCcyZmEtZGlzYWJsZWQnLFxuXHRcdFx0XHRcdFx0XHRcdCdhY2NvdW50LWxvY2snLFxuXHRcdFx0XHRcdFx0XHRcdCdvdGhlcidcblx0XHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0ZXZlbnREZXNjcmlwdGlvbjoge1xuXHRcdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5URVhULFxuXHRcdFx0XHRcdGFsbG93TnVsbDogdHJ1ZVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRpcEFkZHJlc3M6IHtcblx0XHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuU1RSSU5HLFxuXHRcdFx0XHRcdGFsbG93TnVsbDogZmFsc2UsXG5cdFx0XHRcdFx0dmFsaWRhdGU6IHtcblx0XHRcdFx0XHRcdGlzSVA6IHRydWVcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHVzZXJBZ2VudDoge1xuXHRcdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5TVFJJTkcsXG5cdFx0XHRcdFx0YWxsb3dOdWxsOiBmYWxzZVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRzZWN1cml0eUV2ZW50RGF0ZToge1xuXHRcdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5EQVRFLFxuXHRcdFx0XHRcdGRlZmF1bHRWYWx1ZTogRGF0YVR5cGVzLk5PVyxcblx0XHRcdFx0XHRhbGxvd051bGw6IGZhbHNlXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHNlY3VyaXR5RXZlbnRMYXN0VXBkYXRlZDoge1xuXHRcdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5EQVRFLFxuXHRcdFx0XHRcdGRlZmF1bHRWYWx1ZTogRGF0YVR5cGVzLk5PVyxcblx0XHRcdFx0XHRhbGxvd051bGw6IGZhbHNlXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHNlcXVlbGl6ZSxcblx0XHRcdFx0bW9kZWxOYW1lOiAnU2VjdXJpdHlFdmVudCcsXG5cdFx0XHRcdHRpbWVzdGFtcHM6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0cmV0dXJuIFNlY3VyaXR5RXZlbnQ7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cHJvY2Vzc0Vycm9yKGVycm9yLCBsb2dnZXIgfHwgY29uc29sZSk7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH1cbn1cblxuZXhwb3J0IHsgU2VjdXJpdHlFdmVudCB9O1xuIl19
