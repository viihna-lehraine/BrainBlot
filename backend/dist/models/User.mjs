import argon2 from 'argon2';
import { Model } from 'sequelize';
import { v4 as uuidv4 } from 'uuid';
import getSecrets from '../config/sops';
class User extends Model {
	id;
	userid;
	username;
	password;
	email;
	isAccountVerified;
	resetPasswordToken;
	resetPasswordExpires;
	isMfaEnabled;
	creationDate;
	// Method to compare passwords
	async comparePassword(password) {
		const secrets = await getSecrets.getSecrets();
		return argon2.verify(this.password, password + secrets.PEPPER);
	}
	// Static method to validate passwords
	static validatePassword(password) {
		const isValidLength = password.length >= 8 && password.length <= 128;
		const hasUpperCase = /[A-Z]/.test(password);
		const hasLowerCase = /[a-z]/.test(password);
		const hasNumber = /\d/.test(password);
		const hasSpecial = /[^\dA-Za-z]/.test(password);
		return (
			isValidLength &&
			hasUpperCase &&
			hasLowerCase &&
			hasNumber &&
			hasSpecial
		);
	}
	// Static method to create a new user
	static async createUser(username, password, email) {
		const isValidPassword = User.validatePassword(password);
		if (!isValidPassword) {
			throw new Error(
				'Password does not meet the security requirements.'
			);
		}
		const newUser = await User.create({
			id: uuidv4(),
			username,
			password,
			email,
			isAccountVerified: false,
			resetPasswordToken: null, // Set to null initially
			resetPasswordExpires: null, // Set to null initially
			isMfaEnabled: false,
			creationDate: new Date()
		});
		return newUser;
	}
}
export default User;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvVXNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxFQUE0QyxLQUFLLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDNUUsT0FBTyxFQUFFLEVBQUUsSUFBSSxNQUFNLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEMsT0FBTyxVQUFVLE1BQU0sZ0JBQWdCLENBQUM7QUFtQnhDLE1BQU0sSUFDTCxTQUFRLEtBQTJEO0lBR25FLEVBQUUsQ0FBVTtJQUNaLE1BQU0sQ0FBVTtJQUNoQixRQUFRLENBQVU7SUFDbEIsUUFBUSxDQUFVO0lBQ2xCLEtBQUssQ0FBVTtJQUNmLGlCQUFpQixDQUFXO0lBQzVCLGtCQUFrQixDQUFpQjtJQUNuQyxvQkFBb0IsQ0FBZTtJQUNuQyxZQUFZLENBQVc7SUFDdkIsWUFBWSxDQUFRO0lBRXBCLDhCQUE4QjtJQUM5QixLQUFLLENBQUMsZUFBZSxDQUFDLFFBQWdCO1FBQ3JDLE1BQU0sT0FBTyxHQUFnQixNQUFNLFVBQVUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUMzRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxzQ0FBc0M7SUFDdEMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFFBQWdCO1FBQ3ZDLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLFFBQVEsQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDO1FBQ3JFLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDNUMsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFaEQsT0FBTyxDQUNOLGFBQWE7WUFDYixZQUFZO1lBQ1osWUFBWTtZQUNaLFNBQVM7WUFDVCxVQUFVLENBQ1YsQ0FBQztJQUNILENBQUM7SUFFRCxxQ0FBcUM7SUFDckMsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQ3RCLFFBQWdCLEVBQ2hCLFFBQWdCLEVBQ2hCLEtBQWE7UUFFYixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQ2QsbURBQW1ELENBQ25ELENBQUM7UUFDSCxDQUFDO1FBRUQsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ2pDLEVBQUUsRUFBRSxNQUFNLEVBQUU7WUFDWixRQUFRO1lBQ1IsUUFBUTtZQUNSLEtBQUs7WUFDTCxpQkFBaUIsRUFBRSxLQUFLO1lBQ3hCLGtCQUFrQixFQUFFLElBQUksRUFBRSx3QkFBd0I7WUFDbEQsb0JBQW9CLEVBQUUsSUFBSSxFQUFFLHdCQUF3QjtZQUNwRCxZQUFZLEVBQUUsS0FBSztZQUNuQixZQUFZLEVBQUUsSUFBSSxJQUFJLEVBQUU7U0FDeEIsQ0FBQyxDQUFDO1FBRUgsT0FBTyxPQUFPLENBQUM7SUFDaEIsQ0FBQztDQUNEO0FBRUQsZUFBZSxJQUFJLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXJnb24yIGZyb20gJ2FyZ29uMic7XG5pbXBvcnQgeyBJbmZlckF0dHJpYnV0ZXMsIEluZmVyQ3JlYXRpb25BdHRyaWJ1dGVzLCBNb2RlbCB9IGZyb20gJ3NlcXVlbGl6ZSc7XG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJztcbmltcG9ydCBnZXRTZWNyZXRzIGZyb20gJy4uL2NvbmZpZy9zb3BzJztcblxuaW50ZXJmYWNlIFVzZXJBdHRyaWJ1dGVzIHtcblx0aWQ6IHN0cmluZztcblx0dXNlcmlkPzogbnVtYmVyO1xuXHR1c2VybmFtZTogc3RyaW5nO1xuXHRwYXNzd29yZDogc3RyaW5nO1xuXHRlbWFpbDogc3RyaW5nO1xuXHRpc0FjY291bnRWZXJpZmllZDogYm9vbGVhbjtcblx0cmVzZXRQYXNzd29yZFRva2VuPzogc3RyaW5nIHwgbnVsbDtcblx0cmVzZXRQYXNzd29yZEV4cGlyZXM/OiBEYXRlIHwgbnVsbDtcblx0aXNNZmFFbmFibGVkOiBib29sZWFuO1xuXHRjcmVhdGlvbkRhdGU6IERhdGU7XG59XG5cbmludGVyZmFjZSBVc2VyU2VjcmV0cyB7XG5cdFBFUFBFUjogc3RyaW5nO1xufVxuXG5jbGFzcyBVc2VyXG5cdGV4dGVuZHMgTW9kZWw8SW5mZXJBdHRyaWJ1dGVzPFVzZXI+LCBJbmZlckNyZWF0aW9uQXR0cmlidXRlczxVc2VyPj5cblx0aW1wbGVtZW50cyBVc2VyQXR0cmlidXRlc1xue1xuXHRpZCE6IHN0cmluZztcblx0dXNlcmlkPzogbnVtYmVyO1xuXHR1c2VybmFtZSE6IHN0cmluZztcblx0cGFzc3dvcmQhOiBzdHJpbmc7XG5cdGVtYWlsITogc3RyaW5nO1xuXHRpc0FjY291bnRWZXJpZmllZCE6IGJvb2xlYW47XG5cdHJlc2V0UGFzc3dvcmRUb2tlbiE6IHN0cmluZyB8IG51bGw7XG5cdHJlc2V0UGFzc3dvcmRFeHBpcmVzITogRGF0ZSB8IG51bGw7XG5cdGlzTWZhRW5hYmxlZCE6IGJvb2xlYW47XG5cdGNyZWF0aW9uRGF0ZSE6IERhdGU7XG5cblx0Ly8gTWV0aG9kIHRvIGNvbXBhcmUgcGFzc3dvcmRzXG5cdGFzeW5jIGNvbXBhcmVQYXNzd29yZChwYXNzd29yZDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG5cdFx0Y29uc3Qgc2VjcmV0czogVXNlclNlY3JldHMgPSBhd2FpdCBnZXRTZWNyZXRzLmdldFNlY3JldHMoKTtcblx0XHRyZXR1cm4gYXJnb24yLnZlcmlmeSh0aGlzLnBhc3N3b3JkLCBwYXNzd29yZCArIHNlY3JldHMuUEVQUEVSKTtcblx0fVxuXG5cdC8vIFN0YXRpYyBtZXRob2QgdG8gdmFsaWRhdGUgcGFzc3dvcmRzXG5cdHN0YXRpYyB2YWxpZGF0ZVBhc3N3b3JkKHBhc3N3b3JkOiBzdHJpbmcpOiBib29sZWFuIHtcblx0XHRjb25zdCBpc1ZhbGlkTGVuZ3RoID0gcGFzc3dvcmQubGVuZ3RoID49IDggJiYgcGFzc3dvcmQubGVuZ3RoIDw9IDEyODtcblx0XHRjb25zdCBoYXNVcHBlckNhc2UgPSAvW0EtWl0vLnRlc3QocGFzc3dvcmQpO1xuXHRcdGNvbnN0IGhhc0xvd2VyQ2FzZSA9IC9bYS16XS8udGVzdChwYXNzd29yZCk7XG5cdFx0Y29uc3QgaGFzTnVtYmVyID0gL1xcZC8udGVzdChwYXNzd29yZCk7XG5cdFx0Y29uc3QgaGFzU3BlY2lhbCA9IC9bXlxcZEEtWmEtel0vLnRlc3QocGFzc3dvcmQpO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdGlzVmFsaWRMZW5ndGggJiZcblx0XHRcdGhhc1VwcGVyQ2FzZSAmJlxuXHRcdFx0aGFzTG93ZXJDYXNlICYmXG5cdFx0XHRoYXNOdW1iZXIgJiZcblx0XHRcdGhhc1NwZWNpYWxcblx0XHQpO1xuXHR9XG5cblx0Ly8gU3RhdGljIG1ldGhvZCB0byBjcmVhdGUgYSBuZXcgdXNlclxuXHRzdGF0aWMgYXN5bmMgY3JlYXRlVXNlcihcblx0XHR1c2VybmFtZTogc3RyaW5nLFxuXHRcdHBhc3N3b3JkOiBzdHJpbmcsXG5cdFx0ZW1haWw6IHN0cmluZ1xuXHQpOiBQcm9taXNlPFVzZXI+IHtcblx0XHRjb25zdCBpc1ZhbGlkUGFzc3dvcmQgPSBVc2VyLnZhbGlkYXRlUGFzc3dvcmQocGFzc3dvcmQpO1xuXHRcdGlmICghaXNWYWxpZFBhc3N3b3JkKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRcdCdQYXNzd29yZCBkb2VzIG5vdCBtZWV0IHRoZSBzZWN1cml0eSByZXF1aXJlbWVudHMuJ1xuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRjb25zdCBuZXdVc2VyID0gYXdhaXQgVXNlci5jcmVhdGUoe1xuXHRcdFx0aWQ6IHV1aWR2NCgpLFxuXHRcdFx0dXNlcm5hbWUsXG5cdFx0XHRwYXNzd29yZCxcblx0XHRcdGVtYWlsLFxuXHRcdFx0aXNBY2NvdW50VmVyaWZpZWQ6IGZhbHNlLFxuXHRcdFx0cmVzZXRQYXNzd29yZFRva2VuOiBudWxsLCAvLyBTZXQgdG8gbnVsbCBpbml0aWFsbHlcblx0XHRcdHJlc2V0UGFzc3dvcmRFeHBpcmVzOiBudWxsLCAvLyBTZXQgdG8gbnVsbCBpbml0aWFsbHlcblx0XHRcdGlzTWZhRW5hYmxlZDogZmFsc2UsXG5cdFx0XHRjcmVhdGlvbkRhdGU6IG5ldyBEYXRlKClcblx0XHR9KTtcblxuXHRcdHJldHVybiBuZXdVc2VyO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFVzZXI7XG4iXX0=
