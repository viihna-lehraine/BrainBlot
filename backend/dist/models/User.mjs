import { DataTypes, Model } from 'sequelize';
import { v4 as uuidv4 } from 'uuid';
import { ServiceFactory } from '../index/factory/ServiceFactory.mjs';
const errorLogger = await ServiceFactory.getErrorLoggerService();
const errorHandler = await ServiceFactory.getErrorHandlerService();
const databaseController = await ServiceFactory.getDatabaseController();
export class User extends Model {
	id;
	userId;
	username;
	password;
	email;
	isVerified;
	resetPasswordToken;
	resetPasswordExpires;
	isMFAEnabled;
	totpSecret;
	emailMFASecret;
	emailMFAToken;
	emailMFATokenExpires;
	creationDate;
	static initializeModel(sequelize) {
		User.init(
			{
				id: {
					type: DataTypes.STRING,
					defaultValue: () => uuidv4(),
					allowNull: false,
					primaryKey: true,
					unique: true
				},
				userId: {
					type: DataTypes.INTEGER,
					autoIncrement: true,
					allowNull: false,
					unique: true
				},
				username: {
					type: DataTypes.STRING,
					allowNull: false,
					unique: true
				},
				password: {
					type: DataTypes.STRING,
					allowNull: false
				},
				email: {
					type: DataTypes.STRING,
					allowNull: false,
					unique: true
				},
				isVerified: {
					type: DataTypes.BOOLEAN,
					allowNull: false,
					defaultValue: false
				},
				resetPasswordToken: {
					type: DataTypes.STRING,
					allowNull: true
				},
				resetPasswordExpires: {
					type: DataTypes.DATE,
					allowNull: true
				},
				isMFAEnabled: {
					type: DataTypes.BOOLEAN,
					allowNull: false,
					defaultValue: false
				},
				totpSecret: {
					type: DataTypes.STRING,
					allowNull: true
				},
				emailMFASecret: {
					type: DataTypes.STRING,
					allowNull: true
				},
				emailMFAToken: {
					type: DataTypes.STRING,
					allowNull: true
				},
				emailMFATokenExpires: {
					type: DataTypes.DATE,
					allowNull: true
				},
				creationDate: {
					type: DataTypes.DATE,
					allowNull: false,
					defaultValue: DataTypes.NOW
				}
			},
			{
				sequelize,
				tableName: 'Users',
				timestamps: true
			}
		);
	}
}
export async function createUserModel() {
	try {
		const sequelize = databaseController.getSequelizeInstance();
		if (!sequelize) {
			const databaseError =
				new errorHandler.ErrorClasses.DatabaseErrorRecoverable(
					`Failed to initialize User model: Sequelize instance not found`,
					{
						exposeToClient: false
					}
				);
			errorLogger.logInfo(databaseError.message);
			errorHandler.handleError({ error: databaseError });
			throw databaseError;
		}
		User.initializeModel(sequelize);
		return User;
	} catch (dbError) {
		const databaseRecoverableError =
			new errorHandler.ErrorClasses.DatabaseErrorRecoverable(
				`Failed to initialize User model: ${dbError instanceof Error ? dbError.message : 'Unknown error'}`,
				{ originalError: dbError || Error || null }
			);
		errorLogger.logInfo(databaseRecoverableError.message);
		errorHandler.handleError({
			error: databaseRecoverableError || dbError || Error || null
		});
		throw databaseRecoverableError;
	}
}
//# sourceMappingURL=data:application/json;base64,
