import { execSync } from 'child_process';
import { DataTypes, Model } from 'sequelize';
import { v4 as uuidv4 } from 'uuid';
import { PasswordValidationError } from '../config/errorClasses.mjs';
import { hashPassword } from '../config/hashConfig.mjs';
import { initializeRateLimitMiddleware } from '../middleware/rateLimit.mjs';
import { processError } from '../utils/processError.mjs';
import sops from '../utils/sops.mjs';
import { validateDependencies } from '../utils/validateDependencies.mjs';
class User extends Model {
	id;
	userId;
	username;
	password;
	email;
	isAccountVerified;
	resetPasswordToken;
	resetPasswordExpires;
	isMfaEnabled;
	creationDate;
	async comparePassword(password, argon2, secrets, logger) {
		try {
			validateDependencies(
				[
					{ name: 'password', instance: password },
					{ name: 'argon2', instance: argon2 },
					{ name: 'secrets', instance: secrets },
					{ name: 'logger', instance: logger }
				],
				logger
			);
			return await argon2.verify(
				this.password,
				password + secrets.PEPPER
			);
		} catch (error) {
			processError(error, logger);
			throw new PasswordValidationError('Passwords do not match');
		}
	}
	static validatePassword(password, logger) {
		try {
			validateDependencies(
				[
					{ name: 'password', instance: password },
					{ name: 'logger', instance: logger }
				],
				logger
			);
			const isValidLength =
				password.length >= 8 && password.length <= 128;
			const hasUpperCase = /[A-Z]/.test(password);
			const hasLowerCase = /[a-z]/.test(password);
			const hasNumber = /\d/.test(password);
			const hasSpecial = /[^\dA-Za-z]/.test(password);
			return (
				isValidLength &&
				hasUpperCase &&
				hasLowerCase &&
				hasNumber &&
				hasSpecial
			);
		} catch (error) {
			processError(error, logger);
			return false;
		}
	}
	static async createUser(
		{ uuidv4, getSecrets },
		userId,
		username,
		password,
		email,
		rateLimitDependencies,
		logger
	) {
		try {
			validateDependencies(
				[
					{ name: 'uuidv4', instance: uuidv4 },
					{ name: 'getSecrets', instance: getSecrets },
					{
						name: 'rateLimitDependencies',
						instance: rateLimitDependencies
					},
					{ name: 'logger', instance: logger }
				],
				logger
			);
			const rateLimiter = initializeRateLimitMiddleware(
				rateLimitDependencies
			);
			const req = { ip: email };
			const res = {};
			await new Promise((resolve, reject) => {
				rateLimiter(req, res, err => (err ? reject(err) : resolve()));
			});
			const isValidPassword = User.validatePassword(password, logger);
			if (!isValidPassword) {
				logger.warn(
					'Password does not meet the security requirements.'
				);
				throw new PasswordValidationError(
					'Password does not meet security requirements. Please make sure your password is between 8 and 128 characters long, contains at least one uppercase letter, one lowercase letter, one number, and one special character.'
				);
			}
			const secrets = await getSecrets();
			const hashedPassword = await hashPassword({
				password,
				secrets,
				logger
			});
			const newUser = await User.create({
				id: uuidv4(),
				userId,
				username,
				password: hashedPassword,
				email,
				isAccountVerified: false,
				resetPasswordToken: null,
				resetPasswordExpires: null,
				isMfaEnabled: false,
				creationDate: new Date()
			});
			return newUser;
		} catch (error) {
			processError(error, logger);
			if (error instanceof PasswordValidationError) {
				throw error;
			}
			throw new PasswordValidationError(
				'There was an error creating your account. Please try again. If the issue persists, please contact support.'
			);
		}
	}
	static async comparePasswords(
		hashedPassword,
		password,
		argon2,
		secrets,
		logger
	) {
		try {
			validateDependencies(
				[
					{ name: 'argon2', instance: argon2 },
					{ name: 'secrets', instance: secrets },
					{ name: 'logger', instance: logger }
				],
				logger
			);
			const isValid = await argon2.verify(
				hashedPassword,
				password + secrets.PEPPER
			);
			logger.debug('Password verified successfully');
			return isValid;
		} catch (error) {
			processError(error, logger);
			throw new PasswordValidationError('Error verifying password');
		}
	}
}
export default function createUserModel(sequelize, logger) {
	try {
		validateDependencies(
			[
				{ name: 'sequelize', instance: sequelize },
				{ name: 'logger', instance: logger }
			],
			logger
		);
		User.init(
			{
				id: {
					type: DataTypes.STRING,
					defaultValue: () => uuidv4(),
					allowNull: false,
					primaryKey: true,
					unique: true
				},
				userId: {
					type: DataTypes.INTEGER,
					autoIncrement: true,
					allowNull: false,
					unique: true
				},
				username: {
					type: DataTypes.STRING,
					allowNull: false,
					unique: true
				},
				password: {
					type: DataTypes.STRING,
					allowNull: false
				},
				email: {
					type: DataTypes.STRING,
					allowNull: false,
					unique: true
				},
				isAccountVerified: {
					type: DataTypes.BOOLEAN,
					allowNull: false,
					defaultValue: false
				},
				resetPasswordToken: {
					type: DataTypes.STRING,
					allowNull: true
				},
				resetPasswordExpires: {
					type: DataTypes.DATE,
					allowNull: true
				},
				isMfaEnabled: {
					type: DataTypes.BOOLEAN,
					allowNull: false,
					defaultValue: false
				},
				creationDate: {
					type: DataTypes.DATE,
					allowNull: false,
					defaultValue: DataTypes.NOW
				}
			},
			{
				sequelize,
				tableName: 'Users',
				timestamps: true
			}
		);
		User.addHook('beforeCreate', async user => {
			try {
				const secrets = await sops.getSecrets({
					logger,
					execSync,
					getDirectoryPath: () => process.cwd()
				});
				user.password = await hashPassword({
					password: user.password,
					secrets,
					logger
				});
			} catch (error) {
				processError(error, logger);
				throw new PasswordValidationError('Error hashing password.');
			}
		});
		User.addHook('afterUpdate', async user => {
			try {
				if (user.changed('isMfaEnabled')) {
					const UserMfa = await (
						await import('./UserMfa')
					).default(sequelize, logger);
					await UserMfa.update(
						{ isMfaEnabled: user.isMfaEnabled },
						{ where: { id: user.id } }
					);
					logger.debug('MFA status updated successfully');
				}
			} catch (error) {
				processError(error, logger);
				throw new PasswordValidationError(
					'Error updating multi-factor authentication status.'
				);
			}
		});
		return User;
	} catch (error) {
		processError(error, logger);
		throw error;
	}
}
export { User };
//# sourceMappingURL=data:application/json;base64,
