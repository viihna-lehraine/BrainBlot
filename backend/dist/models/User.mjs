import { Model, DataTypes } from 'sequelize';
class User extends Model {
	id;
	userid;
	username;
	password;
	email;
	isAccountVerified;
	resetPasswordToken;
	resetPasswordExpires;
	isMfaEnabled;
	creationDate;
	async comparePassword(password, argon2, secrets) {
		return argon2.verify(this.password, password + secrets.PEPPER);
	}
	static async comparePasswordWithDependencies(
		hashedPassword,
		password,
		argon2,
		secrets
	) {
		return argon2.verify(hashedPassword, password + secrets.PEPPER);
	}
	// Static method to validate passwords
	static validatePassword(password) {
		const isValidLength = password.length >= 8 && password.length <= 128;
		const hasUpperCase = /[A-Z]/.test(password);
		const hasLowerCase = /[a-z]/.test(password);
		const hasNumber = /\d/.test(password);
		const hasSpecial = /[^\dA-Za-z]/.test(password);
		return (
			isValidLength &&
			hasUpperCase &&
			hasLowerCase &&
			hasNumber &&
			hasSpecial
		);
	}
	// Static method to create a new user, now taking dependencies as arguments
	static async createUser(
		{ argon2, uuidv4, getSecrets },
		username,
		password,
		email
	) {
		const isValidPassword = User.validatePassword(password);
		if (!isValidPassword) {
			throw new Error(
				'Password does not meet the security requirements.'
			);
		}
		const secrets = await getSecrets();
		const hashedPassword = await argon2.hash(password + secrets.PEPPER);
		const newUser = await User.create({
			id: uuidv4(),
			username,
			password: hashedPassword,
			email,
			isAccountVerified: false,
			resetPasswordToken: null,
			resetPasswordExpires: null,
			isMfaEnabled: false,
			creationDate: new Date()
		});
		return newUser;
	}
}
export default function createUserModel(sequelize) {
	User.init(
		{
			id: {
				type: DataTypes.STRING,
				allowNull: false,
				primaryKey: true
			},
			userid: {
				type: DataTypes.INTEGER,
				autoIncrement: true,
				allowNull: false,
				unique: true
			},
			username: {
				type: DataTypes.STRING,
				allowNull: false,
				unique: true
			},
			password: {
				type: DataTypes.STRING,
				allowNull: false
			},
			email: {
				type: DataTypes.STRING,
				allowNull: false,
				unique: true
			},
			isAccountVerified: {
				type: DataTypes.BOOLEAN,
				allowNull: false,
				defaultValue: false
			},
			resetPasswordToken: {
				type: DataTypes.STRING,
				allowNull: true
			},
			resetPasswordExpires: {
				type: DataTypes.DATE,
				allowNull: true
			},
			isMfaEnabled: {
				type: DataTypes.BOOLEAN,
				allowNull: false,
				defaultValue: false
			},
			creationDate: {
				type: DataTypes.DATE,
				allowNull: false,
				defaultValue: DataTypes.NOW
			}
		},
		{
			sequelize,
			tableName: 'Users',
			timestamps: false
		}
	);
	return User;
}
//# sourceMappingURL=data:application/json;base64,
