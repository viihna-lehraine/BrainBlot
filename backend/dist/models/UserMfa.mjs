import { Model, DataTypes } from 'sequelize';
class UserMfa extends Model {
	id;
	isMfaEnabled;
	backupCodes;
	isEmail2faEnabled;
	isTotpl2faEnabled;
	isYubicoOtp2faEnabled;
	isU2f2faEnabled;
	isPasskeyEnabled;
	totpSecret;
	yubicoOtpPublicId;
	yubicoOtpSecretKey;
	fido2CredentialId;
	fido2PublicKey;
	fido2Counter;
	fido2AttestationFormat;
	passkeyCredentialId;
	passkeyPublicKey;
	passkeyCounter;
	passkeyAttestationFormat;
}
export default function createUserMfaModel(sequelize) {
	UserMfa.init(
		{
			id: {
				type: DataTypes.STRING,
				allowNull: false,
				primaryKey: true
			},
			isMfaEnabled: {
				type: DataTypes.BOOLEAN,
				allowNull: false
			},
			backupCodes: {
				type: DataTypes.ARRAY(DataTypes.STRING),
				allowNull: true
			},
			isEmail2faEnabled: {
				type: DataTypes.BOOLEAN,
				allowNull: false
			},
			isTotpl2faEnabled: {
				type: DataTypes.BOOLEAN,
				allowNull: false
			},
			isYubicoOtp2faEnabled: {
				type: DataTypes.BOOLEAN,
				allowNull: false
			},
			isU2f2faEnabled: {
				type: DataTypes.BOOLEAN,
				allowNull: false
			},
			isPasskeyEnabled: {
				type: DataTypes.BOOLEAN,
				allowNull: false
			},
			totpSecret: {
				type: DataTypes.STRING,
				allowNull: true
			},
			yubicoOtpPublicId: {
				type: DataTypes.STRING,
				allowNull: true
			},
			yubicoOtpSecretKey: {
				type: DataTypes.STRING,
				allowNull: true
			},
			fido2CredentialId: {
				type: DataTypes.STRING,
				allowNull: true
			},
			fido2PublicKey: {
				type: DataTypes.STRING,
				allowNull: true
			},
			fido2Counter: {
				type: DataTypes.INTEGER,
				allowNull: true
			},
			fido2AttestationFormat: {
				type: DataTypes.STRING,
				allowNull: true
			},
			passkeyCredentialId: {
				type: DataTypes.STRING,
				allowNull: true
			},
			passkeyPublicKey: {
				type: DataTypes.STRING,
				allowNull: true
			},
			passkeyCounter: {
				type: DataTypes.INTEGER,
				allowNull: true
			},
			passkeyAttestationFormat: {
				type: DataTypes.STRING,
				allowNull: true
			}
		},
		{
			sequelize,
			tableName: 'UserMfa',
			timestamps: false
		}
	);
	return UserMfa;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlck1mYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvVXNlck1mYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBR04sS0FBSyxFQUNMLFNBQVMsRUFFVCxNQUFNLFdBQVcsQ0FBQztBQXdCbkIsTUFBTSxPQUNMLFNBQVEsS0FBaUU7SUFHekUsRUFBRSxDQUFVO0lBQ1osWUFBWSxDQUFXO0lBQ3ZCLFdBQVcsQ0FBbUI7SUFDOUIsaUJBQWlCLENBQVc7SUFDNUIsaUJBQWlCLENBQVc7SUFDNUIscUJBQXFCLENBQVc7SUFDaEMsZUFBZSxDQUFXO0lBQzFCLGdCQUFnQixDQUFXO0lBQzNCLFVBQVUsQ0FBaUI7SUFDM0IsaUJBQWlCLENBQWlCO0lBQ2xDLGtCQUFrQixDQUFpQjtJQUNuQyxpQkFBaUIsQ0FBaUI7SUFDbEMsY0FBYyxDQUFpQjtJQUMvQixZQUFZLENBQWlCO0lBQzdCLHNCQUFzQixDQUFpQjtJQUN2QyxtQkFBbUIsQ0FBaUI7SUFDcEMsZ0JBQWdCLENBQWlCO0lBQ2pDLGNBQWMsQ0FBaUI7SUFDL0Isd0JBQXdCLENBQWlCO0NBQ3pDO0FBSUQsTUFBTSxDQUFDLE9BQU8sVUFBVSxrQkFBa0IsQ0FDekMsU0FBb0I7SUFFcEIsT0FBTyxDQUFDLElBQUksQ0FDWDtRQUNDLEVBQUUsRUFBRTtZQUNILElBQUksRUFBRSxTQUFTLENBQUMsTUFBTTtZQUN0QixTQUFTLEVBQUUsS0FBSztZQUNoQixVQUFVLEVBQUUsSUFBSTtTQUNoQjtRQUNELFlBQVksRUFBRTtZQUNiLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTztZQUN2QixTQUFTLEVBQUUsS0FBSztTQUNoQjtRQUNELFdBQVcsRUFBRTtZQUNaLElBQUksRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7WUFDdkMsU0FBUyxFQUFFLElBQUk7U0FDZjtRQUNELGlCQUFpQixFQUFFO1lBQ2xCLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTztZQUN2QixTQUFTLEVBQUUsS0FBSztTQUNoQjtRQUNELGlCQUFpQixFQUFFO1lBQ2xCLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTztZQUN2QixTQUFTLEVBQUUsS0FBSztTQUNoQjtRQUNELHFCQUFxQixFQUFFO1lBQ3RCLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTztZQUN2QixTQUFTLEVBQUUsS0FBSztTQUNoQjtRQUNELGVBQWUsRUFBRTtZQUNoQixJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU87WUFDdkIsU0FBUyxFQUFFLEtBQUs7U0FDaEI7UUFDRCxnQkFBZ0IsRUFBRTtZQUNqQixJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU87WUFDdkIsU0FBUyxFQUFFLEtBQUs7U0FDaEI7UUFDRCxVQUFVLEVBQUU7WUFDWCxJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU07WUFDdEIsU0FBUyxFQUFFLElBQUk7U0FDZjtRQUNELGlCQUFpQixFQUFFO1lBQ2xCLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTTtZQUN0QixTQUFTLEVBQUUsSUFBSTtTQUNmO1FBQ0Qsa0JBQWtCLEVBQUU7WUFDbkIsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNO1lBQ3RCLFNBQVMsRUFBRSxJQUFJO1NBQ2Y7UUFDRCxpQkFBaUIsRUFBRTtZQUNsQixJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU07WUFDdEIsU0FBUyxFQUFFLElBQUk7U0FDZjtRQUNELGNBQWMsRUFBRTtZQUNmLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTTtZQUN0QixTQUFTLEVBQUUsSUFBSTtTQUNmO1FBQ0QsWUFBWSxFQUFFO1lBQ2IsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPO1lBQ3ZCLFNBQVMsRUFBRSxJQUFJO1NBQ2Y7UUFDRCxzQkFBc0IsRUFBRTtZQUN2QixJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU07WUFDdEIsU0FBUyxFQUFFLElBQUk7U0FDZjtRQUNELG1CQUFtQixFQUFFO1lBQ3BCLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTTtZQUN0QixTQUFTLEVBQUUsSUFBSTtTQUNmO1FBQ0QsZ0JBQWdCLEVBQUU7WUFDakIsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNO1lBQ3RCLFNBQVMsRUFBRSxJQUFJO1NBQ2Y7UUFDRCxjQUFjLEVBQUU7WUFDZixJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU87WUFDdkIsU0FBUyxFQUFFLElBQUk7U0FDZjtRQUNELHdCQUF3QixFQUFFO1lBQ3pCLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTTtZQUN0QixTQUFTLEVBQUUsSUFBSTtTQUNmO0tBQ0QsRUFDRDtRQUNDLFNBQVM7UUFDVCxTQUFTLEVBQUUsU0FBUztRQUNwQixVQUFVLEVBQUUsS0FBSztLQUNqQixDQUNELENBQUM7SUFFRixPQUFPLE9BQU8sQ0FBQztBQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0SW5mZXJBdHRyaWJ1dGVzLFxuXHRJbmZlckNyZWF0aW9uQXR0cmlidXRlcyxcblx0TW9kZWwsXG5cdERhdGFUeXBlcyxcblx0U2VxdWVsaXplXG59IGZyb20gJ3NlcXVlbGl6ZSc7XG5cbmludGVyZmFjZSBVc2VyTWZhQXR0cmlidXRlcyB7XG5cdGlkOiBzdHJpbmc7XG5cdGlzTWZhRW5hYmxlZDogYm9vbGVhbjtcblx0YmFja3VwQ29kZXM6IHN0cmluZ1tdIHwgbnVsbDtcblx0aXNFbWFpbDJmYUVuYWJsZWQ6IGJvb2xlYW47XG5cdGlzVG90cGwyZmFFbmFibGVkOiBib29sZWFuO1xuXHRpc1l1Ymljb090cDJmYUVuYWJsZWQ6IGJvb2xlYW47XG5cdGlzVTJmMmZhRW5hYmxlZDogYm9vbGVhbjtcblx0aXNQYXNza2V5RW5hYmxlZDogYm9vbGVhbjtcblx0dG90cFNlY3JldDogc3RyaW5nIHwgbnVsbDtcblx0eXViaWNvT3RwUHVibGljSWQ6IHN0cmluZyB8IG51bGw7XG5cdHl1Ymljb090cFNlY3JldEtleTogc3RyaW5nIHwgbnVsbDtcblx0ZmlkbzJDcmVkZW50aWFsSWQ6IHN0cmluZyB8IG51bGw7XG5cdGZpZG8yUHVibGljS2V5OiBzdHJpbmcgfCBudWxsO1xuXHRmaWRvMkNvdW50ZXI6IG51bWJlciB8IG51bGw7XG5cdGZpZG8yQXR0ZXN0YXRpb25Gb3JtYXQ6IHN0cmluZyB8IG51bGw7XG5cdHBhc3NrZXlDcmVkZW50aWFsSWQ6IHN0cmluZyB8IG51bGw7XG5cdHBhc3NrZXlQdWJsaWNLZXk6IHN0cmluZyB8IG51bGw7XG5cdHBhc3NrZXlDb3VudGVyOiBudW1iZXIgfCBudWxsO1xuXHRwYXNza2V5QXR0ZXN0YXRpb25Gb3JtYXQ6IHN0cmluZyB8IG51bGw7XG59XG5cbmNsYXNzIFVzZXJNZmFcblx0ZXh0ZW5kcyBNb2RlbDxJbmZlckF0dHJpYnV0ZXM8VXNlck1mYT4sIEluZmVyQ3JlYXRpb25BdHRyaWJ1dGVzPFVzZXJNZmE+PlxuXHRpbXBsZW1lbnRzIFVzZXJNZmFBdHRyaWJ1dGVzXG57XG5cdGlkITogc3RyaW5nO1xuXHRpc01mYUVuYWJsZWQhOiBib29sZWFuO1xuXHRiYWNrdXBDb2RlcyE6IHN0cmluZ1tdIHwgbnVsbDtcblx0aXNFbWFpbDJmYUVuYWJsZWQhOiBib29sZWFuO1xuXHRpc1RvdHBsMmZhRW5hYmxlZCE6IGJvb2xlYW47XG5cdGlzWXViaWNvT3RwMmZhRW5hYmxlZCE6IGJvb2xlYW47XG5cdGlzVTJmMmZhRW5hYmxlZCE6IGJvb2xlYW47XG5cdGlzUGFzc2tleUVuYWJsZWQhOiBib29sZWFuO1xuXHR0b3RwU2VjcmV0ITogc3RyaW5nIHwgbnVsbDtcblx0eXViaWNvT3RwUHVibGljSWQhOiBzdHJpbmcgfCBudWxsO1xuXHR5dWJpY29PdHBTZWNyZXRLZXkhOiBzdHJpbmcgfCBudWxsO1xuXHRmaWRvMkNyZWRlbnRpYWxJZCE6IHN0cmluZyB8IG51bGw7XG5cdGZpZG8yUHVibGljS2V5ITogc3RyaW5nIHwgbnVsbDtcblx0ZmlkbzJDb3VudGVyITogbnVtYmVyIHwgbnVsbDtcblx0ZmlkbzJBdHRlc3RhdGlvbkZvcm1hdCE6IHN0cmluZyB8IG51bGw7XG5cdHBhc3NrZXlDcmVkZW50aWFsSWQhOiBzdHJpbmcgfCBudWxsO1xuXHRwYXNza2V5UHVibGljS2V5ITogc3RyaW5nIHwgbnVsbDtcblx0cGFzc2tleUNvdW50ZXIhOiBudW1iZXIgfCBudWxsO1xuXHRwYXNza2V5QXR0ZXN0YXRpb25Gb3JtYXQhOiBzdHJpbmcgfCBudWxsO1xufVxuXG5leHBvcnQgdHlwZSBVc2VyTWZhSW5zdGFuY2UgPSBJbnN0YW5jZVR5cGU8dHlwZW9mIFVzZXJNZmE+O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVVc2VyTWZhTW9kZWwoXG5cdHNlcXVlbGl6ZTogU2VxdWVsaXplXG4pOiB0eXBlb2YgVXNlck1mYSB7XG5cdFVzZXJNZmEuaW5pdChcblx0XHR7XG5cdFx0XHRpZDoge1xuXHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuU1RSSU5HLFxuXHRcdFx0XHRhbGxvd051bGw6IGZhbHNlLFxuXHRcdFx0XHRwcmltYXJ5S2V5OiB0cnVlXG5cdFx0XHR9LFxuXHRcdFx0aXNNZmFFbmFibGVkOiB7XG5cdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5CT09MRUFOLFxuXHRcdFx0XHRhbGxvd051bGw6IGZhbHNlXG5cdFx0XHR9LFxuXHRcdFx0YmFja3VwQ29kZXM6IHtcblx0XHRcdFx0dHlwZTogRGF0YVR5cGVzLkFSUkFZKERhdGFUeXBlcy5TVFJJTkcpLFxuXHRcdFx0XHRhbGxvd051bGw6IHRydWVcblx0XHRcdH0sXG5cdFx0XHRpc0VtYWlsMmZhRW5hYmxlZDoge1xuXHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuQk9PTEVBTixcblx0XHRcdFx0YWxsb3dOdWxsOiBmYWxzZVxuXHRcdFx0fSxcblx0XHRcdGlzVG90cGwyZmFFbmFibGVkOiB7XG5cdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5CT09MRUFOLFxuXHRcdFx0XHRhbGxvd051bGw6IGZhbHNlXG5cdFx0XHR9LFxuXHRcdFx0aXNZdWJpY29PdHAyZmFFbmFibGVkOiB7XG5cdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5CT09MRUFOLFxuXHRcdFx0XHRhbGxvd051bGw6IGZhbHNlXG5cdFx0XHR9LFxuXHRcdFx0aXNVMmYyZmFFbmFibGVkOiB7XG5cdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5CT09MRUFOLFxuXHRcdFx0XHRhbGxvd051bGw6IGZhbHNlXG5cdFx0XHR9LFxuXHRcdFx0aXNQYXNza2V5RW5hYmxlZDoge1xuXHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuQk9PTEVBTixcblx0XHRcdFx0YWxsb3dOdWxsOiBmYWxzZVxuXHRcdFx0fSxcblx0XHRcdHRvdHBTZWNyZXQ6IHtcblx0XHRcdFx0dHlwZTogRGF0YVR5cGVzLlNUUklORyxcblx0XHRcdFx0YWxsb3dOdWxsOiB0cnVlXG5cdFx0XHR9LFxuXHRcdFx0eXViaWNvT3RwUHVibGljSWQ6IHtcblx0XHRcdFx0dHlwZTogRGF0YVR5cGVzLlNUUklORyxcblx0XHRcdFx0YWxsb3dOdWxsOiB0cnVlXG5cdFx0XHR9LFxuXHRcdFx0eXViaWNvT3RwU2VjcmV0S2V5OiB7XG5cdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5TVFJJTkcsXG5cdFx0XHRcdGFsbG93TnVsbDogdHJ1ZVxuXHRcdFx0fSxcblx0XHRcdGZpZG8yQ3JlZGVudGlhbElkOiB7XG5cdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5TVFJJTkcsXG5cdFx0XHRcdGFsbG93TnVsbDogdHJ1ZVxuXHRcdFx0fSxcblx0XHRcdGZpZG8yUHVibGljS2V5OiB7XG5cdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5TVFJJTkcsXG5cdFx0XHRcdGFsbG93TnVsbDogdHJ1ZVxuXHRcdFx0fSxcblx0XHRcdGZpZG8yQ291bnRlcjoge1xuXHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuSU5URUdFUixcblx0XHRcdFx0YWxsb3dOdWxsOiB0cnVlXG5cdFx0XHR9LFxuXHRcdFx0ZmlkbzJBdHRlc3RhdGlvbkZvcm1hdDoge1xuXHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuU1RSSU5HLFxuXHRcdFx0XHRhbGxvd051bGw6IHRydWVcblx0XHRcdH0sXG5cdFx0XHRwYXNza2V5Q3JlZGVudGlhbElkOiB7XG5cdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5TVFJJTkcsXG5cdFx0XHRcdGFsbG93TnVsbDogdHJ1ZVxuXHRcdFx0fSxcblx0XHRcdHBhc3NrZXlQdWJsaWNLZXk6IHtcblx0XHRcdFx0dHlwZTogRGF0YVR5cGVzLlNUUklORyxcblx0XHRcdFx0YWxsb3dOdWxsOiB0cnVlXG5cdFx0XHR9LFxuXHRcdFx0cGFzc2tleUNvdW50ZXI6IHtcblx0XHRcdFx0dHlwZTogRGF0YVR5cGVzLklOVEVHRVIsXG5cdFx0XHRcdGFsbG93TnVsbDogdHJ1ZVxuXHRcdFx0fSxcblx0XHRcdHBhc3NrZXlBdHRlc3RhdGlvbkZvcm1hdDoge1xuXHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuU1RSSU5HLFxuXHRcdFx0XHRhbGxvd051bGw6IHRydWVcblx0XHRcdH1cblx0XHR9LFxuXHRcdHtcblx0XHRcdHNlcXVlbGl6ZSxcblx0XHRcdHRhYmxlTmFtZTogJ1VzZXJNZmEnLFxuXHRcdFx0dGltZXN0YW1wczogZmFsc2Vcblx0XHR9XG5cdCk7XG5cblx0cmV0dXJuIFVzZXJNZmE7XG59XG4iXX0=
