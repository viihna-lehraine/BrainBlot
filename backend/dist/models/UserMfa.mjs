import { Model, DataTypes } from 'sequelize';
import { User } from './User.mjs';
import { processError } from '../utils/processError.mjs';
import { validateDependencies } from '../utils/validateDependencies.mjs';
class UserMfa extends Model {
	id;
	isMfaEnabled;
	backupCodes;
	isEmail2faEnabled;
	isTotp2faEnabled;
	isYubicoOtp2faEnabled;
	isU2f2faEnabled;
	isPasskeyEnabled;
	totpSecret;
	yubicoOtpPublicId;
	yubicoOtpSecretKey;
	fido2CredentialId;
	fido2PublicKey;
	fido2Counter;
	fido2AttestationFormat;
	passkeyCredentialId;
	passkeyPublicKey;
	passkeyCounter;
	passkeyAttestationFormat;
}
export default function createUserMfaModel(sequelize, logger) {
	try {
		validateDependencies(
			[
				{ name: 'sequelize', instance: sequelize },
				{ name: 'logger', instance: logger }
			],
			logger || console
		);
		UserMfa.init(
			{
				id: {
					type: DataTypes.UUID,
					defaultValue: DataTypes.UUIDV4,
					primaryKey: true,
					allowNull: false,
					unique: true,
					references: {
						model: User,
						key: 'id'
					}
				},
				isMfaEnabled: {
					type: DataTypes.BOOLEAN,
					defaultValue: false,
					allowNull: false
				},
				backupCodes: {
					type: DataTypes.ARRAY(DataTypes.STRING),
					allowNull: true
				},
				isEmail2faEnabled: {
					type: DataTypes.BOOLEAN,
					defaultValue: false,
					allowNull: false
				},
				isTotp2faEnabled: {
					type: DataTypes.BOOLEAN,
					defaultValue: false,
					allowNull: false
				},
				isYubicoOtp2faEnabled: {
					type: DataTypes.BOOLEAN,
					defaultValue: false,
					allowNull: false
				},
				isU2f2faEnabled: {
					type: DataTypes.BOOLEAN,
					defaultValue: false,
					allowNull: false
				},
				isPasskeyEnabled: {
					type: DataTypes.BOOLEAN,
					defaultValue: false,
					allowNull: false
				},
				totpSecret: {
					type: DataTypes.STRING,
					allowNull: true
				},
				yubicoOtpPublicId: {
					type: DataTypes.STRING,
					allowNull: true
				},
				yubicoOtpSecretKey: {
					type: DataTypes.STRING,
					allowNull: true
				},
				fido2CredentialId: {
					type: DataTypes.STRING,
					allowNull: true
				},
				fido2PublicKey: {
					type: DataTypes.TEXT,
					allowNull: true
				},
				fido2Counter: {
					type: DataTypes.INTEGER,
					allowNull: true
				},
				fido2AttestationFormat: {
					type: DataTypes.STRING,
					allowNull: true
				},
				passkeyCredentialId: {
					type: DataTypes.STRING,
					allowNull: true
				},
				passkeyPublicKey: {
					type: DataTypes.TEXT,
					allowNull: true
				},
				passkeyCounter: {
					type: DataTypes.INTEGER,
					allowNull: true
				},
				passkeyAttestationFormat: {
					type: DataTypes.STRING,
					allowNull: true
				}
			},
			{
				sequelize,
				modelName: 'UserMfa',
				timestamps: true
			}
		);
		return UserMfa;
	} catch (error) {
		processError(error, logger || console);
		throw error;
	}
}
export { UserMfa };
//# sourceMappingURL=data:application/json;base64,
