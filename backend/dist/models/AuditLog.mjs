import { DataTypes, Model } from 'sequelize';
import { validateDependencies } from '../utils/validateDependencies';
import { processError } from '../utils/processError';
import { User } from './User';
class AuditLog extends Model {
	auditId;
	id;
	actionType;
	actionDescription;
	affectedResource;
	previousValue;
	newValue;
	ipAddress;
	userAgent;
	auditLogDate;
	auditLogUpdateDate;
}
export default function createAuditLogModel(sequelize, logger) {
	try {
		validateDependencies(
			[
				{ name: 'sequelize', instance: sequelize },
				{ name: 'logger', instance: logger }
			],
			logger || console
		);
		AuditLog.init(
			{
				auditId: {
					type: DataTypes.UUID,
					defaultValue: DataTypes.UUIDV4,
					primaryKey: true,
					allowNull: false,
					unique: true
				},
				id: {
					type: DataTypes.UUID,
					defaultValue: DataTypes.UUIDV4,
					unique: true,
					allowNull: true,
					references: {
						model: User,
						key: 'id'
					}
				},
				actionType: {
					type: DataTypes.STRING,
					allowNull: false,
					validate: {
						isIn: [
							[
								'create',
								'update',
								'delete',
								'read',
								'login',
								'logout',
								'other'
							]
						]
					}
				},
				actionDescription: {
					type: DataTypes.TEXT,
					allowNull: true
				},
				affectedResource: {
					type: DataTypes.STRING,
					allowNull: true
				},
				previousValue: {
					type: DataTypes.TEXT,
					allowNull: true
				},
				newValue: {
					type: DataTypes.TEXT,
					allowNull: true
				},
				ipAddress: {
					type: DataTypes.STRING,
					allowNull: false,
					validate: {
						isIP: true
					}
				},
				userAgent: {
					type: DataTypes.STRING,
					allowNull: false
				},
				auditLogDate: {
					type: DataTypes.DATE,
					defaultValue: DataTypes.NOW,
					allowNull: false
				},
				auditLogUpdateDate: {
					type: DataTypes.DATE,
					defaultValue: undefined,
					allowNull: true
				}
			},
			{
				sequelize,
				modelName: 'AuditLog',
				timestamps: true
			}
		);
		logger.info('AuditLog model initialized successfully');
		return AuditLog;
	} catch (error) {
		processError(error, logger || console);
		throw error;
	}
}
export { AuditLog };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXVkaXRMb2cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9kZWxzL0F1ZGl0TG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixTQUFTLEVBR1QsS0FBSyxFQUVMLE1BQU0sV0FBVyxDQUFDO0FBRW5CLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBZ0I5QixNQUFNLFFBQ0wsU0FBUSxLQUFtRTtJQUdwRSxPQUFPLENBQVU7SUFDakIsRUFBRSxDQUFpQjtJQUNuQixVQUFVLENBQVU7SUFDcEIsaUJBQWlCLENBQWlCO0lBQ2xDLGdCQUFnQixDQUFpQjtJQUNqQyxhQUFhLENBQWlCO0lBQzlCLFFBQVEsQ0FBaUI7SUFDekIsU0FBUyxDQUFVO0lBQ25CLFNBQVMsQ0FBVTtJQUNuQixZQUFZLENBQVE7SUFDcEIsa0JBQWtCLENBQWU7Q0FDeEM7QUFFRCxNQUFNLENBQUMsT0FBTyxVQUFVLG1CQUFtQixDQUMxQyxTQUFvQixFQUNwQixNQUFjO0lBRWQsSUFBSSxDQUFDO1FBQ0osb0JBQW9CLENBQ25CO1lBQ0MsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUU7WUFDMUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUU7U0FDcEMsRUFDRCxNQUFNLElBQUksT0FBTyxDQUNqQixDQUFDO1FBRUYsUUFBUSxDQUFDLElBQUksQ0FDWjtZQUNDLE9BQU8sRUFBRTtnQkFDUixJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7Z0JBQ3BCLFlBQVksRUFBRSxTQUFTLENBQUMsTUFBTTtnQkFDOUIsVUFBVSxFQUFFLElBQUk7Z0JBQ2hCLFNBQVMsRUFBRSxLQUFLO2dCQUNoQixNQUFNLEVBQUUsSUFBSTthQUNaO1lBQ0QsRUFBRSxFQUFFO2dCQUNILElBQUksRUFBRSxTQUFTLENBQUMsSUFBSTtnQkFDcEIsWUFBWSxFQUFFLFNBQVMsQ0FBQyxNQUFNO2dCQUM5QixNQUFNLEVBQUUsSUFBSTtnQkFDWixTQUFTLEVBQUUsSUFBSTtnQkFDZixVQUFVLEVBQUU7b0JBQ1gsS0FBSyxFQUFFLElBQUk7b0JBQ1gsR0FBRyxFQUFFLElBQUk7aUJBQ1Q7YUFDRDtZQUNELFVBQVUsRUFBRTtnQkFDWCxJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU07Z0JBQ3RCLFNBQVMsRUFBRSxLQUFLO2dCQUNoQixRQUFRLEVBQUU7b0JBQ1QsSUFBSSxFQUFFO3dCQUNMOzRCQUNDLFFBQVE7NEJBQ1IsUUFBUTs0QkFDUixRQUFROzRCQUNSLE1BQU07NEJBQ04sT0FBTzs0QkFDUCxRQUFROzRCQUNSLE9BQU87eUJBQ1A7cUJBQ0Q7aUJBQ0Q7YUFDRDtZQUNELGlCQUFpQixFQUFFO2dCQUNsQixJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7Z0JBQ3BCLFNBQVMsRUFBRSxJQUFJO2FBQ2Y7WUFDRCxnQkFBZ0IsRUFBRTtnQkFDakIsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNO2dCQUN0QixTQUFTLEVBQUUsSUFBSTthQUNmO1lBQ0QsYUFBYSxFQUFFO2dCQUNkLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSTtnQkFDcEIsU0FBUyxFQUFFLElBQUk7YUFDZjtZQUNELFFBQVEsRUFBRTtnQkFDVCxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7Z0JBQ3BCLFNBQVMsRUFBRSxJQUFJO2FBQ2Y7WUFDRCxTQUFTLEVBQUU7Z0JBQ1YsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNO2dCQUN0QixTQUFTLEVBQUUsS0FBSztnQkFDaEIsUUFBUSxFQUFFO29CQUNULElBQUksRUFBRSxJQUFJO2lCQUNWO2FBQ0Q7WUFDRCxTQUFTLEVBQUU7Z0JBQ1YsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNO2dCQUN0QixTQUFTLEVBQUUsS0FBSzthQUNoQjtZQUNELFlBQVksRUFBRTtnQkFDYixJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7Z0JBQ3BCLFlBQVksRUFBRSxTQUFTLENBQUMsR0FBRztnQkFDM0IsU0FBUyxFQUFFLEtBQUs7YUFDaEI7WUFDRCxrQkFBa0IsRUFBRTtnQkFDbkIsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJO2dCQUNwQixZQUFZLEVBQUUsU0FBUztnQkFDdkIsU0FBUyxFQUFFLElBQUk7YUFDZjtTQUNELEVBQ0Q7WUFDQyxTQUFTO1lBQ1QsU0FBUyxFQUFFLFVBQVU7WUFDckIsVUFBVSxFQUFFLElBQUk7U0FDaEIsQ0FDRCxDQUFDO1FBRUYsTUFBTSxDQUFDLElBQUksQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO1FBQ3ZELE9BQU8sUUFBUSxDQUFDO0lBQ2pCLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sS0FBSyxDQUFDO0lBQ2IsQ0FBQztBQUNGLENBQUM7QUFFRCxPQUFPLEVBQUUsUUFBUSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHREYXRhVHlwZXMsXG5cdEluZmVyQXR0cmlidXRlcyxcblx0SW5mZXJDcmVhdGlvbkF0dHJpYnV0ZXMsXG5cdE1vZGVsLFxuXHRTZXF1ZWxpemVcbn0gZnJvbSAnc2VxdWVsaXplJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL2NvbmZpZy9sb2dnZXInO1xuaW1wb3J0IHsgdmFsaWRhdGVEZXBlbmRlbmNpZXMgfSBmcm9tICcuLi91dGlscy92YWxpZGF0ZURlcGVuZGVuY2llcyc7XG5pbXBvcnQgeyBwcm9jZXNzRXJyb3IgfSBmcm9tICcuLi91dGlscy9wcm9jZXNzRXJyb3InO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4vVXNlcic7XG5cbmludGVyZmFjZSBBdWRpdExvZ0F0dHJpYnV0ZXMge1xuXHRhdWRpdElkOiBzdHJpbmc7XG5cdGlkPzogc3RyaW5nIHwgbnVsbDtcblx0YWN0aW9uVHlwZTogc3RyaW5nO1xuXHRhY3Rpb25EZXNjcmlwdGlvbj86IHN0cmluZyB8IG51bGw7XG5cdGFmZmVjdGVkUmVzb3VyY2U/OiBzdHJpbmcgfCBudWxsO1xuXHRwcmV2aW91c1ZhbHVlPzogc3RyaW5nIHwgbnVsbDtcblx0bmV3VmFsdWU/OiBzdHJpbmcgfCBudWxsO1xuXHRpcEFkZHJlc3M6IHN0cmluZztcblx0dXNlckFnZW50OiBzdHJpbmc7XG5cdGF1ZGl0TG9nRGF0ZTogRGF0ZTtcblx0YXVkaXRMb2dVcGRhdGVEYXRlPzogRGF0ZSB8IG51bGw7XG59XG5cbmNsYXNzIEF1ZGl0TG9nXG5cdGV4dGVuZHMgTW9kZWw8SW5mZXJBdHRyaWJ1dGVzPEF1ZGl0TG9nPiwgSW5mZXJDcmVhdGlvbkF0dHJpYnV0ZXM8QXVkaXRMb2c+PlxuXHRpbXBsZW1lbnRzIEF1ZGl0TG9nQXR0cmlidXRlc1xue1xuXHRwdWJsaWMgYXVkaXRJZCE6IHN0cmluZztcblx0cHVibGljIGlkPzogc3RyaW5nIHwgbnVsbDtcblx0cHVibGljIGFjdGlvblR5cGUhOiBzdHJpbmc7XG5cdHB1YmxpYyBhY3Rpb25EZXNjcmlwdGlvbiE6IHN0cmluZyB8IG51bGw7XG5cdHB1YmxpYyBhZmZlY3RlZFJlc291cmNlITogc3RyaW5nIHwgbnVsbDtcblx0cHVibGljIHByZXZpb3VzVmFsdWUhOiBzdHJpbmcgfCBudWxsO1xuXHRwdWJsaWMgbmV3VmFsdWUhOiBzdHJpbmcgfCBudWxsO1xuXHRwdWJsaWMgaXBBZGRyZXNzITogc3RyaW5nO1xuXHRwdWJsaWMgdXNlckFnZW50ITogc3RyaW5nO1xuXHRwdWJsaWMgYXVkaXRMb2dEYXRlITogRGF0ZTtcblx0cHVibGljIGF1ZGl0TG9nVXBkYXRlRGF0ZT86IERhdGUgfCBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVBdWRpdExvZ01vZGVsKFxuXHRzZXF1ZWxpemU6IFNlcXVlbGl6ZSxcblx0bG9nZ2VyOiBMb2dnZXJcbik6IHR5cGVvZiBBdWRpdExvZyB7XG5cdHRyeSB7XG5cdFx0dmFsaWRhdGVEZXBlbmRlbmNpZXMoXG5cdFx0XHRbXG5cdFx0XHRcdHsgbmFtZTogJ3NlcXVlbGl6ZScsIGluc3RhbmNlOiBzZXF1ZWxpemUgfSxcblx0XHRcdFx0eyBuYW1lOiAnbG9nZ2VyJywgaW5zdGFuY2U6IGxvZ2dlciB9XG5cdFx0XHRdLFxuXHRcdFx0bG9nZ2VyIHx8IGNvbnNvbGVcblx0XHQpO1xuXG5cdFx0QXVkaXRMb2cuaW5pdChcblx0XHRcdHtcblx0XHRcdFx0YXVkaXRJZDoge1xuXHRcdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5VVUlELFxuXHRcdFx0XHRcdGRlZmF1bHRWYWx1ZTogRGF0YVR5cGVzLlVVSURWNCxcblx0XHRcdFx0XHRwcmltYXJ5S2V5OiB0cnVlLFxuXHRcdFx0XHRcdGFsbG93TnVsbDogZmFsc2UsXG5cdFx0XHRcdFx0dW5pcXVlOiB0cnVlXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGlkOiB7XG5cdFx0XHRcdFx0dHlwZTogRGF0YVR5cGVzLlVVSUQsXG5cdFx0XHRcdFx0ZGVmYXVsdFZhbHVlOiBEYXRhVHlwZXMuVVVJRFY0LFxuXHRcdFx0XHRcdHVuaXF1ZTogdHJ1ZSxcblx0XHRcdFx0XHRhbGxvd051bGw6IHRydWUsXG5cdFx0XHRcdFx0cmVmZXJlbmNlczoge1xuXHRcdFx0XHRcdFx0bW9kZWw6IFVzZXIsXG5cdFx0XHRcdFx0XHRrZXk6ICdpZCdcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFjdGlvblR5cGU6IHtcblx0XHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuU1RSSU5HLFxuXHRcdFx0XHRcdGFsbG93TnVsbDogZmFsc2UsXG5cdFx0XHRcdFx0dmFsaWRhdGU6IHtcblx0XHRcdFx0XHRcdGlzSW46IFtcblx0XHRcdFx0XHRcdFx0W1xuXHRcdFx0XHRcdFx0XHRcdCdjcmVhdGUnLFxuXHRcdFx0XHRcdFx0XHRcdCd1cGRhdGUnLFxuXHRcdFx0XHRcdFx0XHRcdCdkZWxldGUnLFxuXHRcdFx0XHRcdFx0XHRcdCdyZWFkJyxcblx0XHRcdFx0XHRcdFx0XHQnbG9naW4nLFxuXHRcdFx0XHRcdFx0XHRcdCdsb2dvdXQnLFxuXHRcdFx0XHRcdFx0XHRcdCdvdGhlcidcblx0XHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdFx0XVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0YWN0aW9uRGVzY3JpcHRpb246IHtcblx0XHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuVEVYVCxcblx0XHRcdFx0XHRhbGxvd051bGw6IHRydWVcblx0XHRcdFx0fSxcblx0XHRcdFx0YWZmZWN0ZWRSZXNvdXJjZToge1xuXHRcdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5TVFJJTkcsXG5cdFx0XHRcdFx0YWxsb3dOdWxsOiB0cnVlXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHByZXZpb3VzVmFsdWU6IHtcblx0XHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuVEVYVCxcblx0XHRcdFx0XHRhbGxvd051bGw6IHRydWVcblx0XHRcdFx0fSxcblx0XHRcdFx0bmV3VmFsdWU6IHtcblx0XHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuVEVYVCxcblx0XHRcdFx0XHRhbGxvd051bGw6IHRydWVcblx0XHRcdFx0fSxcblx0XHRcdFx0aXBBZGRyZXNzOiB7XG5cdFx0XHRcdFx0dHlwZTogRGF0YVR5cGVzLlNUUklORyxcblx0XHRcdFx0XHRhbGxvd051bGw6IGZhbHNlLFxuXHRcdFx0XHRcdHZhbGlkYXRlOiB7XG5cdFx0XHRcdFx0XHRpc0lQOiB0cnVlXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHR1c2VyQWdlbnQ6IHtcblx0XHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuU1RSSU5HLFxuXHRcdFx0XHRcdGFsbG93TnVsbDogZmFsc2Vcblx0XHRcdFx0fSxcblx0XHRcdFx0YXVkaXRMb2dEYXRlOiB7XG5cdFx0XHRcdFx0dHlwZTogRGF0YVR5cGVzLkRBVEUsXG5cdFx0XHRcdFx0ZGVmYXVsdFZhbHVlOiBEYXRhVHlwZXMuTk9XLFxuXHRcdFx0XHRcdGFsbG93TnVsbDogZmFsc2Vcblx0XHRcdFx0fSxcblx0XHRcdFx0YXVkaXRMb2dVcGRhdGVEYXRlOiB7XG5cdFx0XHRcdFx0dHlwZTogRGF0YVR5cGVzLkRBVEUsXG5cdFx0XHRcdFx0ZGVmYXVsdFZhbHVlOiB1bmRlZmluZWQsXG5cdFx0XHRcdFx0YWxsb3dOdWxsOiB0cnVlXG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHNlcXVlbGl6ZSxcblx0XHRcdFx0bW9kZWxOYW1lOiAnQXVkaXRMb2cnLFxuXHRcdFx0XHR0aW1lc3RhbXBzOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGxvZ2dlci5pbmZvKCdBdWRpdExvZyBtb2RlbCBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHknKTtcblx0XHRyZXR1cm4gQXVkaXRMb2c7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cHJvY2Vzc0Vycm9yKGVycm9yLCBsb2dnZXIgfHwgY29uc29sZSk7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH1cbn1cblxuZXhwb3J0IHsgQXVkaXRMb2cgfTtcbiJdfQ==
