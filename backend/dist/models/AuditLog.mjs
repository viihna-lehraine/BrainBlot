import { DataTypes, Model } from 'sequelize';
class AuditLog extends Model {
	auditId;
	id;
	actionType;
	actionDescription;
	affectedResource;
	previousValue;
	newValue;
	ipAddress;
	userAgent;
	auditLogDate;
	auditLogUpdateDate;
}
export default function createAuditLogModel(sequelize) {
	AuditLog.init(
		{
			auditId: {
				type: DataTypes.STRING,
				allowNull: false
			},
			id: {
				type: DataTypes.STRING,
				allowNull: false,
				primaryKey: true
			},
			actionType: {
				type: DataTypes.STRING,
				allowNull: false
			},
			actionDescription: {
				type: DataTypes.TEXT,
				allowNull: true
			},
			affectedResource: {
				type: DataTypes.STRING,
				allowNull: true
			},
			previousValue: {
				type: DataTypes.STRING,
				allowNull: true
			},
			newValue: {
				type: DataTypes.STRING,
				allowNull: true
			},
			ipAddress: {
				type: DataTypes.STRING,
				allowNull: false
			},
			userAgent: {
				type: DataTypes.STRING,
				allowNull: false
			},
			auditLogDate: {
				type: DataTypes.DATE,
				allowNull: false
			},
			auditLogUpdateDate: {
				type: DataTypes.DATE,
				allowNull: true
			}
		},
		{
			sequelize,
			tableName: 'AuditLogs',
			timestamps: false
		}
	);
	return AuditLog;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXVkaXRMb2cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9kZWxzL0F1ZGl0TG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixTQUFTLEVBR1QsS0FBSyxFQUVMLE1BQU0sV0FBVyxDQUFDO0FBZ0JuQixNQUFNLFFBQ0wsU0FBUSxLQUFtRTtJQUczRSxPQUFPLENBQVU7SUFDakIsRUFBRSxDQUFVO0lBQ1osVUFBVSxDQUFVO0lBQ3BCLGlCQUFpQixDQUFpQjtJQUNsQyxnQkFBZ0IsQ0FBaUI7SUFDakMsYUFBYSxDQUFpQjtJQUM5QixRQUFRLENBQWlCO0lBQ3pCLFNBQVMsQ0FBVTtJQUNuQixTQUFTLENBQVU7SUFDbkIsWUFBWSxDQUFRO0lBQ3BCLGtCQUFrQixDQUFlO0NBQ2pDO0FBRUQsTUFBTSxDQUFDLE9BQU8sVUFBVSxtQkFBbUIsQ0FDMUMsU0FBb0I7SUFFcEIsUUFBUSxDQUFDLElBQUksQ0FDWjtRQUNDLE9BQU8sRUFBRTtZQUNSLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTTtZQUN0QixTQUFTLEVBQUUsS0FBSztTQUNoQjtRQUNELEVBQUUsRUFBRTtZQUNILElBQUksRUFBRSxTQUFTLENBQUMsTUFBTTtZQUN0QixTQUFTLEVBQUUsS0FBSztZQUNoQixVQUFVLEVBQUUsSUFBSTtTQUNoQjtRQUNELFVBQVUsRUFBRTtZQUNYLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTTtZQUN0QixTQUFTLEVBQUUsS0FBSztTQUNoQjtRQUNELGlCQUFpQixFQUFFO1lBQ2xCLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSTtZQUNwQixTQUFTLEVBQUUsSUFBSTtTQUNmO1FBQ0QsZ0JBQWdCLEVBQUU7WUFDakIsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNO1lBQ3RCLFNBQVMsRUFBRSxJQUFJO1NBQ2Y7UUFDRCxhQUFhLEVBQUU7WUFDZCxJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU07WUFDdEIsU0FBUyxFQUFFLElBQUk7U0FDZjtRQUNELFFBQVEsRUFBRTtZQUNULElBQUksRUFBRSxTQUFTLENBQUMsTUFBTTtZQUN0QixTQUFTLEVBQUUsSUFBSTtTQUNmO1FBQ0QsU0FBUyxFQUFFO1lBQ1YsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNO1lBQ3RCLFNBQVMsRUFBRSxLQUFLO1NBQ2hCO1FBQ0QsU0FBUyxFQUFFO1lBQ1YsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNO1lBQ3RCLFNBQVMsRUFBRSxLQUFLO1NBQ2hCO1FBQ0QsWUFBWSxFQUFFO1lBQ2IsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJO1lBQ3BCLFNBQVMsRUFBRSxLQUFLO1NBQ2hCO1FBQ0Qsa0JBQWtCLEVBQUU7WUFDbkIsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJO1lBQ3BCLFNBQVMsRUFBRSxJQUFJO1NBQ2Y7S0FDRCxFQUNEO1FBQ0MsU0FBUztRQUNULFNBQVMsRUFBRSxXQUFXO1FBQ3RCLFVBQVUsRUFBRSxLQUFLO0tBQ2pCLENBQ0QsQ0FBQztJQUVGLE9BQU8sUUFBUSxDQUFDO0FBQ2pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHREYXRhVHlwZXMsXG5cdEluZmVyQXR0cmlidXRlcyxcblx0SW5mZXJDcmVhdGlvbkF0dHJpYnV0ZXMsXG5cdE1vZGVsLFxuXHRTZXF1ZWxpemVcbn0gZnJvbSAnc2VxdWVsaXplJztcblxuaW50ZXJmYWNlIEF1ZGl0TG9nQXR0cmlidXRlcyB7XG5cdGF1ZGl0SWQ6IHN0cmluZztcblx0aWQ6IHN0cmluZztcblx0YWN0aW9uVHlwZTogc3RyaW5nO1xuXHRhY3Rpb25EZXNjcmlwdGlvbj86IHN0cmluZyB8IG51bGw7XG5cdGFmZmVjdGVkUmVzb3VyY2U/OiBzdHJpbmcgfCBudWxsO1xuXHRwcmV2aW91c1ZhbHVlPzogc3RyaW5nIHwgbnVsbDtcblx0bmV3VmFsdWU/OiBzdHJpbmcgfCBudWxsO1xuXHRpcEFkZHJlc3M6IHN0cmluZztcblx0dXNlckFnZW50OiBzdHJpbmc7XG5cdGF1ZGl0TG9nRGF0ZTogRGF0ZTtcblx0YXVkaXRMb2dVcGRhdGVEYXRlPzogRGF0ZSB8IG51bGw7XG59XG5cbmNsYXNzIEF1ZGl0TG9nXG5cdGV4dGVuZHMgTW9kZWw8SW5mZXJBdHRyaWJ1dGVzPEF1ZGl0TG9nPiwgSW5mZXJDcmVhdGlvbkF0dHJpYnV0ZXM8QXVkaXRMb2c+PlxuXHRpbXBsZW1lbnRzIEF1ZGl0TG9nQXR0cmlidXRlc1xue1xuXHRhdWRpdElkITogc3RyaW5nO1xuXHRpZCE6IHN0cmluZztcblx0YWN0aW9uVHlwZSE6IHN0cmluZztcblx0YWN0aW9uRGVzY3JpcHRpb24hOiBzdHJpbmcgfCBudWxsO1xuXHRhZmZlY3RlZFJlc291cmNlITogc3RyaW5nIHwgbnVsbDtcblx0cHJldmlvdXNWYWx1ZSE6IHN0cmluZyB8IG51bGw7XG5cdG5ld1ZhbHVlITogc3RyaW5nIHwgbnVsbDtcblx0aXBBZGRyZXNzITogc3RyaW5nO1xuXHR1c2VyQWdlbnQhOiBzdHJpbmc7XG5cdGF1ZGl0TG9nRGF0ZSE6IERhdGU7XG5cdGF1ZGl0TG9nVXBkYXRlRGF0ZT86IERhdGUgfCBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVBdWRpdExvZ01vZGVsKFxuXHRzZXF1ZWxpemU6IFNlcXVlbGl6ZVxuKTogdHlwZW9mIEF1ZGl0TG9nIHtcblx0QXVkaXRMb2cuaW5pdChcblx0XHR7XG5cdFx0XHRhdWRpdElkOiB7XG5cdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5TVFJJTkcsXG5cdFx0XHRcdGFsbG93TnVsbDogZmFsc2Vcblx0XHRcdH0sXG5cdFx0XHRpZDoge1xuXHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuU1RSSU5HLFxuXHRcdFx0XHRhbGxvd051bGw6IGZhbHNlLFxuXHRcdFx0XHRwcmltYXJ5S2V5OiB0cnVlXG5cdFx0XHR9LFxuXHRcdFx0YWN0aW9uVHlwZToge1xuXHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuU1RSSU5HLFxuXHRcdFx0XHRhbGxvd051bGw6IGZhbHNlXG5cdFx0XHR9LFxuXHRcdFx0YWN0aW9uRGVzY3JpcHRpb246IHtcblx0XHRcdFx0dHlwZTogRGF0YVR5cGVzLlRFWFQsXG5cdFx0XHRcdGFsbG93TnVsbDogdHJ1ZVxuXHRcdFx0fSxcblx0XHRcdGFmZmVjdGVkUmVzb3VyY2U6IHtcblx0XHRcdFx0dHlwZTogRGF0YVR5cGVzLlNUUklORyxcblx0XHRcdFx0YWxsb3dOdWxsOiB0cnVlXG5cdFx0XHR9LFxuXHRcdFx0cHJldmlvdXNWYWx1ZToge1xuXHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuU1RSSU5HLFxuXHRcdFx0XHRhbGxvd051bGw6IHRydWVcblx0XHRcdH0sXG5cdFx0XHRuZXdWYWx1ZToge1xuXHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuU1RSSU5HLFxuXHRcdFx0XHRhbGxvd051bGw6IHRydWVcblx0XHRcdH0sXG5cdFx0XHRpcEFkZHJlc3M6IHtcblx0XHRcdFx0dHlwZTogRGF0YVR5cGVzLlNUUklORyxcblx0XHRcdFx0YWxsb3dOdWxsOiBmYWxzZVxuXHRcdFx0fSxcblx0XHRcdHVzZXJBZ2VudDoge1xuXHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuU1RSSU5HLFxuXHRcdFx0XHRhbGxvd051bGw6IGZhbHNlXG5cdFx0XHR9LFxuXHRcdFx0YXVkaXRMb2dEYXRlOiB7XG5cdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5EQVRFLFxuXHRcdFx0XHRhbGxvd051bGw6IGZhbHNlXG5cdFx0XHR9LFxuXHRcdFx0YXVkaXRMb2dVcGRhdGVEYXRlOiB7XG5cdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5EQVRFLFxuXHRcdFx0XHRhbGxvd051bGw6IHRydWVcblx0XHRcdH1cblx0XHR9LFxuXHRcdHtcblx0XHRcdHNlcXVlbGl6ZSxcblx0XHRcdHRhYmxlTmFtZTogJ0F1ZGl0TG9ncycsXG5cdFx0XHR0aW1lc3RhbXBzOiBmYWxzZVxuXHRcdH1cblx0KTtcblxuXHRyZXR1cm4gQXVkaXRMb2c7XG59XG4iXX0=
