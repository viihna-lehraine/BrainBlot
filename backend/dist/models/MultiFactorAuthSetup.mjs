import { Model, DataTypes } from 'sequelize';
import { validateDependencies } from '../utils/validateDependencies';
import { processError } from '../utils/processError';
import { User } from './User';
class MultiFactorAuthSetup extends Model {
	mfaId;
	id;
	method;
	secret;
	publicKey;
	counter;
	isActive;
	createdAt;
	updatedAt;
}
export default function createMultiFactorAuthSetupModel(sequelize, logger) {
	try {
		validateDependencies(
			[
				{ name: 'sequelize', instance: sequelize },
				{ name: 'logger', instance: logger }
			],
			logger || console
		);
		MultiFactorAuthSetup.init(
			{
				mfaId: {
					type: DataTypes.INTEGER,
					autoIncrement: true,
					allowNull: false,
					unique: true
				},
				id: {
					type: DataTypes.UUID,
					defaultValue: DataTypes.UUIDV4,
					allowNull: false,
					primaryKey: true,
					unique: true,
					references: {
						model: User,
						key: 'id'
					}
				},
				method: {
					type: DataTypes.ENUM(
						'totp',
						'email',
						'yubico',
						'fido2',
						'passkey'
					),
					allowNull: false
				},
				secret: {
					type: DataTypes.STRING,
					allowNull: true
				},
				publicKey: {
					type: DataTypes.TEXT,
					allowNull: true
				},
				counter: {
					type: DataTypes.INTEGER,
					allowNull: true
				},
				isActive: {
					type: DataTypes.BOOLEAN,
					defaultValue: false,
					allowNull: false
				},
				createdAt: {
					type: DataTypes.DATE,
					defaultValue: DataTypes.NOW,
					allowNull: false
				},
				updatedAt: {
					type: DataTypes.DATE,
					defaultValue: DataTypes.NOW,
					allowNull: false
				}
			},
			{
				sequelize,
				modelName: 'MultiFactorAuthSetup',
				timestamps: true
			}
		);
		return MultiFactorAuthSetup;
	} catch (error) {
		processError(error, logger || console);
		throw error;
	}
}
export { MultiFactorAuthSetup };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTXVsdGlGYWN0b3JBdXRoU2V0dXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9kZWxzL011bHRpRmFjdG9yQXV0aFNldHVwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFJTixLQUFLLEVBQ0wsU0FBUyxFQUVULE1BQU0sV0FBVyxDQUFDO0FBRW5CLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBYzlCLE1BQU0sb0JBQ0wsU0FBUSxLQUdQO0lBR00sS0FBSyxDQUFVO0lBQ2YsRUFBRSxDQUFVO0lBQ1osTUFBTSxDQUFxRDtJQUMzRCxNQUFNLENBQWlCO0lBQ3ZCLFNBQVMsQ0FBaUI7SUFDMUIsT0FBTyxDQUFpQjtJQUN4QixRQUFRLENBQVc7SUFDbkIsU0FBUyxDQUEwQjtJQUNuQyxTQUFTLENBQTBCO0NBQzFDO0FBRUQsTUFBTSxDQUFDLE9BQU8sVUFBVSwrQkFBK0IsQ0FDdEQsU0FBb0IsRUFDcEIsTUFBYztJQUVkLElBQUksQ0FBQztRQUNKLG9CQUFvQixDQUNuQjtZQUNDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFO1lBQzFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO1NBQ3BDLEVBQ0QsTUFBTSxJQUFJLE9BQU8sQ0FDakIsQ0FBQztRQUVGLG9CQUFvQixDQUFDLElBQUksQ0FDeEI7WUFDQyxLQUFLLEVBQUU7Z0JBQ04sSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPO2dCQUN2QixhQUFhLEVBQUUsSUFBSTtnQkFDbkIsU0FBUyxFQUFFLEtBQUs7Z0JBQ2hCLE1BQU0sRUFBRSxJQUFJO2FBQ1o7WUFDRCxFQUFFLEVBQUU7Z0JBQ0gsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJO2dCQUNwQixZQUFZLEVBQUUsU0FBUyxDQUFDLE1BQU07Z0JBQzlCLFNBQVMsRUFBRSxLQUFLO2dCQUNoQixVQUFVLEVBQUUsSUFBSTtnQkFDaEIsTUFBTSxFQUFFLElBQUk7Z0JBQ1osVUFBVSxFQUFFO29CQUNYLEtBQUssRUFBRSxJQUFJO29CQUNYLEdBQUcsRUFBRSxJQUFJO2lCQUNUO2FBQ0Q7WUFDRCxNQUFNLEVBQUU7Z0JBQ1AsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQ25CLE1BQU0sRUFDTixPQUFPLEVBQ1AsUUFBUSxFQUNSLE9BQU8sRUFDUCxTQUFTLENBQ1Q7Z0JBQ0QsU0FBUyxFQUFFLEtBQUs7YUFDaEI7WUFDRCxNQUFNLEVBQUU7Z0JBQ1AsSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNO2dCQUN0QixTQUFTLEVBQUUsSUFBSTthQUNmO1lBQ0QsU0FBUyxFQUFFO2dCQUNWLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSTtnQkFDcEIsU0FBUyxFQUFFLElBQUk7YUFDZjtZQUNELE9BQU8sRUFBRTtnQkFDUixJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU87Z0JBQ3ZCLFNBQVMsRUFBRSxJQUFJO2FBQ2Y7WUFDRCxRQUFRLEVBQUU7Z0JBQ1QsSUFBSSxFQUFFLFNBQVMsQ0FBQyxPQUFPO2dCQUN2QixZQUFZLEVBQUUsS0FBSztnQkFDbkIsU0FBUyxFQUFFLEtBQUs7YUFDaEI7WUFDRCxTQUFTLEVBQUU7Z0JBQ1YsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJO2dCQUNwQixZQUFZLEVBQUUsU0FBUyxDQUFDLEdBQUc7Z0JBQzNCLFNBQVMsRUFBRSxLQUFLO2FBQ2hCO1lBQ0QsU0FBUyxFQUFFO2dCQUNWLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSTtnQkFDcEIsWUFBWSxFQUFFLFNBQVMsQ0FBQyxHQUFHO2dCQUMzQixTQUFTLEVBQUUsS0FBSzthQUNoQjtTQUNELEVBQ0Q7WUFDQyxTQUFTO1lBQ1QsU0FBUyxFQUFFLHNCQUFzQjtZQUNqQyxVQUFVLEVBQUUsSUFBSTtTQUNoQixDQUNELENBQUM7UUFFRixPQUFPLG9CQUFvQixDQUFDO0lBQzdCLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sS0FBSyxDQUFDO0lBQ2IsQ0FBQztBQUNGLENBQUM7QUFFRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENyZWF0aW9uT3B0aW9uYWwsXG5cdEluZmVyQXR0cmlidXRlcyxcblx0SW5mZXJDcmVhdGlvbkF0dHJpYnV0ZXMsXG5cdE1vZGVsLFxuXHREYXRhVHlwZXMsXG5cdFNlcXVlbGl6ZVxufSBmcm9tICdzZXF1ZWxpemUnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vY29uZmlnL2xvZ2dlcic7XG5pbXBvcnQgeyB2YWxpZGF0ZURlcGVuZGVuY2llcyB9IGZyb20gJy4uL3V0aWxzL3ZhbGlkYXRlRGVwZW5kZW5jaWVzJztcbmltcG9ydCB7IHByb2Nlc3NFcnJvciB9IGZyb20gJy4uL3V0aWxzL3Byb2Nlc3NFcnJvcic7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi9Vc2VyJztcblxuaW50ZXJmYWNlIE11bHRpRmFjdG9yQXV0aFNldHVwQXR0cmlidXRlcyB7XG5cdG1mYUlkOiBudW1iZXI7IC8vIHByaW1hcnkga2V5IGZvciBNRkEgc2V0dXAgcmVjb3JkLCBhdXRvLWluY3JlbWVudGVkXG5cdGlkOiBzdHJpbmc7IC8vIFVVSUQgZm9yIE1GQSBzZXR1cCwgcHJpbWFyeSBrZXkgKGZyb20gVXNlciBtb2RlbClcblx0bWV0aG9kOiAndG90cCcgfCAnZW1haWwnIHwgJ3l1YmljbycgfCAnZmlkbzInIHwgJ3Bhc3NrZXknO1xuXHRzZWNyZXQ/OiBzdHJpbmcgfCBudWxsO1xuXHRwdWJsaWNLZXk/OiBzdHJpbmcgfCBudWxsO1xuXHRjb3VudGVyPzogbnVtYmVyIHwgbnVsbDtcblx0aXNBY3RpdmU6IGJvb2xlYW47XG5cdGNyZWF0ZWRBdDogRGF0ZTtcblx0dXBkYXRlZEF0OiBEYXRlO1xufVxuXG5jbGFzcyBNdWx0aUZhY3RvckF1dGhTZXR1cFxuXHRleHRlbmRzIE1vZGVsPFxuXHRcdEluZmVyQXR0cmlidXRlczxNdWx0aUZhY3RvckF1dGhTZXR1cD4sXG5cdFx0SW5mZXJDcmVhdGlvbkF0dHJpYnV0ZXM8TXVsdGlGYWN0b3JBdXRoU2V0dXA+XG5cdD5cblx0aW1wbGVtZW50cyBNdWx0aUZhY3RvckF1dGhTZXR1cEF0dHJpYnV0ZXNcbntcblx0cHVibGljIG1mYUlkITogbnVtYmVyO1xuXHRwdWJsaWMgaWQhOiBzdHJpbmc7XG5cdHB1YmxpYyBtZXRob2QhOiAndG90cCcgfCAnZW1haWwnIHwgJ3l1YmljbycgfCAnZmlkbzInIHwgJ3Bhc3NrZXknO1xuXHRwdWJsaWMgc2VjcmV0Pzogc3RyaW5nIHwgbnVsbDtcblx0cHVibGljIHB1YmxpY0tleSE6IHN0cmluZyB8IG51bGw7XG5cdHB1YmxpYyBjb3VudGVyITogbnVtYmVyIHwgbnVsbDtcblx0cHVibGljIGlzQWN0aXZlITogYm9vbGVhbjtcblx0cHVibGljIGNyZWF0ZWRBdCE6IENyZWF0aW9uT3B0aW9uYWw8RGF0ZT47XG5cdHB1YmxpYyB1cGRhdGVkQXQhOiBDcmVhdGlvbk9wdGlvbmFsPERhdGU+O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNdWx0aUZhY3RvckF1dGhTZXR1cE1vZGVsKFxuXHRzZXF1ZWxpemU6IFNlcXVlbGl6ZSxcblx0bG9nZ2VyOiBMb2dnZXJcbik6IHR5cGVvZiBNdWx0aUZhY3RvckF1dGhTZXR1cCB7XG5cdHRyeSB7XG5cdFx0dmFsaWRhdGVEZXBlbmRlbmNpZXMoXG5cdFx0XHRbXG5cdFx0XHRcdHsgbmFtZTogJ3NlcXVlbGl6ZScsIGluc3RhbmNlOiBzZXF1ZWxpemUgfSxcblx0XHRcdFx0eyBuYW1lOiAnbG9nZ2VyJywgaW5zdGFuY2U6IGxvZ2dlciB9XG5cdFx0XHRdLFxuXHRcdFx0bG9nZ2VyIHx8IGNvbnNvbGVcblx0XHQpO1xuXG5cdFx0TXVsdGlGYWN0b3JBdXRoU2V0dXAuaW5pdChcblx0XHRcdHtcblx0XHRcdFx0bWZhSWQ6IHtcblx0XHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuSU5URUdFUixcblx0XHRcdFx0XHRhdXRvSW5jcmVtZW50OiB0cnVlLFxuXHRcdFx0XHRcdGFsbG93TnVsbDogZmFsc2UsXG5cdFx0XHRcdFx0dW5pcXVlOiB0cnVlXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGlkOiB7XG5cdFx0XHRcdFx0dHlwZTogRGF0YVR5cGVzLlVVSUQsXG5cdFx0XHRcdFx0ZGVmYXVsdFZhbHVlOiBEYXRhVHlwZXMuVVVJRFY0LFxuXHRcdFx0XHRcdGFsbG93TnVsbDogZmFsc2UsXG5cdFx0XHRcdFx0cHJpbWFyeUtleTogdHJ1ZSxcblx0XHRcdFx0XHR1bmlxdWU6IHRydWUsXG5cdFx0XHRcdFx0cmVmZXJlbmNlczoge1xuXHRcdFx0XHRcdFx0bW9kZWw6IFVzZXIsXG5cdFx0XHRcdFx0XHRrZXk6ICdpZCdcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdG1ldGhvZDoge1xuXHRcdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5FTlVNKFxuXHRcdFx0XHRcdFx0J3RvdHAnLFxuXHRcdFx0XHRcdFx0J2VtYWlsJyxcblx0XHRcdFx0XHRcdCd5dWJpY28nLFxuXHRcdFx0XHRcdFx0J2ZpZG8yJyxcblx0XHRcdFx0XHRcdCdwYXNza2V5J1xuXHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0YWxsb3dOdWxsOiBmYWxzZVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRzZWNyZXQ6IHtcblx0XHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuU1RSSU5HLFxuXHRcdFx0XHRcdGFsbG93TnVsbDogdHJ1ZVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRwdWJsaWNLZXk6IHtcblx0XHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuVEVYVCxcblx0XHRcdFx0XHRhbGxvd051bGw6IHRydWVcblx0XHRcdFx0fSxcblx0XHRcdFx0Y291bnRlcjoge1xuXHRcdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5JTlRFR0VSLFxuXHRcdFx0XHRcdGFsbG93TnVsbDogdHJ1ZVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRpc0FjdGl2ZToge1xuXHRcdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5CT09MRUFOLFxuXHRcdFx0XHRcdGRlZmF1bHRWYWx1ZTogZmFsc2UsXG5cdFx0XHRcdFx0YWxsb3dOdWxsOiBmYWxzZVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRjcmVhdGVkQXQ6IHtcblx0XHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuREFURSxcblx0XHRcdFx0XHRkZWZhdWx0VmFsdWU6IERhdGFUeXBlcy5OT1csXG5cdFx0XHRcdFx0YWxsb3dOdWxsOiBmYWxzZVxuXHRcdFx0XHR9LFxuXHRcdFx0XHR1cGRhdGVkQXQ6IHtcblx0XHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuREFURSxcblx0XHRcdFx0XHRkZWZhdWx0VmFsdWU6IERhdGFUeXBlcy5OT1csXG5cdFx0XHRcdFx0YWxsb3dOdWxsOiBmYWxzZVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzZXF1ZWxpemUsXG5cdFx0XHRcdG1vZGVsTmFtZTogJ011bHRpRmFjdG9yQXV0aFNldHVwJyxcblx0XHRcdFx0dGltZXN0YW1wczogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRyZXR1cm4gTXVsdGlGYWN0b3JBdXRoU2V0dXA7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cHJvY2Vzc0Vycm9yKGVycm9yLCBsb2dnZXIgfHwgY29uc29sZSk7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH1cbn1cblxuZXhwb3J0IHsgTXVsdGlGYWN0b3JBdXRoU2V0dXAgfTtcbiJdfQ==
