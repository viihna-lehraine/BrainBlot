import { Model, DataTypes } from 'sequelize';
import { validateDependencies } from '../utils/validateDependencies.mjs';
import { processError } from '../utils/processError.mjs';
import { User } from './User.mjs';
class GuestbookEntry extends Model {
	id;
	guestName;
	guestEmail;
	guestMessage;
	guestMessageStyles;
	entryDate;
}
export default function createGuestbookEntryModel(sequelize, logger) {
	try {
		validateDependencies(
			[
				{ name: 'sequelize', instance: sequelize },
				{ name: 'logger', instance: logger }
			],
			logger || console
		);
		GuestbookEntry.init(
			{
				id: {
					type: DataTypes.UUID,
					defaultValue: DataTypes.UUIDV4,
					primaryKey: true,
					allowNull: false,
					unique: true,
					references: {
						model: User,
						key: 'id'
					}
				},
				guestName: {
					type: DataTypes.STRING,
					allowNull: true,
					validate: {
						len: [0, 255]
					}
				},
				guestEmail: {
					type: DataTypes.STRING,
					allowNull: true,
					validate: {
						isEmail: true
					}
				},
				guestMessage: {
					type: DataTypes.TEXT,
					allowNull: false,
					validate: {
						notEmpty: true
					}
				},
				guestMessageStyles: {
					type: DataTypes.JSON,
					allowNull: true
				},
				entryDate: {
					type: DataTypes.DATE,
					defaultValue: DataTypes.NOW,
					allowNull: false
				}
			},
			{
				sequelize,
				modelName: 'GuestbookEntry',
				timestamps: true
			}
		);
		logger.info('GuestbookEntry model initialized successfully');
		return GuestbookEntry;
	} catch (error) {
		processError(error, logger || console);
		throw error;
	}
}
export { GuestbookEntry };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3Vlc3Rib29rRW50cnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9kZWxzL0d1ZXN0Ym9va0VudHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFJTixLQUFLLEVBQ0wsU0FBUyxFQUVULE1BQU0sV0FBVyxDQUFDO0FBQ25CLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUVyRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBVzlCLE1BQU0sY0FDTCxTQUFRLEtBR1A7SUFHTSxFQUFFLENBQVU7SUFDWixTQUFTLENBQWlCO0lBQzFCLFVBQVUsQ0FBaUI7SUFDM0IsWUFBWSxDQUFVO0lBQ3RCLGtCQUFrQixDQUFpQjtJQUNuQyxTQUFTLENBQTBCO0NBQzFDO0FBRUQsTUFBTSxDQUFDLE9BQU8sVUFBVSx5QkFBeUIsQ0FDaEQsU0FBb0IsRUFDcEIsTUFBYztJQUVkLElBQUksQ0FBQztRQUNKLG9CQUFvQixDQUNuQjtZQUNDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFO1lBQzFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO1NBQ3BDLEVBQ0QsTUFBTSxJQUFJLE9BQU8sQ0FDakIsQ0FBQztRQUVGLGNBQWMsQ0FBQyxJQUFJLENBQ2xCO1lBQ0MsRUFBRSxFQUFFO2dCQUNILElBQUksRUFBRSxTQUFTLENBQUMsSUFBSTtnQkFDcEIsWUFBWSxFQUFFLFNBQVMsQ0FBQyxNQUFNO2dCQUM5QixVQUFVLEVBQUUsSUFBSTtnQkFDaEIsU0FBUyxFQUFFLEtBQUs7Z0JBQ2hCLE1BQU0sRUFBRSxJQUFJO2dCQUNaLFVBQVUsRUFBRTtvQkFDWCxLQUFLLEVBQUUsSUFBSTtvQkFDWCxHQUFHLEVBQUUsSUFBSTtpQkFDVDthQUNEO1lBQ0QsU0FBUyxFQUFFO2dCQUNWLElBQUksRUFBRSxTQUFTLENBQUMsTUFBTTtnQkFDdEIsU0FBUyxFQUFFLElBQUk7Z0JBQ2YsUUFBUSxFQUFFO29CQUNULEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUM7aUJBQ2I7YUFDRDtZQUNELFVBQVUsRUFBRTtnQkFDWCxJQUFJLEVBQUUsU0FBUyxDQUFDLE1BQU07Z0JBQ3RCLFNBQVMsRUFBRSxJQUFJO2dCQUNmLFFBQVEsRUFBRTtvQkFDVCxPQUFPLEVBQUUsSUFBSTtpQkFDYjthQUNEO1lBQ0QsWUFBWSxFQUFFO2dCQUNiLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSTtnQkFDcEIsU0FBUyxFQUFFLEtBQUs7Z0JBQ2hCLFFBQVEsRUFBRTtvQkFDVCxRQUFRLEVBQUUsSUFBSTtpQkFDZDthQUNEO1lBQ0Qsa0JBQWtCLEVBQUU7Z0JBQ25CLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSTtnQkFDcEIsU0FBUyxFQUFFLElBQUk7YUFDZjtZQUNELFNBQVMsRUFBRTtnQkFDVixJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7Z0JBQ3BCLFlBQVksRUFBRSxTQUFTLENBQUMsR0FBRztnQkFDM0IsU0FBUyxFQUFFLEtBQUs7YUFDaEI7U0FDRCxFQUNEO1lBQ0MsU0FBUztZQUNULFNBQVMsRUFBRSxnQkFBZ0I7WUFDM0IsVUFBVSxFQUFFLElBQUk7U0FDaEIsQ0FDRCxDQUFDO1FBRUYsTUFBTSxDQUFDLElBQUksQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO1FBQzdELE9BQU8sY0FBYyxDQUFDO0lBQ3ZCLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sS0FBSyxDQUFDO0lBQ2IsQ0FBQztBQUNGLENBQUM7QUFFRCxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDcmVhdGlvbk9wdGlvbmFsLFxuXHRJbmZlckF0dHJpYnV0ZXMsXG5cdEluZmVyQ3JlYXRpb25BdHRyaWJ1dGVzLFxuXHRNb2RlbCxcblx0RGF0YVR5cGVzLFxuXHRTZXF1ZWxpemVcbn0gZnJvbSAnc2VxdWVsaXplJztcbmltcG9ydCB7IHZhbGlkYXRlRGVwZW5kZW5jaWVzIH0gZnJvbSAnLi4vdXRpbHMvdmFsaWRhdGVEZXBlbmRlbmNpZXMnO1xuaW1wb3J0IHsgcHJvY2Vzc0Vycm9yIH0gZnJvbSAnLi4vdXRpbHMvcHJvY2Vzc0Vycm9yJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL2NvbmZpZy9sb2dnZXInO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4vVXNlcic7XG5cbmludGVyZmFjZSBHdWVzdGJvb2tFbnRyeUF0dHJpYnV0ZXMge1xuXHRpZDogc3RyaW5nO1xuXHRndWVzdE5hbWU/OiBzdHJpbmcgfCBudWxsO1xuXHRndWVzdEVtYWlsPzogc3RyaW5nIHwgbnVsbDtcblx0Z3Vlc3RNZXNzYWdlOiBzdHJpbmc7XG5cdGd1ZXN0TWVzc2FnZVN0eWxlcz86IG9iamVjdCB8IG51bGw7XG5cdGVudHJ5RGF0ZTogRGF0ZTtcbn1cblxuY2xhc3MgR3Vlc3Rib29rRW50cnlcblx0ZXh0ZW5kcyBNb2RlbDxcblx0XHRJbmZlckF0dHJpYnV0ZXM8R3Vlc3Rib29rRW50cnk+LFxuXHRcdEluZmVyQ3JlYXRpb25BdHRyaWJ1dGVzPEd1ZXN0Ym9va0VudHJ5PlxuXHQ+XG5cdGltcGxlbWVudHMgR3Vlc3Rib29rRW50cnlBdHRyaWJ1dGVzXG57XG5cdHB1YmxpYyBpZCE6IHN0cmluZztcblx0cHVibGljIGd1ZXN0TmFtZSE6IHN0cmluZyB8IG51bGw7XG5cdHB1YmxpYyBndWVzdEVtYWlsITogc3RyaW5nIHwgbnVsbDtcblx0cHVibGljIGd1ZXN0TWVzc2FnZSE6IHN0cmluZztcblx0cHVibGljIGd1ZXN0TWVzc2FnZVN0eWxlcyE6IG9iamVjdCB8IG51bGw7XG5cdHB1YmxpYyBlbnRyeURhdGUhOiBDcmVhdGlvbk9wdGlvbmFsPERhdGU+O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVHdWVzdGJvb2tFbnRyeU1vZGVsKFxuXHRzZXF1ZWxpemU6IFNlcXVlbGl6ZSxcblx0bG9nZ2VyOiBMb2dnZXJcbik6IHR5cGVvZiBHdWVzdGJvb2tFbnRyeSB7XG5cdHRyeSB7XG5cdFx0dmFsaWRhdGVEZXBlbmRlbmNpZXMoXG5cdFx0XHRbXG5cdFx0XHRcdHsgbmFtZTogJ3NlcXVlbGl6ZScsIGluc3RhbmNlOiBzZXF1ZWxpemUgfSxcblx0XHRcdFx0eyBuYW1lOiAnbG9nZ2VyJywgaW5zdGFuY2U6IGxvZ2dlciB9XG5cdFx0XHRdLFxuXHRcdFx0bG9nZ2VyIHx8IGNvbnNvbGVcblx0XHQpO1xuXG5cdFx0R3Vlc3Rib29rRW50cnkuaW5pdChcblx0XHRcdHtcblx0XHRcdFx0aWQ6IHtcblx0XHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuVVVJRCxcblx0XHRcdFx0XHRkZWZhdWx0VmFsdWU6IERhdGFUeXBlcy5VVUlEVjQsXG5cdFx0XHRcdFx0cHJpbWFyeUtleTogdHJ1ZSxcblx0XHRcdFx0XHRhbGxvd051bGw6IGZhbHNlLFxuXHRcdFx0XHRcdHVuaXF1ZTogdHJ1ZSxcblx0XHRcdFx0XHRyZWZlcmVuY2VzOiB7XG5cdFx0XHRcdFx0XHRtb2RlbDogVXNlcixcblx0XHRcdFx0XHRcdGtleTogJ2lkJ1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0Z3Vlc3ROYW1lOiB7XG5cdFx0XHRcdFx0dHlwZTogRGF0YVR5cGVzLlNUUklORyxcblx0XHRcdFx0XHRhbGxvd051bGw6IHRydWUsXG5cdFx0XHRcdFx0dmFsaWRhdGU6IHtcblx0XHRcdFx0XHRcdGxlbjogWzAsIDI1NV1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGd1ZXN0RW1haWw6IHtcblx0XHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuU1RSSU5HLFxuXHRcdFx0XHRcdGFsbG93TnVsbDogdHJ1ZSxcblx0XHRcdFx0XHR2YWxpZGF0ZToge1xuXHRcdFx0XHRcdFx0aXNFbWFpbDogdHJ1ZVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0Z3Vlc3RNZXNzYWdlOiB7XG5cdFx0XHRcdFx0dHlwZTogRGF0YVR5cGVzLlRFWFQsXG5cdFx0XHRcdFx0YWxsb3dOdWxsOiBmYWxzZSxcblx0XHRcdFx0XHR2YWxpZGF0ZToge1xuXHRcdFx0XHRcdFx0bm90RW1wdHk6IHRydWVcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGd1ZXN0TWVzc2FnZVN0eWxlczoge1xuXHRcdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5KU09OLFxuXHRcdFx0XHRcdGFsbG93TnVsbDogdHJ1ZVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRlbnRyeURhdGU6IHtcblx0XHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuREFURSxcblx0XHRcdFx0XHRkZWZhdWx0VmFsdWU6IERhdGFUeXBlcy5OT1csXG5cdFx0XHRcdFx0YWxsb3dOdWxsOiBmYWxzZVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzZXF1ZWxpemUsXG5cdFx0XHRcdG1vZGVsTmFtZTogJ0d1ZXN0Ym9va0VudHJ5Jyxcblx0XHRcdFx0dGltZXN0YW1wczogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRsb2dnZXIuaW5mbygnR3Vlc3Rib29rRW50cnkgbW9kZWwgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG5cdFx0cmV0dXJuIEd1ZXN0Ym9va0VudHJ5O1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdHByb2Nlc3NFcnJvcihlcnJvciwgbG9nZ2VyIHx8IGNvbnNvbGUpO1xuXHRcdHRocm93IGVycm9yO1xuXHR9XG59XG5cbmV4cG9ydCB7IEd1ZXN0Ym9va0VudHJ5IH07XG4iXX0=
