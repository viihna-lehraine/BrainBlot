import argon2 from 'argon2';
import { Model } from 'sequelize';
import { v4 as uuidv4 } from 'uuid';
import getSecrets from '../config/secrets.js';
class User extends Model {
	id;
	userid;
	username;
	password;
	email;
	isAccountVerified;
	resetPasswordToken;
	resetPasswordExpires;
	isMfaEnabled;
	creationDate;
	// Method to compare passwords
	async comparePassword(password) {
		const secrets = await getSecrets();
		return argon2.verify(this.password, password + secrets.PEPPER);
	}
	// Static method to validate passwords
	static validatePassword(password) {
		const isValidLength = password.length >= 8 && password.length <= 128;
		const hasUpperCase = /[A-Z]/.test(password);
		const hasLowerCase = /[a-z]/.test(password);
		const hasNumber = /\d/.test(password);
		const hasSpecial = /[^\dA-Za-z]/.test(password);
		return (
			isValidLength &&
			hasUpperCase &&
			hasLowerCase &&
			hasNumber &&
			hasSpecial
		);
	}
	// Static method to create a new user
	static async createUser(username, password, email) {
		const isValidPassword = User.validatePassword(password);
		if (!isValidPassword) {
			throw new Error(
				'Password does not meet the security requirements.'
			);
		}
		const newUser = await User.create({
			id: uuidv4(),
			username,
			password,
			email,
			isAccountVerified: false,
			resetPasswordToken: null, // Set to null initially
			resetPasswordExpires: null, // Set to null initially
			isMfaEnabled: false,
			creationDate: new Date()
		});
		return newUser;
	}
}
export default User;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvVXNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxFQUE0QyxLQUFLLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDNUUsT0FBTyxFQUFFLEVBQUUsSUFBSSxNQUFNLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEMsT0FBTyxVQUFVLE1BQU0sbUJBQW1CLENBQUM7QUFlM0MsTUFBTSxJQUNMLFNBQVEsS0FBMkQ7SUFHbkUsRUFBRSxDQUFVO0lBQ1osTUFBTSxDQUFVO0lBQ2hCLFFBQVEsQ0FBVTtJQUNsQixRQUFRLENBQVU7SUFDbEIsS0FBSyxDQUFVO0lBQ2YsaUJBQWlCLENBQVc7SUFDNUIsa0JBQWtCLENBQWlCO0lBQ25DLG9CQUFvQixDQUFlO0lBQ25DLFlBQVksQ0FBVztJQUN2QixZQUFZLENBQVE7SUFFcEIsOEJBQThCO0lBQzlCLEtBQUssQ0FBQyxlQUFlLENBQUMsUUFBZ0I7UUFDckMsTUFBTSxPQUFPLEdBQUcsTUFBTSxVQUFVLEVBQUUsQ0FBQztRQUNuQyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxzQ0FBc0M7SUFDdEMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFFBQWdCO1FBQ3ZDLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLFFBQVEsQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDO1FBQ3JFLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDNUMsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM1QyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFaEQsT0FBTyxDQUNOLGFBQWE7WUFDYixZQUFZO1lBQ1osWUFBWTtZQUNaLFNBQVM7WUFDVCxVQUFVLENBQ1YsQ0FBQztJQUNILENBQUM7SUFFRCxxQ0FBcUM7SUFDckMsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQ3RCLFFBQWdCLEVBQ2hCLFFBQWdCLEVBQ2hCLEtBQWE7UUFFYixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQ2QsbURBQW1ELENBQ25ELENBQUM7UUFDSCxDQUFDO1FBRUQsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ2pDLEVBQUUsRUFBRSxNQUFNLEVBQUU7WUFDWixRQUFRO1lBQ1IsUUFBUTtZQUNSLEtBQUs7WUFDTCxpQkFBaUIsRUFBRSxLQUFLO1lBQ3hCLGtCQUFrQixFQUFFLElBQUksRUFBRSx3QkFBd0I7WUFDbEQsb0JBQW9CLEVBQUUsSUFBSSxFQUFFLHdCQUF3QjtZQUNwRCxZQUFZLEVBQUUsS0FBSztZQUNuQixZQUFZLEVBQUUsSUFBSSxJQUFJLEVBQUU7U0FDeEIsQ0FBQyxDQUFDO1FBRUgsT0FBTyxPQUFPLENBQUM7SUFDaEIsQ0FBQztDQUNEO0FBRUQsZUFBZSxJQUFJLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXJnb24yIGZyb20gJ2FyZ29uMic7XG5pbXBvcnQgeyBJbmZlckF0dHJpYnV0ZXMsIEluZmVyQ3JlYXRpb25BdHRyaWJ1dGVzLCBNb2RlbCB9IGZyb20gJ3NlcXVlbGl6ZSc7XG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJztcbmltcG9ydCBnZXRTZWNyZXRzIGZyb20gJy4uL2NvbmZpZy9zZWNyZXRzJztcblxuaW50ZXJmYWNlIFVzZXJBdHRyaWJ1dGVzIHtcblx0aWQ6IHN0cmluZztcblx0dXNlcmlkPzogbnVtYmVyO1xuXHR1c2VybmFtZTogc3RyaW5nO1xuXHRwYXNzd29yZDogc3RyaW5nO1xuXHRlbWFpbDogc3RyaW5nO1xuXHRpc0FjY291bnRWZXJpZmllZDogYm9vbGVhbjtcblx0cmVzZXRQYXNzd29yZFRva2VuPzogc3RyaW5nIHwgbnVsbDtcblx0cmVzZXRQYXNzd29yZEV4cGlyZXM/OiBEYXRlIHwgbnVsbDtcblx0aXNNZmFFbmFibGVkOiBib29sZWFuO1xuXHRjcmVhdGlvbkRhdGU6IERhdGU7XG59XG5cbmNsYXNzIFVzZXJcblx0ZXh0ZW5kcyBNb2RlbDxJbmZlckF0dHJpYnV0ZXM8VXNlcj4sIEluZmVyQ3JlYXRpb25BdHRyaWJ1dGVzPFVzZXI+PlxuXHRpbXBsZW1lbnRzIFVzZXJBdHRyaWJ1dGVzXG57XG5cdGlkITogc3RyaW5nO1xuXHR1c2VyaWQ/OiBudW1iZXI7XG5cdHVzZXJuYW1lITogc3RyaW5nO1xuXHRwYXNzd29yZCE6IHN0cmluZztcblx0ZW1haWwhOiBzdHJpbmc7XG5cdGlzQWNjb3VudFZlcmlmaWVkITogYm9vbGVhbjtcblx0cmVzZXRQYXNzd29yZFRva2VuITogc3RyaW5nIHwgbnVsbDtcblx0cmVzZXRQYXNzd29yZEV4cGlyZXMhOiBEYXRlIHwgbnVsbDtcblx0aXNNZmFFbmFibGVkITogYm9vbGVhbjtcblx0Y3JlYXRpb25EYXRlITogRGF0ZTtcblxuXHQvLyBNZXRob2QgdG8gY29tcGFyZSBwYXNzd29yZHNcblx0YXN5bmMgY29tcGFyZVBhc3N3b3JkKHBhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcblx0XHRjb25zdCBzZWNyZXRzID0gYXdhaXQgZ2V0U2VjcmV0cygpO1xuXHRcdHJldHVybiBhcmdvbjIudmVyaWZ5KHRoaXMucGFzc3dvcmQsIHBhc3N3b3JkICsgc2VjcmV0cy5QRVBQRVIpO1xuXHR9XG5cblx0Ly8gU3RhdGljIG1ldGhvZCB0byB2YWxpZGF0ZSBwYXNzd29yZHNcblx0c3RhdGljIHZhbGlkYXRlUGFzc3dvcmQocGFzc3dvcmQ6IHN0cmluZyk6IGJvb2xlYW4ge1xuXHRcdGNvbnN0IGlzVmFsaWRMZW5ndGggPSBwYXNzd29yZC5sZW5ndGggPj0gOCAmJiBwYXNzd29yZC5sZW5ndGggPD0gMTI4O1xuXHRcdGNvbnN0IGhhc1VwcGVyQ2FzZSA9IC9bQS1aXS8udGVzdChwYXNzd29yZCk7XG5cdFx0Y29uc3QgaGFzTG93ZXJDYXNlID0gL1thLXpdLy50ZXN0KHBhc3N3b3JkKTtcblx0XHRjb25zdCBoYXNOdW1iZXIgPSAvXFxkLy50ZXN0KHBhc3N3b3JkKTtcblx0XHRjb25zdCBoYXNTcGVjaWFsID0gL1teXFxkQS1aYS16XS8udGVzdChwYXNzd29yZCk7XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0aXNWYWxpZExlbmd0aCAmJlxuXHRcdFx0aGFzVXBwZXJDYXNlICYmXG5cdFx0XHRoYXNMb3dlckNhc2UgJiZcblx0XHRcdGhhc051bWJlciAmJlxuXHRcdFx0aGFzU3BlY2lhbFxuXHRcdCk7XG5cdH1cblxuXHQvLyBTdGF0aWMgbWV0aG9kIHRvIGNyZWF0ZSBhIG5ldyB1c2VyXG5cdHN0YXRpYyBhc3luYyBjcmVhdGVVc2VyKFxuXHRcdHVzZXJuYW1lOiBzdHJpbmcsXG5cdFx0cGFzc3dvcmQ6IHN0cmluZyxcblx0XHRlbWFpbDogc3RyaW5nXG5cdCk6IFByb21pc2U8VXNlcj4ge1xuXHRcdGNvbnN0IGlzVmFsaWRQYXNzd29yZCA9IFVzZXIudmFsaWRhdGVQYXNzd29yZChwYXNzd29yZCk7XG5cdFx0aWYgKCFpc1ZhbGlkUGFzc3dvcmQpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0J1Bhc3N3b3JkIGRvZXMgbm90IG1lZXQgdGhlIHNlY3VyaXR5IHJlcXVpcmVtZW50cy4nXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdGNvbnN0IG5ld1VzZXIgPSBhd2FpdCBVc2VyLmNyZWF0ZSh7XG5cdFx0XHRpZDogdXVpZHY0KCksXG5cdFx0XHR1c2VybmFtZSxcblx0XHRcdHBhc3N3b3JkLFxuXHRcdFx0ZW1haWwsXG5cdFx0XHRpc0FjY291bnRWZXJpZmllZDogZmFsc2UsXG5cdFx0XHRyZXNldFBhc3N3b3JkVG9rZW46IG51bGwsIC8vIFNldCB0byBudWxsIGluaXRpYWxseVxuXHRcdFx0cmVzZXRQYXNzd29yZEV4cGlyZXM6IG51bGwsIC8vIFNldCB0byBudWxsIGluaXRpYWxseVxuXHRcdFx0aXNNZmFFbmFibGVkOiBmYWxzZSxcblx0XHRcdGNyZWF0aW9uRGF0ZTogbmV3IERhdGUoKVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIG5ld1VzZXI7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVXNlcjtcbiJdfQ==
