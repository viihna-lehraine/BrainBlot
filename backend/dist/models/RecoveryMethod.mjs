import { DataTypes, Model } from 'sequelize';
import { User } from './User.mjs';
import { validateDependencies } from '../utils/helpers.mjs';
import { ServiceFactory } from '../index/factory/ServiceFactory.mjs';
export class RecoveryMethod extends Model {
	id;
	isRecoveryActive;
	recoveryId;
	recoveryMethod;
	backupCodes;
	recoveryLastUpdated;
}
export async function createRecoveryMethodModel() {
	const logger = await ServiceFactory.getLoggerService();
	const errorLogger = await ServiceFactory.getErrorLoggerService();
	const errorHandler = await ServiceFactory.getErrorHandlerService();
	try {
		const databaseController = await ServiceFactory.getDatabaseController();
		const sequelize = databaseController.getSequelizeInstance();
		if (!sequelize) {
			const databaseError =
				new errorHandler.ErrorClasses.DatabaseErrorRecoverable(
					'Failed to initialize RecoveryMethod model: Sequelize instance not found',
					{ exposeToClient: false }
				);
			errorLogger.logError(databaseError.message);
			errorHandler.handleError({ error: databaseError });
			return null;
		}
		validateDependencies(
			[{ name: 'sequelize', instance: sequelize }],
			logger || console
		);
		RecoveryMethod.init(
			{
				id: {
					type: DataTypes.UUID,
					defaultValue: DataTypes.UUIDV4,
					primaryKey: true,
					allowNull: false,
					unique: true,
					references: {
						model: User,
						key: 'id'
					}
				},
				isRecoveryActive: {
					type: DataTypes.BOOLEAN,
					defaultValue: false,
					allowNull: false
				},
				recoveryId: {
					type: DataTypes.UUID,
					defaultValue: DataTypes.UUIDV4,
					primaryKey: true,
					allowNull: false,
					unique: true
				},
				recoveryMethod: {
					type: DataTypes.ENUM('email', 'backupCodes'),
					allowNull: true
				},
				backupCodes: {
					type: DataTypes.ARRAY(DataTypes.STRING),
					allowNull: true
				},
				recoveryLastUpdated: {
					type: DataTypes.DATE,
					defaultValue: DataTypes.NOW,
					allowNull: false
				}
			},
			{
				sequelize,
				modelName: 'RecoveryMethod',
				timestamps: true
			}
		);
		return RecoveryMethod;
	} catch (dbError) {
		const databaseError =
			new errorHandler.ErrorClasses.DatabaseErrorRecoverable(
				`Failed to initialize RecoveryMethod model: ${dbError instanceof Error ? dbError.message : 'Unknown error'}`,
				{
					exposeToClient: false
				}
			);
		errorLogger.logError(databaseError.message);
		errorHandler.handleError({ error: databaseError });
		return null;
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVjb3ZlcnlNZXRob2QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9kZWxzL1JlY292ZXJ5TWV0aG9kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTixTQUFTLEVBR1QsS0FBSyxFQUNMLE1BQU0sV0FBVyxDQUFDO0FBQ25CLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDOUIsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBR2pFLE1BQU0sT0FBTyxjQUNaLFNBQVEsS0FHUDtJQUdNLEVBQUUsQ0FBVTtJQUNaLGdCQUFnQixDQUFXO0lBQzNCLFVBQVUsQ0FBVTtJQUNwQixjQUFjLENBQWtDO0lBQ2hELFdBQVcsQ0FBbUI7SUFDOUIsbUJBQW1CLENBQTBCO0NBQ3BEO0FBRUQsTUFBTSxDQUFDLEtBQUssVUFBVSx5QkFBeUI7SUFHOUMsTUFBTSxNQUFNLEdBQUcsTUFBTSxjQUFjLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUN2RCxNQUFNLFdBQVcsR0FBRyxNQUFNLGNBQWMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBQ2pFLE1BQU0sWUFBWSxHQUFHLE1BQU0sY0FBYyxDQUFDLHNCQUFzQixFQUFFLENBQUM7SUFFbkUsSUFBSSxDQUFDO1FBQ0osTUFBTSxrQkFBa0IsR0FBRyxNQUFNLGNBQWMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQ3hFLE1BQU0sU0FBUyxHQUFHLGtCQUFrQixDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFFNUQsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ2hCLE1BQU0sYUFBYSxHQUNsQixJQUFJLFlBQVksQ0FBQyxZQUFZLENBQUMsd0JBQXdCLENBQ3JELHlFQUF5RSxFQUN6RSxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsQ0FDekIsQ0FBQztZQUNILFdBQVcsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzVDLFlBQVksQ0FBQyxXQUFXLENBQUMsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQztZQUNuRCxPQUFPLElBQUksQ0FBQztRQUNiLENBQUM7UUFFRCxvQkFBb0IsQ0FDbkIsQ0FBQyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQzVDLE1BQU0sSUFBSSxPQUFPLENBQ2pCLENBQUM7UUFFRixjQUFjLENBQUMsSUFBSSxDQUNsQjtZQUNDLEVBQUUsRUFBRTtnQkFDSCxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7Z0JBQ3BCLFlBQVksRUFBRSxTQUFTLENBQUMsTUFBTTtnQkFDOUIsVUFBVSxFQUFFLElBQUk7Z0JBQ2hCLFNBQVMsRUFBRSxLQUFLO2dCQUNoQixNQUFNLEVBQUUsSUFBSTtnQkFDWixVQUFVLEVBQUU7b0JBQ1gsS0FBSyxFQUFFLElBQUk7b0JBQ1gsR0FBRyxFQUFFLElBQUk7aUJBQ1Q7YUFDRDtZQUNELGdCQUFnQixFQUFFO2dCQUNqQixJQUFJLEVBQUUsU0FBUyxDQUFDLE9BQU87Z0JBQ3ZCLFlBQVksRUFBRSxLQUFLO2dCQUNuQixTQUFTLEVBQUUsS0FBSzthQUNoQjtZQUNELFVBQVUsRUFBRTtnQkFDWCxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7Z0JBQ3BCLFlBQVksRUFBRSxTQUFTLENBQUMsTUFBTTtnQkFDOUIsVUFBVSxFQUFFLElBQUk7Z0JBQ2hCLFNBQVMsRUFBRSxLQUFLO2dCQUNoQixNQUFNLEVBQUUsSUFBSTthQUNaO1lBQ0QsY0FBYyxFQUFFO2dCQUNmLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUM7Z0JBQzVDLFNBQVMsRUFBRSxJQUFJO2FBQ2Y7WUFDRCxXQUFXLEVBQUU7Z0JBQ1osSUFBSSxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztnQkFDdkMsU0FBUyxFQUFFLElBQUk7YUFDZjtZQUNELG1CQUFtQixFQUFFO2dCQUNwQixJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUk7Z0JBQ3BCLFlBQVksRUFBRSxTQUFTLENBQUMsR0FBRztnQkFDM0IsU0FBUyxFQUFFLEtBQUs7YUFDaEI7U0FDRCxFQUNEO1lBQ0MsU0FBUztZQUNULFNBQVMsRUFBRSxnQkFBZ0I7WUFDM0IsVUFBVSxFQUFFLElBQUk7U0FDaEIsQ0FDRCxDQUFDO1FBRUYsT0FBTyxjQUFjLENBQUM7SUFDdkIsQ0FBQztJQUFDLE9BQU8sT0FBTyxFQUFFLENBQUM7UUFDbEIsTUFBTSxhQUFhLEdBQ2xCLElBQUksWUFBWSxDQUFDLFlBQVksQ0FBQyx3QkFBd0IsQ0FDckQsOENBQThDLE9BQU8sWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGVBQWUsRUFBRSxFQUM1RztZQUNDLGNBQWMsRUFBRSxLQUFLO1NBQ3JCLENBQ0QsQ0FBQztRQUNILFdBQVcsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVDLFlBQVksQ0FBQyxXQUFXLENBQUMsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQztRQUNuRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7QUFDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Q3JlYXRpb25PcHRpb25hbCxcblx0RGF0YVR5cGVzLFxuXHRJbmZlckF0dHJpYnV0ZXMsXG5cdEluZmVyQ3JlYXRpb25BdHRyaWJ1dGVzLFxuXHRNb2RlbFxufSBmcm9tICdzZXF1ZWxpemUnO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4vVXNlcic7XG5pbXBvcnQgeyB2YWxpZGF0ZURlcGVuZGVuY2llcyB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IHsgU2VydmljZUZhY3RvcnkgfSBmcm9tICcuLi9pbmRleC9mYWN0b3J5L1NlcnZpY2VGYWN0b3J5JztcbmltcG9ydCB7IFJlY292ZXJ5TWV0aG9kQXR0cmlidXRlcyB9IGZyb20gJy4uL2luZGV4L2ludGVyZmFjZXMvbW9kZWxzJztcblxuZXhwb3J0IGNsYXNzIFJlY292ZXJ5TWV0aG9kXG5cdGV4dGVuZHMgTW9kZWw8XG5cdFx0SW5mZXJBdHRyaWJ1dGVzPFJlY292ZXJ5TWV0aG9kPixcblx0XHRJbmZlckNyZWF0aW9uQXR0cmlidXRlczxSZWNvdmVyeU1ldGhvZD5cblx0PlxuXHRpbXBsZW1lbnRzIFJlY292ZXJ5TWV0aG9kQXR0cmlidXRlc1xue1xuXHRwdWJsaWMgaWQhOiBzdHJpbmc7XG5cdHB1YmxpYyBpc1JlY292ZXJ5QWN0aXZlITogYm9vbGVhbjtcblx0cHVibGljIHJlY292ZXJ5SWQhOiBzdHJpbmc7XG5cdHB1YmxpYyByZWNvdmVyeU1ldGhvZD86ICdlbWFpbCcgfCAnYmFja3VwQ29kZXMnIHwgbnVsbDtcblx0cHVibGljIGJhY2t1cENvZGVzITogc3RyaW5nW10gfCBudWxsO1xuXHRwdWJsaWMgcmVjb3ZlcnlMYXN0VXBkYXRlZCE6IENyZWF0aW9uT3B0aW9uYWw8RGF0ZT47XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVSZWNvdmVyeU1ldGhvZE1vZGVsKCk6IFByb21pc2U8XG5cdHR5cGVvZiBSZWNvdmVyeU1ldGhvZCB8IG51bGxcbj4ge1xuXHRjb25zdCBsb2dnZXIgPSBhd2FpdCBTZXJ2aWNlRmFjdG9yeS5nZXRMb2dnZXJTZXJ2aWNlKCk7XG5cdGNvbnN0IGVycm9yTG9nZ2VyID0gYXdhaXQgU2VydmljZUZhY3RvcnkuZ2V0RXJyb3JMb2dnZXJTZXJ2aWNlKCk7XG5cdGNvbnN0IGVycm9ySGFuZGxlciA9IGF3YWl0IFNlcnZpY2VGYWN0b3J5LmdldEVycm9ySGFuZGxlclNlcnZpY2UoKTtcblxuXHR0cnkge1xuXHRcdGNvbnN0IGRhdGFiYXNlQ29udHJvbGxlciA9IGF3YWl0IFNlcnZpY2VGYWN0b3J5LmdldERhdGFiYXNlQ29udHJvbGxlcigpO1xuXHRcdGNvbnN0IHNlcXVlbGl6ZSA9IGRhdGFiYXNlQ29udHJvbGxlci5nZXRTZXF1ZWxpemVJbnN0YW5jZSgpO1xuXG5cdFx0aWYgKCFzZXF1ZWxpemUpIHtcblx0XHRcdGNvbnN0IGRhdGFiYXNlRXJyb3IgPVxuXHRcdFx0XHRuZXcgZXJyb3JIYW5kbGVyLkVycm9yQ2xhc3Nlcy5EYXRhYmFzZUVycm9yUmVjb3ZlcmFibGUoXG5cdFx0XHRcdFx0J0ZhaWxlZCB0byBpbml0aWFsaXplIFJlY292ZXJ5TWV0aG9kIG1vZGVsOiBTZXF1ZWxpemUgaW5zdGFuY2Ugbm90IGZvdW5kJyxcblx0XHRcdFx0XHR7IGV4cG9zZVRvQ2xpZW50OiBmYWxzZSB9XG5cdFx0XHRcdCk7XG5cdFx0XHRlcnJvckxvZ2dlci5sb2dFcnJvcihkYXRhYmFzZUVycm9yLm1lc3NhZ2UpO1xuXHRcdFx0ZXJyb3JIYW5kbGVyLmhhbmRsZUVycm9yKHsgZXJyb3I6IGRhdGFiYXNlRXJyb3IgfSk7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHR2YWxpZGF0ZURlcGVuZGVuY2llcyhcblx0XHRcdFt7IG5hbWU6ICdzZXF1ZWxpemUnLCBpbnN0YW5jZTogc2VxdWVsaXplIH1dLFxuXHRcdFx0bG9nZ2VyIHx8IGNvbnNvbGVcblx0XHQpO1xuXG5cdFx0UmVjb3ZlcnlNZXRob2QuaW5pdChcblx0XHRcdHtcblx0XHRcdFx0aWQ6IHtcblx0XHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuVVVJRCxcblx0XHRcdFx0XHRkZWZhdWx0VmFsdWU6IERhdGFUeXBlcy5VVUlEVjQsXG5cdFx0XHRcdFx0cHJpbWFyeUtleTogdHJ1ZSxcblx0XHRcdFx0XHRhbGxvd051bGw6IGZhbHNlLFxuXHRcdFx0XHRcdHVuaXF1ZTogdHJ1ZSxcblx0XHRcdFx0XHRyZWZlcmVuY2VzOiB7XG5cdFx0XHRcdFx0XHRtb2RlbDogVXNlcixcblx0XHRcdFx0XHRcdGtleTogJ2lkJ1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblx0XHRcdFx0aXNSZWNvdmVyeUFjdGl2ZToge1xuXHRcdFx0XHRcdHR5cGU6IERhdGFUeXBlcy5CT09MRUFOLFxuXHRcdFx0XHRcdGRlZmF1bHRWYWx1ZTogZmFsc2UsXG5cdFx0XHRcdFx0YWxsb3dOdWxsOiBmYWxzZVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRyZWNvdmVyeUlkOiB7XG5cdFx0XHRcdFx0dHlwZTogRGF0YVR5cGVzLlVVSUQsXG5cdFx0XHRcdFx0ZGVmYXVsdFZhbHVlOiBEYXRhVHlwZXMuVVVJRFY0LFxuXHRcdFx0XHRcdHByaW1hcnlLZXk6IHRydWUsXG5cdFx0XHRcdFx0YWxsb3dOdWxsOiBmYWxzZSxcblx0XHRcdFx0XHR1bmlxdWU6IHRydWVcblx0XHRcdFx0fSxcblx0XHRcdFx0cmVjb3ZlcnlNZXRob2Q6IHtcblx0XHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuRU5VTSgnZW1haWwnLCAnYmFja3VwQ29kZXMnKSxcblx0XHRcdFx0XHRhbGxvd051bGw6IHRydWVcblx0XHRcdFx0fSxcblx0XHRcdFx0YmFja3VwQ29kZXM6IHtcblx0XHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuQVJSQVkoRGF0YVR5cGVzLlNUUklORyksXG5cdFx0XHRcdFx0YWxsb3dOdWxsOiB0cnVlXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHJlY292ZXJ5TGFzdFVwZGF0ZWQ6IHtcblx0XHRcdFx0XHR0eXBlOiBEYXRhVHlwZXMuREFURSxcblx0XHRcdFx0XHRkZWZhdWx0VmFsdWU6IERhdGFUeXBlcy5OT1csXG5cdFx0XHRcdFx0YWxsb3dOdWxsOiBmYWxzZVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzZXF1ZWxpemUsXG5cdFx0XHRcdG1vZGVsTmFtZTogJ1JlY292ZXJ5TWV0aG9kJyxcblx0XHRcdFx0dGltZXN0YW1wczogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRyZXR1cm4gUmVjb3ZlcnlNZXRob2Q7XG5cdH0gY2F0Y2ggKGRiRXJyb3IpIHtcblx0XHRjb25zdCBkYXRhYmFzZUVycm9yID1cblx0XHRcdG5ldyBlcnJvckhhbmRsZXIuRXJyb3JDbGFzc2VzLkRhdGFiYXNlRXJyb3JSZWNvdmVyYWJsZShcblx0XHRcdFx0YEZhaWxlZCB0byBpbml0aWFsaXplIFJlY292ZXJ5TWV0aG9kIG1vZGVsOiAke2RiRXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGRiRXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ31gLFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0ZXhwb3NlVG9DbGllbnQ6IGZhbHNlXG5cdFx0XHRcdH1cblx0XHRcdCk7XG5cdFx0ZXJyb3JMb2dnZXIubG9nRXJyb3IoZGF0YWJhc2VFcnJvci5tZXNzYWdlKTtcblx0XHRlcnJvckhhbmRsZXIuaGFuZGxlRXJyb3IoeyBlcnJvcjogZGF0YWJhc2VFcnJvciB9KTtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxufVxuIl19
