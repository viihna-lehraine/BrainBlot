import process from 'process';
import { login } from './admin.mjs';
import { ServiceFactory } from './index/factory/ServiceFactory.mjs';
import { VaultService } from './services/Vault.mjs';
let logger;
async function start() {
	try {
		return login()
			.then(async ({ encryptionKey, gpgPassphrase, adminId }) => {
				if (!encryptionKey || !gpgPassphrase || !adminId) {
					throw new Error(
						'Keys or Admin ID not found. Shutting down...'
					);
				}
				const logger = await ServiceFactory.getLoggerService();
				const errorLogger =
					await ServiceFactory.getErrorLoggerService();
				logger.setAdminId(adminId);
				const errorHandler =
					await ServiceFactory.getErrorHandlerService();
				logger.setErrorHandler(errorHandler);
				const envConfig = await ServiceFactory.getEnvConfigService();
				const vault = await VaultService.initialize(
					encryptionKey,
					gpgPassphrase
				);
				setInterval(
					() => vault.clearExpiredSecretsFromMemory(),
					envConfig.getEnvVariable('clearExpiredSecretsInterval')
				);
				setInterval(
					() => vault.batchClearSecrets(),
					envConfig.getEnvVariable('batchReEncryptSecretsInterval')
				);
				logger.info(
					'Secrets store initialized. READY TO ROCK AND ROLL!!!'
				);
				return { envConfig, errorLogger, errorHandler, logger, vault };
			})
			.then(async () => {
				const middlewareStatusService =
					await ServiceFactory.getMiddlewareStatusService();
				return middlewareStatusService;
			})
			.then(async () => {
				const rootMiddleware =
					await ServiceFactory.getRootMiddlewareService();
				rootMiddleware.initialize();
				return rootMiddleware;
			})
			.then(async () => {
				const databaseController =
					await ServiceFactory.getDatabaseController();
				databaseController.initialize();
				return databaseController;
			})
			.then(async () => {
				const [cacheService, redisService] = await Promise.all([
					ServiceFactory.getCacheService(),
					ServiceFactory.getRedisService()
				]);
				return { cacheService, redisService };
			})
			.then(async () => {
				const gatekeeper = await ServiceFactory.getGatekeeperService();
				return gatekeeper.initialize();
			})
			.then(async () => {
				const accessControl =
					await ServiceFactory.getAccessControlMiddlewareService();
				return accessControl;
			})
			.then(async () => {
				const baseRouter = await ServiceFactory.getBaseRouter();
				return baseRouter;
			})
			.then(async () => {
				const userController = await ServiceFactory.getUserController();
				return userController;
			})
			.then(async () => {
				const authController = await ServiceFactory.getAuthController();
				return authController;
			})
			.then(async () => {
				const [
					backupCodeService,
					emailMFAService,
					fido2Service,
					jwtService,
					passwordService,
					totpService,
					yubicoOTPService
				] = await Promise.all([
					ServiceFactory.getBackupCodeService(),
					ServiceFactory.getEmailMFAService(),
					ServiceFactory.getFIDO2Service(),
					ServiceFactory.getJWTService(),
					ServiceFactory.getPasswordService(),
					ServiceFactory.getTOTPService(),
					ServiceFactory.getYubicoOTPService()
				]);
				return {
					backupCodeService,
					emailMFAService,
					fido2Service,
					jwtService,
					passwordService,
					totpService,
					yubicoOTPService
				};
			})
			.then(async () => {
				await ServiceFactory.getPassportService();
			})
			.then(async () => {
				const [
					csrfMiddleware,
					helmetMiddleware,
					jwtAuthMiddleware,
					passportAuthMiddleware
				] = await Promise.all([
					ServiceFactory.getCSRFMiddlewareService(),
					ServiceFactory.getHelmetMiddlewareService(),
					ServiceFactory.getJWTAuthMiddlewareService(),
					ServiceFactory.getPassportAuthMiddlewareService()
				]);
				return {
					csrfMiddleware,
					helmetMiddleware,
					jwtAuthMiddleware,
					passportAuthMiddleware
				};
			})
			.then(async () => {
				const [mailerService, multerUploadService] = await Promise.all([
					ServiceFactory.getMailerService(),
					ServiceFactory.getMulterUploadService()
				]);
				return {
					mailerService,
					multerUploadService
				};
			})
			.then(async () => {
				const httpsServer = await ServiceFactory.getHTTPSServer();
				return httpsServer.startServer();
			})
			.then(async () => {
				const resourceManager =
					await ServiceFactory.getResourceManager();
				return resourceManager;
			})
			.then(async () => {
				const healthCheckService =
					await ServiceFactory.getHealthCheckService();
				return healthCheckService;
			})
			.then(async () => {
				logger.info('All services initialized successfully.');
			})
			.catch(error => {
				const fallbackLogger = logger;
				if (!fallbackLogger) {
					console.error(
						`Critical error occurred during startup\n${error instanceof Error ? error.message : String(error)}`
					);
					process.exit(1);
				} else {
					fallbackLogger.error(
						`Critical error occurred during startup\n${error instanceof Error ? error.message : String(error)}`
					);
					process.exit(1);
				}
			});
	} catch (error) {
		const fallbackLogger = await ServiceFactory.getLoggerService();
		if (!fallbackLogger) {
			console.error(
				`Critical error occurred during startup\n${error instanceof Error ? error.message : String(error)}`
			);
			process.exit(1);
		} else {
			fallbackLogger.logError(
				`Critical error occurred during startup\n${error instanceof Error ? error.message : String(error)}`
			);
			process.exit(1);
		}
	}
}
await start();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE9BQU8sTUFBTSxTQUFTLENBQUM7QUFDOUIsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNoQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDaEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR2hELElBQUksTUFBaUMsQ0FBQztBQUV0QyxLQUFLLFVBQVUsS0FBSztJQUNuQixJQUFJLENBQUM7UUFDSixPQUFPLEtBQUssRUFBRTthQUNaLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUU7WUFDekQsSUFBSSxDQUFDLGFBQWEsSUFBSSxDQUFDLGFBQWEsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUNsRCxNQUFNLElBQUksS0FBSyxDQUNkLDhDQUE4QyxDQUM5QyxDQUFDO1lBQ0gsQ0FBQztZQUVELE1BQU0sTUFBTSxHQUFHLE1BQU0sY0FBYyxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDdkQsTUFBTSxXQUFXLEdBQ2hCLE1BQU0sY0FBYyxDQUFDLHFCQUFxQixFQUFFLENBQUM7WUFFOUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUUzQixNQUFNLFlBQVksR0FDakIsTUFBTSxjQUFjLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztZQUUvQyxNQUFNLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBRXJDLE1BQU0sU0FBUyxHQUFHLE1BQU0sY0FBYyxDQUFDLG1CQUFtQixFQUFFLENBQUM7WUFFN0QsTUFBTSxLQUFLLEdBQUcsTUFBTSxZQUFZLENBQUMsVUFBVSxDQUMxQyxhQUFhLEVBQ2IsYUFBYSxDQUNiLENBQUM7WUFFRixXQUFXLENBQ1Ys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RSxDQUNuRyxDQUFDO2dCQUNGLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakIsQ0FBQztRQUNGLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsTUFBTSxjQUFjLEdBQUcsTUFBTSxjQUFjLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUMvRCxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDckIsT0FBTyxDQUFDLEtBQUssQ0FDWiwyQ0FBMkMsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQ25HLENBQUM7WUFDRixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLENBQUM7YUFBTSxDQUFDO1lBQ1AsY0FBYyxDQUFDLFFBQVEsQ0FDdEIsMkNBQTJDLEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUNuRyxDQUFDO1lBQ0YsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQixDQUFDO0lBQ0YsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLEtBQUssRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHByb2Nlc3MgZnJvbSAncHJvY2Vzcyc7XG5pbXBvcnQgeyBsb2dpbiB9IGZyb20gJy4vYWRtaW4nO1xuaW1wb3J0IHsgU2VydmljZUZhY3RvcnkgfSBmcm9tICcuL2luZGV4L2ZhY3RvcnkvU2VydmljZUZhY3RvcnknO1xuaW1wb3J0IHsgVmF1bHRTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9WYXVsdCc7XG5pbXBvcnQgeyBBcHBMb2dnZXJTZXJ2aWNlSW50ZXJmYWNlIH0gZnJvbSAnLi9pbmRleC9pbnRlcmZhY2VzL21haW4nO1xuXG5sZXQgbG9nZ2VyOiBBcHBMb2dnZXJTZXJ2aWNlSW50ZXJmYWNlO1xuXG5hc3luYyBmdW5jdGlvbiBzdGFydCgpOiBQcm9taXNlPHZvaWQ+IHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbG9naW4oKVxuXHRcdFx0LnRoZW4oYXN5bmMgKHsgZW5jcnlwdGlvbktleSwgZ3BnUGFzc3BocmFzZSwgYWRtaW5JZCB9KSA9PiB7XG5cdFx0XHRcdGlmICghZW5jcnlwdGlvbktleSB8fCAhZ3BnUGFzc3BocmFzZSB8fCAhYWRtaW5JZCkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdCdLZXlzIG9yIEFkbWluIElEIG5vdCBmb3VuZC4gU2h1dHRpbmcgZG93bi4uLidcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgbG9nZ2VyID0gYXdhaXQgU2VydmljZUZhY3RvcnkuZ2V0TG9nZ2VyU2VydmljZSgpO1xuXHRcdFx0XHRjb25zdCBlcnJvckxvZ2dlciA9XG5cdFx0XHRcdFx0YXdhaXQgU2VydmljZUZhY3RvcnkuZ2V0RXJyb3JMb2dnZXJTZXJ2aWNlKCk7XG5cblx0XHRcdFx0bG9nZ2VyLnNldEFkbWluSWQoYWRtaW5JZCk7XG5cblx0XHRcdFx0Y29uc3QgZXJyb3JIYW5kbGVyID1cblx0XHRcdFx0XHRhd2FpdCBTZXJ2aWNlRmFjdG9yeS5nZXRFcnJvckhhbmRsZXJTZXJ2aWNlKCk7XG5cblx0XHRcdFx0bG9nZ2VyLnNldEVycm9ySGFuZGxlcihlcnJvckhhbmRsZXIpO1xuXG5cdFx0XHRcdGNvbnN0IGVudkNvbmZpZyA9IGF3YWl0IFNlcnZpY2VGYWN0b3J5LmdldEVudkNvbmZpZ1NlcnZpY2UoKTtcblxuXHRcdFx0XHRjb25zdCB2YXVsdCA9IGF3YWl0IFZhdWx0U2VydmljZS5pbml0aWFsaXplKFxuXHRcdFx0XHRcdGVuY3J5cHRpb25LZXksXG5cdFx0XHRcdFx0Z3BnUGFzc3BocmFzZVxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdHNldEludGVydmFsKFxuXHRcdFx0XHRcdCgpID0+IHZhdWx0LmNsZWFyRXhwaXJlZFNlY3JldHNGcm9tTWVtb3J5KCksXG5cdFx0XHRcdFx0ZW52Q29uZmlnLmdldEVudlZhcmlhYmxlKCdjbGVhckV4cGlyZWRTZWNyZXRzSW50ZXJ2YWwnKVxuXHRcdFx0XHQpO1xuXHRcdFx0XHRzZXRJbnRlcnZhbChcblx0XHRcdFx0XHQoKSA9PiB2YXVsdC5iYXRjaENsZWFyU2VjcmV0cygpLFxuXHRcdFx0XHRcdGVudkNvbmZpZy5nZXRFbnZWYXJpYWJsZSgnYmF0Y2hSZUVuY3J5cHRTZWNyZXRzSW50ZXJ2YWwnKVxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdGxvZ2dlci5pbmZvKFxuXHRcdFx0XHRcdCdTZWNyZXRzIHN0b3JlIGluaXRpYWxpemVkLiBSRUFEWSBUTyBST0NLIEFORCBST0xMISEhJ1xuXHRcdFx0XHQpO1xuXHRcdFx0XHRyZXR1cm4geyBlbnZDb25maWcsIGVycm9yTG9nZ2VyLCBlcnJvckhhbmRsZXIsIGxvZ2dlciwgdmF1bHQgfTtcblx0XHRcdH0pXG5cdFx0XHQudGhlbihhc3luYyAoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IG1pZGRsZXdhcmVTdGF0dXNTZXJ2aWNlID1cblx0XHRcdFx0XHRhd2FpdCBTZXJ2aWNlRmFjdG9yeS5nZXRNaWRkbGV3YXJlU3RhdHVzU2VydmljZSgpO1xuXHRcdFx0XHRyZXR1cm4gbWlkZGxld2FyZVN0YXR1c1NlcnZpY2U7XG5cdFx0XHR9KVxuXHRcdFx0LnRoZW4oYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRjb25zdCByb290TWlkZGxld2FyZSA9XG5cdFx0XHRcdFx0YXdhaXQgU2VydmljZUZhY3RvcnkuZ2V0Um9vdE1pZGRsZXdhcmVTZXJ2aWNlKCk7XG5cdFx0XHRcdHJvb3RNaWRkbGV3YXJlLmluaXRpYWxpemUoKTtcblx0XHRcdFx0cmV0dXJuIHJvb3RNaWRkbGV3YXJlO1xuXHRcdFx0fSlcblx0XHRcdC50aGVuKGFzeW5jICgpID0+IHtcblx0XHRcdFx0Y29uc3QgZGF0YWJhc2VDb250cm9sbGVyID1cblx0XHRcdFx0XHRhd2FpdCBTZXJ2aWNlRmFjdG9yeS5nZXREYXRhYmFzZUNvbnRyb2xsZXIoKTtcblx0XHRcdFx0ZGF0YWJhc2VDb250cm9sbGVyLmluaXRpYWxpemUoKTtcblx0XHRcdFx0cmV0dXJuIGRhdGFiYXNlQ29udHJvbGxlcjtcblx0XHRcdH0pXG5cdFx0XHQudGhlbihhc3luYyAoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IFtjYWNoZVNlcnZpY2UsIHJlZGlzU2VydmljZV0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG5cdFx0XHRcdFx0U2VydmljZUZhY3RvcnkuZ2V0Q2FjaGVTZXJ2aWNlKCksXG5cdFx0XHRcdFx0U2VydmljZUZhY3RvcnkuZ2V0UmVkaXNTZXJ2aWNlKClcblx0XHRcdFx0XSk7XG5cdFx0XHRcdHJldHVybiB7IGNhY2hlU2VydmljZSwgcmVkaXNTZXJ2aWNlIH07XG5cdFx0XHR9KVxuXHRcdFx0LnRoZW4oYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRjb25zdCBnYXRla2VlcGVyID0gYXdhaXQgU2VydmljZUZhY3RvcnkuZ2V0R2F0ZWtlZXBlclNlcnZpY2UoKTtcblx0XHRcdFx0cmV0dXJuIGdhdGVrZWVwZXIuaW5pdGlhbGl6ZSgpO1xuXHRcdFx0fSlcblx0XHRcdC50aGVuKGFzeW5jICgpID0+IHtcblx0XHRcdFx0Y29uc3QgYWNjZXNzQ29udHJvbCA9XG5cdFx0XHRcdFx0YXdhaXQgU2VydmljZUZhY3RvcnkuZ2V0QWNjZXNzQ29udHJvbE1pZGRsZXdhcmVTZXJ2aWNlKCk7XG5cdFx0XHRcdHJldHVybiBhY2Nlc3NDb250cm9sO1xuXHRcdFx0fSlcblx0XHRcdC50aGVuKGFzeW5jICgpID0+IHtcblx0XHRcdFx0Y29uc3QgYmFzZVJvdXRlciA9IGF3YWl0IFNlcnZpY2VGYWN0b3J5LmdldEJhc2VSb3V0ZXIoKTtcblx0XHRcdFx0cmV0dXJuIGJhc2VSb3V0ZXI7XG5cdFx0XHR9KVxuXHRcdFx0LnRoZW4oYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRjb25zdCB1c2VyQ29udHJvbGxlciA9IGF3YWl0IFNlcnZpY2VGYWN0b3J5LmdldFVzZXJDb250cm9sbGVyKCk7XG5cdFx0XHRcdHJldHVybiB1c2VyQ29udHJvbGxlcjtcblx0XHRcdH0pXG5cdFx0XHQudGhlbihhc3luYyAoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGF1dGhDb250cm9sbGVyID0gYXdhaXQgU2VydmljZUZhY3RvcnkuZ2V0QXV0aENvbnRyb2xsZXIoKTtcblx0XHRcdFx0cmV0dXJuIGF1dGhDb250cm9sbGVyO1xuXHRcdFx0fSlcblx0XHRcdC50aGVuKGFzeW5jICgpID0+IHtcblx0XHRcdFx0Y29uc3QgW1xuXHRcdFx0XHRcdGJhY2t1cENvZGVTZXJ2aWNlLFxuXHRcdFx0XHRcdGVtYWlsTUZBU2VydmljZSxcblx0XHRcdFx0XHRmaWRvMlNlcnZpY2UsXG5cdFx0XHRcdFx0and0U2VydmljZSxcblx0XHRcdFx0XHRwYXNzd29yZFNlcnZpY2UsXG5cdFx0XHRcdFx0dG90cFNlcnZpY2UsXG5cdFx0XHRcdFx0eXViaWNvT1RQU2VydmljZVxuXHRcdFx0XHRdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuXHRcdFx0XHRcdFNlcnZpY2VGYWN0b3J5LmdldEJhY2t1cENvZGVTZXJ2aWNlKCksXG5cdFx0XHRcdFx0U2VydmljZUZhY3RvcnkuZ2V0RW1haWxNRkFTZXJ2aWNlKCksXG5cdFx0XHRcdFx0U2VydmljZUZhY3RvcnkuZ2V0RklETzJTZXJ2aWNlKCksXG5cdFx0XHRcdFx0U2VydmljZUZhY3RvcnkuZ2V0SldUU2VydmljZSgpLFxuXHRcdFx0XHRcdFNlcnZpY2VGYWN0b3J5LmdldFBhc3N3b3JkU2VydmljZSgpLFxuXHRcdFx0XHRcdFNlcnZpY2VGYWN0b3J5LmdldFRPVFBTZXJ2aWNlKCksXG5cdFx0XHRcdFx0U2VydmljZUZhY3RvcnkuZ2V0WXViaWNvT1RQU2VydmljZSgpXG5cdFx0XHRcdF0pO1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGJhY2t1cENvZGVTZXJ2aWNlLFxuXHRcdFx0XHRcdGVtYWlsTUZBU2VydmljZSxcblx0XHRcdFx0XHRmaWRvMlNlcnZpY2UsXG5cdFx0XHRcdFx0and0U2VydmljZSxcblx0XHRcdFx0XHRwYXNzd29yZFNlcnZpY2UsXG5cdFx0XHRcdFx0dG90cFNlcnZpY2UsXG5cdFx0XHRcdFx0eXViaWNvT1RQU2VydmljZVxuXHRcdFx0XHR9O1xuXHRcdFx0fSlcblx0XHRcdC50aGVuKGFzeW5jICgpID0+IHtcblx0XHRcdFx0YXdhaXQgU2VydmljZUZhY3RvcnkuZ2V0UGFzc3BvcnRTZXJ2aWNlKCk7XG5cdFx0XHR9KVxuXHRcdFx0LnRoZW4oYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRjb25zdCBbXG5cdFx0XHRcdFx0Y3NyZk1pZGRsZXdhcmUsXG5cdFx0XHRcdFx0aGVsbWV0TWlkZGxld2FyZSxcblx0XHRcdFx0XHRqd3RBdXRoTWlkZGxld2FyZSxcblx0XHRcdFx0XHRwYXNzcG9ydEF1dGhNaWRkbGV3YXJlXG5cdFx0XHRcdF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG5cdFx0XHRcdFx0U2VydmljZUZhY3RvcnkuZ2V0Q1NSRk1pZGRsZXdhcmVTZXJ2aWNlKCksXG5cdFx0XHRcdFx0U2VydmljZUZhY3RvcnkuZ2V0SGVsbWV0TWlkZGxld2FyZVNlcnZpY2UoKSxcblx0XHRcdFx0XHRTZXJ2aWNlRmFjdG9yeS5nZXRKV1RBdXRoTWlkZGxld2FyZVNlcnZpY2UoKSxcblx0XHRcdFx0XHRTZXJ2aWNlRmFjdG9yeS5nZXRQYXNzcG9ydEF1dGhNaWRkbGV3YXJlU2VydmljZSgpXG5cdFx0XHRcdF0pO1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGNzcmZNaWRkbGV3YXJlLFxuXHRcdFx0XHRcdGhlbG1ldE1pZGRsZXdhcmUsXG5cdFx0XHRcdFx0and0QXV0aE1pZGRsZXdhcmUsXG5cdFx0XHRcdFx0cGFzc3BvcnRBdXRoTWlkZGxld2FyZVxuXHRcdFx0XHR9O1xuXHRcdFx0fSlcblx0XHRcdC50aGVuKGFzeW5jICgpID0+IHtcblx0XHRcdFx0Y29uc3QgW21haWxlclNlcnZpY2UsIG11bHRlclVwbG9hZFNlcnZpY2VdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuXHRcdFx0XHRcdFNlcnZpY2VGYWN0b3J5LmdldE1haWxlclNlcnZpY2UoKSxcblx0XHRcdFx0XHRTZXJ2aWNlRmFjdG9yeS5nZXRNdWx0ZXJVcGxvYWRTZXJ2aWNlKClcblx0XHRcdFx0XSk7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0bWFpbGVyU2VydmljZSxcblx0XHRcdFx0XHRtdWx0ZXJVcGxvYWRTZXJ2aWNlXG5cdFx0XHRcdH07XG5cdFx0XHR9KVxuXHRcdFx0LnRoZW4oYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRjb25zdCBodHRwc1NlcnZlciA9IGF3YWl0IFNlcnZpY2VGYWN0b3J5LmdldEhUVFBTU2VydmVyKCk7XG5cdFx0XHRcdHJldHVybiBodHRwc1NlcnZlci5zdGFydFNlcnZlcigpO1xuXHRcdFx0fSlcblx0XHRcdC50aGVuKGFzeW5jICgpID0+IHtcblx0XHRcdFx0Y29uc3QgcmVzb3VyY2VNYW5hZ2VyID1cblx0XHRcdFx0XHRhd2FpdCBTZXJ2aWNlRmFjdG9yeS5nZXRSZXNvdXJjZU1hbmFnZXIoKTtcblx0XHRcdFx0cmV0dXJuIHJlc291cmNlTWFuYWdlcjtcblx0XHRcdH0pXG5cdFx0XHQudGhlbihhc3luYyAoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGhlYWx0aENoZWNrU2VydmljZSA9XG5cdFx0XHRcdFx0YXdhaXQgU2VydmljZUZhY3RvcnkuZ2V0SGVhbHRoQ2hlY2tTZXJ2aWNlKCk7XG5cdFx0XHRcdHJldHVybiBoZWFsdGhDaGVja1NlcnZpY2U7XG5cdFx0XHR9KVxuXHRcdFx0LnRoZW4oYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRsb2dnZXIuaW5mbygnQWxsIHNlcnZpY2VzIGluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseS4nKTtcblx0XHRcdH0pXG5cdFx0XHQuY2F0Y2goZXJyb3IgPT4ge1xuXHRcdFx0XHRjb25zdCBmYWxsYmFja0xvZ2dlciA9IGxvZ2dlcjtcblx0XHRcdFx0aWYgKCFmYWxsYmFja0xvZ2dlcikge1xuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXG5cdFx0XHRcdFx0XHRgQ3JpdGljYWwgZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHN0YXJ0dXBcXG4ke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKX1gXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRwcm9jZXNzLmV4aXQoMSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZmFsbGJhY2tMb2dnZXIuZXJyb3IoXG5cdFx0XHRcdFx0XHRgQ3JpdGljYWwgZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHN0YXJ0dXBcXG4ke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKX1gXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRwcm9jZXNzLmV4aXQoMSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnN0IGZhbGxiYWNrTG9nZ2VyID0gYXdhaXQgU2VydmljZUZhY3RvcnkuZ2V0TG9nZ2VyU2VydmljZSgpO1xuXHRcdGlmICghZmFsbGJhY2tMb2dnZXIpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXG5cdFx0XHRcdGBDcml0aWNhbCBlcnJvciBvY2N1cnJlZCBkdXJpbmcgc3RhcnR1cFxcbiR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpfWBcblx0XHRcdCk7XG5cdFx0XHRwcm9jZXNzLmV4aXQoMSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZhbGxiYWNrTG9nZ2VyLmxvZ0Vycm9yKFxuXHRcdFx0XHRgQ3JpdGljYWwgZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHN0YXJ0dXBcXG4ke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKX1gXG5cdFx0XHQpO1xuXHRcdFx0cHJvY2Vzcy5leGl0KDEpO1xuXHRcdH1cblx0fVxufVxuXG5hd2FpdCBzdGFydCgpO1xuIl19
