import bcrypt from 'bcrypt';
import crypto from 'crypto';
import setupLogger from '../../config/logger.js';
import UserMfa from '../../models/UserMfa.js';
const logger = await setupLogger();
// Generate Backup Coedes
async function generateBackupCodes(id) {
	const backupCodes = [];
	for (let i = 0; i < 16; i++) {
		const code = crypto.randomBytes(4).toString('hex'); // 8-character hex code
		const hashedCode = await bcrypt.hash(code, 10);
		backupCodes.push({ code: hashedCode, used: false });
	}
	// store backupCodes in the database associated with the user's id
	await saveBackupCodesToDatabase(id, backupCodes);
	// return only the plain codes as strings
	return backupCodes.map(backupCode => backupCode.code);
}
// Verify a Backup Code
async function verifyBackupCode(id, inputCode) {
	const storedCodes = await getBackupCodesFromDatabase(id);
	if (storedCodes) {
		for (let i = 0; i < storedCodes.length; i++) {
			const match = await bcrypt.compare(inputCode, storedCodes[i].code);
			if (match && !storedCodes[i].used) {
				storedCodes[i].used = true;
				await updateBackupCodesInDatabase(id, storedCodes); // mark the code as used
				return true; // successful verification
			}
		}
	} else {
		logger.error('No backup codes found for user');
		return false; // no backup codes found
	}
	return false; // verification failed
}
// Save backup codes to the database
async function saveBackupCodesToDatabase(id, backupCodes) {
	try {
		const user = await UserMfa.findByPk(id); // find user by primary key
		if (!user) throw new Error('User not found');
		// map the codes element of backupCodes to an array of strings
		const backupCodesAsStrings = backupCodes.map(codeObj => codeObj.code);
		// assign the array of strings to user.backupCodes
		user.backupCodes = backupCodesAsStrings;
		await user.save();
	} catch (err) {
		logger.error('Error saving backup codes to database: ', err);
		throw new Error('Failed to save backup codes to database');
	}
}
// Get backup codes from the database
async function getBackupCodesFromDatabase(id) {
	const logger = await setupLogger();
	try {
		const user = await UserMfa.findByPk(id); // find user by primary key
		if (!user) throw new Error('User not found');
		// assume user.backupCodes is a string[] or null, convert it to BackuopCode[] or undefined
		const backupCodes = user.backupCodes;
		if (backupCodes === null) {
			return undefined; // *DEV-NOTE* probably need to configure this later
		}
		// convert string[] to BackupCode[]
		return backupCodes.map(code => ({ code, used: false }));
	} catch (err) {
		logger.error('Error fetching backup codes from database: ', err);
		throw new Error('Failed to retrieve backup codes from database');
	}
}
// Update backup codes in the database
async function updateBackupCodesInDatabase(id, backupCodes) {
	try {
		const user = await UserMfa.findByPk(id); // find user by primary key
		if (!user) throw new Error('User not found');
		// map the codes element of backupCodes to an array of strings
		const backupCodesAsStrings = backupCodes.map(codeObj => codeObj.code);
		// assign the array of strings to user.backupCodes
		user.backupCodes = backupCodesAsStrings;
		await user.save();
	} catch (err) {
		logger.error('Error updating backup codes in database: ', err);
		throw new Error('Failed to update backup codes in database');
	}
}
export {
	generateBackupCodes,
	getBackupCodesFromDatabase,
	saveBackupCodesToDatabase,
	verifyBackupCode
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja3VwQ29kZVV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvYXV0aC9iYWNrdXBDb2RlVXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBQzVCLE9BQU8sV0FBVyxNQUFNLHFCQUFxQixDQUFDO0FBQzlDLE9BQU8sT0FBTyxNQUFNLHNCQUFzQixDQUFDO0FBTzNDLE1BQU0sTUFBTSxHQUFHLE1BQU0sV0FBVyxFQUFFLENBQUM7QUFFbkMseUJBQXlCO0FBQ3pCLEtBQUssVUFBVSxtQkFBbUIsQ0FBQyxFQUFVO0lBQzVDLE1BQU0sV0FBVyxHQUFpQixFQUFFLENBQUM7SUFDckMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQzdCLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsdUJBQXVCO1FBQzNFLE1BQU0sVUFBVSxHQUFHLE1BQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDL0MsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELGtFQUFrRTtJQUNsRSxNQUFNLHlCQUF5QixDQUFDLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUVqRCx5Q0FBeUM7SUFDekMsT0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3ZELENBQUM7QUFFRCx1QkFBdUI7QUFDdkIsS0FBSyxVQUFV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UUFDakUsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7QUFDRixDQUFDO0FBRUQsc0NBQXNDO0FBQ3RDLEtBQUssVUFBVSwyQkFBMkIsQ0FDekMsRUFBVSxFQUNWLFdBQXlCO0lBRXpCLElBQUksQ0FBQztRQUNKLE1BQU0sSUFBSSxHQUFHLE1BQU0sT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLDJCQUEyQjtRQUNwRSxJQUFJLENBQUMsSUFBSTtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUU3Qyw4REFBOEQ7UUFDOUQsTUFBTSxvQkFBb0IsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXRFLGtEQUFrRDtRQUNsRCxJQUFJLENBQUMsV0FBVyxHQUFHLG9CQUFvQixDQUFDO1FBQ3hDLE1BQU0sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2QsTUFBTSxDQUFDLEtBQUssQ0FBQywyQ0FBMkMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMvRCxNQUFNLElBQUksS0FBSyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7SUFDOUQsQ0FBQztBQUNGLENBQUM7QUFFRCxPQUFPLEVBQ04sbUJBQW1CLEVBQ25CLDBCQUEwQixFQUMxQix5QkFBeUIsRUFDekIsZ0JBQWdCLEVBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYmNyeXB0IGZyb20gJ2JjcnlwdCc7XG5pbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgc2V0dXBMb2dnZXIgZnJvbSAnLi4vLi4vY29uZmlnL2xvZ2dlcic7XG5pbXBvcnQgVXNlck1mYSBmcm9tICcuLi8uLi9tb2RlbHMvVXNlck1mYSc7XG5cbmludGVyZmFjZSBCYWNrdXBDb2RlIHtcblx0Y29kZTogc3RyaW5nO1xuXHR1c2VkOiBib29sZWFuO1xufVxuXG5jb25zdCBsb2dnZXIgPSBhd2FpdCBzZXR1cExvZ2dlcigpO1xuXG4vLyBHZW5lcmF0ZSBCYWNrdXAgQ29lZGVzXG5hc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUJhY2t1cENvZGVzKGlkOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG5cdGNvbnN0IGJhY2t1cENvZGVzOiBCYWNrdXBDb2RlW10gPSBbXTtcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG5cdFx0Y29uc3QgY29kZSA9IGNyeXB0by5yYW5kb21CeXRlcyg0KS50b1N0cmluZygnaGV4Jyk7IC8vIDgtY2hhcmFjdGVyIGhleCBjb2RlXG5cdFx0Y29uc3QgaGFzaGVkQ29kZSA9IGF3YWl0IGJjcnlwdC5oYXNoKGNvZGUsIDEwKTtcblx0XHRiYWNrdXBDb2Rlcy5wdXNoKHsgY29kZTogaGFzaGVkQ29kZSwgdXNlZDogZmFsc2UgfSk7XG5cdH1cblxuXHQvLyBzdG9yZSBiYWNrdXBDb2RlcyBpbiB0aGUgZGF0YWJhc2UgYXNzb2NpYXRlZCB3aXRoIHRoZSB1c2VyJ3MgaWRcblx0YXdhaXQgc2F2ZUJhY2t1cENvZGVzVG9EYXRhYmFzZShpZCwgYmFja3VwQ29kZXMpO1xuXG5cdC8vIHJldHVybiBvbmx5IHRoZSBwbGFpbiBjb2RlcyBhcyBzdHJpbmdzXG5cdHJldHVybiBiYWNrdXBDb2Rlcy5tYXAoYmFja3VwQ29kZSA9PiBiYWNrdXBDb2RlLmNvZGUpO1xufVxuXG4vLyBWZXJpZnkgYSBCYWNrdXAgQ29kZVxuYXN5bmMgZnVuY3Rpb24gdmVyaWZ5QmFja3VwQ29kZShcblx0aWQ6IHN0cmluZyxcblx0aW5wdXRDb2RlOiBzdHJpbmdcbik6IFByb21pc2U8Ym9vbGVhbj4ge1xuXHRjb25zdCBzdG9yZWRDb2RlcyA9IGF3YWl0IGdldEJhY2t1cENvZGVzRnJvbURhdGFiYXNlKGlkKTtcblxuXHRpZiAoc3RvcmVkQ29kZXMpIHtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHN0b3JlZENvZGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBtYXRjaCA9IGF3YWl0IGJjcnlwdC5jb21wYXJlKGlucHV0Q29kZSwgc3RvcmVkQ29kZXNbaV0uY29kZSk7XG5cdFx0XHRpZiAobWF0Y2ggJiYgIXN0b3JlZENvZGVzW2ldLnVzZWQpIHtcblx0XHRcdFx0c3RvcmVkQ29kZXNbaV0udXNlZCA9IHRydWU7XG5cdFx0XHRcdGF3YWl0IHVwZGF0ZUJhY2t1cENvZGVzSW5EYXRhYmFzZShpZCwgc3RvcmVkQ29kZXMpOyAvLyBtYXJrIHRoZSBjb2RlIGFzIHVzZWRcblx0XHRcdFx0cmV0dXJuIHRydWU7IC8vIHN1Y2Nlc3NmdWwgdmVyaWZpY2F0aW9uXG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGxvZ2dlci5lcnJvcignTm8gYmFja3VwIGNvZGVzIGZvdW5kIGZvciB1c2VyJyk7XG5cdFx0cmV0dXJuIGZhbHNlOyAvLyBubyBiYWNrdXAgY29kZXMgZm91bmRcblx0fVxuXG5cdHJldHVybiBmYWxzZTsgLy8gdmVyaWZpY2F0aW9uIGZhaWxlZFxufVxuXG4vLyBTYXZlIGJhY2t1cCBjb2RlcyB0byB0aGUgZGF0YWJhc2VcbmFzeW5jIGZ1bmN0aW9uIHNhdmVCYWNrdXBDb2Rlc1RvRGF0YWJhc2UoXG5cdGlkOiBzdHJpbmcsXG5cdGJhY2t1cENvZGVzOiBCYWNrdXBDb2RlW11cbik6IFByb21pc2U8dm9pZD4ge1xuXHR0cnkge1xuXHRcdGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyTWZhLmZpbmRCeVBrKGlkKTsgLy8gZmluZCB1c2VyIGJ5IHByaW1hcnkga2V5XG5cdFx0aWYgKCF1c2VyKSB0aHJvdyBuZXcgRXJyb3IoJ1VzZXIgbm90IGZvdW5kJyk7XG5cblx0XHQvLyBtYXAgdGhlIGNvZGVzIGVsZW1lbnQgb2YgYmFja3VwQ29kZXMgdG8gYW4gYXJyYXkgb2Ygc3RyaW5nc1xuXHRcdGNvbnN0IGJhY2t1cENvZGVzQXNTdHJpbmdzID0gYmFja3VwQ29kZXMubWFwKGNvZGVPYmogPT4gY29kZU9iai5jb2RlKTtcblxuXHRcdC8vIGFzc2lnbiB0aGUgYXJyYXkgb2Ygc3RyaW5ncyB0byB1c2VyLmJhY2t1cENvZGVzXG5cdFx0dXNlci5iYWNrdXBDb2RlcyA9IGJhY2t1cENvZGVzQXNTdHJpbmdzO1xuXHRcdGF3YWl0IHVzZXIuc2F2ZSgpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRsb2dnZXIuZXJyb3IoJ0Vycm9yIHNhdmluZyBiYWNrdXAgY29kZXMgdG8gZGF0YWJhc2U6ICcsIGVycik7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gc2F2ZSBiYWNrdXAgY29kZXMgdG8gZGF0YWJhc2UnKTtcblx0fVxufVxuXG4vLyBHZXQgYmFja3VwIGNvZGVzIGZyb20gdGhlIGRhdGFiYXNlXG5hc3luYyBmdW5jdGlvbiBnZXRCYWNrdXBDb2Rlc0Zyb21EYXRhYmFzZShcblx0aWQ6IHN0cmluZ1xuKTogUHJvbWlzZTxCYWNrdXBDb2RlW10gfCB1bmRlZmluZWQ+IHtcblx0Y29uc3QgbG9nZ2VyID0gYXdhaXQgc2V0dXBMb2dnZXIoKTtcblxuXHR0cnkge1xuXHRcdGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyTWZhLmZpbmRCeVBrKGlkKTsgLy8gZmluZCB1c2VyIGJ5IHByaW1hcnkga2V5XG5cdFx0aWYgKCF1c2VyKSB0aHJvdyBuZXcgRXJyb3IoJ1VzZXIgbm90IGZvdW5kJyk7XG5cblx0XHQvLyBhc3N1bWUgdXNlci5iYWNrdXBDb2RlcyBpcyBhIHN0cmluZ1tdIG9yIG51bGwsIGNvbnZlcnQgaXQgdG8gQmFja3VvcENvZGVbXSBvciB1bmRlZmluZWRcblx0XHRjb25zdCBiYWNrdXBDb2RlcyA9IHVzZXIuYmFja3VwQ29kZXMgYXMgc3RyaW5nW10gfCBudWxsO1xuXG5cdFx0aWYgKGJhY2t1cENvZGVzID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkOyAvLyAqREVWLU5PVEUqIHByb2JhYmx5IG5lZWQgdG8gY29uZmlndXJlIHRoaXMgbGF0ZXJcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHN0cmluZ1tdIHRvIEJhY2t1cENvZGVbXVxuXHRcdHJldHVybiBiYWNrdXBDb2Rlcy5tYXAoY29kZSA9PiAoeyBjb2RlLCB1c2VkOiBmYWxzZSB9KSBhcyBCYWNrdXBDb2RlKTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0bG9nZ2VyLmVycm9yKCdFcnJvciBmZXRjaGluZyBiYWNrdXAgY29kZXMgZnJvbSBkYXRhYmFzZTogJywgZXJyKTtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byByZXRyaWV2ZSBiYWNrdXAgY29kZXMgZnJvbSBkYXRhYmFzZScpO1xuXHR9XG59XG5cbi8vIFVwZGF0ZSBiYWNrdXAgY29kZXMgaW4gdGhlIGRhdGFiYXNlXG5hc3luYyBmdW5jdGlvbiB1cGRhdGVCYWNrdXBDb2Rlc0luRGF0YWJhc2UoXG5cdGlkOiBzdHJpbmcsXG5cdGJhY2t1cENvZGVzOiBCYWNrdXBDb2RlW11cbik6IFByb21pc2U8dm9pZD4ge1xuXHR0cnkge1xuXHRcdGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyTWZhLmZpbmRCeVBrKGlkKTsgLy8gZmluZCB1c2VyIGJ5IHByaW1hcnkga2V5XG5cdFx0aWYgKCF1c2VyKSB0aHJvdyBuZXcgRXJyb3IoJ1VzZXIgbm90IGZvdW5kJyk7XG5cblx0XHQvLyBtYXAgdGhlIGNvZGVzIGVsZW1lbnQgb2YgYmFja3VwQ29kZXMgdG8gYW4gYXJyYXkgb2Ygc3RyaW5nc1xuXHRcdGNvbnN0IGJhY2t1cENvZGVzQXNTdHJpbmdzID0gYmFja3VwQ29kZXMubWFwKGNvZGVPYmogPT4gY29kZU9iai5jb2RlKTtcblxuXHRcdC8vIGFzc2lnbiB0aGUgYXJyYXkgb2Ygc3RyaW5ncyB0byB1c2VyLmJhY2t1cENvZGVzXG5cdFx0dXNlci5iYWNrdXBDb2RlcyA9IGJhY2t1cENvZGVzQXNTdHJpbmdzO1xuXHRcdGF3YWl0IHVzZXIuc2F2ZSgpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRsb2dnZXIuZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIGJhY2t1cCBjb2RlcyBpbiBkYXRhYmFzZTogJywgZXJyKTtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byB1cGRhdGUgYmFja3VwIGNvZGVzIGluIGRhdGFiYXNlJyk7XG5cdH1cbn1cblxuZXhwb3J0IHtcblx0Z2VuZXJhdGVCYWNrdXBDb2Rlcyxcblx0Z2V0QmFja3VwQ29kZXNGcm9tRGF0YWJhc2UsXG5cdHNhdmVCYWNrdXBDb2Rlc1RvRGF0YWJhc2UsXG5cdHZlcmlmeUJhY2t1cENvZGVcbn07XG4iXX0=
