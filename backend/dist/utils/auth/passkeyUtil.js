import { Fido2Lib } from 'fido2-lib';
import getSecrets from '../../config/secrets.js';
let fido2;
(async () => {
	let secrets = await getSecrets();
	if (!secrets) {
		throw new Error('Secrets could not be loaded');
	}
	fido2 = new Fido2Lib({
		timeout: 60000,
		rpId: secrets.RP_ID,
		rpName: secrets.RP_NAME,
		rpIcon: secrets.RP_ICON,
		challengeSize: secrets.FIDO_CHALLENGE_SIZE,
		attestation: 'direct',
		cryptoParams: secrets.FIDO_CRYPTO_PARAMETERS,
		authenticatorRequireResidentKey:
			secrets.FIDO_AUTHENTICATOR_REQUIRE_RESIDENT_KEY,
		authenticatorUserVerification:
			secrets.FIDO_AUTHENTICATOR_USER_VERIFICATION
	});
})();
async function generatePasskeyRegistrationOptions(user) {
	let passkeyRegistrationOptions = await fido2.attestationOptions();
	// constructing PublicKeyCredentialCreationOptions
	let credentialCreationOptions = {
		...passkeyRegistrationOptions,
		user: {
			id: Buffer.from(user.id, 'utf8'),
			name: user.email,
			displayName: user.username
		},
		authenticatorSelection: {
			authenticatorAttachment: 'platform',
			requireResidentKey: true,
			userVerification: 'required'
		}
	};
	return credentialCreationOptions;
}
async function verifyPasskeyRegistration(attestation, expectedChallenge) {
	let secrets = await getSecrets();
	if (!secrets) {
		throw new Error('Secrets could not be loaded');
	}
	let attestationExpectations = {
		challenge: expectedChallenge,
		origin: secrets.RP_ORIGIN,
		factor: 'either', // 'factor` type should match as defined in the library
		rpId: secrets.RP_ID
	};
	return await fido2.attestationResult(attestation, attestationExpectations);
}
async function generatePasskeyAuthenticationOptions(user) {
	let userCredentials = user.credential.map((cred) => ({
		type: 'public-key', // ensures 'public-key' is strictly typed
		id: Buffer.from(cred.credentialId, 'base64'),
		transports: ['usb', 'nfc', 'ble'] // *DEV-NOTE* these are just example transports!
	}));
	let assertionOptions = {
		...(await fido2.assertionOptions()),
		allowCredentials: userCredentials,
		userVerification: 'required',
		timeout: 60000
	};
	return assertionOptions;
}
async function verifyPasskeyAuthentication(
	assertion,
	expectedChallenge,
	publicKey,
	previousCounter,
	id
) {
	let secrets = await getSecrets();
	if (!secrets) {
		throw new Error('Secrets could not be loaded');
	}
	let assertionExpectations = {
		challenge: expectedChallenge,
		origin: secrets.RP_ORIGIN,
		factor: 'either',
		publicKey: publicKey,
		prevCounter: previousCounter,
		userHandle: id
	};
	return await fido2.assertionResult(assertion, assertionExpectations);
}
export {
	generatePasskeyAuthenticationOptions,
	generatePasskeyRegistrationOptions,
	verifyPasskeyAuthentication,
	verifyPasskeyRegistration
};
//# sourceMappingURL=data:application/json;base64,
