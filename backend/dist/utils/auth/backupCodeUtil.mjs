import bcrypt from 'bcrypt';
import crypto from 'crypto';
export default function createBackupCodeService({ logger, UserMfa }) {
	// Generate Backup Codes
	async function generateBackupCodes(id) {
		const backupCodes = [];
		for (let i = 0; i < 16; i++) {
			const code = crypto.randomBytes(4).toString('hex'); // 8-character hex code
			const hashedCode = await bcrypt.hash(code, 10);
			backupCodes.push({ code: hashedCode, used: false });
		}
		// Store backup codes in the database associated with the user's id
		await saveBackupCodesToDatabase(id, backupCodes);
		// Return only the plain codes as strings
		return backupCodes.map(backupCode => backupCode.code);
	}
	// Verify a Backup Code
	async function verifyBackupCode(id, inputCode) {
		const storedCodes = await getBackupCodesFromDatabase(id);
		if (storedCodes) {
			for (let i = 0; i < storedCodes.length; i++) {
				const match = await bcrypt.compare(
					inputCode,
					storedCodes[i].code
				);
				if (match && !storedCodes[i].used) {
					storedCodes[i].used = true;
					await updateBackupCodesInDatabase(id, storedCodes); // Mark the code as used
					return true; // Successful verification
				}
			}
		} else {
			logger.error('No backup codes found for user');
			return false; // No backup codes found
		}
		return false; // Verification failed
	}
	// Save backup codes to the database
	async function saveBackupCodesToDatabase(id, backupCodes) {
		try {
			const user = await UserMfa.findByPk(id); // Find user by primary key
			if (!user) throw new Error('User not found');
			// Map the codes element of backupCodes to an array of strings
			const backupCodesAsStrings = backupCodes.map(
				codeObj => codeObj.code
			);
			// Assign the array of strings to user.backupCodes
			user.backupCodes = backupCodesAsStrings;
			await user.save();
		} catch (err) {
			logger.error('Error saving backup codes to database: ', err);
			throw new Error('Failed to save backup codes to database');
		}
	}
	// Get backup codes from the database
	async function getBackupCodesFromDatabase(id) {
		try {
			const user = await UserMfa.findByPk(id); // Find user by primary key
			if (!user) throw new Error('User not found');
			// Assume user.backupCodes is a string[] or null, convert it to BackupCode[] or undefined
			const backupCodes = user.backupCodes;
			if (backupCodes === null) {
				return undefined; // Handle this scenario as necessary
			}
			// Convert string[] to BackupCode[]
			return backupCodes.map(code => ({ code, used: false }));
		} catch (err) {
			logger.error('Error fetching backup codes from database: ', err);
			throw new Error('Failed to retrieve backup codes from database');
		}
	}
	// Update backup codes in the database
	async function updateBackupCodesInDatabase(id, backupCodes) {
		try {
			const user = await UserMfa.findByPk(id); // Find user by primary key
			if (!user) throw new Error('User not found');
			// Map the codes element of backupCodes to an array of strings
			const backupCodesAsStrings = backupCodes.map(
				codeObj => codeObj.code
			);
			// Assign the array of strings to user.backupCodes
			user.backupCodes = backupCodesAsStrings;
			await user.save();
		} catch (err) {
			logger.error('Error updating backup codes in database: ', err);
			throw new Error('Failed to update backup codes in database');
		}
	}
	return {
		generateBackupCodes,
		verifyBackupCode,
		saveBackupCodesToDatabase,
		getBackupCodesFromDatabase,
		updateBackupCodesInDatabase
	};
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja3VwQ29kZVV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvYXV0aC9iYWNrdXBDb2RlVXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBaUI1QixNQUFNLENBQUMsT0FBTyxVQUFVLHVCQUF1QixDQUFDLEVBQy9DLE1BQU0sRUFDTixPQUFPLEVBQ3dCO0lBZS9CLHdCQUF3QjtJQUN4QixLQUFLLFVBQVUsbUJBQW1CLENBQUMsRUFBVTtRQUM1QyxNQUFNLFdBQVcsR0FBaUIsRUFBRSxDQUFDO1FBQ3JDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUM3QixNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHVCQUF1QjtZQUMzRSxNQUFNLFVBQVUsR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQy9DLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELENBQUM7UUFFRCxtRUFBbUU7UUFDbkUsTUFBTSx5QkFBeUIsQ0FBQyxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFFakQseUNBQXlDO1FBQ3pDLE9BQU8sV0FBVyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsdUJBQXVCO0lBQ3ZCLEtBQUssVUFBVSxnQkFBZ0IsQ0FDOUIsRUFBVSxFQUNWLFNBQWlCO1FBRWpCLE1BQU0sV0FBVyxHQUFHLE1BQU0sMEJBQTBCLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFekQsSUFBSSxXQUFXLEVBQUUsQ0FBQztZQUNqQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUM3QyxNQUFNLEtBQUssR0FBRyxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQ2pDLFNBQVMsRUFDVCxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNuQixDQUFDO2dCQUNGLElBQUksS0FBSyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNuQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztvQkFDM0IsTUFBTSwyQkFBMkIsQ0FBQyxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyx3QkFBd0I7b0JBQzVFLE9BQU8sSUFBSSxDQUFDLENBQUMsMEJBQTBCO2dCQUN4QyxDQUFDO1lBQ0YsQ0FBQztRQUNGLENBQUM7YUFBTSxDQUFDO1lBQ1AsTUFBTSxDQUFDLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1lBQy9DLE9BQU8sS0FBSyxDQUFDLENBQUMsd0JBQXdCO1FBQ3ZDLENBQUM7UUFFRCxPQUFPLEtBQUssQ0FBQyxDQUFDLHNCQUFzQjtJQUNyQyxDQUFDO0lBRUQsb0NBQW9DO0lBQ3BDLEtBQUssVUFBVSx5QkFBeUIsQ0FDdkMsRUFBVSxFQUNWLFdBQXlCO1FBRXpCLElBQUksQ0FBQztZQUNKLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUEyQixDQUFDLENBQUMsMkJBQTJCO1lBQ2hHLElBQUksQ0FBQyxJQUFJO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUU3Qyw4REFBOEQ7WUFDOUQsTUFBTSxvQkFBb0IsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUMzQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQ3ZCLENBQUM7WUFFRixrREFBa0Q7WUFDbEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxvQkFBb0IsQ0FBQztZQUN4QyxNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNuQixDQUFDO1FBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztZQUNkLE1BQU0sQ0FBQyxLQUFLLENBQUMseUNBQXlDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDN0QsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO1FBQzVELENBQUM7SUFDRixDQUFDO0lBRUQscUNBQXFDO0lBQ3JDLEtBQUssVUFBVSwwQkFBMEIsQ0FDeEMsRUFBVTtRQUVWLElBQUksQ0FBQztZQUNKLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUEyQixDQUFDLENBQUMsMkJBQTJCO1lBQ2hHLElBQUksQ0FBQyxJQUFJO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUU3Qyx5RkFBeUY7WUFDekYsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztZQUVyQyxJQUFJLFdBQVcsS0FBSyxJQUFJLEVBQUUsQ0FBQztnQkFDMUIsT0FBTyxTQUFTLENBQUMsQ0FBQyxvQ0FBb0M7WUFDdkQsQ0FBQztZQUVELG1DQUFtQztZQUNuQyxPQUFPLFdBQVcsQ0FBQyxHQUFHLENBQ3JCLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQWUsQ0FDN0MsQ0FBQztRQUNILENBQUM7UUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ2QsTUFBTSxDQUFDLEtBQUssQ0FBQyw2Q0FBNkMsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNqRSxNQUFNLElBQUksS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUM7UUFDbEUsQ0FBQztJQUNGLENBQUM7SUFFRCxzQ0FBc0M7SUFDdEMsS0FBSyxVQUFVLDJCQUEyQixDQUN6QyxFQUFVLEVBQ1YsV0FBeUI7UUFFekIsSUFBSSxDQUFDO1lBQ0osTUFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQTJCLENBQUMsQ0FBQywyQkFBMkI7WUFDaEcsSUFBSSxDQUFDLElBQUk7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBRTdDLDhEQUE4RDtZQUM5RCxNQUFNLG9CQUFvQixHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQzNDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FDdkIsQ0FBQztZQUVGLGtEQUFrRDtZQUNsRCxJQUFJLENBQUMsV0FBVyxHQUFHLG9CQUFvQixDQUFDO1lBQ3hDLE1BQU0sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ25CLENBQUM7UUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ2QsTUFBTSxDQUFDLEtBQUssQ0FBQywyQ0FBMkMsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUMvRCxNQUFNLElBQUksS0FBSyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7UUFDOUQsQ0FBQztJQUNGLENBQUM7SUFFRCxPQUFPO1FBQ04sbUJBQW1CO1FBQ25CLGdCQUFnQjtRQUNoQix5QkFBeUI7UUFDekIsMEJBQTBCO1FBQzFCLDJCQUEyQjtLQUMzQixDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBiY3J5cHQgZnJvbSAnYmNyeXB0JztcbmltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJ3dpbnN0b24nO1xuaW1wb3J0IHsgTW9kZWxTdGF0aWMgfSBmcm9tICdzZXF1ZWxpemUnO1xuaW1wb3J0IHsgVXNlck1mYUluc3RhbmNlIH0gZnJvbSAnLi4vLi4vbW9kZWxzL1VzZXJNZmEnO1xuXG5pbnRlcmZhY2UgQmFja3VwQ29kZSB7XG5cdGNvZGU6IHN0cmluZztcblx0dXNlZDogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIEJhY2t1cENvZGVTZXJ2aWNlRGVwZW5kZW5jaWVzIHtcblx0bG9nZ2VyOiBMb2dnZXI7XG5cdFVzZXJNZmE6IE1vZGVsU3RhdGljPFVzZXJNZmFJbnN0YW5jZT47XG5cdGNyeXB0bzogdHlwZW9mIGNyeXB0bztcblx0YmNyeXB0OiB0eXBlb2YgYmNyeXB0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVCYWNrdXBDb2RlU2VydmljZSh7XG5cdGxvZ2dlcixcblx0VXNlck1mYVxufTogQmFja3VwQ29kZVNlcnZpY2VEZXBlbmRlbmNpZXMpOiB7XG5cdGdlbmVyYXRlQmFja3VwQ29kZXM6IChpZDogc3RyaW5nKSA9PiBQcm9taXNlPHN0cmluZ1tdPjtcblx0dmVyaWZ5QmFja3VwQ29kZTogKGlkOiBzdHJpbmcsIGlucHV0Q29kZTogc3RyaW5nKSA9PiBQcm9taXNlPGJvb2xlYW4+O1xuXHRzYXZlQmFja3VwQ29kZXNUb0RhdGFiYXNlOiAoXG5cdFx0aWQ6IHN0cmluZyxcblx0XHRiYWNrdXBDb2RlczogQmFja3VwQ29kZVtdXG5cdCkgPT4gUHJvbWlzZTx2b2lkPjtcblx0Z2V0QmFja3VwQ29kZXNGcm9tRGF0YWJhc2U6IChcblx0XHRpZDogc3RyaW5nXG5cdCkgPT4gUHJvbWlzZTxCYWNrdXBDb2RlW10gfCB1bmRlZmluZWQ+O1xuXHR1cGRhdGVCYWNrdXBDb2Rlc0luRGF0YWJhc2U6IChcblx0XHRpZDogc3RyaW5nLFxuXHRcdGJhY2t1cENvZGVzOiBCYWNrdXBDb2RlW11cblx0KSA9PiBQcm9taXNlPHZvaWQ+O1xufSB7XG5cdC8vIEdlbmVyYXRlIEJhY2t1cCBDb2Rlc1xuXHRhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUJhY2t1cENvZGVzKGlkOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG5cdFx0Y29uc3QgYmFja3VwQ29kZXM6IEJhY2t1cENvZGVbXSA9IFtdO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xuXHRcdFx0Y29uc3QgY29kZSA9IGNyeXB0by5yYW5kb21CeXRlcyg0KS50b1N0cmluZygnaGV4Jyk7IC8vIDgtY2hhcmFjdGVyIGhleCBjb2RlXG5cdFx0XHRjb25zdCBoYXNoZWRDb2RlID0gYXdhaXQgYmNyeXB0Lmhhc2goY29kZSwgMTApO1xuXHRcdFx0YmFja3VwQ29kZXMucHVzaCh7IGNvZGU6IGhhc2hlZENvZGUsIHVzZWQ6IGZhbHNlIH0pO1xuXHRcdH1cblxuXHRcdC8vIFN0b3JlIGJhY2t1cCBjb2RlcyBpbiB0aGUgZGF0YWJhc2UgYXNzb2NpYXRlZCB3aXRoIHRoZSB1c2VyJ3MgaWRcblx0XHRhd2FpdCBzYXZlQmFja3VwQ29kZXNUb0RhdGFiYXNlKGlkLCBiYWNrdXBDb2Rlcyk7XG5cblx0XHQvLyBSZXR1cm4gb25seSB0aGUgcGxhaW4gY29kZXMgYXMgc3RyaW5nc1xuXHRcdHJldHVybiBiYWNrdXBDb2Rlcy5tYXAoYmFja3VwQ29kZSA9PiBiYWNrdXBDb2RlLmNvZGUpO1xuXHR9XG5cblx0Ly8gVmVyaWZ5IGEgQmFja3VwIENvZGVcblx0YXN5bmMgZnVuY3Rpb24gdmVyaWZ5QmFja3VwQ29kZShcblx0XHRpZDogc3RyaW5nLFxuXHRcdGlucHV0Q29kZTogc3RyaW5nXG5cdCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuXHRcdGNvbnN0IHN0b3JlZENvZGVzID0gYXdhaXQgZ2V0QmFja3VwQ29kZXNGcm9tRGF0YWJhc2UoaWQpO1xuXG5cdFx0aWYgKHN0b3JlZENvZGVzKSB7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHN0b3JlZENvZGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGNvbnN0IG1hdGNoID0gYXdhaXQgYmNyeXB0LmNvbXBhcmUoXG5cdFx0XHRcdFx0aW5wdXRDb2RlLFxuXHRcdFx0XHRcdHN0b3JlZENvZGVzW2ldLmNvZGVcblx0XHRcdFx0KTtcblx0XHRcdFx0aWYgKG1hdGNoICYmICFzdG9yZWRDb2Rlc1tpXS51c2VkKSB7XG5cdFx0XHRcdFx0c3RvcmVkQ29kZXNbaV0udXNlZCA9IHRydWU7XG5cdFx0XHRcdFx0YXdhaXQgdXBkYXRlQmFja3VwQ29kZXNJbkRhdGFiYXNlKGlkLCBzdG9yZWRDb2Rlcyk7IC8vIE1hcmsgdGhlIGNvZGUgYXMgdXNlZFxuXHRcdFx0XHRcdHJldHVybiB0cnVlOyAvLyBTdWNjZXNzZnVsIHZlcmlmaWNhdGlvblxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxvZ2dlci5lcnJvcignTm8gYmFja3VwIGNvZGVzIGZvdW5kIGZvciB1c2VyJyk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7IC8vIE5vIGJhY2t1cCBjb2RlcyBmb3VuZFxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTsgLy8gVmVyaWZpY2F0aW9uIGZhaWxlZFxuXHR9XG5cblx0Ly8gU2F2ZSBiYWNrdXAgY29kZXMgdG8gdGhlIGRhdGFiYXNlXG5cdGFzeW5jIGZ1bmN0aW9uIHNhdmVCYWNrdXBDb2Rlc1RvRGF0YWJhc2UoXG5cdFx0aWQ6IHN0cmluZyxcblx0XHRiYWNrdXBDb2RlczogQmFja3VwQ29kZVtdXG5cdCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCB1c2VyID0gKGF3YWl0IFVzZXJNZmEuZmluZEJ5UGsoaWQpKSBhcyBVc2VyTWZhSW5zdGFuY2UgfCBudWxsOyAvLyBGaW5kIHVzZXIgYnkgcHJpbWFyeSBrZXlcblx0XHRcdGlmICghdXNlcikgdGhyb3cgbmV3IEVycm9yKCdVc2VyIG5vdCBmb3VuZCcpO1xuXG5cdFx0XHQvLyBNYXAgdGhlIGNvZGVzIGVsZW1lbnQgb2YgYmFja3VwQ29kZXMgdG8gYW4gYXJyYXkgb2Ygc3RyaW5nc1xuXHRcdFx0Y29uc3QgYmFja3VwQ29kZXNBc1N0cmluZ3MgPSBiYWNrdXBDb2Rlcy5tYXAoXG5cdFx0XHRcdGNvZGVPYmogPT4gY29kZU9iai5jb2RlXG5cdFx0XHQpO1xuXG5cdFx0XHQvLyBBc3NpZ24gdGhlIGFycmF5IG9mIHN0cmluZ3MgdG8gdXNlci5iYWNrdXBDb2Rlc1xuXHRcdFx0dXNlci5iYWNrdXBDb2RlcyA9IGJhY2t1cENvZGVzQXNTdHJpbmdzO1xuXHRcdFx0YXdhaXQgdXNlci5zYXZlKCk7XG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRsb2dnZXIuZXJyb3IoJ0Vycm9yIHNhdmluZyBiYWNrdXAgY29kZXMgdG8gZGF0YWJhc2U6ICcsIGVycik7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBzYXZlIGJhY2t1cCBjb2RlcyB0byBkYXRhYmFzZScpO1xuXHRcdH1cblx0fVxuXG5cdC8vIEdldCBiYWNrdXAgY29kZXMgZnJvbSB0aGUgZGF0YWJhc2Vcblx0YXN5bmMgZnVuY3Rpb24gZ2V0QmFja3VwQ29kZXNGcm9tRGF0YWJhc2UoXG5cdFx0aWQ6IHN0cmluZ1xuXHQpOiBQcm9taXNlPEJhY2t1cENvZGVbXSB8IHVuZGVmaW5lZD4ge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCB1c2VyID0gKGF3YWl0IFVzZXJNZmEuZmluZEJ5UGsoaWQpKSBhcyBVc2VyTWZhSW5zdGFuY2UgfCBudWxsOyAvLyBGaW5kIHVzZXIgYnkgcHJpbWFyeSBrZXlcblx0XHRcdGlmICghdXNlcikgdGhyb3cgbmV3IEVycm9yKCdVc2VyIG5vdCBmb3VuZCcpO1xuXG5cdFx0XHQvLyBBc3N1bWUgdXNlci5iYWNrdXBDb2RlcyBpcyBhIHN0cmluZ1tdIG9yIG51bGwsIGNvbnZlcnQgaXQgdG8gQmFja3VwQ29kZVtdIG9yIHVuZGVmaW5lZFxuXHRcdFx0Y29uc3QgYmFja3VwQ29kZXMgPSB1c2VyLmJhY2t1cENvZGVzO1xuXG5cdFx0XHRpZiAoYmFja3VwQ29kZXMgPT09IG51bGwpIHtcblx0XHRcdFx0cmV0dXJuIHVuZGVmaW5lZDsgLy8gSGFuZGxlIHRoaXMgc2NlbmFyaW8gYXMgbmVjZXNzYXJ5XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgc3RyaW5nW10gdG8gQmFja3VwQ29kZVtdXG5cdFx0XHRyZXR1cm4gYmFja3VwQ29kZXMubWFwKFxuXHRcdFx0XHRjb2RlID0+ICh7IGNvZGUsIHVzZWQ6IGZhbHNlIH0pIGFzIEJhY2t1cENvZGVcblx0XHRcdCk7XG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRsb2dnZXIuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGJhY2t1cCBjb2RlcyBmcm9tIGRhdGFiYXNlOiAnLCBlcnIpO1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gcmV0cmlldmUgYmFja3VwIGNvZGVzIGZyb20gZGF0YWJhc2UnKTtcblx0XHR9XG5cdH1cblxuXHQvLyBVcGRhdGUgYmFja3VwIGNvZGVzIGluIHRoZSBkYXRhYmFzZVxuXHRhc3luYyBmdW5jdGlvbiB1cGRhdGVCYWNrdXBDb2Rlc0luRGF0YWJhc2UoXG5cdFx0aWQ6IHN0cmluZyxcblx0XHRiYWNrdXBDb2RlczogQmFja3VwQ29kZVtdXG5cdCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCB1c2VyID0gKGF3YWl0IFVzZXJNZmEuZmluZEJ5UGsoaWQpKSBhcyBVc2VyTWZhSW5zdGFuY2UgfCBudWxsOyAvLyBGaW5kIHVzZXIgYnkgcHJpbWFyeSBrZXlcblx0XHRcdGlmICghdXNlcikgdGhyb3cgbmV3IEVycm9yKCdVc2VyIG5vdCBmb3VuZCcpO1xuXG5cdFx0XHQvLyBNYXAgdGhlIGNvZGVzIGVsZW1lbnQgb2YgYmFja3VwQ29kZXMgdG8gYW4gYXJyYXkgb2Ygc3RyaW5nc1xuXHRcdFx0Y29uc3QgYmFja3VwQ29kZXNBc1N0cmluZ3MgPSBiYWNrdXBDb2Rlcy5tYXAoXG5cdFx0XHRcdGNvZGVPYmogPT4gY29kZU9iai5jb2RlXG5cdFx0XHQpO1xuXG5cdFx0XHQvLyBBc3NpZ24gdGhlIGFycmF5IG9mIHN0cmluZ3MgdG8gdXNlci5iYWNrdXBDb2Rlc1xuXHRcdFx0dXNlci5iYWNrdXBDb2RlcyA9IGJhY2t1cENvZGVzQXNTdHJpbmdzO1xuXHRcdFx0YXdhaXQgdXNlci5zYXZlKCk7XG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRsb2dnZXIuZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIGJhY2t1cCBjb2RlcyBpbiBkYXRhYmFzZTogJywgZXJyKTtcblx0XHRcdHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIHVwZGF0ZSBiYWNrdXAgY29kZXMgaW4gZGF0YWJhc2UnKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGdlbmVyYXRlQmFja3VwQ29kZXMsXG5cdFx0dmVyaWZ5QmFja3VwQ29kZSxcblx0XHRzYXZlQmFja3VwQ29kZXNUb0RhdGFiYXNlLFxuXHRcdGdldEJhY2t1cENvZGVzRnJvbURhdGFiYXNlLFxuXHRcdHVwZGF0ZUJhY2t1cENvZGVzSW5EYXRhYmFzZVxuXHR9O1xufVxuIl19
