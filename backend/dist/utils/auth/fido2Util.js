import { Fido2Lib } from 'fido2-lib';
import getSecrets from '../../config/secrets.js';
let fido2;
(async () => {
	let secrets = await getSecrets();
	if (!secrets) {
		throw new Error('Secrets could not be loaded');
	}
	fido2 = new Fido2Lib({
		timeout: 60000,
		rpId: secrets.RP_ID,
		rpName: secrets.RP_NAME,
		challengeSize: secrets.FIDO_CHALLENGE_SIZE,
		attestation: 'indirect', // values: 'none', 'indirect', 'direct', 'enterprise'
		cryptoParams: secrets.FIDO_CRYPTO_PARAMETERS,
		authenticatorRequireResidentKey:
			secrets.FIDO_AUTHENTICATOR_REQUIRE_RESIDENT_KEY,
		authenticatorUserVerification:
			secrets.FIDO_AUTHENTICATOR_USER_VERIFICATION
	});
})();
async function generateU2fRegistrationOptions(user) {
	let passkeyRegistrationOptions = await fido2.attestationOptions();
	let u2fRegistrationOptions = {
		...passkeyRegistrationOptions,
		user: {
			id: Buffer.from(user.id, 'utf8'), // UID from db (base64 encoded)
			name: user.email,
			displayName: user.username
		},
		pubKeyCredParams: [{ type: 'public-key', alg: -7 }],
		timeout: 60000,
		attestation: 'direct',
		authenticatorSelection: {
			authenticatorAttachment: 'platform',
			requireResidentKey: true, // Correct property name
			userVerification: 'required'
		}
	};
	return u2fRegistrationOptions;
}
async function verifyU2fRegistration(attestation, expectedChallenge) {
	let secrets = await getSecrets();
	if (!secrets) {
		throw new Error('Secrets could not be loaded');
	}
	let u2fAttestationExpectations = {
		challenge: expectedChallenge,
		origin: secrets.RP_ORIGIN,
		factor: 'either',
		rpId: secrets.RP_ID
	};
	return await fido2.attestationResult(
		attestation,
		u2fAttestationExpectations
	);
}
async function generateU2fAuthenticationOptions(user) {
	let userCredentials = user.credential.map((credential) => ({
		type: 'public-key', // Explicit type
		id: Buffer.from(credential.credentialId, 'base64')
	}));
	let assertionOptions = await fido2.assertionOptions();
	let u2fAuthenticationOptions = {
		...assertionOptions,
		allowCredentials: userCredentials,
		userVerification: 'preferred',
		timeout: 60000
	};
	return u2fAuthenticationOptions;
}
async function verifyU2fAuthentication(
	assertion,
	expectedChallenge,
	publicKey,
	previousCounter,
	id
) {
	let secrets = await getSecrets();
	if (!secrets) {
		throw new Error('Secrets could not be loaded');
	}
	let assertionExpectations = {
		challenge: expectedChallenge,
		origin: secrets.RP_ORIGIN,
		factor: 'either',
		publicKey: publicKey,
		prevCounter: previousCounter,
		userHandle: id
	};
	return await fido2.assertionResult(assertion, assertionExpectations);
}
export {
	generateU2fAuthenticationOptions,
	generateU2fRegistrationOptions,
	verifyU2fAuthentication,
	verifyU2fRegistration
};
//# sourceMappingURL=data:application/json;base64,
