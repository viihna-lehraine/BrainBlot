import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import getSecrets from '../../config/secrets.js';
let secrets;
async function getSecretsOrThrow() {
	if (!secrets) {
		secrets = await getSecrets();
		if (!secrets) {
			throw new Error('Secrets could not be loaded');
		}
	}
	return secrets;
}
async function generateEmail2FACode() {
	let secrets = await getSecretsOrThrow();
	let email2FACode = await bcrypt.genSalt(6); // generates a 6-character hex code
	let email2FAToken = jwt.sign({ email2FACode }, secrets.EMAIL_2FA_KEY, {
		expiresIn: '30m'
	});
	return {
		email2FACode, // raw 2FA code
		email2FAToken // JWT containing the 2FA code
	};
}
async function verifyEmail2FACode(token, email2FACode) {
	let secrets = await getSecretsOrThrow();
	try {
		let decodedEmail2FACode = jwt.verify(token, secrets.EMAIL_2FA_KEY);
		// ensue the decoded 2FA code matches the one provided
		return decodedEmail2FACode.code === email2FACode;
	} catch (err) {
		console.error(err);
		return false;
	}
}
export { generateEmail2FACode, verifyEmail2FACode };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1haWwyRkFVdGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL2F1dGgvZW1haWwyRkFVdGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUM1QixPQUFPLEdBQW1CLE1BQU0sY0FBYyxDQUFDO0FBQy9DLE9BQU8sVUFBVSxNQUFNLHlCQUF5QixDQUFDO0FBTWpELElBQUksT0FBNEIsQ0FBQztBQUVqQyxLQUFLLFVBQVUsaUJBQWlCO0lBQy9CLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNkLE9BQU8sR0FBRyxNQUFNLFVBQVUsRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUNoRCxDQUFDO0lBQ0YsQ0FBQztJQUVELE9BQU8sT0FBTyxDQUFDO0FBQ2hCLENBQUM7QUFFRCxLQUFLLFVBQVUsb0JBQW9CO0lBQ2xDLElBQUksT0FBTyxHQUFHLE1BQU0saUJBQWlCLEVBQUUsQ0FBQztJQUV4QyxJQUFJLFlBQVksR0FBRyxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxtQ0FBbUM7SUFDL0UsSUFBSSxhQUFhLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLFlBQVksRUFBRSxFQUFFLE9BQU8sQ0FBQyxhQUFhLEVBQUU7UUFDckUsU0FBUyxFQUFFLEtBQUs7S0FDaEIsQ0FBQyxDQUFDO0lBQ0gsT0FBTztRQUNOLFlBQVksRUFBRSxlQUFlO1FBQzdCLGFBQWEsQ0FBQyw4QkFBOEI7S0FDNUMsQ0FBQztBQUNILENBQUM7QUFFRCxLQUFLLFVBQVUsa0JBQWtCLENBQUMsS0FBYSxFQUFFLFlBQW9CO0lBQ3BFLElBQUksT0FBTyxHQUFHLE1BQU0saUJBQWlCLEVBQUUsQ0FBQztJQUV4QyxJQUFJLENBQUM7UUFDSixJQUFJLG1CQUFtQixHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQ25DLEtBQUssRUFDTCxPQUFPLENBQUMsYUFBYSxDQUNQLENBQUM7UUFFaEIsc0RBQXNEO1FBQ3RELE9BQU8sbUJBQW1CLENBQUMsSUFBSSxLQUFLLFlBQVksQ0FBQztJQUNsRCxDQUFDO0lBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNkLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkIsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO0FBQ0YsQ0FBQztBQUVELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxrQkFBa0IsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGJjcnlwdCBmcm9tICdiY3J5cHQnO1xuaW1wb3J0IGp3dCwgeyBKd3RQYXlsb2FkIH0gZnJvbSAnanNvbndlYnRva2VuJztcbmltcG9ydCBnZXRTZWNyZXRzIGZyb20gJy4uLy4uL2NvbmZpZy9zZWNyZXRzLmpzJztcblxuaW50ZXJmYWNlIFNlY3JldHMge1xuXHRFTUFJTF8yRkFfS0VZOiBzdHJpbmc7XG59XG5cbmxldCBzZWNyZXRzOiBTZWNyZXRzIHwgdW5kZWZpbmVkO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRTZWNyZXRzT3JUaHJvdygpOiBQcm9taXNlPFNlY3JldHM+IHtcblx0aWYgKCFzZWNyZXRzKSB7XG5cdFx0c2VjcmV0cyA9IGF3YWl0IGdldFNlY3JldHMoKTtcblx0XHRpZiAoIXNlY3JldHMpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignU2VjcmV0cyBjb3VsZCBub3QgYmUgbG9hZGVkJyk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHNlY3JldHM7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlRW1haWwyRkFDb2RlKCkge1xuXHRsZXQgc2VjcmV0cyA9IGF3YWl0IGdldFNlY3JldHNPclRocm93KCk7XG5cblx0bGV0IGVtYWlsMkZBQ29kZSA9IGF3YWl0IGJjcnlwdC5nZW5TYWx0KDYpOyAvLyBnZW5lcmF0ZXMgYSA2LWNoYXJhY3RlciBoZXggY29kZVxuXHRsZXQgZW1haWwyRkFUb2tlbiA9IGp3dC5zaWduKHsgZW1haWwyRkFDb2RlIH0sIHNlY3JldHMuRU1BSUxfMkZBX0tFWSwge1xuXHRcdGV4cGlyZXNJbjogJzMwbSdcblx0fSk7XG5cdHJldHVybiB7XG5cdFx0ZW1haWwyRkFDb2RlLCAvLyByYXcgMkZBIGNvZGVcblx0XHRlbWFpbDJGQVRva2VuIC8vIEpXVCBjb250YWluaW5nIHRoZSAyRkEgY29kZVxuXHR9O1xufVxuXG5hc3luYyBmdW5jdGlvbiB2ZXJpZnlFbWFpbDJGQUNvZGUodG9rZW46IHN0cmluZywgZW1haWwyRkFDb2RlOiBzdHJpbmcpIHtcblx0bGV0IHNlY3JldHMgPSBhd2FpdCBnZXRTZWNyZXRzT3JUaHJvdygpO1xuXG5cdHRyeSB7XG5cdFx0bGV0IGRlY29kZWRFbWFpbDJGQUNvZGUgPSBqd3QudmVyaWZ5KFxuXHRcdFx0dG9rZW4sXG5cdFx0XHRzZWNyZXRzLkVNQUlMXzJGQV9LRVlcblx0XHQpIGFzIEp3dFBheWxvYWQ7XG5cblx0XHQvLyBlbnN1ZSB0aGUgZGVjb2RlZCAyRkEgY29kZSBtYXRjaGVzIHRoZSBvbmUgcHJvdmlkZWRcblx0XHRyZXR1cm4gZGVjb2RlZEVtYWlsMkZBQ29kZS5jb2RlID09PSBlbWFpbDJGQUNvZGU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdGNvbnNvbGUuZXJyb3IoZXJyKTtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxuZXhwb3J0IHsgZ2VuZXJhdGVFbWFpbDJGQUNvZGUsIHZlcmlmeUVtYWlsMkZBQ29kZSB9O1xuIl19
