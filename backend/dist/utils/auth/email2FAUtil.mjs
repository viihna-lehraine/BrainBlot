export default async function createEmail2FAUtil({
	logger,
	getSecrets,
	bcrypt,
	jwt
}) {
	const secrets = await getSecrets();
	if (!secrets) {
		throw new Error('Secrets could not be loaded');
	}
	async function generateEmail2FACode() {
		const email2FACode = await bcrypt.genSalt(6); // generates a 6-character hex code
		const email2FAToken = jwt.sign(
			{ email2FACode },
			secrets.EMAIL_2FA_KEY,
			{
				expiresIn: '30m'
			}
		);
		return {
			email2FACode, // raw 2FA code
			email2FAToken // JWT containing the 2FA code
		};
	}
	async function verifyEmail2FACode(token, email2FACode) {
		try {
			const decodedEmail2FACode = jwt.verify(
				token,
				secrets.EMAIL_2FA_KEY
			);
			// Ensure the decoded 2FA code matches the one provided
			return decodedEmail2FACode.email2FACode === email2FACode;
		} catch (err) {
			logger.error(String(err));
			return false;
		}
	}
	return {
		generateEmail2FACode,
		verifyEmail2FACode
	};
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1haWwyRkFVdGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL2F1dGgvZW1haWwyRkFVdGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWVBLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxVQUFVLGtCQUFrQixDQUFDLEVBQ2hELE1BQU0sRUFDTixVQUFVLEVBQ1YsTUFBTSxFQUNOLEdBQUcsRUFDdUI7SUFVMUIsTUFBTSxPQUFPLEdBQVksTUFBTSxVQUFVLEVBQUUsQ0FBQztJQUU1QyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDZCxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELEtBQUssVUFBVSxvQkFBb0I7UUFJbEMsTUFBTSxZQUFZLEdBQUcsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsbUNBQW1DO1FBQ2pGLE1BQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQzdCLEVBQUUsWUFBWSxFQUFFLEVBQ2hCLE9BQU8sQ0FBQyxhQUFhLEVBQ3JCO1lBQ0MsU0FBUyxFQUFFLEtBQUs7U0FDaEIsQ0FDRCxDQUFDO1FBQ0YsT0FBTztZQUNOLFlBQVksRUFBRSxlQUFlO1lBQzdCLGFBQWEsQ0FBQyw4QkFBOEI7U0FDNUMsQ0FBQztJQUNILENBQUM7SUFFRCxLQUFLLFVBQVUsa0JBQWtCLENBQ2hDLEtBQWEsRUFDYixZQUFvQjtRQUVwQixJQUFJLENBQUM7WUFDSixNQUFNLG1CQUFtQixHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQ3JDLEtBQUssRUFDTCxPQUFPLENBQUMsYUFBYSxDQUNQLENBQUM7WUFFaEIsdURBQXVEO1lBQ3ZELE9BQU8sbUJBQW1CLENBQUMsWUFBWSxLQUFLLFlBQVksQ0FBQztRQUMxRCxDQUFDO1FBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztZQUNkLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDMUIsT0FBTyxLQUFLLENBQUM7UUFDZCxDQUFDO0lBQ0YsQ0FBQztJQUVELE9BQU87UUFDTixvQkFBb0I7UUFDcEIsa0JBQWtCO0tBQ2xCLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGJjcnlwdCBmcm9tICdiY3J5cHQnO1xuaW1wb3J0IGp3dCwgeyBKd3RQYXlsb2FkIH0gZnJvbSAnanNvbndlYnRva2VuJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJ3dpbnN0b24nO1xuXG5pbnRlcmZhY2UgU2VjcmV0cyB7XG5cdEVNQUlMXzJGQV9LRVk6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIEVtYWlsMkZBVXRpbERlcGVuZGVuY2llcyB7XG5cdGxvZ2dlcjogTG9nZ2VyO1xuXHRnZXRTZWNyZXRzOiAoKSA9PiBQcm9taXNlPFNlY3JldHM+O1xuXHRiY3J5cHQ6IHR5cGVvZiBiY3J5cHQ7XG5cdGp3dDogdHlwZW9mIGp3dDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlRW1haWwyRkFVdGlsKHtcblx0bG9nZ2VyLFxuXHRnZXRTZWNyZXRzLFxuXHRiY3J5cHQsXG5cdGp3dFxufTogRW1haWwyRkFVdGlsRGVwZW5kZW5jaWVzKTogUHJvbWlzZTx7XG5cdGdlbmVyYXRlRW1haWwyRkFDb2RlOiAoKSA9PiBQcm9taXNlPHtcblx0XHRlbWFpbDJGQUNvZGU6IHN0cmluZztcblx0XHRlbWFpbDJGQVRva2VuOiBzdHJpbmc7XG5cdH0+O1xuXHR2ZXJpZnlFbWFpbDJGQUNvZGU6IChcblx0XHR0b2tlbjogc3RyaW5nLFxuXHRcdGVtYWlsMkZBQ29kZTogc3RyaW5nXG5cdCkgPT4gUHJvbWlzZTxib29sZWFuPjtcbn0+IHtcblx0Y29uc3Qgc2VjcmV0czogU2VjcmV0cyA9IGF3YWl0IGdldFNlY3JldHMoKTtcblxuXHRpZiAoIXNlY3JldHMpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ1NlY3JldHMgY291bGQgbm90IGJlIGxvYWRlZCcpO1xuXHR9XG5cblx0YXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVFbWFpbDJGQUNvZGUoKTogUHJvbWlzZTx7XG5cdFx0ZW1haWwyRkFDb2RlOiBzdHJpbmc7XG5cdFx0ZW1haWwyRkFUb2tlbjogc3RyaW5nO1xuXHR9PiB7XG5cdFx0Y29uc3QgZW1haWwyRkFDb2RlID0gYXdhaXQgYmNyeXB0LmdlblNhbHQoNik7IC8vIGdlbmVyYXRlcyBhIDYtY2hhcmFjdGVyIGhleCBjb2RlXG5cdFx0Y29uc3QgZW1haWwyRkFUb2tlbiA9IGp3dC5zaWduKFxuXHRcdFx0eyBlbWFpbDJGQUNvZGUgfSxcblx0XHRcdHNlY3JldHMuRU1BSUxfMkZBX0tFWSxcblx0XHRcdHtcblx0XHRcdFx0ZXhwaXJlc0luOiAnMzBtJ1xuXHRcdFx0fVxuXHRcdCk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGVtYWlsMkZBQ29kZSwgLy8gcmF3IDJGQSBjb2RlXG5cdFx0XHRlbWFpbDJGQVRva2VuIC8vIEpXVCBjb250YWluaW5nIHRoZSAyRkEgY29kZVxuXHRcdH07XG5cdH1cblxuXHRhc3luYyBmdW5jdGlvbiB2ZXJpZnlFbWFpbDJGQUNvZGUoXG5cdFx0dG9rZW46IHN0cmluZyxcblx0XHRlbWFpbDJGQUNvZGU6IHN0cmluZ1xuXHQpOiBQcm9taXNlPGJvb2xlYW4+IHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgZGVjb2RlZEVtYWlsMkZBQ29kZSA9IGp3dC52ZXJpZnkoXG5cdFx0XHRcdHRva2VuLFxuXHRcdFx0XHRzZWNyZXRzLkVNQUlMXzJGQV9LRVlcblx0XHRcdCkgYXMgSnd0UGF5bG9hZDtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBkZWNvZGVkIDJGQSBjb2RlIG1hdGNoZXMgdGhlIG9uZSBwcm92aWRlZFxuXHRcdFx0cmV0dXJuIGRlY29kZWRFbWFpbDJGQUNvZGUuZW1haWwyRkFDb2RlID09PSBlbWFpbDJGQUNvZGU7XG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRsb2dnZXIuZXJyb3IoU3RyaW5nKGVycikpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0Z2VuZXJhdGVFbWFpbDJGQUNvZGUsXG5cdFx0dmVyaWZ5RW1haWwyRkFDb2RlXG5cdH07XG59XG4iXX0=
