import jwt from 'jsonwebtoken';
import getSecrets from '../../config/secrets.js';
let secrets;
let loadSecrets = async () => {
	if (!secrets) {
		secrets = await getSecrets();
	}
	return secrets;
};
export let generateToken = async (user) => {
	let secrets = await loadSecrets();
	if (!secrets) {
		throw new Error('Secrets could not be loaded');
	}
	return jwt.sign(
		{ id: user.id, username: user.username },
		secrets.JWT_SECRET,
		{ expiresIn: '1h' }
	);
};
export let verifyJwToken = async (token) => {
	try {
		let secrets = await loadSecrets();
		if (!secrets) {
			throw new Error('Secrets could not be loaded');
		}
		return jwt.verify(token, secrets.JWT_SECRET);
	} catch (err) {
		console.log(err);
		return null;
	}
};
export default verifyJwToken;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0VXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9hdXRoL2p3dFV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxHQUFHLE1BQU0sY0FBYyxDQUFDO0FBQy9CLE9BQU8sVUFBVSxNQUFNLHNCQUFzQixDQUFDO0FBVzlDLElBQUksT0FBNEIsQ0FBQztBQUVqQyxJQUFJLFdBQVcsR0FBRyxLQUFLLElBQUksRUFBRTtJQUM1QixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDZCxPQUFPLEdBQUcsTUFBTSxVQUFVLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBQ0QsT0FBTyxPQUFPLENBQUM7QUFDaEIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQUksYUFBYSxHQUFHLEtBQUssRUFBRSxJQUFVLEVBQUUsRUFBRTtJQUMvQyxJQUFJLE9BQU8sR0FBRyxNQUFNLFdBQVcsRUFBRSxDQUFDO0lBQ2xDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBQ0QsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUNkLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFDeEMsT0FBTyxDQUFDLFVBQVUsRUFDbEIsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQ25CLENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsSUFBSSxhQUFhLEdBQUcsS0FBSyxFQUFFLEtBQWEsRUFBRSxFQUFFO0lBQ2xELElBQUksQ0FBQztRQUNKLElBQUksT0FBTyxHQUFHLE1BQU0sV0FBVyxFQUFFLENBQUM7UUFDbEMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBQ2hELENBQUM7UUFDRCxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakIsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0FBQ0YsQ0FBQyxDQUFDO0FBRUYsZUFBZSxhQUFhLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgand0IGZyb20gJ2pzb253ZWJ0b2tlbic7XG5pbXBvcnQgZ2V0U2VjcmV0cyBmcm9tICcuLi8uLi9jb25maWcvc2VjcmV0cyc7XG5cbmludGVyZmFjZSBTZWNyZXRzIHtcblx0SldUX1NFQ1JFVDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgVXNlciB7XG5cdGlkOiBzdHJpbmc7XG5cdHVzZXJuYW1lOiBzdHJpbmc7XG59XG5cbmxldCBzZWNyZXRzOiBTZWNyZXRzIHwgdW5kZWZpbmVkO1xuXG5sZXQgbG9hZFNlY3JldHMgPSBhc3luYyAoKSA9PiB7XG5cdGlmICghc2VjcmV0cykge1xuXHRcdHNlY3JldHMgPSBhd2FpdCBnZXRTZWNyZXRzKCk7XG5cdH1cblx0cmV0dXJuIHNlY3JldHM7XG59O1xuXG5leHBvcnQgbGV0IGdlbmVyYXRlVG9rZW4gPSBhc3luYyAodXNlcjogVXNlcikgPT4ge1xuXHRsZXQgc2VjcmV0cyA9IGF3YWl0IGxvYWRTZWNyZXRzKCk7XG5cdGlmICghc2VjcmV0cykge1xuXHRcdHRocm93IG5ldyBFcnJvcignU2VjcmV0cyBjb3VsZCBub3QgYmUgbG9hZGVkJyk7XG5cdH1cblx0cmV0dXJuIGp3dC5zaWduKFxuXHRcdHsgaWQ6IHVzZXIuaWQsIHVzZXJuYW1lOiB1c2VyLnVzZXJuYW1lIH0sXG5cdFx0c2VjcmV0cy5KV1RfU0VDUkVULFxuXHRcdHsgZXhwaXJlc0luOiAnMWgnIH1cblx0KTtcbn07XG5cbmV4cG9ydCBsZXQgdmVyaWZ5SndUb2tlbiA9IGFzeW5jICh0b2tlbjogc3RyaW5nKSA9PiB7XG5cdHRyeSB7XG5cdFx0bGV0IHNlY3JldHMgPSBhd2FpdCBsb2FkU2VjcmV0cygpO1xuXHRcdGlmICghc2VjcmV0cykge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdTZWNyZXRzIGNvdWxkIG5vdCBiZSBsb2FkZWQnKTtcblx0XHR9XG5cdFx0cmV0dXJuIGp3dC52ZXJpZnkodG9rZW4sIHNlY3JldHMuSldUX1NFQ1JFVCk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdGNvbnNvbGUubG9nKGVycik7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHZlcmlmeUp3VG9rZW47XG4iXX0=
