import { Fido2Lib } from 'fido2-lib';
import path from 'path';
import sops from '../../utils/sops.mjs';
import setupLogger from '../../config/logger.mjs';
import { execSync } from 'child_process';
let fido2 = null;
let secrets;
const logger = setupLogger();
function getDirectoryPath() {
	return path.resolve(process.cwd());
}
async function initializeFido2() {
	secrets = await sops.getSecrets({
		logger,
		execSync,
		getDirectoryPath
	});
	if (!secrets) {
		throw new Error('Secrets could not be loaded');
	}
	fido2 = new Fido2Lib({
		timeout: 60000,
		rpId: secrets.RP_ID,
		rpName: secrets.RP_NAME,
		challengeSize: secrets.FIDO_CHALLENGE_SIZE,
		cryptoParams: secrets.FIDO_CRYPTO_PARAMETERS,
		authenticatorRequireResidentKey:
			secrets.FIDO_AUTHENTICATOR_REQUIRE_RESIDENT_KEY,
		authenticatorUserVerification:
			secrets.FIDO_AUTHENTICATOR_USER_VERIFICATION
	});
}
async function ensureFido2Initialized() {
	if (!fido2) {
		await initializeFido2();
	}
}
async function generatePasskeyRegistrationOptions(user) {
	await ensureFido2Initialized();
	const passkeyRegistrationOptions = await fido2.attestationOptions();
	const registrationOptions = {
		...passkeyRegistrationOptions,
		user: {
			id: Buffer.from(user.id, 'utf-8'),
			name: user.email,
			displayName: user.username
		},
		pubKeyCredParams: [{ type: 'public-key', alg: -7 }],
		timeout: 60000,
		attestation: 'direct',
		authenticatorSelection: {
			authenticatorAttachment: 'platform',
			requireResidentKey: true,
			userVerification: 'preferred'
		}
	};
	return registrationOptions;
}
async function verifyPasskeyRegistration(attestation, expectedChallenge) {
	await ensureFido2Initialized();
	secrets = await sops.getSecrets({
		logger,
		execSync,
		getDirectoryPath
	});
	const u2fAttestationExpectations = {
		challenge: expectedChallenge,
		origin: secrets.RP_ORIGIN,
		factor: 'either',
		rpId: secrets.RP_ID
	};
	const result = await fido2.attestationResult(
		attestation,
		u2fAttestationExpectations
	);
	return result;
}
async function generatePasskeyAuthenticationOptions(user) {
	await ensureFido2Initialized();
	const userCredentials = user.credential.map(credential => ({
		type: 'public-key',
		id: Buffer.from(credential.credentialId, 'base64').buffer
	}));
	const assertionOptions = await fido2.assertionOptions();
	const authenticationOptions = {
		...assertionOptions,
		allowCredentials: userCredentials,
		userVerification: 'required', // ensure this supports passwordless login
		timeout: 60000
	};
	return authenticationOptions;
}
async function verifyPasskeyAuthentication(
	assertion,
	expectedChallenge,
	publicKey,
	previousCounter,
	id
) {
	await ensureFido2Initialized();
	secrets = await sops.getSecrets({
		logger,
		execSync,
		getDirectoryPath
	});
	const assertionExpectations = {
		challenge: expectedChallenge,
		origin: secrets.RP_ORIGIN,
		factor: 'either',
		publicKey,
		prevCounter: previousCounter,
		userHandle: id
	};
	const result = await fido2.assertionResult(
		assertion,
		assertionExpectations
	);
	return result;
}
export default {
	generatePasskeyAuthenticationOptions,
	generatePasskeyRegistrationOptions,
	verifyPasskeyAuthentication,
	verifyPasskeyRegistration
};
//# sourceMappingURL=data:application/json;base64,
