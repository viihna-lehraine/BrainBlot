import { validationResult } from 'express-validator';
import xss from 'xss';
import { ServiceFactory } from '../index/factory.mjs';
const errorLogger = await ServiceFactory.getErrorLoggerService();
const errorHandler = await ServiceFactory.getErrorHandlerService();
export function sanitizeInput(input) {
	return xss(input.trim());
}
export async function sanitizeRequestBody(body) {
	const { sensitiveFields } = await import('../config/security').then(
		module => ({
			sensitiveFields: module.sensitiveFields
		})
	);
	const sanitize = async data => {
		const sanitizedData = new Map(Object.entries(data));
		for (const [key, value] of sanitizedData) {
			if (sensitiveFields.includes(key)) {
				sanitizedData.set(key, '[REDACTED]');
			} else if (typeof value === 'object' && value !== null) {
				if (Array.isArray(value)) {
					const sanitizedArray = await Promise.all(
						value.map(async item =>
							typeof item === 'object' && item !== null
								? await sanitize(item)
								: item
						)
					);
					sanitizedData.set(key, sanitizedArray);
				} else {
					sanitizedData.set(key, await sanitize(value));
				}
			}
		}
		return Object.fromEntries(sanitizedData);
	};
	return await sanitize(body);
}
export function validateBlotEntry(req, res, next) {
	req.body.name = sanitizeInput(req.body.name || '');
	req.body.message = sanitizeInput(req.body.message || '');
	const errors = validationResult(req);
	if (!errors.isEmpty()) {
		return res.status(400).json({ errors: errors.array() });
	}
	next();
}
export function handleValidationErrors(req, res, next) {
	const errors = validationResult(req);
	if (!errors.isEmpty()) {
		const errorDetails = {
			message: 'Validation failed',
			errors: errors.array()
		};
		errorLogger.logError('Validation failed', { errors: errors.array() });
		errorHandler.expressErrorHandler()(errorDetails, req, res, next);
		return res.status(400).json({ errors: errors.array() });
	}
	next();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL3ZhbGlkYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNyRCxPQUFPLEdBQUcsTUFBTSxLQUFLLENBQUM7QUFDdEIsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWxELE1BQU0sV0FBVyxHQUFHLE1BQU0sY0FBYyxDQUFDLHFCQUFxQixFQUFFLENBQUM7QUFDakUsTUFBTSxZQUFZLEdBQUcsTUFBTSxjQUFjLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztBQUVuRSxNQUFNLFVBQVUsYUFBYSxDQUFDLEtBQWE7SUFDMUMsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFDMUIsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsbUJBQW1CLENBQ3hDLElBQTZCO0lBRTdCLE1BQU0sRUFBRSxlQUFlLEVBQUUsR0FBRyxNQUFNLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLElBQUksQ0FDbEUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ1YsZUFBZSxFQUFFLE1BQU0sQ0FBQyxlQUFlO0tBQ3ZDLENBQUMsQ0FDRixDQUFDO0lBRUYsTUFBTSxRQUFRLEdBQUcsS0FBSyxFQUNyQixJQUE2QixFQUNNLEVBQUU7UUFDckMsTUFBTSxhQUFhLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRXBELEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxhQUFhLEVBQUUsQ0FBQztZQUMxQyxJQUFJLGVBQWUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDbkMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDdEMsQ0FBQztpQkFBTSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFLENBQUM7Z0JBQ3hELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO29CQUMxQixNQUFNLGNBQWMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ3ZDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFDLElBQUksRUFBQyxFQUFFLENBQ3RCLE9BQU8sSUFBSSxLQUFLLFFBQVEsSUFBSSxJQUFJLEtBQUssSUFBSTt3QkFDeEMsQ0FBQyxDQUFDLE1BQU0sUUFBUSxDQUNkLElBQStCLENBQy9CO3dCQUNGLENBQUMsQ0FBQyxJQUFJLENBQ1AsQ0FDRCxDQUFDO29CQUNGLGFBQWEsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDO2dCQUN4QyxDQUFDO3FCQUFNLENBQUM7b0JBQ1AsYUFBYSxDQUFDLEdBQUcsQ0FDaEIsR0FBRyxFQUNILE1BQU0sUUFBUSxDQUFDLEtBQWdDLENBQUMsQ0FDaEQsQ0FBQztnQkFDSCxDQUFDO1lBQ0YsQ0FBQztRQUNGLENBQUM7UUFFRCxPQUFPLE1BQU0sQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDO0lBRUYsT0FBTyxNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM3QixDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUNoQyxHQUFZLEVBQ1osR0FBYSxFQUNiLElBQWtCO0lBRWxCLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNuRCxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLENBQUM7SUFFekQsTUFBTSxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDO1FBQ3ZCLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQsSUFBSSxFQUFFLENBQUM7QUFDUixDQUFDO0FBRUQsTUFBTSxVQUFVLHNCQUFzQixDQUNyQyxHQUFZLEVBQ1osR0FBYSxFQUNiLElBQWtCO0lBRWxCLE1BQU0sTUFBTSxHQUFHLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXJDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztRQUN2QixNQUFNLFlBQVksR0FBNEI7WUFDN0MsT0FBTyxFQUFFLG1CQUFtQjtZQUM1QixNQUFNLEVBQUUsTUFBTSxDQUFDLEtBQUssRUFBRTtTQUN0QixDQUFDO1FBQ0YsV0FBVyxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3RFLFlBQVksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRWpFLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQsSUFBSSxFQUFFLENBQUM7QUFDUixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UsIE5leHRGdW5jdGlvbiB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgdmFsaWRhdGlvblJlc3VsdCB9IGZyb20gJ2V4cHJlc3MtdmFsaWRhdG9yJztcbmltcG9ydCB4c3MgZnJvbSAneHNzJztcbmltcG9ydCB7IFNlcnZpY2VGYWN0b3J5IH0gZnJvbSAnLi4vaW5kZXgvZmFjdG9yeSc7XG5cbmNvbnN0IGVycm9yTG9nZ2VyID0gYXdhaXQgU2VydmljZUZhY3RvcnkuZ2V0RXJyb3JMb2dnZXJTZXJ2aWNlKCk7XG5jb25zdCBlcnJvckhhbmRsZXIgPSBhd2FpdCBTZXJ2aWNlRmFjdG9yeS5nZXRFcnJvckhhbmRsZXJTZXJ2aWNlKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGl6ZUlucHV0KGlucHV0OiBzdHJpbmcpOiBzdHJpbmcge1xuXHRyZXR1cm4geHNzKGlucHV0LnRyaW0oKSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYW5pdGl6ZVJlcXVlc3RCb2R5KFxuXHRib2R5OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPlxuKTogUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4ge1xuXHRjb25zdCB7IHNlbnNpdGl2ZUZpZWxkcyB9ID0gYXdhaXQgaW1wb3J0KCcuLi9jb25maWcvc2VjdXJpdHknKS50aGVuKFxuXHRcdG1vZHVsZSA9PiAoe1xuXHRcdFx0c2Vuc2l0aXZlRmllbGRzOiBtb2R1bGUuc2Vuc2l0aXZlRmllbGRzXG5cdFx0fSlcblx0KTtcblxuXHRjb25zdCBzYW5pdGl6ZSA9IGFzeW5jIChcblx0XHRkYXRhOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPlxuXHQpOiBQcm9taXNlPFJlY29yZDxzdHJpbmcsIHVua25vd24+PiA9PiB7XG5cdFx0Y29uc3Qgc2FuaXRpemVkRGF0YSA9IG5ldyBNYXAoT2JqZWN0LmVudHJpZXMoZGF0YSkpO1xuXG5cdFx0Zm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2Ygc2FuaXRpemVkRGF0YSkge1xuXHRcdFx0aWYgKHNlbnNpdGl2ZUZpZWxkcy5pbmNsdWRlcyhrZXkpKSB7XG5cdFx0XHRcdHNhbml0aXplZERhdGEuc2V0KGtleSwgJ1tSRURBQ1RFRF0nKTtcblx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRcdFx0XHRjb25zdCBzYW5pdGl6ZWRBcnJheSA9IGF3YWl0IFByb21pc2UuYWxsKFxuXHRcdFx0XHRcdFx0dmFsdWUubWFwKGFzeW5jIGl0ZW0gPT5cblx0XHRcdFx0XHRcdFx0dHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnICYmIGl0ZW0gIT09IG51bGxcblx0XHRcdFx0XHRcdFx0XHQ/IGF3YWl0IHNhbml0aXplKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpdGVtIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+XG5cdFx0XHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHRcdFx0OiBpdGVtXG5cdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRzYW5pdGl6ZWREYXRhLnNldChrZXksIHNhbml0aXplZEFycmF5KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzYW5pdGl6ZWREYXRhLnNldChcblx0XHRcdFx0XHRcdGtleSxcblx0XHRcdFx0XHRcdGF3YWl0IHNhbml0aXplKHZhbHVlIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+KVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKHNhbml0aXplZERhdGEpO1xuXHR9O1xuXG5cdHJldHVybiBhd2FpdCBzYW5pdGl6ZShib2R5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQmxvdEVudHJ5KFxuXHRyZXE6IFJlcXVlc3QsXG5cdHJlczogUmVzcG9uc2UsXG5cdG5leHQ6IE5leHRGdW5jdGlvblxuKTogUmVzcG9uc2UgfCB2b2lkIHtcblx0cmVxLmJvZHkubmFtZSA9IHNhbml0aXplSW5wdXQocmVxLmJvZHkubmFtZSB8fCAnJyk7XG5cdHJlcS5ib2R5Lm1lc3NhZ2UgPSBzYW5pdGl6ZUlucHV0KHJlcS5ib2R5Lm1lc3NhZ2UgfHwgJycpO1xuXG5cdGNvbnN0IGVycm9ycyA9IHZhbGlkYXRpb25SZXN1bHQocmVxKTtcblx0aWYgKCFlcnJvcnMuaXNFbXB0eSgpKSB7XG5cdFx0cmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3JzOiBlcnJvcnMuYXJyYXkoKSB9KTtcblx0fVxuXG5cdG5leHQoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZVZhbGlkYXRpb25FcnJvcnMoXG5cdHJlcTogUmVxdWVzdCxcblx0cmVzOiBSZXNwb25zZSxcblx0bmV4dDogTmV4dEZ1bmN0aW9uXG4pOiBSZXNwb25zZSB8IHZvaWQge1xuXHRjb25zdCBlcnJvcnMgPSB2YWxpZGF0aW9uUmVzdWx0KHJlcSk7XG5cblx0aWYgKCFlcnJvcnMuaXNFbXB0eSgpKSB7XG5cdFx0Y29uc3QgZXJyb3JEZXRhaWxzOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiA9IHtcblx0XHRcdG1lc3NhZ2U6ICdWYWxpZGF0aW9uIGZhaWxlZCcsXG5cdFx0XHRlcnJvcnM6IGVycm9ycy5hcnJheSgpXG5cdFx0fTtcblx0XHRlcnJvckxvZ2dlci5sb2dFcnJvcignVmFsaWRhdGlvbiBmYWlsZWQnLCB7IGVycm9yczogZXJyb3JzLmFycmF5KCkgfSk7XG5cdFx0ZXJyb3JIYW5kbGVyLmV4cHJlc3NFcnJvckhhbmRsZXIoKShlcnJvckRldGFpbHMsIHJlcSwgcmVzLCBuZXh0KTtcblxuXHRcdHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9yczogZXJyb3JzLmFycmF5KCkgfSk7XG5cdH1cblxuXHRuZXh0KCk7XG59XG4iXX0=
