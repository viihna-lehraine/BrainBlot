export function getCallerInfo() {
	const stack = new Error().stack;
	if (stack) {
		const stackLines = stack.split('\n');
		const callerLine = stackLines[3]?.trim();
		return callerLine || 'Unknown caller';
	}
	return 'No stack trace available';
}
export function isAppLogger(logger) {
	return (
		logger !== undefined &&
		logger !== null &&
		typeof logger.error === 'function' &&
		typeof logger.warn === 'function' &&
		typeof logger.debug === 'function' &&
		typeof logger.info === 'function' &&
		typeof logger.log === 'function'
	);
}
export function validateDependencies(dependencies, logger) {
	const logInfo = isAppLogger(logger) ? logger.info : console.info;
	const logWarn = isAppLogger(logger) ? logger.warn : console.warn;
	const logError = isAppLogger(logger) ? logger.error : console.error;
	const callerInfo = getCallerInfo();
	if (!dependencies || dependencies.length === 0) {
		logWarn('No dependencies provided for validation');
		throw new Error('No dependencies provided for validation');
	}
	try {
		logInfo(
			`Validating the following dependencies (called from: ${callerInfo}): ${dependencies.map(dep => `${dep.name}: ${dep.instance}`).join(', ')}`
		);
		const missingDependencies = dependencies.filter(
			({ instance }) => instance === undefined || instance === null
		);
		if (missingDependencies.length > 0) {
			const missingNames = missingDependencies
				.map(({ name }) => name)
				.join(', ');
			logError(`
				Missing dependencies (called from ${callerInfo}): ${missingNames}`);
			throw new Error(`Missing dependencies: ${missingNames}`);
		}
		logInfo(
			`All dependencies are valid (called from: ${callerInfo}): ${dependencies
				.map(({ name }) => name)
				.join(', ')}`
		);
	} catch (error) {
		const message =
			error instanceof Error ? error.message : 'Unknown error';
		const stack = error instanceof Error ? error.stack : 'No stack trace';
		if (isAppLogger(logger)) {
			logger.error('An error occurred during dependency validation', {
				stack: stack ?? 'No stack trace',
				message: message ?? 'Unknown error'
			});
		} else {
			console.error('An error occurred during dependency validation', {
				stack: stack ?? 'No stack trace',
				message: message ?? 'Unknown error'
			});
		}
		throw error;
	}
}
export async function withRetry(
	operation,
	maxRetries,
	delayMs,
	exponentialBackoff = false
) {
	let attempts = 0;
	while (attempts < maxRetries) {
		try {
			return await operation();
		} catch (error) {
			attempts++;
			if (attempts >= maxRetries) {
				throw error;
			}
			const delay = exponentialBackoff
				? delayMs * Math.pow(2, attempts - 1)
				: delayMs;
			await new Promise(resolve => setTimeout(resolve, delay));
		}
	}
	throw new Error('Exceeded maximum retry attempts');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sVUFBVSxhQUFhO0lBQzVCLE1BQU0sS0FBSyxHQUFHLElBQUksS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDO0lBQ2hDLElBQUksS0FBSyxFQUFFLENBQUM7UUFDWCxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUN6QyxPQUFPLFVBQVUsSUFBSSxnQkFBZ0IsQ0FBQztJQUN2QyxDQUFDO0lBQ0QsT0FBTywwQkFBMEIsQ0FBQztBQUNuQyxDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FDMUIsTUFBdUQ7SUFFdkQsT0FBTyxDQUNOLE1BQU0sS0FBSyxTQUFTO1FBQ3BCLE1BQU0sS0FBSyxJQUFJO1FBQ2YsT0FBTyxNQUFNLENBQUMsS0FBSyxLQUFLLFVBQVU7UUFDbEMsT0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLFVBQVU7UUFDakMsT0FBTyxNQUFNLENBQUMsS0FBSyxLQUFLLFVBQVU7UUFDbEMsT0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLFVBQVU7UUFDakMsT0FBTyxNQUFNLENBQUMsR0FBRyxLQUFLLFVBQVUsQ0FDaEMsQ0FBQztBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsb0JBQW9CLENBQ25DLFlBQW1DLEVBQ25DLE1BQWlDO0lBRWpDLE1BQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztJQUNqRSxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0s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T0FBTyxNQUFNLFNBQVMsRUFBRSxDQUFDO1FBQzFCLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2hCLFFBQVEsRUFBRSxDQUFDO1lBRVgsSUFBSSxRQUFRLElBQUksVUFBVSxFQUFFLENBQUM7Z0JBQzVCLE1BQU0sS0FBSyxDQUFDO1lBQ2IsQ0FBQztZQUVELE1BQU0sS0FBSyxHQUFHLGtCQUFrQjtnQkFDL0IsQ0FBQyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxRQUFRLEdBQUcsQ0FBQyxDQUFDO2dCQUNyQyxDQUFDLENBQUMsT0FBTyxDQUFDO1lBRVgsTUFBTSxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUMxRCxDQUFDO0lBQ0YsQ0FBQztJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztBQUNwRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwTG9nZ2VyU2VydmljZUludGVyZmFjZSB9IGZyb20gJy4uL2luZGV4L2ludGVyZmFjZXMvc2VydmljZXMnO1xuaW1wb3J0IHsgRGVwZW5kZW5jeUludGVyZmFjZSB9IGZyb20gJy4uL2luZGV4L2ludGVyZmFjZXMvc2VydmljZUNvbXBvbmVudHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FsbGVySW5mbygpOiBzdHJpbmcge1xuXHRjb25zdCBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuXHRpZiAoc3RhY2spIHtcblx0XHRjb25zdCBzdGFja0xpbmVzID0gc3RhY2suc3BsaXQoJ1xcbicpO1xuXHRcdGNvbnN0IGNhbGxlckxpbmUgPSBzdGFja0xpbmVzWzNdPy50cmltKCk7XG5cdFx0cmV0dXJuIGNhbGxlckxpbmUgfHwgJ1Vua25vd24gY2FsbGVyJztcblx0fVxuXHRyZXR1cm4gJ05vIHN0YWNrIHRyYWNlIGF2YWlsYWJsZSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0FwcExvZ2dlcihcblx0bG9nZ2VyOiBBcHBMb2dnZXJTZXJ2aWNlSW50ZXJmYWNlIHwgQ29uc29sZSB8IHVuZGVmaW5lZFxuKTogbG9nZ2VyIGlzIEFwcExvZ2dlclNlcnZpY2VJbnRlcmZhY2Uge1xuXHRyZXR1cm4gKFxuXHRcdGxvZ2dlciAhPT0gdW5kZWZpbmVkICYmXG5cdFx0bG9nZ2VyICE9PSBudWxsICYmXG5cdFx0dHlwZW9mIGxvZ2dlci5lcnJvciA9PT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBsb2dnZXIud2FybiA9PT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBsb2dnZXIuZGVidWcgPT09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2YgbG9nZ2VyLmluZm8gPT09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2YgbG9nZ2VyLmxvZyA9PT0gJ2Z1bmN0aW9uJ1xuXHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVEZXBlbmRlbmNpZXMoXG5cdGRlcGVuZGVuY2llczogRGVwZW5kZW5jeUludGVyZmFjZVtdLFxuXHRsb2dnZXI6IEFwcExvZ2dlclNlcnZpY2VJbnRlcmZhY2Vcbik6IHZvaWQge1xuXHRjb25zdCBsb2dJbmZvID0gaXNBcHBMb2dnZXIobG9nZ2VyKSA/IGxvZ2dlci5pbmZvIDogY29uc29sZS5pbmZvO1xuXHRjb25zdCBsb2dXYXJuID0gaXNBcHBMb2dnZXIobG9nZ2VyKSA/IGxvZ2dlci53YXJuIDogY29uc29sZS53YXJuO1xuXHRjb25zdCBsb2dFcnJvciA9IGlzQXBwTG9nZ2VyKGxvZ2dlcikgPyBsb2dnZXIuZXJyb3IgOiBjb25zb2xlLmVycm9yO1xuXG5cdGNvbnN0IGNhbGxlckluZm8gPSBnZXRDYWxsZXJJbmZvKCk7XG5cblx0aWYgKCFkZXBlbmRlbmNpZXMgfHwgZGVwZW5kZW5jaWVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdGxvZ1dhcm4oJ05vIGRlcGVuZGVuY2llcyBwcm92aWRlZCBmb3IgdmFsaWRhdGlvbicpO1xuXHRcdHRocm93IG5ldyBFcnJvcignTm8gZGVwZW5kZW5jaWVzIHByb3ZpZGVkIGZvciB2YWxpZGF0aW9uJyk7XG5cdH1cblxuXHR0cnkge1xuXHRcdGxvZ0luZm8oXG5cdFx0XHRgVmFsaWRhdGluZyB0aGUgZm9sbG93aW5nIGRlcGVuZGVuY2llcyAoY2FsbGVkIGZyb206ICR7Y2FsbGVySW5mb30pOiAke2RlcGVuZGVuY2llcy5tYXAoZGVwID0+IGAke2RlcC5uYW1lfTogJHtkZXAuaW5zdGFuY2V9YCkuam9pbignLCAnKX1gXG5cdFx0KTtcblxuXHRcdGNvbnN0IG1pc3NpbmdEZXBlbmRlbmNpZXMgPSBkZXBlbmRlbmNpZXMuZmlsdGVyKFxuXHRcdFx0KHsgaW5zdGFuY2UgfSkgPT4gaW5zdGFuY2UgPT09IHVuZGVmaW5lZCB8fCBpbnN0YW5jZSA9PT0gbnVsbFxuXHRcdCk7XG5cblx0XHRpZiAobWlzc2luZ0RlcGVuZGVuY2llcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRjb25zdCBtaXNzaW5nTmFtZXMgPSBtaXNzaW5nRGVwZW5kZW5jaWVzXG5cdFx0XHRcdC5tYXAoKHsgbmFtZSB9KSA9PiBuYW1lKVxuXHRcdFx0XHQuam9pbignLCAnKTtcblx0XHRcdGxvZ0Vycm9yKGBcblx0XHRcdFx0TWlzc2luZyBkZXBlbmRlbmNpZXMgKGNhbGxlZCBmcm9tICR7Y2FsbGVySW5mb30pOiAke21pc3NpbmdOYW1lc31gKTtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgTWlzc2luZyBkZXBlbmRlbmNpZXM6ICR7bWlzc2luZ05hbWVzfWApO1xuXHRcdH1cblxuXHRcdGxvZ0luZm8oXG5cdFx0XHRgQWxsIGRlcGVuZGVuY2llcyBhcmUgdmFsaWQgKGNhbGxlZCBmcm9tOiAke2NhbGxlckluZm99KTogJHtkZXBlbmRlbmNpZXNcblx0XHRcdFx0Lm1hcCgoeyBuYW1lIH0pID0+IG5hbWUpXG5cdFx0XHRcdC5qb2luKCcsICcpfWBcblx0XHQpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGNvbnN0IG1lc3NhZ2UgPVxuXHRcdFx0ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcic7XG5cdFx0Y29uc3Qgc3RhY2sgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3Iuc3RhY2sgOiAnTm8gc3RhY2sgdHJhY2UnO1xuXG5cdFx0aWYgKGlzQXBwTG9nZ2VyKGxvZ2dlcikpIHtcblx0XHRcdGxvZ2dlci5lcnJvcignQW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIGRlcGVuZGVuY3kgdmFsaWRhdGlvbicsIHtcblx0XHRcdFx0c3RhY2s6IHN0YWNrID8/ICdObyBzdGFjayB0cmFjZScsXG5cdFx0XHRcdG1lc3NhZ2U6IG1lc3NhZ2UgPz8gJ1Vua25vd24gZXJyb3InXG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS5lcnJvcignQW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIGRlcGVuZGVuY3kgdmFsaWRhdGlvbicsIHtcblx0XHRcdFx0c3RhY2s6IHN0YWNrID8/ICdObyBzdGFjayB0cmFjZScsXG5cdFx0XHRcdG1lc3NhZ2U6IG1lc3NhZ2UgPz8gJ1Vua25vd24gZXJyb3InXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHdpdGhSZXRyeTxUPihcblx0b3BlcmF0aW9uOiAoKSA9PiBQcm9taXNlPFQ+IHwgVCxcblx0bWF4UmV0cmllczogbnVtYmVyLFxuXHRkZWxheU1zOiBudW1iZXIsXG5cdGV4cG9uZW50aWFsQmFja29mZjogYm9vbGVhbiA9IGZhbHNlXG4pOiBQcm9taXNlPFQ+IHtcblx0bGV0IGF0dGVtcHRzID0gMDtcblxuXHR3aGlsZSAoYXR0ZW1wdHMgPCBtYXhSZXRyaWVzKSB7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBhd2FpdCBvcGVyYXRpb24oKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0YXR0ZW1wdHMrKztcblxuXHRcdFx0aWYgKGF0dGVtcHRzID49IG1heFJldHJpZXMpIHtcblx0XHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGRlbGF5ID0gZXhwb25lbnRpYWxCYWNrb2ZmXG5cdFx0XHRcdD8gZGVsYXlNcyAqIE1hdGgucG93KDIsIGF0dGVtcHRzIC0gMSlcblx0XHRcdFx0OiBkZWxheU1zO1xuXG5cdFx0XHRhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgZGVsYXkpKTtcblx0XHR9XG5cdH1cblxuXHR0aHJvdyBuZXcgRXJyb3IoJ0V4Y2VlZGVkIG1heGltdW0gcmV0cnkgYXR0ZW1wdHMnKTtcbn1cbiJdfQ==
