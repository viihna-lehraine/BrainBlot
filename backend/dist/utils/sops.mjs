import path from 'path';
import { environmentVariables } from '../config/environmentConfig.mjs';
import { processError } from '../utils/processError.mjs';
import { validateDependencies } from '../utils/validateDependencies.mjs';
async function getSecrets({ logger, execSync, getDirectoryPath }) {
	try {
		validateDependencies(
			[
				{ name: 'logger', instance: logger },
				{ name: 'execSync', instance: execSync },
				{ name: 'getDirectoryPath', instance: getDirectoryPath }
			],
			logger
		);
		const secretsPath = path.join(
			getDirectoryPath(),
			'./config/secrets.json.gpg'
		);
		logger.info(`Resolved secrets path: ${secretsPath}`);
		const decryptedSecrets = execSync(
			`sops -d --output-type json ${secretsPath}`
		).toString();
		return JSON.parse(decryptedSecrets);
	} catch (error) {
		processError(error, logger);
		throw new Error(`
			Failed to get secrets: ${error instanceof Error ? error.message : String(error)}`);
	}
}
async function decryptKey({ logger, execSync }, encryptedFilePath) {
	try {
		validateDependencies(
			[
				{ name: 'logger', instance: logger },
				{ name: 'execSync', instance: execSync }
			],
			logger
		);
		const decryptedKey = execSync(
			`sops -d --output-type string ${encryptedFilePath}`
		).toString('utf-8');
		return decryptedKey;
	} catch (error) {
		if (error instanceof Error) {
			logger.error(`Command execution failed: ${error.message}`);
		} else {
			logger.error(`An unknown error occurred: ${String(error)}`);
		}
		processError(error, logger);
		throw new Error(
			`Failed to decrypt key: ${error instanceof Error ? error.message : String(error)}`
		);
	}
}
async function decryptDataFiles({ logger, execSync }) {
	try {
		validateDependencies(
			[
				{ name: 'logger', instance: logger },
				{ name: 'execSync', instance: execSync }
			],
			logger
		);
		const filePaths = [
			environmentVariables.serverDataFilePath1,
			environmentVariables.serverDataFilePath2,
			environmentVariables.serverDataFilePath3,
			environmentVariables.serverDataFilePath4
		];
		const decryptedFilesPromises = filePaths.map(
			async (filePath, index) => {
				if (filePath) {
					logger.info(`Decrypting file: ${filePath}`);
					return execSync(
						`sops -d --output-type json ${filePath}`
					).toString();
				} else {
					logger.warn(
						`SERVER_DATA_FILE_PATH_${index + 1} is not defined`
					);
					return '';
				}
			}
		);
		const decryptedFilesArray = await Promise.all(decryptedFilesPromises);
		const decryptedFiles = {};
		decryptedFilesArray.forEach((fileContent, index) => {
			if (fileContent) {
				decryptedFiles[`files${index + 1}`] = fileContent;
			}
		});
		return decryptedFiles;
	} catch (error) {
		processError(error, logger);
		throw new Error(
			`Unable to decrypt data files: ${error instanceof Error ? error.message : String(error)}`
		);
	}
}
async function getSSLKeys(dependencies) {
	try {
		validateDependencies(
			[
				{ name: 'logger', instance: dependencies.logger },
				{ name: 'execSync', instance: dependencies.execSync },
				{
					name: 'getDirectoryPath',
					instance: dependencies.getDirectoryPath
				}
			],
			dependencies.logger
		);
		const keyPath = path.join(
			dependencies.getDirectoryPath(),
			'./keys/ssl/guestbook_key.pem.gpg'
		);
		const certPath = path.join(
			dependencies.getDirectoryPath(),
			'./keys/ssl/guestbook_cert.pem.gpg'
		);
		const decryptedKey = await decryptKey(
			{ logger: dependencies.logger, execSync: dependencies.execSync },
			keyPath
		);
		const decryptedCert = await decryptKey(
			{ logger: dependencies.logger, execSync: dependencies.execSync },
			certPath
		);
		return {
			key: decryptedKey,
			cert: decryptedCert
		};
	} catch (error) {
		processError(error, dependencies.logger);
		throw new Error(
			`Unable to retrieve SSL keys: ${error instanceof Error ? error.message : String(error)}`
		);
	}
}
export default { getSecrets, decryptKey, decryptDataFiles, getSSLKeys };
//# sourceMappingURL=data:application/json;base64,
