import { isLogger } from '../config/logger.mjs';
function getCallerInfo() {
	const stack = new Error().stack;
	if (stack) {
		const stackLines = stack.split('\n');
		const callerLine = stackLines[3]?.trim();
		return callerLine || 'Unknown caller';
	}
	return 'No stack trace available';
}
export function validateDependencies(dependencies, logger = console) {
	const logInfo = isLogger(logger) ? logger.info : console.info;
	const logWarn = isLogger(logger) ? logger.warn : console.warn;
	const logError = isLogger(logger) ? logger.error : console.error;
	const callerInfo = getCallerInfo();
	if (!dependencies || dependencies.length === 0) {
		logWarn('No dependencies provided for validation');
		throw new Error('No dependencies provided for validation');
	}
	try {
		logInfo(
			`Validating the following dependencies (called from: ${callerInfo}): ${dependencies.map(dep => `${dep.name}: ${dep.instance}`).join(', ')}`
		);
		const missingDependencies = dependencies.filter(
			({ instance }) => instance === undefined || instance === null
		);
		if (missingDependencies.length > 0) {
			const missingNames = missingDependencies
				.map(({ name }) => name)
				.join(', ');
			logError(`
				Missing dependencies (called from ${callerInfo}): ${missingNames}`);
			throw new Error(`Missing dependencies: ${missingNames}`);
		}
		logInfo(
			`All dependencies are valid (called from: ${callerInfo}): ${dependencies
				.map(({ name }) => name)
				.join(', ')}`
		);
	} catch (error) {
		const message =
			error instanceof Error ? error.message : 'Unknown error';
		const stack = error instanceof Error ? error.stack : 'No stack trace';
		if (isLogger(logger)) {
			logger.error('An error occurred during dependency validation', {
				stack: stack ?? 'No stack trace',
				message: message ?? 'Unknown error'
			});
		} else {
			console.error('An error occurred during dependency validation', {
				stack: stack ?? 'No stack trace',
				message: message ?? 'Unknown error'
			});
		}
		throw error;
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGVEZXBlbmRlbmNpZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvdmFsaWRhdGVEZXBlbmRlbmNpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBVSxNQUFNLGtCQUFrQixDQUFDO0FBT3BELFNBQVMsYUFBYTtJQUNyQixNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQztJQUNoQyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ1gsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQyxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDekMsT0FBTyxVQUFVLElBQUksZ0JBQWdCLENBQUM7SUFDdkMsQ0FBQztJQUNELE9BQU8sMEJBQTBCLENBQUM7QUFDbkMsQ0FBQztBQUVELE1BQU0sVUFBVSxvQkFBb0IsQ0FDbkMsWUFBMEIsRUFDMUIsU0FBMkIsT0FBTztJQUVsQyxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDOUQsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQzlELE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUVqRSxNQUFNLFVBQVUsR0FBRyxhQUFhLEVBQUUsQ0FBQztJQUVuQyxJQUFJLENBQUMsWUFBWSxJQUFJLFlBQVksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDaEQsT0FBTyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7UUFDbkQsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCxJQUFJLENBQUM7UUFDSixPQUFPLENBQ04sdURBQXVELFVBQVUsTUFBTSxZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUMzSSxDQUFDO1FBRUYsTUFBTSxtQkFBbUIsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUM5QyxDQUFDLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDLFFBQVEsS0FBSyxTQUFTLElBQUksUUFBUSxLQUFLLElBQUksQ0FDN0QsQ0FBQztRQUVGLElBQUksbUJBQW1CLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ3BDLE1BQU0sWUFBWSxHQUFHLG1CQUFtQjtpQkFDdEMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDO2lCQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDYixRQUFRLENBQUM7d0NBQzRCLFVBQVUsTUFBTSxZQUFZLEVBQUUsQ0FBQyxDQUFDO1lBQ3JFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLFlBQVksRUFBRSxDQUFDLENBQUM7UUFDMUQsQ0FBQztRQUVELE9BQU8sQ0FDTiw0Q0FBNEMsVUFBVSxNQUFNLFlBQVk7YUFDdEUsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDO2FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUNkLENBQUM7SUFDSCxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixNQUFNLE9BQU8sR0FDWixLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUM7UUFDMUQsTUFBTSxLQUFLLEdBQUcsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUM7UUFFdEUsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUN0QixNQUFNLENBQUMsS0FBSyxDQUFDLGdEQUFnRCxFQUFFO2dCQUM5RCxLQUFLLEVBQUUsS0FBSyxJQUFJLGdCQUFnQjtnQkFDaEMsT0FBTyxFQUFFLE9BQU8sSUFBSSxlQUFlO2FBQ25DLENBQUMsQ0FBQztRQUNKLENBQUM7YUFBTSxDQUFDO1lBQ1AsT0FBTyxDQUFDLEtBQUssQ0FBQyxnREFBZ0QsRUFBRTtnQkFDL0QsS0FBSyxFQUFFLEtBQUssSUFBSSxnQkFBZ0I7Z0JBQ2hDLE9BQU8sRUFBRSxPQUFPLElBQUksZUFBZTthQUNuQyxDQUFDLENBQUM7UUFDSixDQUFDO1FBQ0QsTUFBTSxLQUFLLENBQUM7SUFDYixDQUFDO0FBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTG9nZ2VyLCBMb2dnZXIgfSBmcm9tICcuLi9jb25maWcvbG9nZ2VyJztcblxuaW50ZXJmYWNlIERlcGVuZGVuY3kge1xuXHRuYW1lOiBzdHJpbmc7XG5cdGluc3RhbmNlOiB1bmtub3duO1xufVxuXG5mdW5jdGlvbiBnZXRDYWxsZXJJbmZvKCk6IHN0cmluZyB7XG5cdGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG5cdGlmIChzdGFjaykge1xuXHRcdGNvbnN0IHN0YWNrTGluZXMgPSBzdGFjay5zcGxpdCgnXFxuJyk7XG5cdFx0Y29uc3QgY2FsbGVyTGluZSA9IHN0YWNrTGluZXNbM10/LnRyaW0oKTtcblx0XHRyZXR1cm4gY2FsbGVyTGluZSB8fCAnVW5rbm93biBjYWxsZXInO1xuXHR9XG5cdHJldHVybiAnTm8gc3RhY2sgdHJhY2UgYXZhaWxhYmxlJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlRGVwZW5kZW5jaWVzKFxuXHRkZXBlbmRlbmNpZXM6IERlcGVuZGVuY3lbXSxcblx0bG9nZ2VyOiBMb2dnZXIgfCBDb25zb2xlID0gY29uc29sZVxuKTogdm9pZCB7XG5cdGNvbnN0IGxvZ0luZm8gPSBpc0xvZ2dlcihsb2dnZXIpID8gbG9nZ2VyLmluZm8gOiBjb25zb2xlLmluZm87XG5cdGNvbnN0IGxvZ1dhcm4gPSBpc0xvZ2dlcihsb2dnZXIpID8gbG9nZ2VyLndhcm4gOiBjb25zb2xlLndhcm47XG5cdGNvbnN0IGxvZ0Vycm9yID0gaXNMb2dnZXIobG9nZ2VyKSA/IGxvZ2dlci5lcnJvciA6IGNvbnNvbGUuZXJyb3I7XG5cblx0Y29uc3QgY2FsbGVySW5mbyA9IGdldENhbGxlckluZm8oKTtcblxuXHRpZiAoIWRlcGVuZGVuY2llcyB8fCBkZXBlbmRlbmNpZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0bG9nV2FybignTm8gZGVwZW5kZW5jaWVzIHByb3ZpZGVkIGZvciB2YWxpZGF0aW9uJyk7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdObyBkZXBlbmRlbmNpZXMgcHJvdmlkZWQgZm9yIHZhbGlkYXRpb24nKTtcblx0fVxuXG5cdHRyeSB7XG5cdFx0bG9nSW5mbyhcblx0XHRcdGBWYWxpZGF0aW5nIHRoZSBmb2xsb3dpbmcgZGVwZW5kZW5jaWVzIChjYWxsZWQgZnJvbTogJHtjYWxsZXJJbmZvfSk6ICR7ZGVwZW5kZW5jaWVzLm1hcChkZXAgPT4gYCR7ZGVwLm5hbWV9OiAke2RlcC5pbnN0YW5jZX1gKS5qb2luKCcsICcpfWBcblx0XHQpO1xuXG5cdFx0Y29uc3QgbWlzc2luZ0RlcGVuZGVuY2llcyA9IGRlcGVuZGVuY2llcy5maWx0ZXIoXG5cdFx0XHQoeyBpbnN0YW5jZSB9KSA9PiBpbnN0YW5jZSA9PT0gdW5kZWZpbmVkIHx8IGluc3RhbmNlID09PSBudWxsXG5cdFx0KTtcblxuXHRcdGlmIChtaXNzaW5nRGVwZW5kZW5jaWVzLmxlbmd0aCA+IDApIHtcblx0XHRcdGNvbnN0IG1pc3NpbmdOYW1lcyA9IG1pc3NpbmdEZXBlbmRlbmNpZXNcblx0XHRcdFx0Lm1hcCgoeyBuYW1lIH0pID0+IG5hbWUpXG5cdFx0XHRcdC5qb2luKCcsICcpO1xuXHRcdFx0bG9nRXJyb3IoYFxuXHRcdFx0XHRNaXNzaW5nIGRlcGVuZGVuY2llcyAoY2FsbGVkIGZyb20gJHtjYWxsZXJJbmZvfSk6ICR7bWlzc2luZ05hbWVzfWApO1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIGRlcGVuZGVuY2llczogJHttaXNzaW5nTmFtZXN9YCk7XG5cdFx0fVxuXG5cdFx0bG9nSW5mbyhcblx0XHRcdGBBbGwgZGVwZW5kZW5jaWVzIGFyZSB2YWxpZCAoY2FsbGVkIGZyb206ICR7Y2FsbGVySW5mb30pOiAke2RlcGVuZGVuY2llc1xuXHRcdFx0XHQubWFwKCh7IG5hbWUgfSkgPT4gbmFtZSlcblx0XHRcdFx0LmpvaW4oJywgJyl9YFxuXHRcdCk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Y29uc3QgbWVzc2FnZSA9XG5cdFx0XHRlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJztcblx0XHRjb25zdCBzdGFjayA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5zdGFjayA6ICdObyBzdGFjayB0cmFjZSc7XG5cblx0XHRpZiAoaXNMb2dnZXIobG9nZ2VyKSkge1xuXHRcdFx0bG9nZ2VyLmVycm9yKCdBbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgZGVwZW5kZW5jeSB2YWxpZGF0aW9uJywge1xuXHRcdFx0XHRzdGFjazogc3RhY2sgPz8gJ05vIHN0YWNrIHRyYWNlJyxcblx0XHRcdFx0bWVzc2FnZTogbWVzc2FnZSA/PyAnVW5rbm93biBlcnJvcidcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdBbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgZGVwZW5kZW5jeSB2YWxpZGF0aW9uJywge1xuXHRcdFx0XHRzdGFjazogc3RhY2sgPz8gJ05vIHN0YWNrIHRyYWNlJyxcblx0XHRcdFx0bWVzc2FnZTogbWVzc2FnZSA/PyAnVW5rbm93biBlcnJvcidcblx0XHRcdH0pO1xuXHRcdH1cblx0XHR0aHJvdyBlcnJvcjtcblx0fVxufVxuIl19
