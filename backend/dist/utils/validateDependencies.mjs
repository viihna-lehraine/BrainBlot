import { isLogger } from '../config/logger';
export function validateDependencies(dependencies, logger = console) {
	const logInfo = isLogger(logger) ? logger.info : console.info;
	const logWarn = isLogger(logger) ? logger.warn : console.warn;
	const logError = isLogger(logger) ? logger.error : console.error;
	if (!dependencies || dependencies.length === 0) {
		logWarn('No dependencies provided for validation');
		throw new Error('No dependencies provided for validation');
	}
	try {
		const missingDependencies = dependencies.filter(
			({ instance }) => instance === undefined || instance === null
		);
		if (missingDependencies.length > 0) {
			const missingNames = missingDependencies
				.map(({ name }) => name)
				.join(', ');
			logError(`Missing dependencies: ${missingNames}`);
			throw new Error(`Missing dependencies: ${missingNames}`);
		}
		logInfo(
			`All dependencies are valid: ${dependencies
				.map(({ name }) => name)
				.join(', ')}`
		);
	} catch (error) {
		const message =
			error instanceof Error ? error.message : 'Unknown error';
		const stack = error instanceof Error ? error.stack : 'No stack trace';
		if (isLogger(logger)) {
			logger.error('An error occurred during dependency validation', {
				stack: stack ?? 'No stack trace',
				message: message ?? 'Unknown error'
			});
		} else {
			console.error('An error occurred during dependency validation', {
				stack: stack ?? 'No stack trace',
				message: message ?? 'Unknown error'
			});
		}
		throw error;
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGVEZXBlbmRlbmNpZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvdmFsaWRhdGVEZXBlbmRlbmNpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBVSxNQUFNLGtCQUFrQixDQUFDO0FBT3BELE1BQU0sVUFBVSxvQkFBb0IsQ0FDbkMsWUFBMEIsRUFDMUIsU0FBMkIsT0FBTztJQUVsQyxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDOUQsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQzlELE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUVqRSxJQUFJLENBQUMsWUFBWSxJQUFJLFlBQVksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDaEQsT0FBTyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7UUFDbkQsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCxJQUFJLENBQUM7UUFDSixNQUFNLG1CQUFtQixHQUFHLFlBQVksQ0FBQyxNQUFNLENBQzlDLENBQUMsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLENBQUMsUUFBUSxLQUFLLFNBQVMsSUFBSSxRQUFRLEtBQUssSUFBSSxDQUM3RCxDQUFDO1FBRUYsSUFBSSxtQkFBbUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDcEMsTUFBTSxZQUFZLEdBQUcsbUJBQW1CO2lCQUN0QyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUM7aUJBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNiLFFBQVEsQ0FBQyx5QkFBeUIsWUFBWSxFQUFFLENBQUMsQ0FBQztZQUNsRCxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQzFELENBQUM7UUFFRCxPQUFPLENBQ04sK0JBQStCLFlBQVk7YUFDekMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDO2FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUNkLENBQUM7SUFDSCxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixNQUFNLE9BQU8sR0FDWixLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUM7UUFDMUQsTUFBTSxLQUFLLEdBQUcsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUM7UUFFdEUsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUN0QixNQUFNLENBQUMsS0FBSyxDQUFDLGdEQUFnRCxFQUFFO2dCQUM5RCxLQUFLLEVBQUUsS0FBSyxJQUFJLGdCQUFnQjtnQkFDaEMsT0FBTyxFQUFFLE9BQU8sSUFBSSxlQUFlO2FBQ25DLENBQUMsQ0FBQztRQUNKLENBQUM7YUFBTSxDQUFDO1lBQ1AsT0FBTyxDQUFDLEtBQUssQ0FBQyxnREFBZ0QsRUFBRTtnQkFDL0QsS0FBSyxFQUFFLEtBQUssSUFBSSxnQkFBZ0I7Z0JBQ2hDLE9BQU8sRUFBRSxPQUFPLElBQUksZUFBZTthQUNuQyxDQUFDLENBQUM7UUFDSixDQUFDO1FBQ0QsTUFBTSxLQUFLLENBQUM7SUFDYixDQUFDO0FBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTG9nZ2VyLCBMb2dnZXIgfSBmcm9tICcuLi9jb25maWcvbG9nZ2VyJztcblxuaW50ZXJmYWNlIERlcGVuZGVuY3kge1xuXHRuYW1lOiBzdHJpbmc7XG5cdGluc3RhbmNlOiB1bmtub3duO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVEZXBlbmRlbmNpZXMoXG5cdGRlcGVuZGVuY2llczogRGVwZW5kZW5jeVtdLFxuXHRsb2dnZXI6IExvZ2dlciB8IENvbnNvbGUgPSBjb25zb2xlXG4pOiB2b2lkIHtcblx0Y29uc3QgbG9nSW5mbyA9IGlzTG9nZ2VyKGxvZ2dlcikgPyBsb2dnZXIuaW5mbyA6IGNvbnNvbGUuaW5mbztcblx0Y29uc3QgbG9nV2FybiA9IGlzTG9nZ2VyKGxvZ2dlcikgPyBsb2dnZXIud2FybiA6IGNvbnNvbGUud2Fybjtcblx0Y29uc3QgbG9nRXJyb3IgPSBpc0xvZ2dlcihsb2dnZXIpID8gbG9nZ2VyLmVycm9yIDogY29uc29sZS5lcnJvcjtcblxuXHRpZiAoIWRlcGVuZGVuY2llcyB8fCBkZXBlbmRlbmNpZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0bG9nV2FybignTm8gZGVwZW5kZW5jaWVzIHByb3ZpZGVkIGZvciB2YWxpZGF0aW9uJyk7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdObyBkZXBlbmRlbmNpZXMgcHJvdmlkZWQgZm9yIHZhbGlkYXRpb24nKTtcblx0fVxuXG5cdHRyeSB7XG5cdFx0Y29uc3QgbWlzc2luZ0RlcGVuZGVuY2llcyA9IGRlcGVuZGVuY2llcy5maWx0ZXIoXG5cdFx0XHQoeyBpbnN0YW5jZSB9KSA9PiBpbnN0YW5jZSA9PT0gdW5kZWZpbmVkIHx8IGluc3RhbmNlID09PSBudWxsXG5cdFx0KTtcblxuXHRcdGlmIChtaXNzaW5nRGVwZW5kZW5jaWVzLmxlbmd0aCA+IDApIHtcblx0XHRcdGNvbnN0IG1pc3NpbmdOYW1lcyA9IG1pc3NpbmdEZXBlbmRlbmNpZXNcblx0XHRcdFx0Lm1hcCgoeyBuYW1lIH0pID0+IG5hbWUpXG5cdFx0XHRcdC5qb2luKCcsICcpO1xuXHRcdFx0bG9nRXJyb3IoYE1pc3NpbmcgZGVwZW5kZW5jaWVzOiAke21pc3NpbmdOYW1lc31gKTtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgTWlzc2luZyBkZXBlbmRlbmNpZXM6ICR7bWlzc2luZ05hbWVzfWApO1xuXHRcdH1cblxuXHRcdGxvZ0luZm8oXG5cdFx0XHRgQWxsIGRlcGVuZGVuY2llcyBhcmUgdmFsaWQ6ICR7ZGVwZW5kZW5jaWVzXG5cdFx0XHRcdC5tYXAoKHsgbmFtZSB9KSA9PiBuYW1lKVxuXHRcdFx0XHQuam9pbignLCAnKX1gXG5cdFx0KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zdCBtZXNzYWdlID1cblx0XHRcdGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InO1xuXHRcdGNvbnN0IHN0YWNrID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLnN0YWNrIDogJ05vIHN0YWNrIHRyYWNlJztcblxuXHRcdGlmIChpc0xvZ2dlcihsb2dnZXIpKSB7XG5cdFx0XHRsb2dnZXIuZXJyb3IoJ0FuIGVycm9yIG9jY3VycmVkIGR1cmluZyBkZXBlbmRlbmN5IHZhbGlkYXRpb24nLCB7XG5cdFx0XHRcdHN0YWNrOiBzdGFjayA/PyAnTm8gc3RhY2sgdHJhY2UnLFxuXHRcdFx0XHRtZXNzYWdlOiBtZXNzYWdlID8/ICdVbmtub3duIGVycm9yJ1xuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ0FuIGVycm9yIG9jY3VycmVkIGR1cmluZyBkZXBlbmRlbmN5IHZhbGlkYXRpb24nLCB7XG5cdFx0XHRcdHN0YWNrOiBzdGFjayA/PyAnTm8gc3RhY2sgdHJhY2UnLFxuXHRcdFx0XHRtZXNzYWdlOiBtZXNzYWdlID8/ICdVbmtub3duIGVycm9yJ1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdHRocm93IGVycm9yO1xuXHR9XG59XG4iXX0=
