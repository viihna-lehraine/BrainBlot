import { processError } from '../utils/processError.mjs';
import { validateDependencies } from '../utils/validateDependencies.mjs';
export default function createDebugUtil({ debug, logger }) {
	try {
		validateDependencies(
			[
				{ name: 'debug', instance: debug },
				{ name: 'logger', instance: logger }
			],
			logger
		);
		const log = debug('app:server');
		const dbLog = debug('app:db');
		const verboseLog = debug('app:verbose');
		function logError(message, error) {
			try {
				validateDependencies(
					[
						{ name: 'message', instance: message },
						{ name: 'error', instance: error }
					],
					logger
				);
				log(`ERROR: ${message}:`, error.stack || error.message);
			} catch (err) {
				processError(err, logger);
				throw new Error('Failed to log error message');
			}
		}
		function logInfo(message) {
			try {
				validateDependencies(
					[{ name: 'message', instance: message }],
					logger
				);
				log(`INFO: ${message}`);
			} catch (err) {
				processError(err, logger);
				throw new Error('Failed to log info message');
			}
		}
		function logWarning(message) {
			try {
				validateDependencies(
					[{ name: 'message', instance: message }],
					logger
				);
				log(`WARNING: ${message}`);
			} catch (err) {
				processError(err, logger);
				throw new Error('Failed to log warning message');
			}
		}
		function logVerbose(message) {
			try {
				validateDependencies(
					[
						{
							name: 'message',
							instance: message
						}
					],
					logger
				);
				verboseLog(`VERBOSE: ${message}`);
			} catch (err) {
				processError(err, logger);
				throw new Error('Failed to log verbose message');
			}
		}
		return {
			log,
			dbLog,
			logError,
			logInfo,
			logWarning,
			logVerbose
		};
	} catch (error) {
		processError(error, logger);
		throw new Error(
			`Failed to create debug utility: ${error instanceof Error ? error.message : String(error)}`
		);
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvZGVidWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3JELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBT3JFLE1BQU0sQ0FBQyxPQUFPLFVBQVUsZUFBZSxDQUFDLEVBQ3ZDLEtBQUssRUFDTCxNQUFNLEVBQ2lCO0lBUXZCLElBQUksQ0FBQztRQUNKLG9CQUFvQixDQUNuQjtZQUNDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFO1lBQ2xDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO1NBQ3BDLEVBQ0QsTUFBTSxDQUNOLENBQUM7UUFFRixNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDaEMsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzlCLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUV4QyxTQUFTLFFBQVEsQ0FBQyxPQUFlLEVBQUUsS0FBWTtZQUM5QyxJQUFJLENBQUM7Z0JBQ0osb0JBQW9CLENBQ25CO29CQUNDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFO29CQUN0QyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRTtpQkFDbEMsRUFDRCxNQUFNLENBQ04sQ0FBQztnQkFDRixHQUFHLENBQUMsVUFBVSxPQUFPLEdBQUcsRUFBRSxLQUFLLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN6RCxDQUFDO1lBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztnQkFDZCxZQUFZLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7WUFDaEQsQ0FBQztRQUNGLENBQUM7UUFFRCxTQUFTLE9BQU8sQ0FBQyxPQUFlO1lBQy9CLElBQUksQ0FBQztnQkFDSixvQkFBb0IsQ0FDbkIsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQ3hDLE1BQU0sQ0FDTixDQUFDO2dCQUNGLEdBQUcsQ0FBQyxTQUFTLE9BQU8sRUFBRSxDQUFDLENBQUM7WUFDekIsQ0FBQztZQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7Z0JBQ2QsWUFBWSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1lBQy9DLENBQUM7UUFDRixDQUFDO1FBRUQsU0FBUyxVQUFVLENBQUMsT0FBZTtZQUNsQyxJQUFJLENBQUM7Z0JBQ0osb0JBQW9CLENBQ25CLENBQUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUN4QyxNQUFNLENBQ04sQ0FBQztnQkFDRixHQUFHLENBQUMsWUFBWSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1lBQzVCLENBQUM7WUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO2dCQUNkLFlBQVksQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztZQUNsRCxDQUFDO1FBQ0YsQ0FBQztRQUVELFNBQVMsVUFBVSxDQUFDLE9BQWU7WUFDbEMsSUFBSSxDQUFDO2dCQUNKLG9CQUFvQixDQUNuQjtvQkFDQzt3QkFDQyxJQUFJLEVBQUUsU0FBUzt3QkFDZixRQUFRLEVBQUUsT0FBTztxQkFDakI7aUJBQ0QsRUFDRCxNQUFNLENBQ04sQ0FBQztnQkFDRixVQUFVLENBQUMsWUFBWSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1lBQ25DLENBQUM7WUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO2dCQUNkLFlBQVksQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztZQUNsRCxDQUFDO1FBQ0YsQ0FBQztRQUVELE9BQU87WUFDTixHQUFHO1lBQ0gsS0FBSztZQUNMLFFBQVE7WUFDUixPQUFPO1lBQ1AsVUFBVTtZQUNWLFVBQVU7U0FDVixDQUFDO0lBQ0gsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsWUFBWSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM1QixNQUFNLElBQUksS0FBSyxDQUNkLG1DQUNDLEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQ3RELEVBQUUsQ0FDRixDQUFDO0lBQ0gsQ0FBQztBQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVidWcsIHsgRGVidWdnZXIgfSBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9jb25maWcvbG9nZ2VyJztcbmltcG9ydCB7IHByb2Nlc3NFcnJvciB9IGZyb20gJy4uL3V0aWxzL3Byb2Nlc3NFcnJvcic7XG5pbXBvcnQgeyB2YWxpZGF0ZURlcGVuZGVuY2llcyB9IGZyb20gJy4uL3V0aWxzL3ZhbGlkYXRlRGVwZW5kZW5jaWVzJztcblxuaW50ZXJmYWNlIERlYnVnVXRpbERlcGVuZGVuY2llcyB7XG5cdGRlYnVnOiB0eXBlb2YgZGVidWc7XG5cdGxvZ2dlcjogTG9nZ2VyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVEZWJ1Z1V0aWwoe1xuXHRkZWJ1Zyxcblx0bG9nZ2VyXG59OiBEZWJ1Z1V0aWxEZXBlbmRlbmNpZXMpOiB7XG5cdGxvZzogRGVidWdnZXI7XG5cdGRiTG9nOiBEZWJ1Z2dlcjtcblx0bG9nRXJyb3I6IChtZXNzYWdlOiBzdHJpbmcsIGVycm9yOiBFcnJvcikgPT4gdm9pZDtcblx0bG9nSW5mbzogKG1lc3NhZ2U6IHN0cmluZykgPT4gdm9pZDtcblx0bG9nV2FybmluZzogKG1lc3NhZ2U6IHN0cmluZykgPT4gdm9pZDtcblx0bG9nVmVyYm9zZTogKG1lc3NhZ2U6IHN0cmluZykgPT4gdm9pZDtcbn0ge1xuXHR0cnkge1xuXHRcdHZhbGlkYXRlRGVwZW5kZW5jaWVzKFxuXHRcdFx0W1xuXHRcdFx0XHR7IG5hbWU6ICdkZWJ1ZycsIGluc3RhbmNlOiBkZWJ1ZyB9LFxuXHRcdFx0XHR7IG5hbWU6ICdsb2dnZXInLCBpbnN0YW5jZTogbG9nZ2VyIH1cblx0XHRcdF0sXG5cdFx0XHRsb2dnZXJcblx0XHQpO1xuXG5cdFx0Y29uc3QgbG9nID0gZGVidWcoJ2FwcDpzZXJ2ZXInKTtcblx0XHRjb25zdCBkYkxvZyA9IGRlYnVnKCdhcHA6ZGInKTtcblx0XHRjb25zdCB2ZXJib3NlTG9nID0gZGVidWcoJ2FwcDp2ZXJib3NlJyk7XG5cblx0XHRmdW5jdGlvbiBsb2dFcnJvcihtZXNzYWdlOiBzdHJpbmcsIGVycm9yOiBFcnJvcik6IHZvaWQge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dmFsaWRhdGVEZXBlbmRlbmNpZXMoXG5cdFx0XHRcdFx0W1xuXHRcdFx0XHRcdFx0eyBuYW1lOiAnbWVzc2FnZScsIGluc3RhbmNlOiBtZXNzYWdlIH0sXG5cdFx0XHRcdFx0XHR7IG5hbWU6ICdlcnJvcicsIGluc3RhbmNlOiBlcnJvciB9XG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0XHRsb2dnZXJcblx0XHRcdFx0KTtcblx0XHRcdFx0bG9nKGBFUlJPUjogJHttZXNzYWdlfTpgLCBlcnJvci5zdGFjayB8fCBlcnJvci5tZXNzYWdlKTtcblx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRwcm9jZXNzRXJyb3IoZXJyLCBsb2dnZXIpO1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBsb2cgZXJyb3IgbWVzc2FnZScpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGxvZ0luZm8obWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YWxpZGF0ZURlcGVuZGVuY2llcyhcblx0XHRcdFx0XHRbeyBuYW1lOiAnbWVzc2FnZScsIGluc3RhbmNlOiBtZXNzYWdlIH1dLFxuXHRcdFx0XHRcdGxvZ2dlclxuXHRcdFx0XHQpO1xuXHRcdFx0XHRsb2coYElORk86ICR7bWVzc2FnZX1gKTtcblx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRwcm9jZXNzRXJyb3IoZXJyLCBsb2dnZXIpO1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBsb2cgaW5mbyBtZXNzYWdlJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gbG9nV2FybmluZyhtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHZhbGlkYXRlRGVwZW5kZW5jaWVzKFxuXHRcdFx0XHRcdFt7IG5hbWU6ICdtZXNzYWdlJywgaW5zdGFuY2U6IG1lc3NhZ2UgfV0sXG5cdFx0XHRcdFx0bG9nZ2VyXG5cdFx0XHRcdCk7XG5cdFx0XHRcdGxvZyhgV0FSTklORzogJHttZXNzYWdlfWApO1xuXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdHByb2Nlc3NFcnJvcihlcnIsIGxvZ2dlcik7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGxvZyB3YXJuaW5nIG1lc3NhZ2UnKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBsb2dWZXJib3NlKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dmFsaWRhdGVEZXBlbmRlbmNpZXMoXG5cdFx0XHRcdFx0W1xuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRuYW1lOiAnbWVzc2FnZScsXG5cdFx0XHRcdFx0XHRcdGluc3RhbmNlOiBtZXNzYWdlXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0XHRsb2dnZXJcblx0XHRcdFx0KTtcblx0XHRcdFx0dmVyYm9zZUxvZyhgVkVSQk9TRTogJHttZXNzYWdlfWApO1xuXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdHByb2Nlc3NFcnJvcihlcnIsIGxvZ2dlcik7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGxvZyB2ZXJib3NlIG1lc3NhZ2UnKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0bG9nLFxuXHRcdFx0ZGJMb2csXG5cdFx0XHRsb2dFcnJvcixcblx0XHRcdGxvZ0luZm8sXG5cdFx0XHRsb2dXYXJuaW5nLFxuXHRcdFx0bG9nVmVyYm9zZVxuXHRcdH07XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cHJvY2Vzc0Vycm9yKGVycm9yLCBsb2dnZXIpO1xuXHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdGBGYWlsZWQgdG8gY3JlYXRlIGRlYnVnIHV0aWxpdHk6ICR7XG5cdFx0XHRcdGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKVxuXHRcdFx0fWBcblx0XHQpO1xuXHR9XG59XG4iXX0=
