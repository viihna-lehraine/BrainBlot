import os from 'os';
import setupLogger from '../config/logger.mjs';
const logger = setupLogger();
function logMemoryUsage() {
	const memoryUsage = process.memoryUsage();
	const memoryStats = {
		rss: (memoryUsage.rss / 1024 / 1024).toFixed(2),
		heapTotal: (memoryUsage.heapTotal / 1024 / 1024).toFixed(2),
		heapUsed: (memoryUsage.heapUsed / 1024 / 1024).toFixed(2),
		external: (memoryUsage.external / 1024 / 1024).toFixed(2),
		available: (os.freemem() / 1024 / 1024).toFixed(2)
	};
	logger.info(
		`Memory usage (MB): RSS: ${memoryStats.rss}, Heap Total: ${memoryStats.heapTotal}, Heap Used: ${memoryStats.heapUsed}, External: ${memoryStats.external}, System Available: ${memoryStats.available}`
	);
}
export function startMemoryMonitor() {
	return setInterval(logMemoryUsage, 300000);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtb3J5TW9uaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9tZW1vcnlNb25pdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQztBQUNwQixPQUFPLFdBQVcsTUFBTSxrQkFBa0IsQ0FBQztBQUUzQyxNQUFNLE1BQU0sR0FBRyxXQUFXLEVBQUUsQ0FBQztBQVU3QixTQUFTLGNBQWM7SUFDdEIsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzFDLE1BQU0sV0FBVyxHQUFnQjtRQUNoQyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQy9DLFNBQVMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDM0QsUUFBUSxFQUFFLENBQUMsV0FBVyxDQUFDLFFBQVEsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUN6RCxRQUFRLEVBQUUsQ0FBQyxXQUFXLENBQUMsUUFBUSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3pELFNBQVMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztLQUNsRCxDQUFDO0lBRUYsTUFBTSxDQUFDLElBQUksQ0FDViwyQkFBMkIsV0FBVyxDQUFDLEdBQUcsaUJBQWlCLFdBQVcsQ0FBQyxTQUFTLGdCQUFnQixXQUFXLENBQUMsUUFBUSxlQUFlLFdBQVcsQ0FBQyxRQUFRLHVCQUF1QixXQUFXLENBQUMsU0FBUyxFQUFFLENBQ3JNLENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLGtCQUFrQjtJQUNqQyxPQUFPLFdBQVcsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDNUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBvcyBmcm9tICdvcyc7XG5pbXBvcnQgc2V0dXBMb2dnZXIgZnJvbSAnLi4vY29uZmlnL2xvZ2dlcic7XG5cbmNvbnN0IGxvZ2dlciA9IHNldHVwTG9nZ2VyKCk7XG5cbmludGVyZmFjZSBNZW1vcnlTdGF0cyB7XG5cdHJzczogc3RyaW5nO1xuXHRoZWFwVG90YWw6IHN0cmluZztcblx0aGVhcFVzZWQ6IHN0cmluZztcblx0ZXh0ZXJuYWw6IHN0cmluZztcblx0YXZhaWxhYmxlOiBzdHJpbmc7XG59XG5cbmZ1bmN0aW9uIGxvZ01lbW9yeVVzYWdlKCk6IHZvaWQge1xuXHRjb25zdCBtZW1vcnlVc2FnZSA9IHByb2Nlc3MubWVtb3J5VXNhZ2UoKTtcblx0Y29uc3QgbWVtb3J5U3RhdHM6IE1lbW9yeVN0YXRzID0ge1xuXHRcdHJzczogKG1lbW9yeVVzYWdlLnJzcyAvIDEwMjQgLyAxMDI0KS50b0ZpeGVkKDIpLFxuXHRcdGhlYXBUb3RhbDogKG1lbW9yeVVzYWdlLmhlYXBUb3RhbCAvIDEwMjQgLyAxMDI0KS50b0ZpeGVkKDIpLFxuXHRcdGhlYXBVc2VkOiAobWVtb3J5VXNhZ2UuaGVhcFVzZWQgLyAxMDI0IC8gMTAyNCkudG9GaXhlZCgyKSxcblx0XHRleHRlcm5hbDogKG1lbW9yeVVzYWdlLmV4dGVybmFsIC8gMTAyNCAvIDEwMjQpLnRvRml4ZWQoMiksXG5cdFx0YXZhaWxhYmxlOiAob3MuZnJlZW1lbSgpIC8gMTAyNCAvIDEwMjQpLnRvRml4ZWQoMilcblx0fTtcblxuXHRsb2dnZXIuaW5mbyhcblx0XHRgTWVtb3J5IHVzYWdlIChNQik6IFJTUzogJHttZW1vcnlTdGF0cy5yc3N9LCBIZWFwIFRvdGFsOiAke21lbW9yeVN0YXRzLmhlYXBUb3RhbH0sIEhlYXAgVXNlZDogJHttZW1vcnlTdGF0cy5oZWFwVXNlZH0sIEV4dGVybmFsOiAke21lbW9yeVN0YXRzLmV4dGVybmFsfSwgU3lzdGVtIEF2YWlsYWJsZTogJHttZW1vcnlTdGF0cy5hdmFpbGFibGV9YFxuXHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRNZW1vcnlNb25pdG9yKCk6IE5vZGVKUy5UaW1lb3V0IHtcblx0cmV0dXJuIHNldEludGVydmFsKGxvZ01lbW9yeVVzYWdlLCAzMDAwMDApO1xufVxuIl19
