export function createMemoryMonitor({ logger, os, process, setInterval }) {
	function logMemoryUsage() {
		const memoryUsage = process.memoryUsage();
		const memoryStats = {
			rss: (memoryUsage.rss / 1024 / 1024).toFixed(2),
			heapTotal: (memoryUsage.heapTotal / 1024 / 1024).toFixed(2),
			heapUsed: (memoryUsage.heapUsed / 1024 / 1024).toFixed(2),
			external: (memoryUsage.external / 1024 / 1024).toFixed(2),
			available: (os.freemem() / 1024 / 1024).toFixed(2)
		};
		logger.info(
			`Memory usage (MB): RSS: ${memoryStats.rss}, Heap Total: ${memoryStats.heapTotal}, Heap Used: ${memoryStats.heapUsed}, External: ${memoryStats.external}, System Available: ${memoryStats.available}`
		);
	}
	function startMemoryMonitor() {
		return setInterval(logMemoryUsage, 300000);
	}
	return { startMemoryMonitor };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtb3J5TW9uaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9tZW1vcnlNb25pdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtCQSxNQUFNLFVBQVUsbUJBQW1CLENBQUMsRUFDbkMsTUFBTSxFQUNOLEVBQUUsRUFDRixPQUFPLEVBQ1AsV0FBVyxFQUNnQjtJQUczQixTQUFTLGNBQWM7UUFDdEIsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzFDLE1BQU0sV0FBVyxHQUFnQjtZQUNoQyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQy9DLFNBQVMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDM0QsUUFBUSxFQUFFLENBQUMsV0FBVyxDQUFDLFFBQVEsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUN6RCxRQUFRLEVBQUUsQ0FBQyxXQUFXLENBQUMsUUFBUSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3pELFNBQVMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUNsRCxDQUFDO1FBRUYsTUFBTSxDQUFDLElBQUksQ0FDViwyQkFBMkIsV0FBVyxDQUFDLEdBQUcsaUJBQWlCLFdBQVcsQ0FBQyxTQUFTLGdCQUFnQixXQUFXLENBQUMsUUFBUSxlQUFlLFdBQVcsQ0FBQyxRQUFRLHVCQUF1QixXQUFXLENBQUMsU0FBUyxFQUFFLENBQ3JNLENBQUM7SUFDSCxDQUFDO0lBRUQsU0FBUyxrQkFBa0I7UUFDMUIsT0FBTyxXQUFXLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQztBQUMvQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG9zIGZyb20gJ29zJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJ3dpbnN0b24nO1xuXG5pbnRlcmZhY2UgTWVtb3J5U3RhdHMge1xuXHRyc3M6IHN0cmluZztcblx0aGVhcFRvdGFsOiBzdHJpbmc7XG5cdGhlYXBVc2VkOiBzdHJpbmc7XG5cdGV4dGVybmFsOiBzdHJpbmc7XG5cdGF2YWlsYWJsZTogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgTWVtb3J5TW9uaXRvckRlcGVuZGVuY2llcyB7XG5cdGxvZ2dlcjogTG9nZ2VyO1xuXHRvczogdHlwZW9mIG9zO1xuXHRwcm9jZXNzOiBOb2RlSlMuUHJvY2Vzcztcblx0c2V0SW50ZXJ2YWw6IHR5cGVvZiBzZXRJbnRlcnZhbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeU1vbml0b3Ioe1xuXHRsb2dnZXIsXG5cdG9zLFxuXHRwcm9jZXNzLFxuXHRzZXRJbnRlcnZhbFxufTogTWVtb3J5TW9uaXRvckRlcGVuZGVuY2llcyk6IHtcblx0c3RhcnRNZW1vcnlNb25pdG9yOiAoKSA9PiBOb2RlSlMuVGltZW91dDtcbn0ge1xuXHRmdW5jdGlvbiBsb2dNZW1vcnlVc2FnZSgpOiB2b2lkIHtcblx0XHRjb25zdCBtZW1vcnlVc2FnZSA9IHByb2Nlc3MubWVtb3J5VXNhZ2UoKTtcblx0XHRjb25zdCBtZW1vcnlTdGF0czogTWVtb3J5U3RhdHMgPSB7XG5cdFx0XHRyc3M6IChtZW1vcnlVc2FnZS5yc3MgLyAxMDI0IC8gMTAyNCkudG9GaXhlZCgyKSxcblx0XHRcdGhlYXBUb3RhbDogKG1lbW9yeVVzYWdlLmhlYXBUb3RhbCAvIDEwMjQgLyAxMDI0KS50b0ZpeGVkKDIpLFxuXHRcdFx0aGVhcFVzZWQ6IChtZW1vcnlVc2FnZS5oZWFwVXNlZCAvIDEwMjQgLyAxMDI0KS50b0ZpeGVkKDIpLFxuXHRcdFx0ZXh0ZXJuYWw6IChtZW1vcnlVc2FnZS5leHRlcm5hbCAvIDEwMjQgLyAxMDI0KS50b0ZpeGVkKDIpLFxuXHRcdFx0YXZhaWxhYmxlOiAob3MuZnJlZW1lbSgpIC8gMTAyNCAvIDEwMjQpLnRvRml4ZWQoMilcblx0XHR9O1xuXG5cdFx0bG9nZ2VyLmluZm8oXG5cdFx0XHRgTWVtb3J5IHVzYWdlIChNQik6IFJTUzogJHttZW1vcnlTdGF0cy5yc3N9LCBIZWFwIFRvdGFsOiAke21lbW9yeVN0YXRzLmhlYXBUb3RhbH0sIEhlYXAgVXNlZDogJHttZW1vcnlTdGF0cy5oZWFwVXNlZH0sIEV4dGVybmFsOiAke21lbW9yeVN0YXRzLmV4dGVybmFsfSwgU3lzdGVtIEF2YWlsYWJsZTogJHttZW1vcnlTdGF0cy5hdmFpbGFibGV9YFxuXHRcdCk7XG5cdH1cblxuXHRmdW5jdGlvbiBzdGFydE1lbW9yeU1vbml0b3IoKTogTm9kZUpTLlRpbWVvdXQge1xuXHRcdHJldHVybiBzZXRJbnRlcnZhbChsb2dNZW1vcnlVc2FnZSwgMzAwMDAwKTtcblx0fVxuXG5cdHJldHVybiB7IHN0YXJ0TWVtb3J5TW9uaXRvciB9O1xufVxuIl19
