import { initializeDatabase } from './config/db.js';
import featureFlags from './config/featureFlags.js';
import loadEnv, { __dirname } from './config/loadEnv.js';
import { setupHttp } from './config/http.js';
import { createTransporter, getTransporter } from './config/mailer.js';
import multerConfiguredUpload from './config/multer.js';
import configurePassport from './config/passport.js';
// import redisClient from './config/redis.js';
import setupSecurityHeaders from './middleware/securityHeaders.js';
import slowdownMiddleware from './middleware/slowdown.js';
import { csrfMiddleware } from './middleware/csrf.js';
import sops from './config/sops.js';
import {
	addToBlacklist,
	initializeIpBlacklist,
	ipBlacklistMiddleware,
	loadBlacklist,
	removeFromBlacklist
} from './middleware/ipBlacklist.js';
import { rateLimitMiddleware } from './middleware/rateLimit.js';
import {
	registrationValidationRules,
	validateEntry
} from './middleware/validator.js';
import {
	generateBackupCodes,
	getBackupCodesFromDatabase,
	saveBackupCodesToDatabase,
	verifyBackupCode
} from './utils/auth/backupCodeUtil.js';
import {
	generateEmail2FACode,
	verifyEmail2FACode
} from './utils/auth/email2FAUtil.js';
//import {
//	generateU2fAuthenticationOptions,
//	generateU2fRegistrationOptions,
//	verifyU2fAuthentication,
//	verifyU2fRegistration
// } from './utils/auth/fido2Util';
import { verifyJwToken } from './utils/auth/jwtUtil.js';
// import {
// 	generatePasskeyAuthenticationOptions,
// 	generatePasskeyRegistrationOptions,
// 	verifyPasskeyAuthentication,
// 	verifyPasskeyRegistration
// } from './utils/auth/passkeyUtil';
import {
	generateYubicoOtpOptions,
	validateYubicoOTP
} from './utils/auth/yubicoOtpUtil.js';
import {
	generateTOTPSecret,
	generateTOTPToken,
	verifyTOTPToken,
	generateQRCode
} from './utils/auth/totpUtil.js';
import generate2FactorEmailTemplate from './utils/emailTemplates/2FactorEmailTemplate.js';
import generate2FAEnabledEmailTemplate from './utils/emailTemplates/2FAEnabledEmailTemplate.js';
import generateAccountDeletedConfirmationEmailTemplate from './utils/emailTemplates/accountDeletedConfirmationEmailTemplate.js';
import generateAccountDeletionStartedEmailTemplate from './utils/emailTemplates/accountDeletionStartedEmailTemplate.js';
import generateConfirmationEmailTemplate from './utils/emailTemplates/confirmationEmailTemplate.js';
import loadTestRoutes from './utils/test/loadTestRoutes.js';
import { parseBoolean } from './utils/parseBoolean.js';
export {
	addToBlacklist,
	configurePassport,
	createTransporter,
	csrfMiddleware,
	decryptDataFiles,
	featureFlags,
	generate2FactorEmailTemplate,
	generate2FAEnabledEmailTemplate,
	generateAccountDeletedConfirmationEmailTemplate,
	generateAccountDeletionStartedEmailTemplate,
	generateBackupCodes,
	generateConfirmationEmailTemplate,
	generateEmail2FACode,
	// generatePasskeyAuthenticationOptions,
	// generatePasskeyRegistrationOptions,
	generateQRCode,
	// generateU2fAuthenticationOptions,
	// generateU2fRegistrationOptions,
	generateTOTPSecret,
	generateTOTPToken,
	generateYubicoOtpOptions,
	getBackupCodesFromDatabase,
	getSSLKeys,
	getTransporter,
	ipBlacklistMiddleware,
	initializeDatabase,
	initializeIpBlacklist,
	loadBlacklist,
	loadEnv,
	loadTestRoutes,
	multerConfiguredUpload,
	parseBoolean,
	rateLimitMiddleware,
	//	redisClient,
	registrationValidationRules,
	removeFromBlacklist,
	saveBackupCodesToDatabase,
	setupHttp,
	setupSecurityHeaders,
	slowdownMiddleware,
	validateEntry,
	validateYubicoOTP,
	verifyBackupCode,
	verifyEmail2FACode,
	verifyJwToken,
	// verifyPasskeyAuthentication,
	// verifyPasskeyRegistration,
	verifyTOTPToken,
	// verifyU2fAuthentication,
	// verifyU2fRegistration,
	__dirname
};
const { decryptDataFiles, getSSLKeys } = sops;
//# sourceMappingURL=data:application/json;base64,
