import { validateDependencies } from '../utils/helpers.mjs';
import { ServiceFactory } from '../index/factory.mjs';
import bcrypt from 'bcrypt';
import crypto from 'crypto';
import { UserMFA } from '../models/UserMFA.mjs';
export class BackupCodeService {
	static instance = null;
	logger;
	errorLogger;
	errorHandler;
	constructor(logger, errorLogger, errorHandler) {
		this.logger = logger;
		this.errorLogger = errorLogger;
		this.errorHandler = errorHandler;
	}
	static async getInstance() {
		if (!BackupCodeService.instance) {
			const logger = await ServiceFactory.getLoggerService();
			const errorLogger = await ServiceFactory.getErrorLoggerService();
			const errorHandler = await ServiceFactory.getErrorHandlerService();
			BackupCodeService.instance = new BackupCodeService(
				logger,
				errorLogger,
				errorHandler
			);
		}
		return BackupCodeService.instance;
	}
	async generateBackupCodes(id) {
		try {
			validateDependencies([{ name: 'id', instance: id }], this.logger);
			const backupCodes = [];
			for (let i = 0; i < 16; i++) {
				const code = crypto.randomBytes(4).toString('hex');
				const hashedCode = await bcrypt.hash(code, 10);
				backupCodes.push({ code: hashedCode, used: false });
			}
			await this.saveBackupCodesToDatabase(id, backupCodes);
			return backupCodes.map(backupCode => backupCode.code);
		} catch (utilError) {
			const utilityError =
				new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
					`Failed to generate backup codes for user ${id}: ${utilError instanceof Error ? utilError.message : utilError}`,
					{ exposeToClient: false }
				);
			this.errorLogger.logError(utilityError.message);
			this.errorHandler.handleError({ error: utilityError });
			return [''];
		}
	}
	async verifyBackupCode(id, inputCode) {
		try {
			validateDependencies(
				[
					{ name: 'id', instance: id },
					{ name: 'inputCode', instance: inputCode }
				],
				this.logger
			);
			const storedCodes = await this.getBackupCodesFromDatabase(id);
			if (!storedCodes || storedCodes.length === 0) {
				this.logger.info(`No backup codes found for user ${id}`);
				return false;
			}
			for (const storedCode of storedCodes) {
				const match = await bcrypt.compare(inputCode, storedCode.code);
				if (match && !storedCode.used) {
					storedCode.used = true;
					await this.updateBackupCodesInDatabase(id, storedCodes);
					return true;
				}
			}
			this.logger.debug(`Backup code verification failed for user ${id}`);
			return false;
		} catch (utilError) {
			const utilityError =
				new this.errorHandler.ErrorClasses.DependencyErrorRecoverable(
					`Failed to verify backup code for user ${id}: ${utilError instanceof Error ? utilError.message : utilError}`
				);
			this.errorLogger.logError(utilityError.message);
			this.errorHandler.handleError({ error: utilityError });
			return false;
		}
	}
	async saveBackupCodesToDatabase(id, backupCodes) {
		try {
			validateDependencies(
				[
					{ name: 'id', instance: id },
					{ name: 'backupCodes', instance: backupCodes }
				],
				this.logger
			);
			const user = await UserMFA.findByPk(id);
			if (!user) {
				this.logger.warn(`User with ID ${id} not found`);
				return;
			}
			const backupCodesAsStrings = backupCodes.map(
				codeObj => codeObj.code
			);
			user.backupCodes = backupCodesAsStrings;
			await user.save();
		} catch (utilError) {
			const utilityError =
				new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
					`Failed to save backup codes for user ${id}: ${utilError instanceof Error ? utilError.message : utilError}`,
					{ exposeToClient: false }
				);
			this.errorLogger.logError(utilityError.message);
			this.errorHandler.handleError({ error: utilityError });
		}
	}
	async getBackupCodesFromDatabase(id) {
		try {
			validateDependencies([{ name: 'id', instance: id }], this.logger);
			const user = await UserMFA.findByPk(id);
			if (!user || !user.backupCodes) {
				this.logger.warn(`No backup codes found for user ${id}`);
				return;
			}
			return user.backupCodes.map(code => ({ code, used: false }));
		} catch (utilError) {
			const utilityError =
				new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
					`Failed to get backup codes for user ${id}: ${utilError instanceof Error ? utilError.message : utilError}`,
					{ exposeToClient: false }
				);
			this.errorLogger.logError(utilityError.message);
			this.errorHandler.handleError({ error: utilityError });
			return [];
		}
	}
	async updateBackupCodesInDatabase(id, backupCodes) {
		try {
			validateDependencies(
				[
					{ name: 'id', instance: id },
					{ name: 'backupCodes', instance: backupCodes }
				],
				this.logger
			);
			const user = await UserMFA.findByPk(id);
			if (!user) {
				this.logger.warn(`User with ID ${id} not found`);
				return;
			}
			const backupCodesAsStrings = backupCodes.map(
				codeObj => codeObj.code
			);
			user.backupCodes = backupCodesAsStrings;
			await user.save();
		} catch (utilError) {
			const utilityError =
				new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
					`Failed to update backup codes for user ${id}: ${utilError instanceof Error ? utilError.message : utilError}`,
					{ exposeToClient: false }
				);
			this.errorLogger.logError(utilityError.message);
			this.errorHandler.handleError({ error: utilityError });
		}
	}
	async shutdown() {
		try {
			this.logger.info('Shutting down BackupCodeService...');
			BackupCodeService.instance = null;
			this.logger.info('BackupCodeService shutdown successfully.');
		} catch (error) {
			this.errorLogger.logError(
				`Error shutting down BackupCodeService: ${error instanceof Error ? error.message : error}`
			);
		}
	}
}
//# sourceMappingURL=data:application/json;base64,
