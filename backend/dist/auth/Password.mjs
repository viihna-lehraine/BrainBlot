import { hashConfig } from '../config/security.mjs';
import { validateDependencies } from '../utils/helpers.mjs';
import { ServiceFactory } from '../index/factory.mjs';
export class PasswordService {
	static instance = null;
	logger;
	errorLogger;
	errorHandler;
	secrets;
	constructor(logger, errorLogger, errorHandler, secrets) {
		this.logger = logger;
		this.errorLogger = errorLogger;
		this.errorHandler = errorHandler;
		this.secrets = secrets;
	}
	static async getInstance() {
		if (!PasswordService.instance) {
			const logger = await ServiceFactory.getLoggerService();
			const errorLogger = await ServiceFactory.getErrorLoggerService();
			const errorHandler = await ServiceFactory.getErrorHandlerService();
			const secrets = await ServiceFactory.getVaultService();
			PasswordService.instance = new PasswordService(
				logger,
				errorLogger,
				errorHandler,
				secrets
			);
		}
		return PasswordService.instance;
	}
	async hashPassword(password) {
		try {
			validateDependencies(
				[{ name: 'password', instance: password }],
				this.logger || console
			);
			const pepper = this.secrets.retrieveSecret(
				'PEPPER',
				secret => secret
			);
			if (!pepper || typeof pepper !== 'string') {
				const hashConfigError =
					new this.errorHandler.ErrorClasses.ConfigurationError(
						`Unable to retrieve pepper from secrets. Password cannot be hashed.`,
						{ exposeToClient: false }
					);
				this.errorLogger.logError(hashConfigError.message);
				this.errorHandler.handleError({ error: hashConfigError });
				this.logger.error('Failed to retrieve pepper from secrets');
				throw hashConfigError;
			}
			return await (
				await import('argon2')
			).hash(password + pepper, hashConfig);
		} catch (hashUtilError) {
			const hashUtilityError =
				new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
					`${hashUtilError instanceof Error ? hashUtilError.message : hashUtilError}`
				);
			this.errorLogger.logError(hashUtilityError.message);
			this.errorHandler.handleError({ error: hashUtilityError });
			return '';
		} finally {
			this.logger.debug('Password hashed successfully');
		}
	}
	async comparePassword(storedPassword, providedPassword) {
		try {
			const pepper = this.secrets.retrieveSecret(
				'PEPPER',
				secret => secret
			);
			if (!pepper || typeof pepper !== 'string') {
				this.logger.error(
					'Failed to retrieve pepper from secrets for password comparison'
				);
				throw new Error('Internal server error');
			}
			return await (
				await import('argon2')
			).verify(storedPassword, providedPassword + pepper);
		} catch (compareError) {
			this.errorHandler.handleError({
				error: compareError,
				action: 'comparePassword'
			});
			return false;
		}
	}
	async shutdown() {
		try {
			this.logger.info('Shutting down PasswordService...');
			PasswordService.instance = null;
			this.logger.info('PasswordService shutdown completed successfully');
		} catch (error) {
			const utilityError =
				new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
					`Error during PasswordService shutdown: ${error instanceof Error ? error.message : error}`
				);
			this.errorLogger.logError(utilityError.message);
			this.errorHandler.handleError({ error: utilityError });
		}
	}
}
//# sourceMappingURL=data:application/json;base64,
