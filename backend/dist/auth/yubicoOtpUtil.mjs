import '../../types/custom/yub.js';
import { processError } from '../utils/processError.mjs';
import { validateDependencies } from '../utils/validateDependencies.mjs';
export default function createYubicoOtpUtil({
	yub,
	getSecrets,
	logger,
	execSync,
	getDirectoryPath
}) {
	let secrets = null;
	let yubClient;
	validateDependencies(
		[
			{ name: 'yub', instance: yub },
			{ name: 'getSecrets', instance: getSecrets },
			{ name: 'logger', instance: logger },
			{ name: 'execSync', instance: execSync },
			{ name: 'getDirectoryPath', instance: getDirectoryPath }
		],
		logger
	);
	async function initializeYubicoOtpUtil() {
		try {
			logger.info('Initializing Yubico OTP Utility.');
			secrets = await getSecrets({ logger, execSync, getDirectoryPath });
			if (!secrets) {
				throw new Error('Secrets could not be loaded');
			}
			yubClient = yub.init(
				secrets.YUBICO_CLIENT_ID.toString(),
				secrets.YUBICO_SECRET_KEY
			);
			logger.info('Yubico OTP Utility initialized successfully.');
		} catch (error) {
			processError(error, logger);
			throw new Error(
				`Failed to initialize Yubico OTP Utility: ${error instanceof Error ? error.message : String(error)}`
			);
		}
	}
	async function validateYubicoOTP(otp) {
		try {
			if (!yubClient) {
				logger.warn('Yubico client not initialized, initializing now.');
				await initializeYubicoOtpUtil();
			}
			return new Promise((resolve, reject) => {
				yubClient.verify(otp, (error, data) => {
					if (error) {
						processError(error, logger);
						return reject(error);
					}
					if (data && data.status === 'OK') {
						logger.info('Yubico OTP validation successful.');
						resolve(true);
					} else {
						logger.info('Yubico OTP validation failed.');
						resolve(false);
					}
				});
			});
		} catch (error) {
			processError(error, logger);
			throw new Error(
				`Failed to validate Yubico OTP: ${error instanceof Error ? error.message : String(error)}`
			);
		}
	}
	function generateYubicoOtpOptions() {
		try {
			if (!secrets) {
				throw new Error('Secrets have not been initialized');
			}
			logger.info('Generating Yubico OTP options.');
			return {
				clientId: secrets.YUBICO_CLIENT_ID,
				apiKey: secrets.YUBICO_SECRET_KEY,
				apiUrl: secrets.YUBICO_API_URL
			};
		} catch (error) {
			processError(error, logger);
			throw new Error(
				`Failed to generate Yubico OTP options: ${error instanceof Error ? error.message : String(error)}`
			);
		}
	}
	return {
		initializeYubicoOtpUtil,
		validateYubicoOTP,
		generateYubicoOtpOptions
	};
}
//# sourceMappingURL=data:application/json;base64,
