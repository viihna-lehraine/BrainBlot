import { Fido2Lib } from 'fido2-lib';
import { validateDependencies } from '../utils/helpers.mjs';
import { ServiceFactory } from '../index/factory.mjs';
import { serviceTTLConfig } from '../config/cache.mjs';
import '../../types/custom/yub.js';
export class FIDO2Service {
	static instance = null;
	FIDO2 = null;
	logger;
	errorLogger;
	errorHandler;
	envConfig;
	cacheService;
	timeout;
	constructor() {
		this.timeout = this.envConfig.getEnvVariable('fido2Timeout') || 50000;
	}
	static async getInstance() {
		if (!FIDO2Service.instance) {
			const errorLogger = await ServiceFactory.getErrorLoggerService();
			const errorHandler = await ServiceFactory.getErrorHandlerService();
			const envConfig = await ServiceFactory.getEnvConfigService();
			const cacheService = await ServiceFactory.getCacheService();
			const logger = await ServiceFactory.getLoggerService();
			FIDO2Service.instance = new FIDO2Service();
			FIDO2Service.instance.errorLogger = errorLogger;
			FIDO2Service.instance.errorHandler = errorHandler;
			FIDO2Service.instance.envConfig = envConfig;
			FIDO2Service.instance.cacheService = cacheService;
			FIDO2Service.instance.logger = logger;
		}
		return FIDO2Service.instance;
	}
	async initializeFIDO2Service() {
		const cacheKey = 'FIDO2Lib';
		const cachedFIDO2Lib = await this.cacheService.get(cacheKey, 'auth');
		if (cachedFIDO2Lib) {
			this.FIDO2 = cachedFIDO2Lib;
			this.logger.debug('Loaded Fido2Lib from cache.');
			return;
		}
		try {
			const rpId = this.envConfig.getEnvVariable('rpId');
			const rpName = this.envConfig.getEnvVariable('rpName');
			const challengeSize =
				this.envConfig.getEnvVariable('fidoChallengeSize');
			const cryptoParams =
				this.envConfig.getEnvVariable('fidoCryptoParams');
			const requireResidentKey = this.envConfig.getEnvVariable(
				'fidoAuthRequireResidentKey'
			);
			const userVerification = this.envConfig.getEnvVariable(
				'fidoAuthUserVerification'
			);
			const validUserVerificationValues = [
				'required',
				'preferred',
				'discouraged'
			];
			const timeout = this.timeout;
			if (!validUserVerificationValues.includes(userVerification)) {
				throw new Error(
					'Invalid value for authenticatorUserVerification'
				);
			}
			this.FIDO2 = new Fido2Lib({
				timeout,
				rpId,
				rpName,
				challengeSize,
				cryptoParams,
				authenticatorRequireResidentKey: requireResidentKey,
				authenticatorUserVerification: userVerification
			});
			await this.cacheService.set(
				cacheKey,
				this.FIDO2,
				'auth',
				serviceTTLConfig.FIDO2 || serviceTTLConfig.default
			);
			this.logger.info('Fido2Lib initialized successfully.');
		} catch (error) {
			this.handleError('initializeFido2', error);
		}
	}
	async ensureInitialized() {
		validateDependencies(
			[{ name: 'logger', instance: this.logger }],
			this.logger
		);
		if (!this.FIDO2) {
			this.logger.debug('Fido2Lib is not initialized, initializing now.');
			await this.initializeFIDO2Service();
		} else {
			this.logger.debug('Fido2Lib is already initialized.');
		}
	}
	async generateFIDO2RegistrationOptions(user) {
		const cacheKey = `FIDO2Registration:${user.id}`;
		const cachedOptions = await this.cacheService.get(cacheKey, 'auth');
		if (cachedOptions) {
			this.logger.debug('Loaded registration options from cache.');
			return cachedOptions;
		}
		try {
			validateDependencies(
				[{ name: 'user', instance: user }],
				this.logger
			);
			await this.ensureInitialized();
			const timeout = this.timeout;
			const passkeyRegistrationOptions =
				await this.FIDO2.attestationOptions();
			const registrationOptions = {
				...passkeyRegistrationOptions,
				user: {
					id: Buffer.from(user.id, 'utf-8'),
					name: user.email,
					displayName: user.username
				},
				pubKeyCredParams: [{ type: 'public-key', alg: -7 }],
				timeout,
				attestation: 'direct',
				authenticatorSelection: {
					authenticatorAttachment: 'platform',
					requireResidentKey: true,
					userVerification: 'preferred'
				}
			};
			await this.cacheService.set(
				cacheKey,
				registrationOptions,
				'auth',
				serviceTTLConfig.FIDO2Registration || serviceTTLConfig.default
			);
			this.logger.info(
				'Passkey registration options generated successfully.'
			);
			return registrationOptions;
		} catch (error) {
			this.handleError('generateRegistrationOptions', error);
			return {};
		}
	}
	async verifyFIDO2Registration(attestation, expectedChallenge) {
		try {
			validateDependencies(
				[
					{ name: 'attestation', instance: attestation },
					{ name: 'expectedChallenge', instance: expectedChallenge }
				],
				this.logger
			);
			await this.ensureInitialized();
			const u2fAttestationExpectations = {
				challenge: expectedChallenge,
				origin: this.envConfig.getEnvVariable('rpOrigin'),
				factor: 'either',
				rpId: this.envConfig.getEnvVariable('rpId')
			};
			const result = await this.FIDO2.attestationResult(
				attestation,
				u2fAttestationExpectations
			);
			this.logger.info('Passkey registration verified successfully.');
			return result;
		} catch (error) {
			this.handleError('verifyRegistration', error);
			return {};
		}
	}
	async generateFIDO2AuthenticationOptions(user) {
		const cacheKey = `FIDO2Auth:${user.id}`;
		const cachedOptions = await this.cacheService.get(cacheKey, 'auth');
		if (cachedOptions) {
			this.logger.debug('Loaded authentication options from cache.');
			return cachedOptions;
		}
		try {
			await this.ensureInitialized();
			const userCredentials = user.credential.map(credential => ({
				type: 'public-key',
				id: Buffer.from(credential.credentialId, 'base64').buffer
			}));
			const assertionOptions = await this.FIDO2.assertionOptions();
			const authenticationOptions = {
				...assertionOptions,
				allowCredentials: userCredentials,
				userVerification: 'required',
				timeout: 60000
			};
			await this.cacheService.set(
				cacheKey,
				authenticationOptions,
				'auth',
				serviceTTLConfig.FIDO2Authentication || serviceTTLConfig.default
			);
			this.logger.info(
				'Passkey authentication options generated successfully.'
			);
			return authenticationOptions;
		} catch (error) {
			this.handleError('generateAuthenticationOptions', error);
			return {};
		}
	}
	async verifyAuthentication(
		assertion,
		expectedChallenge,
		publicKey,
		previousCounter,
		id
	) {
		try {
			validateDependencies(
				[
					{ name: 'assertion', instance: assertion },
					{ name: 'expectedChallenge', instance: expectedChallenge },
					{ name: 'publicKey', instance: publicKey },
					{ name: 'previousCounter', instance: previousCounter },
					{ name: 'id', instance: id }
				],
				this.logger
			);
			await this.ensureInitialized();
			const assertionExpectations = {
				challenge: expectedChallenge,
				origin: this.envConfig.getEnvVariable('rpOrigin'),
				factor: 'either',
				publicKey,
				prevCounter: previousCounter,
				userHandle: id
			};
			const result = await this.FIDO2.assertionResult(
				assertion,
				assertionExpectations
			);
			this.logger.info('Passkey authentication verified successfully.');
			return result;
		} catch (error) {
			this.handleError('verifyAuthentication', error);
			return {};
		}
	}
	// *DEV-NOTE* use, for example, when user updates credentials
	async invalidateFido2Cache(userId, action) {
		const cacheKeyRegistration = `FIDO2Registration:${userId}`;
		const cacheKeyAuth = `FIDO2Auth:${userId}`;
		this.logger.info(
			`Invalidating FIDO2 cache for user ${userId} due to ${action}`
		);
		try {
			await this.cacheService.del(cacheKeyRegistration, 'auth');
			await this.cacheService.del(cacheKeyAuth, 'auth');
			this.logger.info(`FIDO2 cache invalidated for user ${userId}`);
		} catch (error) {
			this.handleError('invalidateFido2Cache', error);
		}
	}
	async shutdown() {
		try {
			if (this.FIDO2) {
				this.logger.info(
					'Clearing FIDO2Lib and cache entries before shutdown...'
				);
				this.FIDO2 = null;
				await this.cacheService.del('FIDO2Lib', 'auth');
				this.logger.info(
					'FIDO2 cache and instance cleared successfully.'
				);
				FIDO2Service.instance = null;
				this.logger.info('FIDO2Service shut down successfully.');
			} else {
				this.logger.info(
					'FIDO2Service is already shut down or uninitialized.'
				);
			}
		} catch (error) {
			this.handleError('shutdown', error);
		}
	}
	async handleError(utility, error) {
		const errorMessage = `Error in ${utility}: ${error instanceof Error ? error.message : error}`;
		this.errorLogger.logError(errorMessage);
		const utilityError =
			new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
				errorMessage,
				{
					exposeToClient: false
				}
			);
		this.errorHandler.handleError({ error: utilityError });
	}
}
//# sourceMappingURL=data:application/json;base64,
