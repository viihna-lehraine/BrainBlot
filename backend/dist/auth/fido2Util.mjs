import { Fido2Lib } from 'fido2-lib';
import path from 'path';
import sops from '../utils/sops';
import { validateDependencies } from '../utils/validateDependencies';
import { processError } from '../utils/processError';
import { execSync } from 'child_process';
let fido2 = null;
let secrets;
function getDirectoryPath() {
	return path.resolve(process.cwd());
}
async function initializeFido2(logger) {
	try {
		validateDependencies(
			[
				{ name: 'logger', instance: logger },
				{ name: 'execSync', instance: execSync },
				{ name: 'getDirectoryPath', instance: getDirectoryPath }
			],
			logger
		);
		secrets = await sops.getSecrets({
			logger,
			execSync,
			getDirectoryPath
		});
		validateDependencies(
			[
				{ name: 'secrets.RP_ID', instance: secrets.RP_ID },
				{ name: 'secrets.RP_NAME', instance: secrets.RP_NAME },
				{
					name: 'secrets.FIDO_CHALLENGE_SIZE',
					instance: secrets.FIDO_CHALLENGE_SIZE
				}
			],
			logger
		);
		// Initialize Fido2Lib instance
		fido2 = new Fido2Lib({
			timeout: 60000,
			rpId: secrets.RP_ID,
			rpName: secrets.RP_NAME,
			challengeSize: secrets.FIDO_CHALLENGE_SIZE,
			cryptoParams: secrets.FIDO_CRYPTO_PARAMETERS,
			authenticatorRequireResidentKey:
				secrets.FIDO_AUTHENTICATOR_REQUIRE_RESIDENT_KEY,
			authenticatorUserVerification:
				secrets.FIDO_AUTHENTICATOR_USER_VERIFICATION
		});
		logger.info('Fido2Lib initialized successfully.');
	} catch (error) {
		processError(error, logger);
		throw new Error('Failed to initialize Fido2Lib');
	}
}
async function ensureFido2Initialized(logger) {
	validateDependencies([{ name: 'logger', instance: logger }], logger);
	if (!fido2) {
		logger.debug('Fido2Lib is not initialized, initializing now.');
		await initializeFido2(logger);
	}
}
async function generatePasskeyRegistrationOptions(user, logger) {
	try {
		validateDependencies(
			[
				{ name: 'user', instance: user },
				{ name: 'logger', instance: logger }
			],
			logger
		);
		await ensureFido2Initialized(logger);
		const passkeyRegistrationOptions = await fido2.attestationOptions();
		const registrationOptions = {
			...passkeyRegistrationOptions,
			user: {
				id: Buffer.from(user.id, 'utf-8'),
				name: user.email,
				displayName: user.username
			},
			pubKeyCredParams: [{ type: 'public-key', alg: -7 }],
			timeout: 60000,
			attestation: 'direct',
			authenticatorSelection: {
				authenticatorAttachment: 'platform',
				requireResidentKey: true,
				userVerification: 'preferred'
			}
		};
		logger.info('Passkey registration options generated successfully.');
		return registrationOptions;
	} catch (error) {
		processError(error, logger);
		throw new Error('Failed to generate passkey registration options');
	}
}
async function verifyPasskeyRegistration(
	attestation,
	expectedChallenge,
	logger
) {
	try {
		validateDependencies(
			[
				{ name: 'attestation', instance: attestation },
				{ name: 'expectedChallenge', instance: expectedChallenge },
				{ name: 'logger', instance: logger }
			],
			logger
		);
		await ensureFido2Initialized(logger);
		const u2fAttestationExpectations = {
			challenge: expectedChallenge,
			origin: secrets.RP_ORIGIN,
			factor: 'either',
			rpId: secrets.RP_ID
		};
		const result = await fido2.attestationResult(
			attestation,
			u2fAttestationExpectations
		);
		logger.info('Passkey registration verified successfully.');
		return result;
	} catch (error) {
		processError(error, logger);
		throw new Error('Failed to verify passkey registration');
	}
}
async function generatePasskeyAuthenticationOptions(user, logger) {
	try {
		validateDependencies(
			[
				{ name: 'user', instance: user },
				{ name: 'logger', instance: logger }
			],
			logger
		);
		await ensureFido2Initialized(logger);
		const userCredentials = user.credential.map(credential => ({
			type: 'public-key',
			id: Buffer.from(credential.credentialId, 'base64').buffer
		}));
		const assertionOptions = await fido2.assertionOptions();
		const authenticationOptions = {
			...assertionOptions,
			allowCredentials: userCredentials,
			userVerification: 'required', // ensure passwordless login
			timeout: 60000
		};
		logger.info('Passkey authentication options generated successfully.');
		return authenticationOptions;
	} catch (error) {
		processError(error, logger);
		throw new Error('Failed to generate passkey authentication options');
	}
}
async function verifyPasskeyAuthentication(
	assertion,
	expectedChallenge,
	publicKey,
	previousCounter,
	id,
	logger
) {
	try {
		validateDependencies(
			[
				{ name: 'assertion', instance: assertion },
				{ name: 'expectedChallenge', instance: expectedChallenge },
				{ name: 'publicKey', instance: publicKey },
				{ name: 'previousCounter', instance: previousCounter },
				{ name: 'id', instance: id },
				{ name: 'logger', instance: logger }
			],
			logger
		);
		await ensureFido2Initialized(logger);
		const assertionExpectations = {
			challenge: expectedChallenge,
			origin: secrets.RP_ORIGIN,
			factor: 'either',
			publicKey,
			prevCounter: previousCounter,
			userHandle: id
		};
		const result = await fido2.assertionResult(
			assertion,
			assertionExpectations
		);
		logger.info('Passkey authentication verified successfully.');
		return result;
	} catch (error) {
		processError(error, logger);
		throw new Error('Failed to verify passkey authentication');
	}
}
export default {
	generatePasskeyAuthenticationOptions,
	generatePasskeyRegistrationOptions,
	verifyPasskeyAuthentication,
	verifyPasskeyRegistration
};
//# sourceMappingURL=data:application/json;base64,
