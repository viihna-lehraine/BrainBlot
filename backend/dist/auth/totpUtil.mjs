import { validateDependencies } from '../utils/validateDependencies';
import { processError } from '../utils/processError';
export default function createTOTPUtil({ speakeasy, QRCode, logger }) {
	validateDependencies(
		[
			{ name: 'speakeasy', instance: speakeasy },
			{ name: 'QRCode', instance: QRCode }
		],
		logger
	);
	function generateTOTPSecret() {
		try {
			logger.debug('Generating TOTP secret.');
			const totpSecret = speakeasy.generateSecret({ length: 20 });
			logger.debug('TOTP secret generated successfully.');
			return {
				ascii: totpSecret.ascii || '',
				hex: totpSecret.hex || '',
				base32: totpSecret.base32 || '',
				otpauth_url: totpSecret.otpauth_url || ''
			};
		} catch (error) {
			processError(error, logger);
			throw new Error(
				`Failed to generate TOTP secret: ${error instanceof Error ? error.message : String(error)}`
			);
		}
	}
	function generateTOTPToken(secret) {
		try {
			logger.debug('Generating TOTP token.');
			const totpToken = speakeasy.totp({
				secret,
				encoding: 'base32'
			});
			logger.debug('TOTP token generated successfully.');
			return totpToken;
		} catch (error) {
			processError(error, logger);
			throw new Error(
				`Failed to generate TOTP token: ${error instanceof Error ? error.message : String(error)}`
			);
		}
	}
	function verifyTOTPToken(secret, token) {
		try {
			logger.debug('Verifying TOTP token.');
			const isTOTPTokenValid = speakeasy.totp.verify({
				secret,
				encoding: 'base32',
				token,
				window: 1 // leeway for clock drift
			});
			logger.debug(
				`TOTP token verification ${isTOTPTokenValid ? 'succeeded' : 'failed'}.`
			);
			return isTOTPTokenValid;
		} catch (error) {
			processError(error, logger);
			throw new Error(
				`Failed to verify TOTP token: ${error instanceof Error ? error.message : String(error)}`
			);
		}
	}
	async function generateQRCode(otpauth_url) {
		try {
			logger.debug('Generating QR code for TOTP.');
			const qrCode = await QRCode.toDataURL(otpauth_url);
			logger.debug('QR code generated successfully.');
			return qrCode;
		} catch (error) {
			processError(error, logger);
			throw new Error(
				`Failed to generate QR code: ${error instanceof Error ? error.message : String(error)}`
			);
		}
	}
	return {
		generateTOTPSecret,
		generateTOTPToken,
		verifyTOTPToken,
		generateQRCode
	};
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG90cFV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXV0aC90b3RwVXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNyRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFlckQsTUFBTSxDQUFDLE9BQU8sVUFBVSxjQUFjLENBQUMsRUFDdEMsU0FBUyxFQUNULE1BQU0sRUFDTixNQUFNLEVBQ2dCO0lBTXRCLG9CQUFvQixDQUNuQjtRQUNDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFO1FBQzFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO0tBQ3BDLEVBQ0QsTUFBTSxDQUNOLENBQUM7SUFFRixTQUFTLGtCQUFrQjtRQUMxQixJQUFJLENBQUM7WUFDSixNQUFNLENBQUMsS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDeEMsTUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDLGNBQWMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzVELE1BQU0sQ0FBQyxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQztZQUNwRCxPQUFPO2dCQUNOLEtBQUssRUFBRSxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7Z0JBQzdCLEdBQUcsRUFBRSxVQUFVLENBQUMsR0FBRyxJQUFJLEVBQUU7Z0JBQ3pCLE1BQU0sRUFBRSxVQUFVLENBQUMsTUFBTSxJQUFJLEVBQUU7Z0JBQy9CLFdBQVcsRUFBRSxVQUFVLENBQUMsV0FBVyxJQUFJLEVBQUU7YUFDekMsQ0FBQztRQUNILENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2hCLFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDNUIsTUFBTSxJQUFJLEtBQUssQ0FDZCxtQ0FBbUMsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQzNGLENBQUM7UUFDSCxDQUFDO0lBQ0YsQ0FBQztJQUVELFNBQVMsaUJBQWlCLENBQUMsTUFBYztRQUN4QyxJQUFJLENBQUM7WUFDSixNQUFNLENBQUMsS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7WUFDdkMsTUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztnQkFDaEMsTUFBTTtnQkFDTixRQUFRLEVBQUUsUUFBUTthQUNsQixDQUFDLENBQUM7WUFDSCxNQUFNLENBQUMsS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7WUFDbkQsT0FBTyxTQUFTLENBQUM7UUFDbEIsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDaEIsWUFBWSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztZQUM1QixNQUFNLElBQUksS0FBSyxDQUNkLGtDQUFrQyxLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FDMUYsQ0FBQztRQUNILENBQUM7SUFDRixDQUFDO0lBRUQsU0FBUyxlQUFlLENBQUMsTUFBYyxFQUFFLEtBQWE7UUFDckQsSUFBSSxDQUFDO1lBQ0osTUFBTSxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBQ3RDLE1BQU0sZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7Z0JBQzlDLE1BQU07Z0JBQ04sUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLEtBQUs7Z0JBQ0wsTUFBTSxFQUFFLENBQUMsQ0FBQyx5QkFBeUI7YUFDbkMsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxDQUFDLEtBQUssQ0FDWCwyQkFBMkIsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsUUFBUSxHQUFHLENBQ3ZFLENBQUM7WUFDRixPQUFPLGdCQUFnQixDQUFDO1FBQ3pCLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2hCLFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDNUIsTUFBTSxJQUFJLEtBQUssQ0FDZCxnQ0FBZ0MsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQ3hGLENBQUM7UUFDSCxDQUFDO0lBQ0YsQ0FBQztJQUVELEtBQUssVUFBVSxjQUFjLENBQUMsV0FBbUI7UUFDaEQsSUFBSSxDQUFDO1lBQ0osTUFBTSxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1lBQzdDLE1BQU0sTUFBTSxHQUFHLE1BQU0sTUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNuRCxNQUFNLENBQUMsS0FBSyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7WUFDaEQsT0FBTyxNQUFNLENBQUM7UUFDZixDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNoQixZQUFZLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzVCLE1BQU0sSUFBSSxLQUFLLENBQ2QsK0JBQStCLEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUN2RixDQUFDO1FBQ0gsQ0FBQztJQUNGLENBQUM7SUFFRCxPQUFPO1FBQ04sa0JBQWtCO1FBQ2xCLGlCQUFpQjtRQUNqQixlQUFlO1FBQ2YsY0FBYztLQUNkLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFFSQ29kZSBmcm9tICdxcmNvZGUnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vY29uZmlnL2xvZ2dlcic7XG5pbXBvcnQgeyB2YWxpZGF0ZURlcGVuZGVuY2llcyB9IGZyb20gJy4uL3V0aWxzL3ZhbGlkYXRlRGVwZW5kZW5jaWVzJztcbmltcG9ydCB7IHByb2Nlc3NFcnJvciB9IGZyb20gJy4uL3V0aWxzL3Byb2Nlc3NFcnJvcic7XG5cbmludGVyZmFjZSBUT1RQU2VjcmV0IHtcblx0YXNjaWk6IHN0cmluZztcblx0aGV4OiBzdHJpbmc7XG5cdGJhc2UzMjogc3RyaW5nO1xuXHRvdHBhdXRoX3VybDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgVE9UUFV0aWxEZXBlbmRlbmNpZXMge1xuXHRzcGVha2Vhc3k6IHR5cGVvZiBpbXBvcnQoJ3NwZWFrZWFzeScpO1xuXHRRUkNvZGU6IHR5cGVvZiBRUkNvZGU7XG5cdGxvZ2dlcjogTG9nZ2VyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUT1RQVXRpbCh7XG5cdHNwZWFrZWFzeSxcblx0UVJDb2RlLFxuXHRsb2dnZXJcbn06IFRPVFBVdGlsRGVwZW5kZW5jaWVzKToge1xuXHRnZW5lcmF0ZVRPVFBTZWNyZXQ6ICgpID0+IFRPVFBTZWNyZXQ7XG5cdGdlbmVyYXRlVE9UUFRva2VuOiAoc2VjcmV0OiBzdHJpbmcpID0+IHN0cmluZztcblx0dmVyaWZ5VE9UUFRva2VuOiAoc2VjcmV0OiBzdHJpbmcsIHRva2VuOiBzdHJpbmcpID0+IGJvb2xlYW47XG5cdGdlbmVyYXRlUVJDb2RlOiAob3RwYXV0aF91cmw6IHN0cmluZykgPT4gUHJvbWlzZTxzdHJpbmc+O1xufSB7XG5cdHZhbGlkYXRlRGVwZW5kZW5jaWVzKFxuXHRcdFtcblx0XHRcdHsgbmFtZTogJ3NwZWFrZWFzeScsIGluc3RhbmNlOiBzcGVha2Vhc3kgfSxcblx0XHRcdHsgbmFtZTogJ1FSQ29kZScsIGluc3RhbmNlOiBRUkNvZGUgfVxuXHRcdF0sXG5cdFx0bG9nZ2VyXG5cdCk7XG5cblx0ZnVuY3Rpb24gZ2VuZXJhdGVUT1RQU2VjcmV0KCk6IFRPVFBTZWNyZXQge1xuXHRcdHRyeSB7XG5cdFx0XHRsb2dnZXIuZGVidWcoJ0dlbmVyYXRpbmcgVE9UUCBzZWNyZXQuJyk7XG5cdFx0XHRjb25zdCB0b3RwU2VjcmV0ID0gc3BlYWtlYXN5LmdlbmVyYXRlU2VjcmV0KHsgbGVuZ3RoOiAyMCB9KTtcblx0XHRcdGxvZ2dlci5kZWJ1ZygnVE9UUCBzZWNyZXQgZ2VuZXJhdGVkIHN1Y2Nlc3NmdWxseS4nKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGFzY2lpOiB0b3RwU2VjcmV0LmFzY2lpIHx8ICcnLFxuXHRcdFx0XHRoZXg6IHRvdHBTZWNyZXQuaGV4IHx8ICcnLFxuXHRcdFx0XHRiYXNlMzI6IHRvdHBTZWNyZXQuYmFzZTMyIHx8ICcnLFxuXHRcdFx0XHRvdHBhdXRoX3VybDogdG90cFNlY3JldC5vdHBhdXRoX3VybCB8fCAnJ1xuXHRcdFx0fTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0cHJvY2Vzc0Vycm9yKGVycm9yLCBsb2dnZXIpO1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRgRmFpbGVkIHRvIGdlbmVyYXRlIFRPVFAgc2VjcmV0OiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKX1gXG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGdlbmVyYXRlVE9UUFRva2VuKHNlY3JldDogc3RyaW5nKTogc3RyaW5nIHtcblx0XHR0cnkge1xuXHRcdFx0bG9nZ2VyLmRlYnVnKCdHZW5lcmF0aW5nIFRPVFAgdG9rZW4uJyk7XG5cdFx0XHRjb25zdCB0b3RwVG9rZW4gPSBzcGVha2Vhc3kudG90cCh7XG5cdFx0XHRcdHNlY3JldCxcblx0XHRcdFx0ZW5jb2Rpbmc6ICdiYXNlMzInXG5cdFx0XHR9KTtcblx0XHRcdGxvZ2dlci5kZWJ1ZygnVE9UUCB0b2tlbiBnZW5lcmF0ZWQgc3VjY2Vzc2Z1bGx5LicpO1xuXHRcdFx0cmV0dXJuIHRvdHBUb2tlbjtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0cHJvY2Vzc0Vycm9yKGVycm9yLCBsb2dnZXIpO1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRgRmFpbGVkIHRvIGdlbmVyYXRlIFRPVFAgdG9rZW46ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpfWBcblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gdmVyaWZ5VE9UUFRva2VuKHNlY3JldDogc3RyaW5nLCB0b2tlbjogc3RyaW5nKTogYm9vbGVhbiB7XG5cdFx0dHJ5IHtcblx0XHRcdGxvZ2dlci5kZWJ1ZygnVmVyaWZ5aW5nIFRPVFAgdG9rZW4uJyk7XG5cdFx0XHRjb25zdCBpc1RPVFBUb2tlblZhbGlkID0gc3BlYWtlYXN5LnRvdHAudmVyaWZ5KHtcblx0XHRcdFx0c2VjcmV0LFxuXHRcdFx0XHRlbmNvZGluZzogJ2Jhc2UzMicsXG5cdFx0XHRcdHRva2VuLFxuXHRcdFx0XHR3aW5kb3c6IDEgLy8gbGVld2F5IGZvciBjbG9jayBkcmlmdFxuXHRcdFx0fSk7XG5cdFx0XHRsb2dnZXIuZGVidWcoXG5cdFx0XHRcdGBUT1RQIHRva2VuIHZlcmlmaWNhdGlvbiAke2lzVE9UUFRva2VuVmFsaWQgPyAnc3VjY2VlZGVkJyA6ICdmYWlsZWQnfS5gXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIGlzVE9UUFRva2VuVmFsaWQ7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdHByb2Nlc3NFcnJvcihlcnJvciwgbG9nZ2VyKTtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0YEZhaWxlZCB0byB2ZXJpZnkgVE9UUCB0b2tlbjogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcil9YFxuXHRcdFx0KTtcblx0XHR9XG5cdH1cblxuXHRhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVFSQ29kZShvdHBhdXRoX3VybDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcblx0XHR0cnkge1xuXHRcdFx0bG9nZ2VyLmRlYnVnKCdHZW5lcmF0aW5nIFFSIGNvZGUgZm9yIFRPVFAuJyk7XG5cdFx0XHRjb25zdCBxckNvZGUgPSBhd2FpdCBRUkNvZGUudG9EYXRhVVJMKG90cGF1dGhfdXJsKTtcblx0XHRcdGxvZ2dlci5kZWJ1ZygnUVIgY29kZSBnZW5lcmF0ZWQgc3VjY2Vzc2Z1bGx5LicpO1xuXHRcdFx0cmV0dXJuIHFyQ29kZTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0cHJvY2Vzc0Vycm9yKGVycm9yLCBsb2dnZXIpO1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRgRmFpbGVkIHRvIGdlbmVyYXRlIFFSIGNvZGU6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpfWBcblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRnZW5lcmF0ZVRPVFBTZWNyZXQsXG5cdFx0Z2VuZXJhdGVUT1RQVG9rZW4sXG5cdFx0dmVyaWZ5VE9UUFRva2VuLFxuXHRcdGdlbmVyYXRlUVJDb2RlXG5cdH07XG59XG4iXX0=
