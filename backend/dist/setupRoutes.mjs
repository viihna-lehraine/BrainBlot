import argon2 from 'argon2';
import axios from 'axios';
import bcrypt from 'bcrypt';
import { execSync } from 'child_process';
import jwt from 'jsonwebtoken';
import QRCode from 'qrcode';
import speakeasy from 'speakeasy';
import { v4 as uuidv4 } from 'uuid';
import xss from 'xss';
import totpUtil from './auth/totpUtil.mjs';
import { environmentVariables } from './config/environmentConfig.mjs';
import { getTransporter } from './config/mailer.mjs';
import { initializeStaticRoutes } from './routes/staticRoutes.mjs';
import { initializeTestRoutes } from './routes/testRoutes.mjs';
import initializeUserRoutes from './routes/userRoutes.mjs';
import initializeValidationRoutes from './routes/validationRoutes.mjs';
import generateConfirmationEmailTemplate from './templates/confirmationEmailTemplate.mjs';
import { processError } from './utils/processError.mjs';
import sops from './utils/sops.mjs';
import { validateDependencies } from './utils/validateDependencies.mjs';
let UserRoutes;
let validator;
export async function initializeRoutes({
	app,
	logger,
	featureFlags,
	staticRootPath
}) {
	try {
		validateDependencies(
			[
				{ name: 'app', instance: app },
				{ name: 'logger', instance: logger },
				{ name: 'featureFlags', instance: featureFlags },
				{ name: 'staticRootPath', instance: staticRootPath }
			],
			logger
		);
		const getDirectoryPath = () => process.cwd();
		const secrets = await sops.getSecrets({
			logger,
			execSync,
			getDirectoryPath
		});
		const totpUtilInstance = totpUtil({
			speakeasy,
			QRCode,
			logger
		});
		if (
			featureFlags.loadTestRoutesFlag &&
			environmentVariables.nodeEnv !== 'production'
		) {
			logger.info('Test routes enabled. Initializing test routes.');
			const testRoutes = initializeTestRoutes({
				app,
				logger,
				featureFlags,
				environmentVariables
			});
			app.use('/test', testRoutes);
		} else {
			logger.info('Test routes disabled or running in production.');
		}
		logger.info('Initializing static routes.');
		initializeStaticRoutes(app, staticRootPath, logger);
		// validation routes
		logger.info('Initializing validation routes.');
		initializeValidationRoutes({ logger, validator });
		// user routes
		logger.info('Initializing user routes.');
		initializeUserRoutes({
			logger,
			secrets,
			UserRoutes,
			argon2,
			jwt,
			axios,
			bcrypt,
			uuidv4,
			xss,
			generateConfirmationEmailTemplate,
			getTransporter,
			totpUtil: totpUtilInstance
		});
	} catch (error) {
		logger.error(
			`FATAL EXCEPTION: Failed to initialize routes: ${error instanceof Error ? error.message : error}`
		);
		processError(error, logger);
		throw new Error(
			`Failed to initialize routes: ${error instanceof Error ? error.message : error}`
		);
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXBSb3V0ZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc2V0dXBSb3V0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBQzVCLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEdBQUcsTUFBTSxjQUFjLENBQUM7QUFDL0IsT0FBTyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBQzVCLE9BQU8sU0FBUyxNQUFNLFdBQVcsQ0FBQztBQUNsQyxPQUFPLEVBQUUsRUFBRSxJQUFJLE1BQU0sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwQyxPQUFPLEdBQUcsTUFBTSxLQUFLLENBQUM7QUFDdEIsT0FBTyxRQUFRLE1BQU0saUJBQWlCLENBQUM7QUFDdkMsT0FBTyxFQUFFLG9CQUFvQixFQUFnQixNQUFNLDRCQUE0QixDQUFDO0FBRWhGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMzRCxPQUFPLG9CQUF5QyxNQUFNLHFCQUFxQixDQUFDO0FBQzVFLE9BQU8sMEJBQTBCLE1BQU0sMkJBQTJCLENBQUM7QUFDbkUsT0FBTyxpQ0FBaUMsTUFBTSx1Q0FBdUMsQ0FBQztBQUN0RixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDcEQsT0FBTyxJQUFJLE1BQU0sY0FBYyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBU3BFLElBQUksVUFBMkIsQ0FBQztBQUVoQyxJQUFJLFNBQXFDLENBQUM7QUFFMUMsTUFBTSxDQUFDLEtBQUssVUFBVSxnQkFBZ0IsQ0FBQyxFQUN0QyxHQUFHLEVBQ0gsTUFBTSxFQUNOLFlBQVksRUFDWixjQUFjLEVBQ0s7SUFDbkIsSUFBSSxDQUFDO1FBQ0osb0JBQW9CLENBQ25CO1lBQ0MsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUU7WUFDOUIsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUU7WUFDcEMsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUU7WUFDaEQsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRTtTQUNwRCxFQUNELE1BQU0sQ0FDTixDQUFDO1FBRUYsTUFBTSxnQkFBZ0IsR0FBRyxHQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFckQsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQ3JDLE1BQU07WUFDTixRQUFRO1lBQ1IsZ0JBQWdCO1NBQ2hCLENBQUMsQ0FBQztRQUVILE1BQU0sZ0JBQWdCLEdBQUcsUUFBUSxDQUFDO1lBQ2pDLFNBQVM7WUFDVCxNQUFNO1lBQ04sTUFBTTtTQUNOLENBQUMsQ0FBQztRQUVILElBQ0MsWUFBWSxDQUFDLGtCQUFrQjtZQUMvQixvQkFBb0IsQ0FBQyxPQUFPLEtBQUssWUFBWSxFQUM1QyxDQUFDO1lBQ0YsTUFBTSxDQUFDLElBQUksQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO1lBQzlELE1BQU0sVUFBVSxHQUFXLG9CQUFvQixDQUFDO2dCQUMvQyxHQUFHO2dCQUNILE1BQU07Z0JBQ04sWUFBWTtnQkFDWixvQkFBb0I7YUFDcEIsQ0FBQyxDQUFDO1lBQ0gsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDOUIsQ0FBQzthQUFNLENBQUM7WUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLGdEQUFnRCxDQUFDLENBQUM7UUFDL0QsQ0FBQztRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsNkJBQTZCLENBQUMsQ0FBQztRQUMzQyxzQkFBc0IsQ0FBQyxHQUFHLEVBQUUsY0FBYyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRXBELG9CQUFvQjtRQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLGlDQUFpQyxDQUFDLENBQUM7UUFDL0MsMEJBQTBCLENBQUMsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUVsRCxjQUFjO1FBQ2QsTUFBTSxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBQ3pDLG9CQUFvQixDQUFDO1lBQ3BCLE1BQU07WUFDTixPQUFPO1lBQ1AsVUFBVTtZQUNWLE1BQU07WUFDTixHQUFHO1lBQ0gsS0FBSztZQUNMLE1BQU07WUFDTixNQUFNO1lBQ04sR0FBRztZQUNILGlDQUFpQztZQUNqQyxjQUFjO1lBQ2QsUUFBUSxFQUFFLGdCQUFnQjtTQUMxQixDQUFDLENBQUM7SUFDSixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixNQUFNLENBQUMsS0FBSyxDQUNYLGlEQUFpRCxLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FDakcsQ0FBQztRQUNGLFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDNUIsTUFBTSxJQUFJLEtBQUssQ0FDZCxnQ0FBZ0MsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQ2hGLENBQUM7SUFDSCxDQUFDO0FBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhcmdvbjIgZnJvbSAnYXJnb24yJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgYmNyeXB0IGZyb20gJ2JjcnlwdCc7XG5pbXBvcnQgeyBleGVjU3luYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IGV4cHJlc3MsIHsgUm91dGVyIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgand0IGZyb20gJ2pzb253ZWJ0b2tlbic7XG5pbXBvcnQgUVJDb2RlIGZyb20gJ3FyY29kZSc7XG5pbXBvcnQgc3BlYWtlYXN5IGZyb20gJ3NwZWFrZWFzeSc7XG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJztcbmltcG9ydCB4c3MgZnJvbSAneHNzJztcbmltcG9ydCB0b3RwVXRpbCBmcm9tICcuL2F1dGgvdG90cFV0aWwnO1xuaW1wb3J0IHsgZW52aXJvbm1lbnRWYXJpYWJsZXMsIEZlYXR1cmVGbGFncyB9IGZyb20gJy4vY29uZmlnL2Vudmlyb25tZW50Q29uZmlnJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vY29uZmlnL2xvZ2dlcic7XG5pbXBvcnQgeyBnZXRUcmFuc3BvcnRlciB9IGZyb20gJy4vY29uZmlnL21haWxlcic7XG5pbXBvcnQgeyBpbml0aWFsaXplU3RhdGljUm91dGVzIH0gZnJvbSAnLi9yb3V0ZXMvc3RhdGljUm91dGVzJztcbmltcG9ydCB7IGluaXRpYWxpemVUZXN0Um91dGVzIH0gZnJvbSAnLi9yb3V0ZXMvdGVzdFJvdXRlcyc7XG5pbXBvcnQgaW5pdGlhbGl6ZVVzZXJSb3V0ZXMsIHsgVXNlclJvdXRlc01vZGVsIH0gZnJvbSAnLi9yb3V0ZXMvdXNlclJvdXRlcyc7XG5pbXBvcnQgaW5pdGlhbGl6ZVZhbGlkYXRpb25Sb3V0ZXMgZnJvbSAnLi9yb3V0ZXMvdmFsaWRhdGlvblJvdXRlcyc7XG5pbXBvcnQgZ2VuZXJhdGVDb25maXJtYXRpb25FbWFpbFRlbXBsYXRlIGZyb20gJy4vdGVtcGxhdGVzL2NvbmZpcm1hdGlvbkVtYWlsVGVtcGxhdGUnO1xuaW1wb3J0IHsgcHJvY2Vzc0Vycm9yIH0gZnJvbSAnLi91dGlscy9wcm9jZXNzRXJyb3InO1xuaW1wb3J0IHNvcHMgZnJvbSAnLi91dGlscy9zb3BzJztcbmltcG9ydCB7IHZhbGlkYXRlRGVwZW5kZW5jaWVzIH0gZnJvbSAnLi91dGlscy92YWxpZGF0ZURlcGVuZGVuY2llcyc7XG5cbmludGVyZmFjZSBSb3V0ZURlcGVuZGVuY2llcyB7XG5cdGFwcDogZXhwcmVzcy5BcHBsaWNhdGlvbjtcblx0bG9nZ2VyOiBMb2dnZXI7XG5cdGZlYXR1cmVGbGFnczogRmVhdHVyZUZsYWdzO1xuXHRzdGF0aWNSb290UGF0aDogc3RyaW5nO1xufVxuXG5sZXQgVXNlclJvdXRlczogVXNlclJvdXRlc01vZGVsO1xuXG5sZXQgdmFsaWRhdG9yOiB0eXBlb2YgaW1wb3J0KCd2YWxpZGF0b3InKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemVSb3V0ZXMoe1xuXHRhcHAsXG5cdGxvZ2dlcixcblx0ZmVhdHVyZUZsYWdzLFxuXHRzdGF0aWNSb290UGF0aFxufTogUm91dGVEZXBlbmRlbmNpZXMpOiBQcm9taXNlPHVuZGVmaW5lZD4ge1xuXHR0cnkge1xuXHRcdHZhbGlkYXRlRGVwZW5kZW5jaWVzKFxuXHRcdFx0W1xuXHRcdFx0XHR7IG5hbWU6ICdhcHAnLCBpbnN0YW5jZTogYXBwIH0sXG5cdFx0XHRcdHsgbmFtZTogJ2xvZ2dlcicsIGluc3RhbmNlOiBsb2dnZXIgfSxcblx0XHRcdFx0eyBuYW1lOiAnZmVhdHVyZUZsYWdzJywgaW5zdGFuY2U6IGZlYXR1cmVGbGFncyB9LFxuXHRcdFx0XHR7IG5hbWU6ICdzdGF0aWNSb290UGF0aCcsIGluc3RhbmNlOiBzdGF0aWNSb290UGF0aCB9XG5cdFx0XHRdLFxuXHRcdFx0bG9nZ2VyXG5cdFx0KTtcblxuXHRcdGNvbnN0IGdldERpcmVjdG9yeVBhdGggPSAoKTogc3RyaW5nID0+IHByb2Nlc3MuY3dkKCk7XG5cblx0XHRjb25zdCBzZWNyZXRzID0gYXdhaXQgc29wcy5nZXRTZWNyZXRzKHtcblx0XHRcdGxvZ2dlcixcblx0XHRcdGV4ZWNTeW5jLFxuXHRcdFx0Z2V0RGlyZWN0b3J5UGF0aFxuXHRcdH0pO1xuXG5cdFx0Y29uc3QgdG90cFV0aWxJbnN0YW5jZSA9IHRvdHBVdGlsKHtcblx0XHRcdHNwZWFrZWFzeSxcblx0XHRcdFFSQ29kZSxcblx0XHRcdGxvZ2dlclxuXHRcdH0pO1xuXG5cdFx0aWYgKFxuXHRcdFx0ZmVhdHVyZUZsYWdzLmxvYWRUZXN0Um91dGVzRmxhZyAmJlxuXHRcdFx0ZW52aXJvbm1lbnRWYXJpYWJsZXMubm9kZUVudiAhPT0gJ3Byb2R1Y3Rpb24nXG5cdFx0KSB7XG5cdFx0XHRsb2dnZXIuaW5mbygnVGVzdCByb3V0ZXMgZW5hYmxlZC4gSW5pdGlhbGl6aW5nIHRlc3Qgcm91dGVzLicpO1xuXHRcdFx0Y29uc3QgdGVzdFJvdXRlczogUm91dGVyID0gaW5pdGlhbGl6ZVRlc3RSb3V0ZXMoe1xuXHRcdFx0XHRhcHAsXG5cdFx0XHRcdGxvZ2dlcixcblx0XHRcdFx0ZmVhdHVyZUZsYWdzLFxuXHRcdFx0XHRlbnZpcm9ubWVudFZhcmlhYmxlc1xuXHRcdFx0fSk7XG5cdFx0XHRhcHAudXNlKCcvdGVzdCcsIHRlc3RSb3V0ZXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRsb2dnZXIuaW5mbygnVGVzdCByb3V0ZXMgZGlzYWJsZWQgb3IgcnVubmluZyBpbiBwcm9kdWN0aW9uLicpO1xuXHRcdH1cblxuXHRcdGxvZ2dlci5pbmZvKCdJbml0aWFsaXppbmcgc3RhdGljIHJvdXRlcy4nKTtcblx0XHRpbml0aWFsaXplU3RhdGljUm91dGVzKGFwcCwgc3RhdGljUm9vdFBhdGgsIGxvZ2dlcik7XG5cblx0XHQvLyB2YWxpZGF0aW9uIHJvdXRlc1xuXHRcdGxvZ2dlci5pbmZvKCdJbml0aWFsaXppbmcgdmFsaWRhdGlvbiByb3V0ZXMuJyk7XG5cdFx0aW5pdGlhbGl6ZVZhbGlkYXRpb25Sb3V0ZXMoeyBsb2dnZXIsIHZhbGlkYXRvciB9KTtcblxuXHRcdC8vIHVzZXIgcm91dGVzXG5cdFx0bG9nZ2VyLmluZm8oJ0luaXRpYWxpemluZyB1c2VyIHJvdXRlcy4nKTtcblx0XHRpbml0aWFsaXplVXNlclJvdXRlcyh7XG5cdFx0XHRsb2dnZXIsXG5cdFx0XHRzZWNyZXRzLFxuXHRcdFx0VXNlclJvdXRlcyxcblx0XHRcdGFyZ29uMixcblx0XHRcdGp3dCxcblx0XHRcdGF4aW9zLFxuXHRcdFx0YmNyeXB0LFxuXHRcdFx0dXVpZHY0LFxuXHRcdFx0eHNzLFxuXHRcdFx0Z2VuZXJhdGVDb25maXJtYXRpb25FbWFpbFRlbXBsYXRlLFxuXHRcdFx0Z2V0VHJhbnNwb3J0ZXIsXG5cdFx0XHR0b3RwVXRpbDogdG90cFV0aWxJbnN0YW5jZVxuXHRcdH0pO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdGBGQVRBTCBFWENFUFRJT046IEZhaWxlZCB0byBpbml0aWFsaXplIHJvdXRlczogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IGVycm9yfWBcblx0XHQpO1xuXHRcdHByb2Nlc3NFcnJvcihlcnJvciwgbG9nZ2VyKTtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRgRmFpbGVkIHRvIGluaXRpYWxpemUgcm91dGVzOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogZXJyb3J9YFxuXHRcdCk7XG5cdH1cbn1cbiJdfQ==
