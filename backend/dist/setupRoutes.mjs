import { initializeTestRoutes } from './routes/testRoutes.mjs';
import { initializeStaticRoutes } from './routes/staticRoutes.mjs';
import { environmentVariables } from './config/environmentConfig.mjs';
import { validateDependencies } from './utils/validateDependencies.mjs';
import { processError } from './utils/processError.mjs';
import initializeUserRoutes from './routes/userRoutes.mjs';
import initializeValidationRoutes from './routes/validationRoutes.mjs';
import argon2 from 'argon2';
import jwt from 'jsonwebtoken';
import axios from 'axios';
import bcrypt from 'bcrypt';
import { v4 as uuidv4 } from 'uuid';
import xss from 'xss';
import generateConfirmationEmailTemplate from './templates/confirmationEmailTemplate.mjs';
import { getTransporter } from './config/mailer.mjs';
import totpUtil from './auth/totpUtil.mjs';
import sops from './utils/sops.mjs';
import { execSync } from 'child_process';
import speakeasy from 'speakeasy';
import QRCode from 'qrcode';
let UserRoutes;
let validator;
export async function initializeRoutes({
	app,
	logger,
	featureFlags,
	staticRootPath
}) {
	try {
		validateDependencies(
			[
				{ name: 'app', instance: app },
				{ name: 'logger', instance: logger },
				{ name: 'featureFlags', instance: featureFlags },
				{ name: 'staticRootPath', instance: staticRootPath }
			],
			logger
		);
		const getDirectoryPath = () => process.cwd();
		const secrets = await sops.getSecrets({
			logger,
			execSync,
			getDirectoryPath
		});
		const totpUtilInstance = totpUtil({
			speakeasy,
			QRCode,
			logger
		});
		if (
			featureFlags.loadTestRoutesFlag &&
			environmentVariables.nodeEnv !== 'production'
		) {
			logger.info('Test routes enabled. Initializing test routes.');
			const testRoutes = initializeTestRoutes({
				app,
				logger,
				featureFlags,
				environmentVariables
			});
			app.use('/test', testRoutes);
		} else {
			logger.info('Test routes disabled or running in production.');
		}
		logger.info('Initializing static routes.');
		initializeStaticRoutes(app, staticRootPath, logger);
		// validation routes
		logger.info('Initializing validation routes.');
		initializeValidationRoutes({ logger, validator });
		// user routes
		logger.info('Initializing user routes.');
		initializeUserRoutes({
			logger,
			secrets,
			UserRoutes,
			argon2,
			jwt,
			axios,
			bcrypt,
			uuidv4,
			xss,
			generateConfirmationEmailTemplate,
			getTransporter,
			totpUtil: totpUtilInstance
		});
	} catch (error) {
		logger.error(
			`FATAL EXCEPTION: Failed to initialize routes: ${error instanceof Error ? error.message : error}`
		);
		processError(error, logger);
		throw new Error(
			`Failed to initialize routes: ${error instanceof Error ? error.message : error}`
		);
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXBSb3V0ZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc2V0dXBSb3V0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDM0QsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFL0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDbEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDcEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3BELE9BQU8sb0JBQXlDLE1BQU0scUJBQXFCLENBQUM7QUFDNUUsT0FBTywwQkFBMEIsTUFBTSwyQkFBMkIsQ0FBQztBQUNuRSxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxHQUFHLE1BQU0sY0FBYyxDQUFDO0FBQy9CLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxFQUFFLEVBQUUsSUFBSSxNQUFNLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEMsT0FBTyxHQUFHLE1BQU0sS0FBSyxDQUFDO0FBQ3RCLE9BQU8saUNBQWlDLE1BQU0sdUNBQXVDLENBQUM7QUFDdEYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2pELE9BQU8sUUFBUSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZDLE9BQU8sSUFBSSxNQUFNLGNBQWMsQ0FBQztBQUNoQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sU0FBUyxNQUFNLFdBQVcsQ0FBQztBQUNsQyxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFTNUIsSUFBSSxVQUEyQixDQUFDO0FBRWhDLElBQUksU0FBcUMsQ0FBQztBQUUxQyxNQUFNLENBQUMsS0FBSyxVQUFVLGdCQUFnQixDQUFDLEVBQ3RDLEdBQUcsRUFDSCxNQUFNLEVBQ04sWUFBWSxFQUNaLGNBQWMsRUFDSztJQUNuQixJQUFJLENBQUM7UUFDSixvQkFBb0IsQ0FDbkI7WUFDQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRTtZQUM5QixFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRTtZQUNwQyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRTtZQUNoRCxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFO1NBQ3BELEVBQ0QsTUFBTSxDQUNOLENBQUM7UUFFRixNQUFNLGdCQUFnQixHQUFHLEdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUVyRCxNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDckMsTUFBTTtZQUNOLFFBQVE7WUFDUixnQkFBZ0I7U0FDaEIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxnQkFBZ0IsR0FBRyxRQUFRLENBQUM7WUFDakMsU0FBUztZQUNULE1BQU07WUFDTixNQUFNO1NBQ04sQ0FBQyxDQUFDO1FBRUgsSUFDQyxZQUFZLENBQUMsa0JBQWtCO1lBQy9CLG9CQUFvQixDQUFDLE9BQU8sS0FBSyxZQUFZLEVBQzVDLENBQUM7WUFDRixNQUFNLENBQUMsSUFBSSxDQUFDLGdEQUFnRCxDQUFDLENBQUM7WUFDOUQsTUFBTSxVQUFVLEdBQVcsb0JBQW9CLENBQUM7Z0JBQy9DLEdBQUc7Z0JBQ0gsTUFBTTtnQkFDTixZQUFZO2dCQUNaLG9CQUFvQjthQUNwQixDQUFDLENBQUM7WUFDSCxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM5QixDQUFDO2FBQU0sQ0FBQztZQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0RBQWdELENBQUMsQ0FBQztRQUMvRCxDQUFDO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBQzNDLHNCQUFzQixDQUFDLEdBQUcsRUFBRSxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFcEQsb0JBQW9CO1FBQ3BCLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUNBQWlDLENBQUMsQ0FBQztRQUMvQywwQkFBMEIsQ0FBQyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBRWxELGNBQWM7UUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFDekMsb0JBQW9CLENBQUM7WUFDcEIsTUFBTTtZQUNOLE9BQU87WUFDUCxVQUFVO1lBQ1YsTUFBTTtZQUNOLEdBQUc7WUFDSCxLQUFLO1lBQ0wsTUFBTTtZQUNOLE1BQU07WUFDTixHQUFHO1lBQ0gsaUNBQWlDO1lBQ2pDLGNBQWM7WUFDZCxRQUFRLEVBQUUsZ0JBQWdCO1NBQzFCLENBQUMsQ0FBQztJQUNKLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE1BQU0sQ0FBQyxLQUFLLENBQ1gsaURBQWlELEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUNqRyxDQUFDO1FBQ0YsWUFBWSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM1QixNQUFNLElBQUksS0FBSyxDQUNkLGdDQUFnQyxLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FDaEYsQ0FBQztJQUNILENBQUM7QUFDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MsIHsgUm91dGVyIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuL2NvbmZpZy9sb2dnZXInO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZVRlc3RSb3V0ZXMgfSBmcm9tICcuL3JvdXRlcy90ZXN0Um91dGVzJztcbmltcG9ydCB7IGluaXRpYWxpemVTdGF0aWNSb3V0ZXMgfSBmcm9tICcuL3JvdXRlcy9zdGF0aWNSb3V0ZXMnO1xuaW1wb3J0IHsgRmVhdHVyZUZsYWdzIH0gZnJvbSAnLi9jb25maWcvZW52aXJvbm1lbnRDb25maWcnO1xuaW1wb3J0IHsgZW52aXJvbm1lbnRWYXJpYWJsZXMgfSBmcm9tICcuL2NvbmZpZy9lbnZpcm9ubWVudENvbmZpZyc7XG5pbXBvcnQgeyB2YWxpZGF0ZURlcGVuZGVuY2llcyB9IGZyb20gJy4vdXRpbHMvdmFsaWRhdGVEZXBlbmRlbmNpZXMnO1xuaW1wb3J0IHsgcHJvY2Vzc0Vycm9yIH0gZnJvbSAnLi91dGlscy9wcm9jZXNzRXJyb3InO1xuaW1wb3J0IGluaXRpYWxpemVVc2VyUm91dGVzLCB7IFVzZXJSb3V0ZXNNb2RlbCB9IGZyb20gJy4vcm91dGVzL3VzZXJSb3V0ZXMnO1xuaW1wb3J0IGluaXRpYWxpemVWYWxpZGF0aW9uUm91dGVzIGZyb20gJy4vcm91dGVzL3ZhbGlkYXRpb25Sb3V0ZXMnO1xuaW1wb3J0IGFyZ29uMiBmcm9tICdhcmdvbjInO1xuaW1wb3J0IGp3dCBmcm9tICdqc29ud2VidG9rZW4nO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCBiY3J5cHQgZnJvbSAnYmNyeXB0JztcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gJ3V1aWQnO1xuaW1wb3J0IHhzcyBmcm9tICd4c3MnO1xuaW1wb3J0IGdlbmVyYXRlQ29uZmlybWF0aW9uRW1haWxUZW1wbGF0ZSBmcm9tICcuL3RlbXBsYXRlcy9jb25maXJtYXRpb25FbWFpbFRlbXBsYXRlJztcbmltcG9ydCB7IGdldFRyYW5zcG9ydGVyIH0gZnJvbSAnLi9jb25maWcvbWFpbGVyJztcbmltcG9ydCB0b3RwVXRpbCBmcm9tICcuL2F1dGgvdG90cFV0aWwnO1xuaW1wb3J0IHNvcHMgZnJvbSAnLi91dGlscy9zb3BzJztcbmltcG9ydCB7IGV4ZWNTeW5jIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgc3BlYWtlYXN5IGZyb20gJ3NwZWFrZWFzeSc7XG5pbXBvcnQgUVJDb2RlIGZyb20gJ3FyY29kZSc7XG5cbmludGVyZmFjZSBSb3V0ZURlcGVuZGVuY2llcyB7XG5cdGFwcDogZXhwcmVzcy5BcHBsaWNhdGlvbjtcblx0bG9nZ2VyOiBMb2dnZXI7XG5cdGZlYXR1cmVGbGFnczogRmVhdHVyZUZsYWdzO1xuXHRzdGF0aWNSb290UGF0aDogc3RyaW5nO1xufVxuXG5sZXQgVXNlclJvdXRlczogVXNlclJvdXRlc01vZGVsO1xuXG5sZXQgdmFsaWRhdG9yOiB0eXBlb2YgaW1wb3J0KCd2YWxpZGF0b3InKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemVSb3V0ZXMoe1xuXHRhcHAsXG5cdGxvZ2dlcixcblx0ZmVhdHVyZUZsYWdzLFxuXHRzdGF0aWNSb290UGF0aFxufTogUm91dGVEZXBlbmRlbmNpZXMpOiBQcm9taXNlPHVuZGVmaW5lZD4ge1xuXHR0cnkge1xuXHRcdHZhbGlkYXRlRGVwZW5kZW5jaWVzKFxuXHRcdFx0W1xuXHRcdFx0XHR7IG5hbWU6ICdhcHAnLCBpbnN0YW5jZTogYXBwIH0sXG5cdFx0XHRcdHsgbmFtZTogJ2xvZ2dlcicsIGluc3RhbmNlOiBsb2dnZXIgfSxcblx0XHRcdFx0eyBuYW1lOiAnZmVhdHVyZUZsYWdzJywgaW5zdGFuY2U6IGZlYXR1cmVGbGFncyB9LFxuXHRcdFx0XHR7IG5hbWU6ICdzdGF0aWNSb290UGF0aCcsIGluc3RhbmNlOiBzdGF0aWNSb290UGF0aCB9XG5cdFx0XHRdLFxuXHRcdFx0bG9nZ2VyXG5cdFx0KTtcblxuXHRcdGNvbnN0IGdldERpcmVjdG9yeVBhdGggPSAoKTogc3RyaW5nID0+IHByb2Nlc3MuY3dkKCk7XG5cblx0XHRjb25zdCBzZWNyZXRzID0gYXdhaXQgc29wcy5nZXRTZWNyZXRzKHtcblx0XHRcdGxvZ2dlcixcblx0XHRcdGV4ZWNTeW5jLFxuXHRcdFx0Z2V0RGlyZWN0b3J5UGF0aFxuXHRcdH0pO1xuXG5cdFx0Y29uc3QgdG90cFV0aWxJbnN0YW5jZSA9IHRvdHBVdGlsKHtcblx0XHRcdHNwZWFrZWFzeSxcblx0XHRcdFFSQ29kZSxcblx0XHRcdGxvZ2dlclxuXHRcdH0pO1xuXG5cdFx0aWYgKFxuXHRcdFx0ZmVhdHVyZUZsYWdzLmxvYWRUZXN0Um91dGVzRmxhZyAmJlxuXHRcdFx0ZW52aXJvbm1lbnRWYXJpYWJsZXMubm9kZUVudiAhPT0gJ3Byb2R1Y3Rpb24nXG5cdFx0KSB7XG5cdFx0XHRsb2dnZXIuaW5mbygnVGVzdCByb3V0ZXMgZW5hYmxlZC4gSW5pdGlhbGl6aW5nIHRlc3Qgcm91dGVzLicpO1xuXHRcdFx0Y29uc3QgdGVzdFJvdXRlczogUm91dGVyID0gaW5pdGlhbGl6ZVRlc3RSb3V0ZXMoe1xuXHRcdFx0XHRhcHAsXG5cdFx0XHRcdGxvZ2dlcixcblx0XHRcdFx0ZmVhdHVyZUZsYWdzLFxuXHRcdFx0XHRlbnZpcm9ubWVudFZhcmlhYmxlc1xuXHRcdFx0fSk7XG5cdFx0XHRhcHAudXNlKCcvdGVzdCcsIHRlc3RSb3V0ZXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRsb2dnZXIuaW5mbygnVGVzdCByb3V0ZXMgZGlzYWJsZWQgb3IgcnVubmluZyBpbiBwcm9kdWN0aW9uLicpO1xuXHRcdH1cblxuXHRcdGxvZ2dlci5pbmZvKCdJbml0aWFsaXppbmcgc3RhdGljIHJvdXRlcy4nKTtcblx0XHRpbml0aWFsaXplU3RhdGljUm91dGVzKGFwcCwgc3RhdGljUm9vdFBhdGgsIGxvZ2dlcik7XG5cblx0XHQvLyB2YWxpZGF0aW9uIHJvdXRlc1xuXHRcdGxvZ2dlci5pbmZvKCdJbml0aWFsaXppbmcgdmFsaWRhdGlvbiByb3V0ZXMuJyk7XG5cdFx0aW5pdGlhbGl6ZVZhbGlkYXRpb25Sb3V0ZXMoeyBsb2dnZXIsIHZhbGlkYXRvciB9KTtcblxuXHRcdC8vIHVzZXIgcm91dGVzXG5cdFx0bG9nZ2VyLmluZm8oJ0luaXRpYWxpemluZyB1c2VyIHJvdXRlcy4nKTtcblx0XHRpbml0aWFsaXplVXNlclJvdXRlcyh7XG5cdFx0XHRsb2dnZXIsXG5cdFx0XHRzZWNyZXRzLFxuXHRcdFx0VXNlclJvdXRlcyxcblx0XHRcdGFyZ29uMixcblx0XHRcdGp3dCxcblx0XHRcdGF4aW9zLFxuXHRcdFx0YmNyeXB0LFxuXHRcdFx0dXVpZHY0LFxuXHRcdFx0eHNzLFxuXHRcdFx0Z2VuZXJhdGVDb25maXJtYXRpb25FbWFpbFRlbXBsYXRlLFxuXHRcdFx0Z2V0VHJhbnNwb3J0ZXIsXG5cdFx0XHR0b3RwVXRpbDogdG90cFV0aWxJbnN0YW5jZVxuXHRcdH0pO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdGBGQVRBTCBFWENFUFRJT046IEZhaWxlZCB0byBpbml0aWFsaXplIHJvdXRlczogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IGVycm9yfWBcblx0XHQpO1xuXHRcdHByb2Nlc3NFcnJvcihlcnJvciwgbG9nZ2VyKTtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRgRmFpbGVkIHRvIGluaXRpYWxpemUgcm91dGVzOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogZXJyb3J9YFxuXHRcdCk7XG5cdH1cbn1cbiJdfQ==
