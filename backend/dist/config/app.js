import express from 'express';
import cookieParser from 'cookie-parser';
import cors from 'cors';
import hpp from 'hpp';
import morgan from 'morgan';
import passport from 'passport';
import { randomBytes } from 'crypto';
import path from 'path';
import initializeStaticRoutes from '../routes/staticRoutes.js';
import apiRoutes from '../routes/apiRoutes.js';
import {
	csrfMiddleware,
	ipBlacklistMiddleware,
	loadTestRoutes,
	rateLimitMiddleware,
	setupSecurityHeaders
} from '../index.js';
import setupLogger from './logger.js';
const app = express();
const staticRootPath =
	process.env.STATIC_ROOT_PATH ?? path.join(__dirname, '../public');
const logger = await setupLogger();
async function initializeApp() {
	const middlewares = [
		express.json(),
		express.urlencoded({ extended: true }),
		cookieParser(),
		passport.initialize(),
		express.static(staticRootPath),
		hpp(),
		rateLimitMiddleware,
		ipBlacklistMiddleware,
		csrfMiddleware
	];
	app.use(...middlewares);
	app.use(
		cors({
			methods: 'GET,POST,PUT,DELETE',
			allowedHeaders: 'Content-Type,Authorization',
			credentials: true
		})
	);
	app.use(
		morgan('combined', {
			stream: { write: (message = '') => logger.info(message.trim()) }
		})
	);
	app.use('/', initializeStaticRoutes);
	app.use('/api', apiRoutes);
	app.use(async (req, res, next) => {
		try {
			res.locals.cspNonce = randomBytes(16).toString('hex');
			next();
		} catch {
			next();
		}
	});
	setupSecurityHeaders(app);
	loadTestRoutes(app);
	// Session management
	// app.use(session({
	//     store: new RedisStore({ client: redisClient }),
	//     secret: 'secrets.REDIS_KEY',
	//     resave: false,
	//     saveUninitialized: false,
	//     cookie: { secure: true },
	// }));
	// Apply Sentry middleware for request and error handling
	// if (process.env.NODE_ENV === 'production') {
	// 	app.use(Sentry.RequestHandlers.requestHandler());
	// 	app.use(Sentry.Handlers.errorHandler());
	// }
	// 404 error handling
	app.use((req, res, next) => {
		res.status(404).sendFile(
			path.join(__dirname, '../public', 'not-found.html')
		);
		next();
	});
	// General error handling
	app.use((err, req, res, next) => {
		logger.error(`Error occurred: ${err.stack ?? err.message ?? err}`);
		res.status(500).send(
			`Server error - something failed: ${err.stack ?? 'Unknown error'}`
		);
		next();
	});
}
export { app, initializeApp };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZy9hcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxPQUFPLE1BQU0sU0FBUyxDQUFDO0FBRTlCLE9BQU8sWUFBWSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxHQUFHLE1BQU0sS0FBSyxDQUFDO0FBQ3RCLE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUM1QixPQUFPLFFBQVEsTUFBTSxVQUFVLENBQUM7QUFDaEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNyQyxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxzQkFBc0IsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLFNBQVMsTUFBTSxxQkFBcUIsQ0FBQztBQUM1QyxPQUFPLEVBQ04sY0FBYyxFQUNkLHFCQUFxQixFQUNyQixjQUFjLEVBQ2QsbUJBQW1CLEVBQ25CLG9CQUFvQixFQUNwQixNQUFNLFVBQVUsQ0FBQztBQUNsQixPQUFPLFdBQVcsTUFBTSxVQUFVLENBQUM7QUFFbkMsTUFBTSxHQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7QUFDdEIsTUFBTSxjQUFjLEdBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDbkUsTUFBTSxNQUFNLEdBQUcsTUFBTSxXQUFXLEVBQUUsQ0FBQztBQUVuQyxLQUFLLFVBQVUsYUFBYTtJQUMzQixNQUFNLFdBQVcsR0FBRztRQUNuQixPQUFPLENBQUMsSUFBSSxFQUFFO1FBQ2QsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUN0QyxZQUFZLEVBQUU7UUFDZCxRQUFRLENBQUMsVUFBVSxFQUFFO1FBQ3JCLE9BQU8sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDO1FBQzlCLEdBQUcsRUFBRTtRQUNMLG1CQUFtQjtRQUNuQixxQkFBcUI7UUFDckIsY0FBYztLQUNkLENBQUM7SUFFRixHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUM7SUFFeEIsR0FBRyxDQUFDLEdBQUcsQ0FDTixJQUFJLENBQUM7UUFDSixPQUFPLEVBQUUscUJBQXFCO1FBQzlCLGNBQWMsRUFBRSw0QkFBNEI7UUFDNUMsV0FBVyxFQUFFLElBQUk7S0FDakIsQ0FBQyxDQUNGLENBQUM7SUFFRixHQUFHLENBQUMsR0FBRyxDQUNOLE1BQU0sQ0FBQyxVQUFVLEVBQUU7UUFDbEIsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsT0FBTyxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRTtLQUNoRSxDQUFDLENBQ0YsQ0FBQztJQUVGLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLHNCQUFzQixDQUFDLENBQUM7SUFFckMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFM0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBWSxFQUFFLEdBQWEsRUFBRSxJQUFrQixFQUFFLEVBQUU7UUFDakUsSUFBSSxDQUFDO1lBQ0osR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN0RCxJQUFJLEVBQUUsQ0FBQztRQUNSLENBQUM7UUFBQyxNQUFNLENBQUM7WUFDUixJQUFJLEVBQUUsQ0FBQztRQUNSLENBQUM7SUFDRixDQUFDLENBQUMsQ0FBQztJQUVILG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRTFCLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVwQixxQkFBcUI7SUFDckIsb0JBQW9CO0lBQ3BCLHNEQUFzRDtJQUN0RCxtQ0FBbUM7SUFDbkMscUJBQXFCO0lBQ3JCLGdDQUFnQztJQUNoQyxnQ0FBZ0M7SUFDaEMsT0FBTztJQUVQLHlEQUF5RDtJQUN6RCwrQ0FBK0M7SUFDL0MscURBQXFEO0lBQ3JELDRDQUE0QztJQUM1QyxJQUFJO0lBRUoscUJBQXFCO0lBQ3JCLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCLEVBQUUsRUFBRTtRQUMzRCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixDQUFDLENBQ25ELENBQUM7UUFDRixJQUFJLEVBQUUsQ0FBQztJQUNSLENBQUMsQ0FBQyxDQUFDO0lBRUgseUJBQXlCO0lBQ3pCLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFVLEVBQUUsR0FBWSxFQUFFLEdBQWEsRUFBRSxJQUFrQixFQUFFLEVBQUU7UUFDdkUsTUFBTSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLENBQUMsT0FBTyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDbkUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQ25CLG9DQUFvQyxHQUFHLENBQUMsS0FBSyxJQUFJLGVBQWUsRUFBRSxDQUNsRSxDQUFDO1FBQ0YsSUFBSSxFQUFFLENBQUM7SUFDUixDQUFDLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxPQUFPLEVBQUUsR0FBRyxFQUFFLGFBQWEsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9uIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgY29va2llUGFyc2VyIGZyb20gJ2Nvb2tpZS1wYXJzZXInO1xuaW1wb3J0IGNvcnMgZnJvbSAnY29ycyc7XG5pbXBvcnQgaHBwIGZyb20gJ2hwcCc7XG5pbXBvcnQgbW9yZ2FuIGZyb20gJ21vcmdhbic7XG5pbXBvcnQgcGFzc3BvcnQgZnJvbSAncGFzc3BvcnQnO1xuaW1wb3J0IHsgcmFuZG9tQnl0ZXMgfSBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgaW5pdGlhbGl6ZVN0YXRpY1JvdXRlcyBmcm9tICcuLi9yb3V0ZXMvc3RhdGljUm91dGVzJztcbmltcG9ydCBhcGlSb3V0ZXMgZnJvbSAnLi4vcm91dGVzL2FwaVJvdXRlcyc7XG5pbXBvcnQge1xuXHRjc3JmTWlkZGxld2FyZSxcblx0aXBCbGFja2xpc3RNaWRkbGV3YXJlLFxuXHRsb2FkVGVzdFJvdXRlcyxcblx0cmF0ZUxpbWl0TWlkZGxld2FyZSxcblx0c2V0dXBTZWN1cml0eUhlYWRlcnNcbn0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IHNldHVwTG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcblxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuY29uc3Qgc3RhdGljUm9vdFBhdGggPVxuXHRwcm9jZXNzLmVudi5TVEFUSUNfUk9PVF9QQVRIID8/IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9wdWJsaWMnKTtcbmNvbnN0IGxvZ2dlciA9IGF3YWl0IHNldHVwTG9nZ2VyKCk7XG5cbmFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemVBcHAoKTogUHJvbWlzZTx2b2lkPiB7XG5cdGNvbnN0IG1pZGRsZXdhcmVzID0gW1xuXHRcdGV4cHJlc3MuanNvbigpLFxuXHRcdGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pLFxuXHRcdGNvb2tpZVBhcnNlcigpLFxuXHRcdHBhc3Nwb3J0LmluaXRpYWxpemUoKSxcblx0XHRleHByZXNzLnN0YXRpYyhzdGF0aWNSb290UGF0aCksXG5cdFx0aHBwKCksXG5cdFx0cmF0ZUxpbWl0TWlkZGxld2FyZSxcblx0XHRpcEJsYWNrbGlzdE1pZGRsZXdhcmUsXG5cdFx0Y3NyZk1pZGRsZXdhcmVcblx0XTtcblxuXHRhcHAudXNlKC4uLm1pZGRsZXdhcmVzKTtcblxuXHRhcHAudXNlKFxuXHRcdGNvcnMoe1xuXHRcdFx0bWV0aG9kczogJ0dFVCxQT1NULFBVVCxERUxFVEUnLFxuXHRcdFx0YWxsb3dlZEhlYWRlcnM6ICdDb250ZW50LVR5cGUsQXV0aG9yaXphdGlvbicsXG5cdFx0XHRjcmVkZW50aWFsczogdHJ1ZVxuXHRcdH0pXG5cdCk7XG5cblx0YXBwLnVzZShcblx0XHRtb3JnYW4oJ2NvbWJpbmVkJywge1xuXHRcdFx0c3RyZWFtOiB7IHdyaXRlOiAobWVzc2FnZSA9ICcnKSA9PiBsb2dnZXIuaW5mbyhtZXNzYWdlLnRyaW0oKSkgfVxuXHRcdH0pXG5cdCk7XG5cblx0YXBwLnVzZSgnLycsIGluaXRpYWxpemVTdGF0aWNSb3V0ZXMpO1xuXG5cdGFwcC51c2UoJy9hcGknLCBhcGlSb3V0ZXMpO1xuXG5cdGFwcC51c2UoYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XG5cdFx0dHJ5IHtcblx0XHRcdHJlcy5sb2NhbHMuY3NwTm9uY2UgPSByYW5kb21CeXRlcygxNikudG9TdHJpbmcoJ2hleCcpO1xuXHRcdFx0bmV4dCgpO1xuXHRcdH0gY2F0Y2gge1xuXHRcdFx0bmV4dCgpO1xuXHRcdH1cblx0fSk7XG5cblx0c2V0dXBTZWN1cml0eUhlYWRlcnMoYXBwKTtcblxuXHRsb2FkVGVzdFJvdXRlcyhhcHApO1xuXG5cdC8vIFNlc3Npb24gbWFuYWdlbWVudFxuXHQvLyBhcHAudXNlKHNlc3Npb24oe1xuXHQvLyAgICAgc3RvcmU6IG5ldyBSZWRpc1N0b3JlKHsgY2xpZW50OiByZWRpc0NsaWVudCB9KSxcblx0Ly8gICAgIHNlY3JldDogJ3NlY3JldHMuUkVESVNfS0VZJyxcblx0Ly8gICAgIHJlc2F2ZTogZmFsc2UsXG5cdC8vICAgICBzYXZlVW5pbml0aWFsaXplZDogZmFsc2UsXG5cdC8vICAgICBjb29raWU6IHsgc2VjdXJlOiB0cnVlIH0sXG5cdC8vIH0pKTtcblxuXHQvLyBBcHBseSBTZW50cnkgbWlkZGxld2FyZSBmb3IgcmVxdWVzdCBhbmQgZXJyb3IgaGFuZGxpbmdcblx0Ly8gaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcblx0Ly8gXHRhcHAudXNlKFNlbnRyeS5SZXF1ZXN0SGFuZGxlcnMucmVxdWVzdEhhbmRsZXIoKSk7XG5cdC8vIFx0YXBwLnVzZShTZW50cnkuSGFuZGxlcnMuZXJyb3JIYW5kbGVyKCkpO1xuXHQvLyB9XG5cblx0Ly8gNDA0IGVycm9yIGhhbmRsaW5nXG5cdGFwcC51c2UoKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XG5cdFx0cmVzLnN0YXR1cyg0MDQpLnNlbmRGaWxlKFxuXHRcdFx0cGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL3B1YmxpYycsICdub3QtZm91bmQuaHRtbCcpXG5cdFx0KTtcblx0XHRuZXh0KCk7XG5cdH0pO1xuXG5cdC8vIEdlbmVyYWwgZXJyb3IgaGFuZGxpbmdcblx0YXBwLnVzZSgoZXJyOiBFcnJvciwgcmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pID0+IHtcblx0XHRsb2dnZXIuZXJyb3IoYEVycm9yIG9jY3VycmVkOiAke2Vyci5zdGFjayA/PyBlcnIubWVzc2FnZSA/PyBlcnJ9YCk7XG5cdFx0cmVzLnN0YXR1cyg1MDApLnNlbmQoXG5cdFx0XHRgU2VydmVyIGVycm9yIC0gc29tZXRoaW5nIGZhaWxlZDogJHtlcnIuc3RhY2sgPz8gJ1Vua25vd24gZXJyb3InfWBcblx0XHQpO1xuXHRcdG5leHQoKTtcblx0fSk7XG59XG5cbmV4cG9ydCB7IGFwcCwgaW5pdGlhbGl6ZUFwcCB9O1xuIl19
