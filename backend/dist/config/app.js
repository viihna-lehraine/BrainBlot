import express from 'express';
import cookieParser from 'cookie-parser';
import cors from 'cors';
import hpp from 'hpp';
import morgan from 'morgan';
import passport from 'passport';
import { randomBytes } from 'crypto';
import path from 'path';
import initializeStaticRoutes from '../routes/staticRoutes.js';
import apiRoutes from '../routes/apiRoutes.js';
import {
	csrfMiddleware,
	ipBlacklistMiddleware,
	loadTestRoutes,
	rateLimitMiddleware,
	setupSecurityHeaders
} from '../index.js';
import setupLogger from '../middleware/logger.js';
const app = express();
const staticRootPath = process.env.STATIC_ROOT_PATH;
async function initializeApp() {
	const logger = await setupLogger();
	// Set up middlewares
	app.use(express.json);
	app.use(express.urlencoded({ extended: true }));
	app.use(
		cors({
			methods: 'GET,POST,PUT,DELETE',
			allowedHeaders: 'Content-Type,Authorization',
			credentials: true
		})
	);
	app.use(hpp());
	app.use(
		morgan('combined', {
			stream: { write: (message = '') => logger.info(message.trim()) }
		})
	);
	app.use(passport.initialize());
	app.use(cookieParser());
	app.use(
		express.static(staticRootPath ?? path.join(__dirname, '../public'))
	);
	// Initialize routes
	app.use('/', initializeStaticRoutes);
	app.use('/api', apiRoutes);
	app.use(rateLimitMiddleware);
	app.use(ipBlacklistMiddleware);
	app.use(csrfMiddleware);
	// Generate nonce for each request
	app.use(async (req, res, next) => {
		try {
			res.locals.cspNonce = (await randomBytes(16)).toString('hex');
			next();
		} catch (error) {
			next(error);
		}
	});
	// Set up security headers
	setupSecurityHeaders(app);
	// Load test routes
	loadTestRoutes(app);
	// Session management
	// app.use(session({
	//     store: new RedisStore({ client: redisClient }),
	//     secret: 'secrets.REDIS_KEY',
	//     resave: false,
	//     saveUninitialized: false,
	//     cookie: { secure: true },
	// }));
	// Apply Sentry middleware for request and error handling
	// app.use(Sentry.RequestHandlers.requestHandler());
	// app.use(Sentry.Handlers.errorHandler());
	// 404 error handling
	app.use((req, res, next) => {
		res.status(404).sendFile(
			path.join(__dirname, '../public', 'not-found.html')
		);
		next();
	});
	// General error handling
	app.use((err, req, res, next) => {
		logger.error('Error occurred: ', err?.stack ?? err?.message ?? err);
		res.status(500).send(
			`Server error - something failed ${err.stack ?? 'Unknown error'}`
		);
		next();
	});
}
export { app, initializeApp };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZy9hcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxPQUFPLE1BQU0sU0FBUyxDQUFDO0FBRTlCLE9BQU8sWUFBWSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxHQUFHLE1BQU0sS0FBSyxDQUFDO0FBQ3RCLE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUM1QixPQUFPLFFBQVEsTUFBTSxVQUFVLENBQUM7QUFDaEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNyQyxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxzQkFBc0IsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLFNBQVMsTUFBTSxxQkFBcUIsQ0FBQztBQUM1QyxPQUFPLEVBQ04sY0FBYyxFQUNkLHFCQUFxQixFQUNyQixjQUFjLEVBQ2QsbUJBQW1CLEVBQ25CLG9CQUFvQixFQUNwQixNQUFNLFVBQVUsQ0FBQztBQUNsQixPQUFPLFdBQVcsTUFBTSxzQkFBc0IsQ0FBQztBQUUvQyxNQUFNLEdBQUcsR0FBRyxPQUFPLEVBQUUsQ0FBQztBQUN0QixNQUFNLGNBQWMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFpQixDQUFDO0FBRXJELEtBQUssVUFBVSxhQUFhO0lBQzNCLE1BQU0sTUFBTSxHQUFHLE1BQU0sV0FBVyxFQUFFLENBQUM7SUFFbkMscUJBQXFCO0lBQ3JCLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RCLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDaEQsR0FBRyxDQUFDLEdBQUcsQ0FDTixJQUFJLENBQUM7UUFDSixPQUFP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QUFJLGVBQWUsRUFBRSxDQUNqRSxDQUFDO1FBQ0YsSUFBSSxFQUFFLENBQUM7SUFDUixDQUFDLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxPQUFPLEVBQUUsR0FBRyxFQUFFLGFBQWEsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9uIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgY29va2llUGFyc2VyIGZyb20gJ2Nvb2tpZS1wYXJzZXInO1xuaW1wb3J0IGNvcnMgZnJvbSAnY29ycyc7XG5pbXBvcnQgaHBwIGZyb20gJ2hwcCc7XG5pbXBvcnQgbW9yZ2FuIGZyb20gJ21vcmdhbic7XG5pbXBvcnQgcGFzc3BvcnQgZnJvbSAncGFzc3BvcnQnO1xuaW1wb3J0IHsgcmFuZG9tQnl0ZXMgfSBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgaW5pdGlhbGl6ZVN0YXRpY1JvdXRlcyBmcm9tICcuLi9yb3V0ZXMvc3RhdGljUm91dGVzJztcbmltcG9ydCBhcGlSb3V0ZXMgZnJvbSAnLi4vcm91dGVzL2FwaVJvdXRlcyc7XG5pbXBvcnQge1xuXHRjc3JmTWlkZGxld2FyZSxcblx0aXBCbGFja2xpc3RNaWRkbGV3YXJlLFxuXHRsb2FkVGVzdFJvdXRlcyxcblx0cmF0ZUxpbWl0TWlkZGxld2FyZSxcblx0c2V0dXBTZWN1cml0eUhlYWRlcnNcbn0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IHNldHVwTG9nZ2VyIGZyb20gJy4uL21pZGRsZXdhcmUvbG9nZ2VyJztcblxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuY29uc3Qgc3RhdGljUm9vdFBhdGggPSBwcm9jZXNzLmVudi5TVEFUSUNfUk9PVF9QQVRIITtcblxuYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZUFwcCgpOiBQcm9taXNlPHZvaWQ+IHtcblx0Y29uc3QgbG9nZ2VyID0gYXdhaXQgc2V0dXBMb2dnZXIoKTtcblxuXHQvLyBTZXQgdXAgbWlkZGxld2FyZXNcblx0YXBwLnVzZShleHByZXNzLmpzb24pO1xuXHRhcHAudXNlKGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKTtcblx0YXBwLnVzZShcblx0XHRjb3JzKHtcblx0XHRcdG1ldGhvZHM6ICdHRVQsUE9TVCxQVVQsREVMRVRFJyxcblx0XHRcdGFsbG93ZWRIZWFkZXJzOiAnQ29udGVudC1UeXBlLEF1dGhvcml6YXRpb24nLFxuXHRcdFx0Y3JlZGVudGlhbHM6IHRydWVcblx0XHR9KVxuXHQpO1xuXHRhcHAudXNlKGhwcCgpKTtcblx0YXBwLnVzZShcblx0XHRtb3JnYW4oJ2NvbWJpbmVkJywge1xuXHRcdFx0c3RyZWFtOiB7IHdyaXRlOiAobWVzc2FnZSA9ICcnKSA9PiBsb2dnZXIuaW5mbyhtZXNzYWdlLnRyaW0oKSkgfVxuXHRcdH0pXG5cdCk7XG5cdGFwcC51c2UocGFzc3BvcnQuaW5pdGlhbGl6ZSgpKTtcblx0YXBwLnVzZShjb29raWVQYXJzZXIoKSk7XG5cdGFwcC51c2UoXG5cdFx0ZXhwcmVzcy5zdGF0aWMoc3RhdGljUm9vdFBhdGggPz8gcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL3B1YmxpYycpKVxuXHQpO1xuXG5cdC8vIEluaXRpYWxpemUgcm91dGVzXG5cdGFwcC51c2UoJy8nLCBpbml0aWFsaXplU3RhdGljUm91dGVzKTtcblx0YXBwLnVzZSgnL2FwaScsIGFwaVJvdXRlcyk7XG5cdGFwcC51c2UocmF0ZUxpbWl0TWlkZGxld2FyZSk7XG5cdGFwcC51c2UoaXBCbGFja2xpc3RNaWRkbGV3YXJlKTtcblx0YXBwLnVzZShjc3JmTWlkZGxld2FyZSk7XG5cblx0Ly8gR2VuZXJhdGUgbm9uY2UgZm9yIGVhY2ggcmVxdWVzdFxuXHRhcHAudXNlKGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikgPT4ge1xuXHRcdHRyeSB7XG5cdFx0XHRyZXMubG9jYWxzLmNzcE5vbmNlID0gKGF3YWl0IHJhbmRvbUJ5dGVzKDE2KSkudG9TdHJpbmcoJ2hleCcpO1xuXHRcdFx0bmV4dCgpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRuZXh0KGVycm9yKTtcblx0XHR9XG5cdH0pO1xuXG5cdC8vIFNldCB1cCBzZWN1cml0eSBoZWFkZXJzXG5cdHNldHVwU2VjdXJpdHlIZWFkZXJzKGFwcCk7XG5cblx0Ly8gTG9hZCB0ZXN0IHJvdXRlc1xuXHRsb2FkVGVzdFJvdXRlcyhhcHApO1xuXG5cdC8vIFNlc3Npb24gbWFuYWdlbWVudFxuXHQvLyBhcHAudXNlKHNlc3Npb24oe1xuXHQvLyAgICAgc3RvcmU6IG5ldyBSZWRpc1N0b3JlKHsgY2xpZW50OiByZWRpc0NsaWVudCB9KSxcblx0Ly8gICAgIHNlY3JldDogJ3NlY3JldHMuUkVESVNfS0VZJyxcblx0Ly8gICAgIHJlc2F2ZTogZmFsc2UsXG5cdC8vICAgICBzYXZlVW5pbml0aWFsaXplZDogZmFsc2UsXG5cdC8vICAgICBjb29raWU6IHsgc2VjdXJlOiB0cnVlIH0sXG5cdC8vIH0pKTtcblxuXHQvLyBBcHBseSBTZW50cnkgbWlkZGxld2FyZSBmb3IgcmVxdWVzdCBhbmQgZXJyb3IgaGFuZGxpbmdcblx0Ly8gYXBwLnVzZShTZW50cnkuUmVxdWVzdEhhbmRsZXJzLnJlcXVlc3RIYW5kbGVyKCkpO1xuXHQvLyBhcHAudXNlKFNlbnRyeS5IYW5kbGVycy5lcnJvckhhbmRsZXIoKSk7XG5cblx0Ly8gNDA0IGVycm9yIGhhbmRsaW5nXG5cdGFwcC51c2UoKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XG5cdFx0cmVzLnN0YXR1cyg0MDQpLnNlbmRGaWxlKFxuXHRcdFx0cGF0aC5qb2luKF9fZGlybmFtZSwgJy4uL3B1YmxpYycsICdub3QtZm91bmQuaHRtbCcpXG5cdFx0KTtcblx0XHRuZXh0KCk7XG5cdH0pO1xuXG5cdC8vIEdlbmVyYWwgZXJyb3IgaGFuZGxpbmdcblx0YXBwLnVzZSgoZXJyOiBFcnJvciwgcmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pID0+IHtcblx0XHRsb2dnZXIuZXJyb3IoJ0Vycm9yIG9jY3VycmVkOiAnLCBlcnI/LnN0YWNrID8/IGVycj8ubWVzc2FnZSA/PyBlcnIpO1xuXHRcdHJlcy5zdGF0dXMoNTAwKS5zZW5kKFxuXHRcdFx0YFNlcnZlciBlcnJvciAtIHNvbWV0aGluZyBmYWlsZWQgJHtlcnIuc3RhY2sgPz8gJ1Vua25vd24gZXJyb3InfWBcblx0XHQpO1xuXHRcdG5leHQoKTtcblx0fSk7XG59XG5cbmV4cG9ydCB7IGFwcCwgaW5pdGlhbGl6ZUFwcCB9O1xuIl19
