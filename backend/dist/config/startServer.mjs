import https from 'https';
import gracefulShutdown from 'http-graceful-shutdown';
export async function startServer({
	app,
	options,
	logger,
	SERVER_PORT,
	SSL_FLAG,
	getSequelizeInstance,
	getRedisClient,
	REDIS_FLAG
}) {
	try {
		logger.info(`Starting HTTP server on port ${SERVER_PORT}`);
		logger.info('Initializing database before starting server.');
		const sequelize = getSequelizeInstance();
		await sequelize.authenticate();
		logger.info('Database connection has been established successfully.');
		let server;
		if (SSL_FLAG && options) {
			server = https
				.createServer(options, app)
				.listen(SERVER_PORT, () => {
					logger.info(`HTTPS server running on port ${SERVER_PORT}`);
				});
		} else {
			server = app.listen(SERVER_PORT, () => {
				logger.info(`HTTP server running on port ${SERVER_PORT}`);
			});
		}
		gracefulShutdown(server, {
			signals: 'SIGINT SIGTERM',
			timeout: 30000,
			development: false,
			onShutdown: async () => {
				try {
					await sequelize.close();
					logger.info('Database connection closed');
					if (REDIS_FLAG) {
						const redisClient = getRedisClient();
						if (redisClient) {
							await redisClient.quit();
							logger.info('Redis connection closed');
						}
					}
					logger.close();
					console.log('Logger closed');
				} catch (error) {
					logger.error(`Error during shutdown: ${error}`);
				}
			},
			finally: () => console.log('Server has gracefully shut down')
		});
	} catch (error) {
		logger.error(`Failed to start server: ${error}`);
		process.exit(1);
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhcnRTZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnL3N0YXJ0U2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUcxQixPQUFPLGdCQUFnQixNQUFNLHdCQUF3QixDQUFDO0FBRXRELE1BQU0sQ0FBQyxLQUFLLFVBQVUsV0FBVyxDQUFDLEVBQzlCLEdBQUcsRUFDSCxPQUFPLEVBQ1AsTUFBTSxFQUNOLFdBQVcsRUFDWCxRQUFRLEVBQ1Isb0JBQW9CLEVBQ3BCLGNBQWMsRUFDZCxVQUFVLEdBVWI7SUFDRyxJQUFJLENBQUM7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQzNELE1BQU0sQ0FBQyxJQUFJLENBQUMsK0NBQStDLENBQUMsQ0FBQztRQUU3RCxNQUFNLFNBQVMsR0FBRyxvQkFBb0IsRUFBRSxDQUFDO1FBQ3pDLE1BQU0sU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxJQUFJLENBQUMsd0RBQXdELENBQUMsQ0FBQztRQUV0RSxJQUFJLE1BQU0sQ0FBQztRQUVYLElBQUksUUFBUSxJQUFJLE9BQU8sRUFBRSxDQUFDO1lBQ3RCLE1BQU0sR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtnQkFDL0QsTUFBTSxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsV0FBVyxFQUFFLENBQUMsQ0FBQztZQUMvRCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUM7YUFBTSxDQUFDO1lBQ0osTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtnQkFDbEMsTUFBTSxDQUFDLElBQUksQ0FBQywrQkFBK0IsV0FBVyxFQUFFLENBQUMsQ0FBQztZQUM5RCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUM7UUFFRCxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUU7WUFDckIsT0FBTyxFQUFFLGdCQUFnQjtZQUN6QixPQUFPLEVBQUUsS0FBSztZQUNkLFdBQVcsRUFBRSxLQUFLO1lBQ2xCLFVBQVUsRUFBRSxLQUFLLElBQUksRUFBRTtnQkFDbkIsSUFBSSxDQUFDO29CQUNELE1BQU0sU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUN4QixNQUFNLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDLENBQUM7b0JBRTFDLElBQUksVUFBVSxFQUFFLENBQUM7d0JBQ2IsTUFBTSxXQUFXLEdBQUcsY0FBYyxFQUFFLENBQUM7d0JBQ3JDLElBQUksV0FBVyxFQUFFLENBQUM7NEJBQ2QsTUFBTSxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7NEJBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQzt3QkFDM0MsQ0FBQztvQkFDTCxDQUFDO29CQUNELE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDZixPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO2dCQUNqQyxDQUFDO2dCQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7b0JBQ2IsTUFBTSxDQUFDLEtBQUssQ0FBQywwQkFBMEIsS0FBSyxFQUFFLENBQUMsQ0FBQztnQkFDcEQsQ0FBQztZQUNMLENBQUM7WUFDRCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQ0FBaUMsQ0FBQztTQUNoRSxDQUFDLENBQUM7SUFDUCxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNiLE1BQU0sQ0FBQyxLQUFLLENBQUMsMkJBQTJCLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDakQsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwQixDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBodHRwcyBmcm9tICdodHRwcyc7XG5pbXBvcnQgeyBBcHBsaWNhdGlvbiB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgU2VxdWVsaXplIH0gZnJvbSAnc2VxdWVsaXplJztcbmltcG9ydCBncmFjZWZ1bFNodXRkb3duIGZyb20gJ2h0dHAtZ3JhY2VmdWwtc2h1dGRvd24nO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RhcnRTZXJ2ZXIoe1xuICAgIGFwcCxcbiAgICBvcHRpb25zLFxuICAgIGxvZ2dlcixcbiAgICBTRVJWRVJfUE9SVCxcbiAgICBTU0xfRkxBRyxcbiAgICBnZXRTZXF1ZWxpemVJbnN0YW5jZSxcbiAgICBnZXRSZWRpc0NsaWVudCxcbiAgICBSRURJU19GTEFHLFxufToge1xuICAgIGFwcDogQXBwbGljYXRpb247XG4gICAgb3B0aW9uczogYW55O1xuICAgIGxvZ2dlcjogYW55O1xuICAgIFNFUlZFUl9QT1JUOiBudW1iZXI7XG4gICAgU1NMX0ZMQUc6IGJvb2xlYW47XG4gICAgZ2V0U2VxdWVsaXplSW5zdGFuY2U6ICgpID0+IFNlcXVlbGl6ZTtcbiAgICBnZXRSZWRpc0NsaWVudDogKCkgPT4gYW55O1xuICAgIFJFRElTX0ZMQUc6IGJvb2xlYW47XG59KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgbG9nZ2VyLmluZm8oYFN0YXJ0aW5nIEhUVFAgc2VydmVyIG9uIHBvcnQgJHtTRVJWRVJfUE9SVH1gKTtcbiAgICAgICAgbG9nZ2VyLmluZm8oJ0luaXRpYWxpemluZyBkYXRhYmFzZSBiZWZvcmUgc3RhcnRpbmcgc2VydmVyLicpO1xuXG4gICAgICAgIGNvbnN0IHNlcXVlbGl6ZSA9IGdldFNlcXVlbGl6ZUluc3RhbmNlKCk7XG4gICAgICAgIGF3YWl0IHNlcXVlbGl6ZS5hdXRoZW50aWNhdGUoKTtcbiAgICAgICAgbG9nZ2VyLmluZm8oJ0RhdGFiYXNlIGNvbm5lY3Rpb24gaGFzIGJlZW4gZXN0YWJsaXNoZWQgc3VjY2Vzc2Z1bGx5LicpO1xuXG4gICAgICAgIGxldCBzZXJ2ZXI7XG5cbiAgICAgICAgaWYgKFNTTF9GTEFHICYmIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHNlcnZlciA9IGh0dHBzLmNyZWF0ZVNlcnZlcihvcHRpb25zLCBhcHApLmxpc3RlbihTRVJWRVJfUE9SVCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGBIVFRQUyBzZXJ2ZXIgcnVubmluZyBvbiBwb3J0ICR7U0VSVkVSX1BPUlR9YCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlcnZlciA9IGFwcC5saXN0ZW4oU0VSVkVSX1BPUlQsICgpID0+IHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhgSFRUUCBzZXJ2ZXIgcnVubmluZyBvbiBwb3J0ICR7U0VSVkVSX1BPUlR9YCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdyYWNlZnVsU2h1dGRvd24oc2VydmVyLCB7XG4gICAgICAgICAgICBzaWduYWxzOiAnU0lHSU5UIFNJR1RFUk0nLFxuICAgICAgICAgICAgdGltZW91dDogMzAwMDAsXG4gICAgICAgICAgICBkZXZlbG9wbWVudDogZmFsc2UsXG4gICAgICAgICAgICBvblNodXRkb3duOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgc2VxdWVsaXplLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKCdEYXRhYmFzZSBjb25uZWN0aW9uIGNsb3NlZCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChSRURJU19GTEFHKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWRpc0NsaWVudCA9IGdldFJlZGlzQ2xpZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVkaXNDbGllbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCByZWRpc0NsaWVudC5xdWl0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ1JlZGlzIGNvbm5lY3Rpb24gY2xvc2VkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdMb2dnZXIgY2xvc2VkJyk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGBFcnJvciBkdXJpbmcgc2h1dGRvd246ICR7ZXJyb3J9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbmFsbHk6ICgpID0+IGNvbnNvbGUubG9nKCdTZXJ2ZXIgaGFzIGdyYWNlZnVsbHkgc2h1dCBkb3duJylcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yKGBGYWlsZWQgdG8gc3RhcnQgc2VydmVyOiAke2Vycm9yfWApO1xuICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgfVxufVxuIl19
