import setupLogger from './logger.mjs';
import loadEnv from './loadEnv.mjs';
loadEnv();
const logger = setupLogger();
export const parseBoolean = value => {
	if (typeof value === 'string') {
		value = value.toLowerCase();
	}
	if (value === true || value === 'true') {
		return true;
	} else if (value === false || value === 'false') {
		return false;
	} else if (value === undefined) {
		return false;
	} else {
		logger.warn(
			`parseBoolean received an unexpected value: "${value}". Defaulting to false.`
		);
		return false;
	}
};
export function getFeatureFlags() {
	return {
		apiRoutesCsrfFlag: parseBoolean(process.env.FEATURE_API_ROUTES_CSRF),
		dbSyncFlag: parseBoolean(process.env.FEATURE_DB_SYNC),
		decryptKeysFlag: parseBoolean(process.env.FEATURE_DECRYPT_KEYS),
		enableCsrfFlag: parseBoolean(process.env.FEATURE_ENABLE_CSRF),
		enableErrorHandlerFlag: parseBoolean(
			process.env.FEATURE_ENABLE_ERROR_HANDLER
		),
		enableIpBlacklistFlag: parseBoolean(
			process.env.FEATURE_ENABLE_IP_BLACKLIST
		),
		enableJwtAuthFlag: parseBoolean(process.env.FEATURE_ENABLE_JWT_AUTH),
		enableRedisFlag: parseBoolean(process.env.FEATURE_ENABLE_REDIS),
		enableSentryFlag: parseBoolean(process.env.FEATURE_ENABLE_SENTRY),
		enableSslFlag: parseBoolean(process.env.FEATURE_ENABLE_SSL),
		httpsRedirectFlag: parseBoolean(process.env.FEATURE_HTTPS_REDIRECT),
		loadStaticRoutesFlag: parseBoolean(
			process.env.FEATURE_LOAD_STATIC_ROUTES
		),
		loadTestRoutesFlag: parseBoolean(process.env.FEATURE_LOAD_TEST_ROUTES),
		secureHeadersFlag: parseBoolean(process.env.FEATURE_SECURE_HEADERS),
		sequelizeLoggingFlag: parseBoolean(
			process.env.FEATURE_SEQUELIZE_LOGGING
		)
	};
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdHVyZUZsYWdzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZy9mZWF0dXJlRmxhZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxXQUFXLE1BQU0sVUFBVSxDQUFDO0FBQ25DLE9BQU8sT0FBTyxNQUFNLFdBQVcsQ0FBQztBQUVoQyxPQUFPLEVBQUUsQ0FBQztBQUVWLE1BQU0sTUFBTSxHQUFHLFdBQVcsRUFBRSxDQUFDO0FBb0I3QixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxLQUFtQyxFQUFXLEVBQUU7SUFDNUUsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUUsQ0FBQztRQUMvQixLQUFLLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFJLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLE1BQU0sRUFBRSxDQUFDO1FBQ3hDLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztTQUFNLElBQUksS0FBSyxLQUFLLEtBQUssSUFBSSxLQUFLLEtBQUssT0FBTyxFQUFFLENBQUM7UUFDakQsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO1NBQU0sSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFLENBQUM7UUFDaEMsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO1NBQU0sQ0FBQztRQUNQLE1BQU0sQ0FBQyxJQUFJLENBQ1YsK0NBQStDLEtBQUsseUJBQXlCLENBQzdFLENBQUM7UUFDRixPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7QUFDRixDQUFDLENBQUM7QUFFRixNQUFNLFVBQVUsZUFBZTtJQUM5QixPQUFPO1FBQ04saUJBQWlCLEVBQUUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUM7UUFDcEUsVUFBVSxFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQztRQUNyRCxlQUFlLEVBQUUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUM7UUFDL0QsY0FBYyxFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDO1FBQzdELHNCQUFzQixFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLDRCQUE0QixDQUFDO1FBQzlFLHFCQUFxQixFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixDQUFDO1FBQzVFLGlCQUFpQixFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDO1FBQ3BFLGVBQWUsRUFBRSxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQztRQUMvRCxnQkFBZ0IsRUFBRSxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQztRQUNqRSxhQUFhLEVBQUUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUM7UUFDM0QsaUJBQWlCLEVBQUUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUM7UUFDbkUsb0JBQW9CLEVBQUUsWUFBWSxDQUNqQyxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUN0QztRQUNELGtCQUFrQixFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDO1FBQ3RFLGlCQUFpQixFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDO1FBQ25FLG9CQUFvQixFQUFFLFlBQVksQ0FDakMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FDckM7S0FDRCxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzZXR1cExvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgbG9hZEVudiBmcm9tICcuL2xvYWRFbnYnO1xuXG5sb2FkRW52KCk7XG5cbmNvbnN0IGxvZ2dlciA9IHNldHVwTG9nZ2VyKCk7XG5cbmludGVyZmFjZSBGZWF0dXJlRmxhZ3Mge1xuXHRhcGlSb3V0ZXNDc3JmRmxhZzogYm9vbGVhbjtcblx0ZGJTeW5jRmxhZzogYm9vbGVhbjtcblx0ZGVjcnlwdEtleXNGbGFnOiBib29sZWFuO1xuXHRlbmFibGVDc3JmRmxhZzogYm9vbGVhbjtcblx0ZW5hYmxlRXJyb3JIYW5kbGVyRmxhZzogYm9vbGVhbjtcblx0ZW5hYmxlSXBCbGFja2xpc3RGbGFnOiBib29sZWFuO1xuXHRlbmFibGVKd3RBdXRoRmxhZzogYm9vbGVhbjtcblx0ZW5hYmxlUmVkaXNGbGFnOiBib29sZWFuO1xuXHRlbmFibGVTZW50cnlGbGFnOiBib29sZWFuO1xuXHRlbmFibGVTc2xGbGFnOiBib29sZWFuO1xuXHRodHRwc1JlZGlyZWN0RmxhZzogYm9vbGVhbjtcblx0bG9hZFN0YXRpY1JvdXRlc0ZsYWc6IGJvb2xlYW47XG5cdGxvYWRUZXN0Um91dGVzRmxhZzogYm9vbGVhbjtcblx0c2VjdXJlSGVhZGVyc0ZsYWc6IGJvb2xlYW47XG5cdHNlcXVlbGl6ZUxvZ2dpbmdGbGFnOiBib29sZWFuO1xufVxuXG5leHBvcnQgY29uc3QgcGFyc2VCb29sZWFuID0gKHZhbHVlOiBzdHJpbmcgfCBib29sZWFuIHwgdW5kZWZpbmVkKTogYm9vbGVhbiA9PiB7XG5cdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG5cdFx0dmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuXHR9XG5cblx0aWYgKHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSAndHJ1ZScpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBlbHNlIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT09ICdmYWxzZScpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZWxzZSBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBlbHNlIHtcblx0XHRsb2dnZXIud2Fybihcblx0XHRcdGBwYXJzZUJvb2xlYW4gcmVjZWl2ZWQgYW4gdW5leHBlY3RlZCB2YWx1ZTogXCIke3ZhbHVlfVwiLiBEZWZhdWx0aW5nIHRvIGZhbHNlLmBcblx0XHQpO1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZlYXR1cmVGbGFncygpOiBGZWF0dXJlRmxhZ3Mge1xuXHRyZXR1cm4ge1xuXHRcdGFwaVJvdXRlc0NzcmZGbGFnOiBwYXJzZUJvb2xlYW4ocHJvY2Vzcy5lbnYuRkVBVFVSRV9BUElfUk9VVEVTX0NTUkYpLFxuXHRcdGRiU3luY0ZsYWc6IHBhcnNlQm9vbGVhbihwcm9jZXNzLmVudi5GRUFUVVJFX0RCX1NZTkMpLFxuXHRcdGRlY3J5cHRLZXlzRmxhZzogcGFyc2VCb29sZWFuKHByb2Nlc3MuZW52LkZFQVRVUkVfREVDUllQVF9LRVlTKSxcblx0XHRlbmFibGVDc3JmRmxhZzogcGFyc2VCb29sZWFuKHByb2Nlc3MuZW52LkZFQVRVUkVfRU5BQkxFX0NTUkYpLFxuXHRcdGVuYWJsZUVycm9ySGFuZGxlckZsYWc6IHBhcnNlQm9vbGVhbihwcm9jZXNzLmVudi5GRUFUVVJFX0VOQUJMRV9FUlJPUl9IQU5ETEVSKSxcblx0XHRlbmFibGVJcEJsYWNrbGlzdEZsYWc6IHBhcnNlQm9vbGVhbihwcm9jZXNzLmVudi5GRUFUVVJFX0VOQUJMRV9JUF9CTEFDS0xJU1QpLFxuXHRcdGVuYWJsZUp3dEF1dGhGbGFnOiBwYXJzZUJvb2xlYW4ocHJvY2Vzcy5lbnYuRkVBVFVSRV9FTkFCTEVfSldUX0FVVEgpLFxuXHRcdGVuYWJsZVJlZGlzRmxhZzogcGFyc2VCb29sZWFuKHByb2Nlc3MuZW52LkZFQVRVUkVfRU5BQkxFX1JFRElTKSxcblx0XHRlbmFibGVTZW50cnlGbGFnOiBwYXJzZUJvb2xlYW4ocHJvY2Vzcy5lbnYuRkVBVFVSRV9FTkFCTEVfU0VOVFJZKSxcblx0XHRlbmFibGVTc2xGbGFnOiBwYXJzZUJvb2xlYW4ocHJvY2Vzcy5lbnYuRkVBVFVSRV9FTkFCTEVfU1NMKSxcblx0XHRodHRwc1JlZGlyZWN0RmxhZzogcGFyc2VCb29sZWFuKHByb2Nlc3MuZW52LkZFQVRVUkVfSFRUUFNfUkVESVJFQ1QpLFxuXHRcdGxvYWRTdGF0aWNSb3V0ZXNGbGFnOiBwYXJzZUJvb2xlYW4oXG5cdFx0XHRwcm9jZXNzLmVudi5GRUFUVVJFX0xPQURfU1RBVElDX1JPVVRFU1xuXHRcdCksXG5cdFx0bG9hZFRlc3RSb3V0ZXNGbGFnOiBwYXJzZUJvb2xlYW4ocHJvY2Vzcy5lbnYuRkVBVFVSRV9MT0FEX1RFU1RfUk9VVEVTKSxcblx0XHRzZWN1cmVIZWFkZXJzRmxhZzogcGFyc2VCb29sZWFuKHByb2Nlc3MuZW52LkZFQVRVUkVfU0VDVVJFX0hFQURFUlMpLFxuXHRcdHNlcXVlbGl6ZUxvZ2dpbmdGbGFnOiBwYXJzZUJvb2xlYW4oXG5cdFx0XHRwcm9jZXNzLmVudi5GRUFUVVJFX1NFUVVFTElaRV9MT0dHSU5HXG5cdFx0KVxuXHR9O1xufVxuIl19
