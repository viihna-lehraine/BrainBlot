export function parseBoolean(value, logger) {
	if (typeof value === 'string') {
		value = value.toLowerCase();
	}
	if (value === true || value === 'true') {
		return true;
	} else if (value === false || value === 'false') {
		return false;
	} else if (value === undefined) {
		return false;
	} else {
		logger.warn(
			`parseBoolean received an invalid value: ${value}. Defaulting to false.`
		);
		return false;
	}
}
export function getFeatureFlags(logger, env = process.env) {
	return {
		apiRoutesCsrfFlag: parseBoolean(env.FEATURE_API_ROUTES_CSRF, logger),
		dbSyncFlag: parseBoolean(env.FEATURE_DB_SYNC, logger),
		decryptKeysFlag: parseBoolean(env.FEATURE_DECRYPT_KEYS, logger),
		enableCsrfFlag: parseBoolean(env.FEATURE_ENABLE_CSRF, logger),
		enableErrorHandlerFlag: parseBoolean(
			env.FEATURE_ENABLE_ERROR_HANDLER,
			logger
		),
		enableIpBlacklistFlag: parseBoolean(
			env.FEATURE_ENABLE_IP_BLACKLIST,
			logger
		),
		enableJwtAuthFlag: parseBoolean(env.FEATURE_ENABLE_JWT_AUTH, logger),
		enableRedisFlag: parseBoolean(env.FEATURE_ENABLE_REDIS, logger),
		enableSentryFlag: parseBoolean(env.FEATURE_ENABLE_SENTRY, logger),
		enableSslFlag: parseBoolean(env.FEATURE_ENABLE_SSL, logger),
		httpsRedirectFlag: parseBoolean(env.FEATURE_HTTPS_REDIRECT, logger),
		loadStaticRoutesFlag: parseBoolean(
			env.FEATURE_LOAD_STATIC_ROUTES,
			logger
		),
		loadTestRoutesFlag: parseBoolean(env.FEATURE_LOAD_TEST_ROUTES, logger),
		secureHeadersFlag: parseBoolean(env.FEATURE_SECURE_HEADERS, logger),
		sequelizeLoggingFlag: parseBoolean(
			env.FEATURE_SEQUELIZE_LOGGING,
			logger
		)
	};
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdHVyZUZsYWdzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZy9mZWF0dXJlRmxhZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0JBLE1BQU0sVUFBVSxZQUFZLENBQzNCLEtBQW1DLEVBQ25DLE1BQTBDO0lBRTFDLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFLENBQUM7UUFDL0IsS0FBSyxHQUFHLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxNQUFNLEVBQUUsQ0FBQztRQUN4QyxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7U0FBTSxJQUFJLEtBQUssS0FBSyxLQUFLLElBQUksS0FBSyxLQUFLLE9BQU8sRUFBRSxDQUFDO1FBQ2pELE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztTQUFNLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRSxDQUFDO1FBQ2hDLE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztTQUFNLENBQUM7UUFDUCxNQUFNLENBQUMsSUFBSSxDQUNWLDJDQUEyQyxLQUFLLHdCQUF3QixDQUN4RSxDQUFDO1FBQ0YsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQzlCLE1BQTJDLEVBQzNDLE1BQXlCLE9BQU8sQ0FBQyxHQUFHO0lBRXBDLE9BQU87UUFDTixpQkFBaUIsRUFBRSxZQUFZLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFLE1BQU0sQ0FBQztRQUNwRSxVQUFVLEVBQUUsWUFBWSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDO1FBQ3JELGVBQWUsRUFBRSxZQUFZLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLE1BQU0sQ0FBQztRQUMvRCxjQUFjLEVBQUUsWUFBWSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxNQUFNLENBQUM7UUFDN0Qsc0JBQXNCLEVBQUUsWUFBWSxDQUNuQyxHQUFHLENBQUMsNEJBQTRCLEVBQ2hDLE1BQU0sQ0FDTjtRQUNELHFCQUFxQixFQUFFLFlBQVksQ0FBQyxHQUFHLENBQUMsMkJBQTJCLEVBQUUsTUFBTSxDQUFDO1FBQzVFLGlCQUFpQixFQUFFLFlBQVksQ0FBQyxHQUFHLENBQUMsdUJBQXVCLEVBQUUsTUFBTSxDQUFDO1FBQ3BFLGVBQWUsRUFBRSxZQUFZLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLE1BQU0sQ0FBQztRQUMvRCxnQkFBZ0IsRUFBRSxZQUFZLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLE1BQU0sQ0FBQztRQUNqRSxhQUFhLEVBQUUsWUFBWSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxNQUFNLENBQUM7UUFDM0QsaUJBQWlCLEVBQUUsWUFBWSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRSxNQUFNLENBQUM7UUFDbkUsb0JBQW9CLEVBQUUsWUFBWSxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsRUFBRSxNQUFNLENBQUM7UUFDMUUsa0JBQWtCLEVBQUUsWUFBWSxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsRUFBRSxNQUFNLENBQUM7UUFDdEUsaUJBQWlCLEVBQUUsWUFBWSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRSxNQUFNLENBQUM7UUFDbkUsb0JBQW9CLEVBQUUsWUFBWSxDQUNqQyxHQUFHLENBQUMseUJBQXlCLEVBQzdCLE1BQU0sQ0FDTjtLQUNELENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBGZWF0dXJlRmxhZ3Mge1xuXHRhcGlSb3V0ZXNDc3JmRmxhZzogYm9vbGVhbjtcblx0ZGJTeW5jRmxhZzogYm9vbGVhbjtcblx0ZGVjcnlwdEtleXNGbGFnOiBib29sZWFuO1xuXHRlbmFibGVDc3JmRmxhZzogYm9vbGVhbjtcblx0ZW5hYmxlRXJyb3JIYW5kbGVyRmxhZzogYm9vbGVhbjtcblx0ZW5hYmxlSXBCbGFja2xpc3RGbGFnOiBib29sZWFuO1xuXHRlbmFibGVKd3RBdXRoRmxhZzogYm9vbGVhbjtcblx0ZW5hYmxlUmVkaXNGbGFnOiBib29sZWFuO1xuXHRlbmFibGVTZW50cnlGbGFnOiBib29sZWFuO1xuXHRlbmFibGVTc2xGbGFnOiBib29sZWFuO1xuXHRodHRwc1JlZGlyZWN0RmxhZzogYm9vbGVhbjtcblx0bG9hZFN0YXRpY1JvdXRlc0ZsYWc6IGJvb2xlYW47XG5cdGxvYWRUZXN0Um91dGVzRmxhZzogYm9vbGVhbjtcblx0c2VjdXJlSGVhZGVyc0ZsYWc6IGJvb2xlYW47XG5cdHNlcXVlbGl6ZUxvZ2dpbmdGbGFnOiBib29sZWFuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VCb29sZWFuKFxuXHR2YWx1ZTogc3RyaW5nIHwgYm9vbGVhbiB8IHVuZGVmaW5lZCxcblx0bG9nZ2VyOiB7IHdhcm46IChtZXNzYWdlOiBzdHJpbmcpID0+IHZvaWR9XG4pOiBib29sZWFuIHtcblx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcblx0XHR2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG5cdH1cblxuXHRpZiAodmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09ICd0cnVlJykge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGVsc2UgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBlbHNlIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGVsc2Uge1xuXHRcdGxvZ2dlci53YXJuKFxuXHRcdFx0YHBhcnNlQm9vbGVhbiByZWNlaXZlZCBhbiBpbnZhbGlkIHZhbHVlOiAke3ZhbHVlfS4gRGVmYXVsdGluZyB0byBmYWxzZS5gXG5cdFx0KTtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZlYXR1cmVGbGFncyhcblx0bG9nZ2VyOiB7IHdhcm46IChtZXNzYWdlOiBzdHJpbmcpID0+IHZvaWQgfSxcblx0ZW52OiBOb2RlSlMuUHJvY2Vzc0VudiA9IHByb2Nlc3MuZW52XG4pOiBGZWF0dXJlRmxhZ3Mge1xuXHRyZXR1cm4ge1xuXHRcdGFwaVJvdXRlc0NzcmZGbGFnOiBwYXJzZUJvb2xlYW4oZW52LkZFQVRVUkVfQVBJX1JPVVRFU19DU1JGLCBsb2dnZXIpLFxuXHRcdGRiU3luY0ZsYWc6IHBhcnNlQm9vbGVhbihlbnYuRkVBVFVSRV9EQl9TWU5DLCBsb2dnZXIpLFxuXHRcdGRlY3J5cHRLZXlzRmxhZzogcGFyc2VCb29sZWFuKGVudi5GRUFUVVJFX0RFQ1JZUFRfS0VZUywgbG9nZ2VyKSxcblx0XHRlbmFibGVDc3JmRmxhZzogcGFyc2VCb29sZWFuKGVudi5GRUFUVVJFX0VOQUJMRV9DU1JGLCBsb2dnZXIpLFxuXHRcdGVuYWJsZUVycm9ySGFuZGxlckZsYWc6IHBhcnNlQm9vbGVhbihcblx0XHRcdGVudi5GRUFUVVJFX0VOQUJMRV9FUlJPUl9IQU5ETEVSLFxuXHRcdFx0bG9nZ2VyXG5cdFx0KSxcblx0XHRlbmFibGVJcEJsYWNrbGlzdEZsYWc6IHBhcnNlQm9vbGVhbihlbnYuRkVBVFVSRV9FTkFCTEVfSVBfQkxBQ0tMSVNULCBsb2dnZXIpLFxuXHRcdGVuYWJsZUp3dEF1dGhGbGFnOiBwYXJzZUJvb2xlYW4oZW52LkZFQVRVUkVfRU5BQkxFX0pXVF9BVVRILCBsb2dnZXIpLFxuXHRcdGVuYWJsZVJlZGlzRmxhZzogcGFyc2VCb29sZWFuKGVudi5GRUFUVVJFX0VOQUJMRV9SRURJUywgbG9nZ2VyKSxcblx0XHRlbmFibGVTZW50cnlGbGFnOiBwYXJzZUJvb2xlYW4oZW52LkZFQVRVUkVfRU5BQkxFX1NFTlRSWSwgbG9nZ2VyKSxcblx0XHRlbmFibGVTc2xGbGFnOiBwYXJzZUJvb2xlYW4oZW52LkZFQVRVUkVfRU5BQkxFX1NTTCwgbG9nZ2VyKSxcblx0XHRodHRwc1JlZGlyZWN0RmxhZzogcGFyc2VCb29sZWFuKGVudi5GRUFUVVJFX0hUVFBTX1JFRElSRUNULCBsb2dnZXIpLFxuXHRcdGxvYWRTdGF0aWNSb3V0ZXNGbGFnOiBwYXJzZUJvb2xlYW4oZW52LkZFQVRVUkVfTE9BRF9TVEFUSUNfUk9VVEVTLCBsb2dnZXIpLFxuXHRcdGxvYWRUZXN0Um91dGVzRmxhZzogcGFyc2VCb29sZWFuKGVudi5GRUFUVVJFX0xPQURfVEVTVF9ST1VURVMsIGxvZ2dlciksXG5cdFx0c2VjdXJlSGVhZGVyc0ZsYWc6IHBhcnNlQm9vbGVhbihlbnYuRkVBVFVSRV9TRUNVUkVfSEVBREVSUywgbG9nZ2VyKSxcblx0XHRzZXF1ZWxpemVMb2dnaW5nRmxhZzogcGFyc2VCb29sZWFuKFxuXHRcdFx0ZW52LkZFQVRVUkVfU0VRVUVMSVpFX0xPR0dJTkcsXG5cdFx0XHRsb2dnZXJcblx0XHQpXG5cdH07XG59XG4iXX0=
