import { Strategy as JwtStrategy, ExtractJwt } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
import setupLogger from './logger.mjs';
import getSecrets from './sops.mjs';
import User from '../models/User.mjs';
const logger = setupLogger();
export default async function configurePassport(passport) {
	const secrets = await getSecrets.getSecrets();
	const opts = {
		jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
		secretOrKey: secrets.JWT_SECRET
	};
	passport.use(
		new JwtStrategy(opts, async (jwt_payload, done) => {
			try {
				const user = await User.findByPk(jwt_payload.id);
				if (user) {
					logger.info(
						'JWT authentication successful for user ID: ',
						jwt_payload.id
					);
					return done(null, user);
				} else {
					logger.warn(
						'JWT authentication failed for user ID: ',
						jwt_payload.id
					);
					return done(null, false);
				}
			} catch (err) {
				logger.error('JWT authentication error: ', err);
				return done(err, false);
			}
		})
	);
	passport.use(
		new LocalStrategy(async (username, password, done) => {
			try {
				const user = await User.findOne({ where: { username } });
				if (!user) {
					logger.warn(
						'Local authentication failed: User not found: ',
						username
					);
					return done(null, false, { message: 'User not found' });
				}
				const isMatch = await user.comparePassword(password);
				if (isMatch) {
					logger.info(
						'Local authentication successful for user: ',
						username
					);
					return done(null, user);
				} else {
					logger.warn(
						'Local authentication failed: incorrect password for user: ',
						username
					);
					return done(null, false, { message: 'Incorrect password' });
				}
			} catch (err) {
				logger.error(
					'Local authenticaton error for user: ',
					username,
					' : Error: ',
					err
				);
				return done(err);
			}
		})
	);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3BvcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnL3Bhc3Nwb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTixRQUFRLElBQUksV0FBVyxFQUN2QixVQUFVLEVBRVYsTUFBTSxjQUFjLENBQUM7QUFDdEIsT0FBTyxFQUFFLFFBQVEsSUFBSSxhQUFhLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzRCxPQUFPLFdBQVcsTUFBTSxVQUFVLENBQUM7QUFDbkMsT0FBTyxVQUFVLE1BQU0sUUFBUSxDQUFDO0FBQ2hDLE9BQU8sSUFBSSxNQUFNLGdCQUFnQixDQUFDO0FBYWxDLE1BQU0sTUFBTSxHQUFHLFdBQVcsRUFBRSxDQUFDO0FBRTdCLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxVQUFVLGlCQUFpQixDQUFDLFFBQXdCO0lBQ3ZFLE1BQU0sT0FBTyxHQUFvQixNQUFNLFVBQVUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUUvRCxJQUFJLElBQUksR0FBb0I7UUFDM0IsY0FBYyxFQUFFLFVBQVUsQ0FBQywyQkFBMkIsRUFBRTtRQUN4RCxXQUFXLEVBQUUsT0FBTyxDQUFDLFVBQVU7S0FDL0IsQ0FBQztJQUVGLFFBQVEsQ0FBQyxHQUFHLENBQ1gsSUFBSSxXQUFXLENBQ2QsSUFBSSxFQUNKLEtBQUssRUFDSixXQUEyQixFQUMzQixJQUlTLEVBQ1IsRUFBRTtRQUNILElBQUksQ0FBQztZQUNKLElBQUksSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDL0MsSUFBSSxJQUFJLEVBQUUsQ0FBQztnQkFDVixNQUFNLENBQUMsSUFBSSxDQUNWLDZDQUE2QyxFQUM3QyxXQUFXLENBQUMsRUFBRSxDQUNkLENBQUM7Z0JBQ0YsT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3pCLENBQUM7aUJBQU0sQ0FBQztnQkFDUCxNQUFNLENBQUMsSUFBSSxDQUNWLHlDQUF5QyxFQUN6QyxXQUFXLENBQUMsRUFBRSxDQUNkLENBQUM7Z0JBQ0YsT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzFCLENBQUM7UUFDRixDQUFDO1FBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztZQUNkLE1BQU0sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDaEQsT0FBTyxJQUFJLENBQUMsR0FBWSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLENBQUM7SUFDRixDQUFDLENBQ0QsQ0FDRCxDQUFDO0lBRUYsUUFBUSxDQUFDLEdBQUcsQ0FDWCxJQUFJLGFBQWEsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsRUFBRTtRQUNwRCxJQUFJLENBQUM7WUFDSixJQUFJLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDdkQsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNYLE1BQU0sQ0FBQyxJQUFJLENBQ1YsK0NBQStDLEVBQy9DLFFBQVEsQ0FDUixDQUFDO2dCQUNGLE9BQU8sSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO1lBQ3pELENBQUM7WUFFRCxJQUFJLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbkQsSUFBSSxPQUFPLEVBQUUsQ0FBQztnQkFDYixNQUFNLENBQUMsSUFBSSxDQUNWLDRDQUE0QyxFQUM1QyxRQUFRLENBQ1IsQ0FBQztnQkFDRixPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDekIsQ0FBQztpQkFBTSxDQUFDO2dCQUNQLE1BQU0sQ0FBQyxJQUFJLENBQ1YsNERBQTRELEVBQzVELFFBQVEsQ0FDUixDQUFDO2dCQUNGLE9BQU8sSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO1lBQzdELENBQUM7UUFDRixDQUFDO1FBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztZQUNkLE1BQU0sQ0FBQyxLQUFLLENBQ1gsc0NBQXNDLEVBQ3RDLFFBQVEsRUFDUixZQUFZLEVBQ1osR0FBRyxDQUNILENBQUM7WUFDRixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixDQUFDO0lBQ0YsQ0FBQyxDQUFDLENBQ0YsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXNzcG9ydFN0YXRpYyB9IGZyb20gJ3Bhc3Nwb3J0JztcbmltcG9ydCB7XG5cdFN0cmF0ZWd5IGFzIEp3dFN0cmF0ZWd5LFxuXHRFeHRyYWN0Snd0LFxuXHRTdHJhdGVneU9wdGlvbnNcbn0gZnJvbSAncGFzc3BvcnQtand0JztcbmltcG9ydCB7IFN0cmF0ZWd5IGFzIExvY2FsU3RyYXRlZ3kgfSBmcm9tICdwYXNzcG9ydC1sb2NhbCc7XG5pbXBvcnQgc2V0dXBMb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IGdldFNlY3JldHMgZnJvbSAnLi9zb3BzJztcbmltcG9ydCBVc2VyIGZyb20gJy4uL21vZGVscy9Vc2VyJztcblxuLy8gRGVmaW5lIHRoZSBzaGFwZSBvZiBhIHVzZXIgaW5zdGFuY2UgYmFzZWQgb24gVXNlciBtb2RlbFxuaW50ZXJmYWNlIFVzZXJJbnN0YW5jZSB7XG5cdGlkOiBzdHJpbmc7XG5cdHVzZXJuYW1lOiBzdHJpbmc7XG5cdGNvbXBhcmVQYXNzd29yZDogKHBhc3N3b3JkOiBzdHJpbmcpID0+IFByb21pc2U8Ym9vbGVhbj47XG59XG5cbmludGVyZmFjZSBQYXNzcG9ydFNlY3JldHMge1xuXHRKV1RfU0VDUkVUOiBzdHJpbmc7XG59XG5cbmNvbnN0IGxvZ2dlciA9IHNldHVwTG9nZ2VyKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGNvbmZpZ3VyZVBhc3Nwb3J0KHBhc3Nwb3J0OiBQYXNzcG9ydFN0YXRpYykge1xuXHRjb25zdCBzZWNyZXRzOiBQYXNzcG9ydFNlY3JldHMgPSBhd2FpdCBnZXRTZWNyZXRzLmdldFNlY3JldHMoKTtcblxuXHRsZXQgb3B0czogU3RyYXRlZ3lPcHRpb25zID0ge1xuXHRcdGp3dEZyb21SZXF1ZXN0OiBFeHRyYWN0Snd0LmZyb21BdXRoSGVhZGVyQXNCZWFyZXJUb2tlbigpLFxuXHRcdHNlY3JldE9yS2V5OiBzZWNyZXRzLkpXVF9TRUNSRVRcblx0fTtcblxuXHRwYXNzcG9ydC51c2UoXG5cdFx0bmV3IEp3dFN0cmF0ZWd5KFxuXHRcdFx0b3B0cyxcblx0XHRcdGFzeW5jIChcblx0XHRcdFx0and0X3BheWxvYWQ6IHsgaWQ6IHN0cmluZyB9LFxuXHRcdFx0XHRkb25lOiAoXG5cdFx0XHRcdFx0ZXJyb3I6IEVycm9yIHwgbnVsbCxcblx0XHRcdFx0XHR1c2VyPzogVXNlckluc3RhbmNlIHwgZmFsc2UsXG5cdFx0XHRcdFx0aW5mbz86IHVua25vd25cblx0XHRcdFx0KSA9PiB2b2lkXG5cdFx0XHQpID0+IHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRsZXQgdXNlciA9IGF3YWl0IFVzZXIuZmluZEJ5UGsoand0X3BheWxvYWQuaWQpO1xuXHRcdFx0XHRcdGlmICh1c2VyKSB7XG5cdFx0XHRcdFx0XHRsb2dnZXIuaW5mbyhcblx0XHRcdFx0XHRcdFx0J0pXVCBhdXRoZW50aWNhdGlvbiBzdWNjZXNzZnVsIGZvciB1c2VyIElEOiAnLFxuXHRcdFx0XHRcdFx0XHRqd3RfcGF5bG9hZC5pZFxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJldHVybiBkb25lKG51bGwsIHVzZXIpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRsb2dnZXIud2Fybihcblx0XHRcdFx0XHRcdFx0J0pXVCBhdXRoZW50aWNhdGlvbiBmYWlsZWQgZm9yIHVzZXIgSUQ6ICcsXG5cdFx0XHRcdFx0XHRcdGp3dF9wYXlsb2FkLmlkXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRvbmUobnVsbCwgZmFsc2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0bG9nZ2VyLmVycm9yKCdKV1QgYXV0aGVudGljYXRpb24gZXJyb3I6ICcsIGVycik7XG5cdFx0XHRcdFx0cmV0dXJuIGRvbmUoZXJyIGFzIEVycm9yLCBmYWxzZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHQpXG5cdCk7XG5cblx0cGFzc3BvcnQudXNlKFxuXHRcdG5ldyBMb2NhbFN0cmF0ZWd5KGFzeW5jICh1c2VybmFtZSwgcGFzc3dvcmQsIGRvbmUpID0+IHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGxldCB1c2VyID0gYXdhaXQgVXNlci5maW5kT25lKHsgd2hlcmU6IHsgdXNlcm5hbWUgfSB9KTtcblx0XHRcdFx0aWYgKCF1c2VyKSB7XG5cdFx0XHRcdFx0bG9nZ2VyLndhcm4oXG5cdFx0XHRcdFx0XHQnTG9jYWwgYXV0aGVudGljYXRpb24gZmFpbGVkOiBVc2VyIG5vdCBmb3VuZDogJyxcblx0XHRcdFx0XHRcdHVzZXJuYW1lXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gZG9uZShudWxsLCBmYWxzZSwgeyBtZXNzYWdlOiAnVXNlciBub3QgZm91bmQnIH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bGV0IGlzTWF0Y2ggPSBhd2FpdCB1c2VyLmNvbXBhcmVQYXNzd29yZChwYXNzd29yZCk7XG5cdFx0XHRcdGlmIChpc01hdGNoKSB7XG5cdFx0XHRcdFx0bG9nZ2VyLmluZm8oXG5cdFx0XHRcdFx0XHQnTG9jYWwgYXV0aGVudGljYXRpb24gc3VjY2Vzc2Z1bCBmb3IgdXNlcjogJyxcblx0XHRcdFx0XHRcdHVzZXJuYW1lXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gZG9uZShudWxsLCB1c2VyKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsb2dnZXIud2Fybihcblx0XHRcdFx0XHRcdCdMb2NhbCBhdXRoZW50aWNhdGlvbiBmYWlsZWQ6IGluY29ycmVjdCBwYXNzd29yZCBmb3IgdXNlcjogJyxcblx0XHRcdFx0XHRcdHVzZXJuYW1lXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gZG9uZShudWxsLCBmYWxzZSwgeyBtZXNzYWdlOiAnSW5jb3JyZWN0IHBhc3N3b3JkJyB9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0XHQnTG9jYWwgYXV0aGVudGljYXRvbiBlcnJvciBmb3IgdXNlcjogJyxcblx0XHRcdFx0XHR1c2VybmFtZSxcblx0XHRcdFx0XHQnIDogRXJyb3I6ICcsXG5cdFx0XHRcdFx0ZXJyXG5cdFx0XHRcdCk7XG5cdFx0XHRcdHJldHVybiBkb25lKGVycik7XG5cdFx0XHR9XG5cdFx0fSlcblx0KTtcbn1cbiJdfQ==
