import { ExtractJwt } from 'passport-jwt';
import { Strategy as LocalStrategy } from 'passport-local';
export default async function configurePassport({
	passport,
	logger,
	getSecrets,
	UserModel,
	argon2
}) {
	const secrets = await getSecrets();
	const opts = {
		jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
		secretOrKey: secrets.JWT_SECRET
	};
	passport.use(
		new LocalStrategy(async (username, password, done) => {
			try {
				const user = await UserModel.findOne({ where: { username } });
				if (!user) {
					logger.warn(
						`Local authentication failed: User not found: ${username}`
					);
					return done(null, false, { message: 'User not found' });
				}
				const secrets = await getSecrets(); // Get the secrets
				// Use the comparePassword method with all necessary dependencies
				const isMatch = await user.comparePassword(
					password,
					argon2,
					secrets
				);
				if (isMatch) {
					logger.info(
						`Local authentication successful for user: ${username}`
					);
					return done(null, user);
				} else {
					logger.warn(
						`Local authentication failed: Incorrect password for user: ${username}`
					);
					return done(null, false, { message: 'Incorrect password' });
				}
			} catch (err) {
				logger.error(
					`Local authentication error for user ${username}: Error: ${err}`
				);
				return done(err);
			}
		})
	);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3BvcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnL3Bhc3Nwb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFFTixVQUFVLEVBRVYsTUFBTSxjQUFjLENBQUM7QUFDdEIsT0FBTyxFQUFFLFFBQVEsSUFBSSxhQUFhLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQXdCM0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLFVBQVUsaUJBQWlCLENBQUMsRUFDL0MsUUFBUSxFQUNSLE1BQU0sRUFDTixVQUFVLEVBQ1YsU0FBUyxFQUNULE1BQU0sRUFDZ0I7SUFDdEIsTUFBTSxPQUFPLEdBQUcsTUFBTSxVQUFVLEVBQUUsQ0FBQztJQUVuQyxNQUFNLElBQUksR0FBb0I7UUFDN0IsY0FBYyxFQUFFLFVBQVUsQ0FBQywyQkFBMkIsRUFBRTtRQUN4RCxXQUFXLEVBQUUsT0FBTyxDQUFDLFVBQVU7S0FDL0IsQ0FBQztJQUVGLFFBQVEsQ0FBQyxHQUFHLENBQ1gsSUFBSSxhQUFhLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDcEQsSUFBSSxDQUFDO1lBQ0osTUFBTSxJQUFJLEdBQUcsTUFBTSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzlELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDWCxNQUFNLENBQUMsSUFBSSxDQUFDLGdEQUFnRCxRQUFRLEVBQUUsQ0FBQyxDQUFDO2dCQUN4RSxPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQztZQUN6RCxDQUFDO1lBRUQsTUFBTSxPQUFPLEdBQUcsTUFBTSxVQUFVLEVBQUUsQ0FBQyxDQUFDLGtCQUFrQjtZQUV0RCxpRUFBaUU7WUFDakUsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFFdEUsSUFBSSxPQUFPLEVBQUUsQ0FBQztnQkFDYixNQUFNLENBQUMsSUFBSSxDQUFDLDZDQUE2QyxRQUFRLEVBQUUsQ0FBQyxDQUFDO2dCQUNyRSxPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDekIsQ0FBQztpQkFBTSxDQUFDO2dCQUNQLE1BQU0sQ0FBQyxJQUFJLENBQ1YsNkRBQTZELFFBQVEsRUFBRSxDQUN2RSxDQUFDO2dCQUNGLE9BQU8sSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO1lBQzdELENBQUM7UUFDRixDQUFDO1FBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztZQUNkLE1BQU0sQ0FBQyxLQUFLLENBQ1gsdUNBQXVDLFFBQVEsWUFBWSxHQUFHLEVBQUUsQ0FDaEUsQ0FBQztZQUNGLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLENBQUM7SUFDRixDQUFDLENBQUMsQ0FDRixDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhc3Nwb3J0U3RhdGljIH0gZnJvbSAncGFzc3BvcnQnO1xuaW1wb3J0IHtcblx0U3RyYXRlZ3kgYXMgSnd0U3RyYXRlZ3ksXG5cdEV4dHJhY3RKd3QsXG5cdFN0cmF0ZWd5T3B0aW9uc1xufSBmcm9tICdwYXNzcG9ydC1qd3QnO1xuaW1wb3J0IHsgU3RyYXRlZ3kgYXMgTG9jYWxTdHJhdGVneSB9IGZyb20gJ3Bhc3Nwb3J0LWxvY2FsJztcbmltcG9ydCB7IFNlcXVlbGl6ZSB9IGZyb20gJ3NlcXVlbGl6ZSc7XG5cbmltcG9ydCBjcmVhdGVVc2VyTW9kZWwgZnJvbSAnLi4vbW9kZWxzL1VzZXInO1xuXG5pbnRlcmZhY2UgVXNlckluc3RhbmNlIHtcblx0aWQ6IHN0cmluZztcblx0dXNlcm5hbWU6IHN0cmluZztcblx0Y29tcGFyZVBhc3N3b3JkOiAocGFzc3dvcmQ6IHN0cmluZykgPT4gUHJvbWlzZTxib29sZWFuPjtcbn1cblxuaW50ZXJmYWNlIFBhc3Nwb3J0U2VjcmV0cyB7XG5cdEpXVF9TRUNSRVQ6IHN0cmluZztcblx0UEVQUEVSOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBQYXNzcG9ydERlcGVuZGVuY2llcyB7XG5cdHBhc3Nwb3J0OiBQYXNzcG9ydFN0YXRpYztcblx0bG9nZ2VyOiBSZXR1cm5UeXBlPHR5cGVvZiBpbXBvcnQoJy4vbG9nZ2VyJykuZGVmYXVsdD47XG5cdGdldFNlY3JldHM6ICgpID0+IFByb21pc2U8UGFzc3BvcnRTZWNyZXRzPjtcblx0VXNlck1vZGVsOiBSZXR1cm5UeXBlPHR5cGVvZiBjcmVhdGVVc2VyTW9kZWw+O1xuXHRhcmdvbjI6IHR5cGVvZiBpbXBvcnQoJ2FyZ29uMicpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBjb25maWd1cmVQYXNzcG9ydCh7XG5cdHBhc3Nwb3J0LFxuXHRsb2dnZXIsXG5cdGdldFNlY3JldHMsXG5cdFVzZXJNb2RlbCxcblx0YXJnb24yXG59OiBQYXNzcG9ydERlcGVuZGVuY2llcykge1xuXHRjb25zdCBzZWNyZXRzID0gYXdhaXQgZ2V0U2VjcmV0cygpO1xuXG5cdGNvbnN0IG9wdHM6IFN0cmF0ZWd5T3B0aW9ucyA9IHtcblx0XHRqd3RGcm9tUmVxdWVzdDogRXh0cmFjdEp3dC5mcm9tQXV0aEhlYWRlckFzQmVhcmVyVG9rZW4oKSxcblx0XHRzZWNyZXRPcktleTogc2VjcmV0cy5KV1RfU0VDUkVUXG5cdH07XG5cblx0cGFzc3BvcnQudXNlKFxuXHRcdG5ldyBMb2NhbFN0cmF0ZWd5KGFzeW5jICh1c2VybmFtZSwgcGFzc3dvcmQsIGRvbmUpID0+IHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyTW9kZWwuZmluZE9uZSh7IHdoZXJlOiB7IHVzZXJuYW1lIH0gfSk7XG5cdFx0XHRcdGlmICghdXNlcikge1xuXHRcdFx0XHRcdGxvZ2dlci53YXJuKGBMb2NhbCBhdXRoZW50aWNhdGlvbiBmYWlsZWQ6IFVzZXIgbm90IGZvdW5kOiAke3VzZXJuYW1lfWApO1xuXHRcdFx0XHRcdHJldHVybiBkb25lKG51bGwsIGZhbHNlLCB7IG1lc3NhZ2U6ICdVc2VyIG5vdCBmb3VuZCcgfSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBzZWNyZXRzID0gYXdhaXQgZ2V0U2VjcmV0cygpOyAvLyBHZXQgdGhlIHNlY3JldHNcblxuXHRcdFx0XHQvLyBVc2UgdGhlIGNvbXBhcmVQYXNzd29yZCBtZXRob2Qgd2l0aCBhbGwgbmVjZXNzYXJ5IGRlcGVuZGVuY2llc1xuXHRcdFx0XHRjb25zdCBpc01hdGNoID0gYXdhaXQgdXNlci5jb21wYXJlUGFzc3dvcmQocGFzc3dvcmQsIGFyZ29uMiwgc2VjcmV0cyk7XG5cblx0XHRcdFx0aWYgKGlzTWF0Y2gpIHtcblx0XHRcdFx0XHRsb2dnZXIuaW5mbyhgTG9jYWwgYXV0aGVudGljYXRpb24gc3VjY2Vzc2Z1bCBmb3IgdXNlcjogJHt1c2VybmFtZX1gKTtcblx0XHRcdFx0XHRyZXR1cm4gZG9uZShudWxsLCB1c2VyKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsb2dnZXIud2Fybihcblx0XHRcdFx0XHRcdGBMb2NhbCBhdXRoZW50aWNhdGlvbiBmYWlsZWQ6IEluY29ycmVjdCBwYXNzd29yZCBmb3IgdXNlcjogJHt1c2VybmFtZX1gXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gZG9uZShudWxsLCBmYWxzZSwgeyBtZXNzYWdlOiAnSW5jb3JyZWN0IHBhc3N3b3JkJyB9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0XHRgTG9jYWwgYXV0aGVudGljYXRpb24gZXJyb3IgZm9yIHVzZXIgJHt1c2VybmFtZX06IEVycm9yOiAke2Vycn1gLFxuXHRcdFx0XHQpO1xuXHRcdFx0XHRyZXR1cm4gZG9uZShlcnIpO1xuXHRcdFx0fVxuXHRcdH0pXG5cdCk7XG59XG4iXX0=
