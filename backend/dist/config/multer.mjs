import { validateDependencies } from '../utils/validateDependencies.mjs';
import { processError } from '../utils/processError.mjs';
export function createMulterUpload({
	multer,
	path,
	storageDir,
	allowedMimeTypes,
	allowedExtensions,
	fileSizeLimit,
	logger
}) {
	try {
		validateDependencies(
			[
				{ name: 'multer', instance: multer },
				{ name: 'path', instance: path },
				{ name: 'storageDir', instance: storageDir },
				{ name: 'allowedMimeTypes', instance: allowedMimeTypes },
				{ name: 'allowedExtensions', instance: allowedExtensions },
				{ name: 'fileSizeLimit', instance: fileSizeLimit },
				{ name: 'logger', instance: logger }
			],
			logger || console
		);
		const storage = multer.diskStorage({
			destination: (req, file, cb) => {
				cb(null, storageDir);
			},
			filename: (req, file, cb) => {
				const uniqueSuffix = `${Date.now()}-${Math.round(Math.random() * 1e9)}`;
				cb(null, `${uniqueSuffix}-${file.originalname}`);
			}
		});
		const fileFilter = (req, file, cb) => {
			const ext = path.extname(file.originalname).toLowerCase();
			if (
				allowedMimeTypes.includes(file.mimetype) &&
				allowedExtensions.includes(ext)
			) {
				cb(null, true);
			} else {
				cb(null, false);
			}
		};
		const multerLimits = {
			fileSize: fileSizeLimit
		};
		return multer({
			storage,
			fileFilter,
			limits: multerLimits
		});
	} catch (error) {
		processError(error, logger || console);
		throw error;
	}
}
export default createMulterUpload;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZy9tdWx0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDckUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBWXJELE1BQU0sVUFBVSxrQkFBa0IsQ0FBQyxFQUNsQyxNQUFNLEVBQ04sSUFBSSxFQUNKLFVBQVUsRUFDVixnQkFBZ0IsRUFDaEIsaUJBQWlCLEVBQ2pCLGFBQWEsRUFDYixNQUFNLEVBQ2M7SUFDcEIsSUFBSSxDQUFDO1FBQ0osb0JBQW9CLENBQ25CO1lBQ0MsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUU7WUFDcEMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7WUFDaEMsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUU7WUFDNUMsRUFBRSxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFO1lBQ3hELEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBRTtZQUMxRCxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRTtZQUNsRCxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRTtTQUNwQyxFQUNELE1BQU0sSUFBSSxPQUFPLENBQ2pCLENBQUM7UUFFRixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO1lBQ2xDLFdBQVcsRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUU7Z0JBQzlCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDdEIsQ0FBQztZQUNELFFBQVEsRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUU7Z0JBQzNCLE1BQU0sWUFBWSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUM7Z0JBQ3hFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxZQUFZLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7WUFDbEQsQ0FBQztTQUNELENBQUMsQ0FBQztRQUVILE1BQU0sVUFBVSxHQUFHLENBQ2xCLEdBQVksRUFDWixJQUF5QixFQUN6QixFQUFzQixFQUNyQixFQUFFO1lBQ0gsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDMUQsSUFDQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztnQkFDeEMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUM5QixDQUFDO2dCQUNGLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDaEIsQ0FBQztpQkFBTSxDQUFDO2dCQUNQLEVBQUUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDakIsQ0FBQztRQUNGLENBQUMsQ0FBQztRQUVGLE1BQU0sWUFBWSxHQUFHO1lBQ3BCLFFBQVEsRUFBRSxhQUFhO1NBQ3ZCLENBQUM7UUFFRixPQUFPLE1BQU0sQ0FBQztZQUNiLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFVBQVUsRUFBRSxVQUFVO1lBQ3RCLE1BQU0sRUFBRSxZQUFZO1NBQ3BCLENBQUMsQ0FBQztJQUNKLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sS0FBSyxDQUFDO0lBQ2IsQ0FBQztBQUNGLENBQUM7QUFFRCxlQUFlLGtCQUFrQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IG11bHRlciwgeyBGaWxlRmlsdGVyQ2FsbGJhY2ssIE11bHRlciB9IGZyb20gJ211bHRlcic7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IHZhbGlkYXRlRGVwZW5kZW5jaWVzIH0gZnJvbSAnLi4vdXRpbHMvdmFsaWRhdGVEZXBlbmRlbmNpZXMnO1xuaW1wb3J0IHsgcHJvY2Vzc0Vycm9yIH0gZnJvbSAnLi4vdXRpbHMvcHJvY2Vzc0Vycm9yJztcblxuZXhwb3J0IGludGVyZmFjZSBNdWx0ZXJEZXBlbmRlbmNpZXMge1xuXHRyZWFkb25seSBtdWx0ZXI6IHR5cGVvZiBtdWx0ZXI7XG5cdHJlYWRvbmx5IHBhdGg6IHR5cGVvZiBwYXRoO1xuXHRyZWFkb25seSBzdG9yYWdlRGlyOiBzdHJpbmc7XG5cdHJlYWRvbmx5IGFsbG93ZWRNaW1lVHlwZXM6IHN0cmluZ1tdO1xuXHRyZWFkb25seSBhbGxvd2VkRXh0ZW5zaW9uczogc3RyaW5nW107XG5cdHJlYWRvbmx5IGZpbGVTaXplTGltaXQ6IG51bWJlcjtcblx0cmVhZG9ubHkgbG9nZ2VyOiBMb2dnZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNdWx0ZXJVcGxvYWQoe1xuXHRtdWx0ZXIsXG5cdHBhdGgsXG5cdHN0b3JhZ2VEaXIsXG5cdGFsbG93ZWRNaW1lVHlwZXMsXG5cdGFsbG93ZWRFeHRlbnNpb25zLFxuXHRmaWxlU2l6ZUxpbWl0LFxuXHRsb2dnZXJcbn06IE11bHRlckRlcGVuZGVuY2llcyk6IE11bHRlciB7XG5cdHRyeSB7XG5cdFx0dmFsaWRhdGVEZXBlbmRlbmNpZXMoXG5cdFx0XHRbXG5cdFx0XHRcdHsgbmFtZTogJ211bHRlcicsIGluc3RhbmNlOiBtdWx0ZXIgfSxcblx0XHRcdFx0eyBuYW1lOiAncGF0aCcsIGluc3RhbmNlOiBwYXRoIH0sXG5cdFx0XHRcdHsgbmFtZTogJ3N0b3JhZ2VEaXInLCBpbnN0YW5jZTogc3RvcmFnZURpciB9LFxuXHRcdFx0XHR7IG5hbWU6ICdhbGxvd2VkTWltZVR5cGVzJywgaW5zdGFuY2U6IGFsbG93ZWRNaW1lVHlwZXMgfSxcblx0XHRcdFx0eyBuYW1lOiAnYWxsb3dlZEV4dGVuc2lvbnMnLCBpbnN0YW5jZTogYWxsb3dlZEV4dGVuc2lvbnMgfSxcblx0XHRcdFx0eyBuYW1lOiAnZmlsZVNpemVMaW1pdCcsIGluc3RhbmNlOiBmaWxlU2l6ZUxpbWl0IH0sXG5cdFx0XHRcdHsgbmFtZTogJ2xvZ2dlcicsIGluc3RhbmNlOiBsb2dnZXIgfVxuXHRcdFx0XSxcblx0XHRcdGxvZ2dlciB8fCBjb25zb2xlXG5cdFx0KTtcblxuXHRcdGNvbnN0IHN0b3JhZ2UgPSBtdWx0ZXIuZGlza1N0b3JhZ2Uoe1xuXHRcdFx0ZGVzdGluYXRpb246IChyZXEsIGZpbGUsIGNiKSA9PiB7XG5cdFx0XHRcdGNiKG51bGwsIHN0b3JhZ2VEaXIpO1xuXHRcdFx0fSxcblx0XHRcdGZpbGVuYW1lOiAocmVxLCBmaWxlLCBjYikgPT4ge1xuXHRcdFx0XHRjb25zdCB1bmlxdWVTdWZmaXggPSBgJHtEYXRlLm5vdygpfS0ke01hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDFlOSl9YDtcblx0XHRcdFx0Y2IobnVsbCwgYCR7dW5pcXVlU3VmZml4fS0ke2ZpbGUub3JpZ2luYWxuYW1lfWApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Y29uc3QgZmlsZUZpbHRlciA9IChcblx0XHRcdHJlcTogUmVxdWVzdCxcblx0XHRcdGZpbGU6IEV4cHJlc3MuTXVsdGVyLkZpbGUsXG5cdFx0XHRjYjogRmlsZUZpbHRlckNhbGxiYWNrXG5cdFx0KSA9PiB7XG5cdFx0XHRjb25zdCBleHQgPSBwYXRoLmV4dG5hbWUoZmlsZS5vcmlnaW5hbG5hbWUpLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdGFsbG93ZWRNaW1lVHlwZXMuaW5jbHVkZXMoZmlsZS5taW1ldHlwZSkgJiZcblx0XHRcdFx0YWxsb3dlZEV4dGVuc2lvbnMuaW5jbHVkZXMoZXh0KVxuXHRcdFx0KSB7XG5cdFx0XHRcdGNiKG51bGwsIHRydWUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2IobnVsbCwgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRjb25zdCBtdWx0ZXJMaW1pdHMgPSB7XG5cdFx0XHRmaWxlU2l6ZTogZmlsZVNpemVMaW1pdFxuXHRcdH07XG5cblx0XHRyZXR1cm4gbXVsdGVyKHtcblx0XHRcdHN0b3JhZ2U6IHN0b3JhZ2UsXG5cdFx0XHRmaWxlRmlsdGVyOiBmaWxlRmlsdGVyLFxuXHRcdFx0bGltaXRzOiBtdWx0ZXJMaW1pdHNcblx0XHR9KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRwcm9jZXNzRXJyb3IoZXJyb3IsIGxvZ2dlciB8fCBjb25zb2xlKTtcblx0XHR0aHJvdyBlcnJvcjtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVNdWx0ZXJVcGxvYWQ7XG4iXX0=
