import { execSync } from 'child_process';
import path from 'path';
import { __dirname } from './loadEnv.js';
import setupLogger from './logger.js';
const logger = await setupLogger();
async function decryptFile(encryptedFilePath) {
	try {
		const decryptedFile = execSync(
			`sops -d --output-type json ${encryptedFilePath}`
		).toString();
		return decryptedFile;
	} catch (err) {
		logger.error('Error decrypting file from SOPS: ', err);
		throw err;
	}
}
async function decryptDataFiles() {
	try {
		const filePaths = [
			process.env.SERVER_DATA_FILE_PATH_1,
			process.env.SERVER_DATA_FILE_PATH_2,
			process.env.SERVER_DATA_FILE_PATH_3,
			process.env.SERVER_DATA_FILE_PATH_4
		];
		const decryptedFiles = {};
		for (const [index, filePath] of filePaths.entries()) {
			if (filePath) {
				decryptedFiles[`files${index + 1}`] = execSync(
					`sops -d --output-type json ${filePath}`
				).toString();
			} else {
				logger.warn(
					`SERVER_DATA_FILE_PATH_${index + 1} is not defined`
				);
			}
		}
		return decryptedFiles;
	} catch (err) {
		logger.error('Error decrypting files from backend data folder: ', err);
		throw err;
	}
}
async function getSSLKeys() {
	try {
		const keyPath = path.join(
			__dirname,
			'./keys/ssl/guestbook_key.pem.gpg'
		);
		const certPath = path.join(
			__dirname,
			'./keys/ssl/guestbook_cert.pem.gpg'
		);
		const decryptedKey = await decryptFile(keyPath);
		const decryptedCert = await decryptFile(certPath);
		return {
			key: decryptedKey,
			cert: decryptedCert
		};
	} catch (err) {
		logger.error('Error retrieving SSL keys from SOPS: ', err);
		throw err;
	}
}
export default { decryptDataFiles, getSSLKeys };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29wcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25maWcvc29wcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3RDLE9BQU8sV0FBVyxNQUFNLFVBQVUsQ0FBQztBQUVuQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFdBQVcsRUFBRSxDQUFDO0FBRW5DLEtBQUssVUFBVSxXQUFXLENBQUMsaUJBQXlCO0lBQ25ELElBQUksQ0FBQztRQUNKLElBQUksYUFBYSxHQUFHLFFBQVEsQ0FDM0IsOEJBQThCLGlCQUFpQixFQUFFLENBQ2pELENBQUMsUUFBUSxFQUFFLENBQUM7UUFDYixPQUFPLGFBQWEsQ0FBQztJQUN0QixDQUFDO0lBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNkLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUNBQW1DLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDdkQsTUFBTSxHQUFHLENBQUM7SUFDWCxDQUFDO0FBQ0YsQ0FBQztBQUVELEtBQUssVUFBVSxnQkFBZ0I7SUFDOUIsSUFBSSxDQUFDO1FBQ0osTUFBTSxTQUFTLEdBQUc7WUFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUI7WUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUI7WUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUI7WUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUI7U0FDbkMsQ0FBQztRQUVGLE1BQU0sY0FBYyxHQUE4QixFQUFFLENBQUM7UUFFckQsS0FBSyxJQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDO1lBQ25ELElBQUksUUFBUSxFQUFFLENBQUM7Z0JBQ2QsY0FBYyxDQUFDLFFBQVEsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUM3Qyw4QkFBOEIsUUFBUSxFQUFFLENBQ3hDLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDZCxDQUFDO2lCQUFNLENBQUM7Z0JBQ1AsTUFBTSxDQUFDLElBQUksQ0FDVix5QkFBeUIsS0FBSyxHQUFHLENBQUMsaUJBQWlCLENBQ25ELENBQUM7WUFDSCxDQUFDO1FBQ0YsQ0FBQztRQUVELE9BQU8sY0FBYyxDQUFDO0lBQ3ZCLENBQUM7SUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2QsTUFBTSxDQUFDLEtBQUssQ0FBQyxtREFBbUQsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN2RSxNQUFNLEdBQUcsQ0FBQztJQUNYLENBQUM7QUFDRixDQUFDO0FBRUQsS0FBSyxVQUFVLFVBQVU7SUFDeEIsSUFBSSxDQUFDO1FBQ0osTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FDeEIsU0FBUyxFQUNULGtDQUFrQyxDQUNsQyxDQUFDO1FBQ0YsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FDekIsU0FBUyxFQUNULG1DQUFtQyxDQUNuQyxDQUFDO1FBQ0YsTUFBTSxZQUFZLEdBQUcsTUFBTSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDaEQsTUFBTSxhQUFhLEdBQUcsTUFBTSxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFbEQsT0FBTztZQUNOLEdBQUcsRUFBRSxZQUFZO1lBQ2pCLElBQUksRUFBRSxhQUFhO1NBQ25CLENBQUM7SUFDSCxDQUFDO0lBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNkLE1BQU0sQ0FBQyxLQUFLLENBQUMsdUNBQXVDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDM0QsTUFBTSxHQUFHLENBQUM7SUFDWCxDQUFDO0FBQ0YsQ0FBQztBQUVELGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWNTeW5jIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IF9fZGlybmFtZSB9IGZyb20gJy4vbG9hZEVudic7XG5pbXBvcnQgc2V0dXBMb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuXG5jb25zdCBsb2dnZXIgPSBhd2FpdCBzZXR1cExvZ2dlcigpO1xuXG5hc3luYyBmdW5jdGlvbiBkZWNyeXB0RmlsZShlbmNyeXB0ZWRGaWxlUGF0aDogc3RyaW5nKSB7XG5cdHRyeSB7XG5cdFx0bGV0IGRlY3J5cHRlZEZpbGUgPSBleGVjU3luYyhcblx0XHRcdGBzb3BzIC1kIC0tb3V0cHV0LXR5cGUganNvbiAke2VuY3J5cHRlZEZpbGVQYXRofWBcblx0XHQpLnRvU3RyaW5nKCk7XG5cdFx0cmV0dXJuIGRlY3J5cHRlZEZpbGU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdGxvZ2dlci5lcnJvcignRXJyb3IgZGVjcnlwdGluZyBmaWxlIGZyb20gU09QUzogJywgZXJyKTtcblx0XHR0aHJvdyBlcnI7XG5cdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZGVjcnlwdERhdGFGaWxlcygpIHtcblx0dHJ5IHtcblx0XHRjb25zdCBmaWxlUGF0aHMgPSBbXG5cdFx0XHRwcm9jZXNzLmVudi5TRVJWRVJfREFUQV9GSUxFX1BBVEhfMSxcblx0XHRcdHByb2Nlc3MuZW52LlNFUlZFUl9EQVRBX0ZJTEVfUEFUSF8yLFxuXHRcdFx0cHJvY2Vzcy5lbnYuU0VSVkVSX0RBVEFfRklMRV9QQVRIXzMsXG5cdFx0XHRwcm9jZXNzLmVudi5TRVJWRVJfREFUQV9GSUxFX1BBVEhfNFxuXHRcdF07XG5cblx0XHRjb25zdCBkZWNyeXB0ZWRGaWxlczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xuXG5cdFx0Zm9yIChsZXQgW2luZGV4LCBmaWxlUGF0aF0gb2YgZmlsZVBhdGhzLmVudHJpZXMoKSkge1xuXHRcdFx0aWYgKGZpbGVQYXRoKSB7XG5cdFx0XHRcdGRlY3J5cHRlZEZpbGVzW2BmaWxlcyR7aW5kZXggKyAxfWBdID0gZXhlY1N5bmMoXG5cdFx0XHRcdFx0YHNvcHMgLWQgLS1vdXRwdXQtdHlwZSBqc29uICR7ZmlsZVBhdGh9YFxuXHRcdFx0XHQpLnRvU3RyaW5nKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRsb2dnZXIud2Fybihcblx0XHRcdFx0XHRgU0VSVkVSX0RBVEFfRklMRV9QQVRIXyR7aW5kZXggKyAxfSBpcyBub3QgZGVmaW5lZGBcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZGVjcnlwdGVkRmlsZXM7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdGxvZ2dlci5lcnJvcignRXJyb3IgZGVjcnlwdGluZyBmaWxlcyBmcm9tIGJhY2tlbmQgZGF0YSBmb2xkZXI6ICcsIGVycik7XG5cdFx0dGhyb3cgZXJyO1xuXHR9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFNTTEtleXMoKSB7XG5cdHRyeSB7XG5cdFx0Y29uc3Qga2V5UGF0aCA9IHBhdGguam9pbihcblx0XHRcdF9fZGlybmFtZSxcblx0XHRcdCcuL2tleXMvc3NsL2d1ZXN0Ym9va19rZXkucGVtLmdwZydcblx0XHQpO1xuXHRcdGNvbnN0IGNlcnRQYXRoID0gcGF0aC5qb2luKFxuXHRcdFx0X19kaXJuYW1lLFxuXHRcdFx0Jy4va2V5cy9zc2wvZ3Vlc3Rib29rX2NlcnQucGVtLmdwZydcblx0XHQpO1xuXHRcdGNvbnN0IGRlY3J5cHRlZEtleSA9IGF3YWl0IGRlY3J5cHRGaWxlKGtleVBhdGgpO1xuXHRcdGNvbnN0IGRlY3J5cHRlZENlcnQgPSBhd2FpdCBkZWNyeXB0RmlsZShjZXJ0UGF0aCk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0a2V5OiBkZWNyeXB0ZWRLZXksXG5cdFx0XHRjZXJ0OiBkZWNyeXB0ZWRDZXJ0XG5cdFx0fTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0bG9nZ2VyLmVycm9yKCdFcnJvciByZXRyaWV2aW5nIFNTTCBrZXlzIGZyb20gU09QUzogJywgZXJyKTtcblx0XHR0aHJvdyBlcnI7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgeyBkZWNyeXB0RGF0YUZpbGVzLCBnZXRTU0xLZXlzIH07XG4iXX0=
