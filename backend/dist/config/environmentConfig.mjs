import { processError } from '../utils/processError.mjs';
import { validateDependencies } from '../utils/validateDependencies.mjs';
import { config } from 'dotenv';
import path from 'path';
export function loadEnv() {
	try {
		const envPath = path.join(process.cwd(), './backend.dev.env');
		console.log(`Loading environment variables from ${envPath}`);
		config({ path: envPath });
	} catch (error) {
		processError(error, console);
	}
}
loadEnv();
export const environmentVariables = {
	backendLogExportPath: process.env.BACKEND_LOG_EXPORT_PATH || '',
	emailUser: process.env.EMAIL_USER || '',
	featureApiRoutesCsrf: process.env.FEATURE_API_ROUTES_CSRF === 'true',
	featureDbSync: process.env.FEATURE_DB_SYNC === 'true',
	featureDecryptKeys: process.env.FEATURE_DECRYPT_KEYS === 'true',
	featureEnableErrorHandler:
		process.env.FEATURE_ENABLE_ERROR_HANDLER === 'true',
	featureEnableIpBlacklist:
		process.env.FEATURE_ENABLE_IP_BLACKLIST === 'true',
	featureEnableJwtAuth: process.env.FEATURE_ENABLE_JWT_AUTH === 'true',
	featureEnableRateLimit: process.env.FEATURE_ENABLE_RATE_LIMIT === 'true',
	featureEnableRedis: process.env.FEATURE_ENABLE_REDIS === 'true',
	featureEnableSession: process.env.FEATURE_ENABLE_SESSION === 'true',
	featureEnableSsl: process.env.FEATURE_ENABLE_SSL === 'true',
	featureHttpsRedirect: process.env.FEATURE_HTTPS_REDIRECT === 'true',
	featureLoadTestRoutes: process.env.FEATURE_LOAD_TEST_ROUTES === 'true',
	featureSequelizeLogging: process.env.FEATURE_SEQUELIZE_LOGGING === 'true',
	frontendAppJsPath: process.env.FRONTEND_APP_JS_PATH || '',
	frontendBrowserConfigXmlPath:
		process.env.FRONTEND_BROWSER_CONFIG_XML_PATH || '',
	frontendCssPath: process.env.FRONTEND_CSS_PATH || '',
	frontendFontsPath: process.env.FRONTEND_FONTS_PATH || '',
	frontendHumansMdPath: process.env.FRONTEND_HUMANS_MD_PATH || '',
	frontendIconsPath: process.env.FRONTEND_ICONS_PATH || '',
	frontendImagesPath: process.env.FRONTEND_IMAGES_PATH || '',
	frontendJsPath: process.env.FRONTEND_JS_PATH || '',
	frontendKeysPath: process.env.FRONTEND_KEYS_PATH || '',
	frontendLogosPath: process.env.FRONTEND_LOGOS_PATH || '',
	frontendRobotsTxtPath: process.env.FRONTEND_ROBOTS_TXT_PATH || '',
	frontendSecurityMdPath: process.env.FRONTEND_SECURITY_MD_PATH || '',
	frontendSecretsPath: process.env.FRONTEND_SECRETS_PATH || '',
	frontendSitemapXmlPath: process.env.FRONTEND_SITEMAP_XML_PATH || '',
	ipBlacklistPath: process.env.IP_BLACKLIST_PATH || '',
	loggerLevel: process.env.LOGGER || '1',
	logLevel: process.env.LOG_LEVEL,
	nodeEnv: process.env.NODE_ENV,
	serverDataFilePath1: process.env.SERVER_DATA_FILE_PATH_1 || '',
	serverDataFilePath2: process.env.SERVER_DATA_FILE_PATH_2 || '',
	serverDataFilePath3: process.env.SERVER_DATA_FILE_PATH_3 || '',
	serverDataFilePath4: process.env.SERVER_DATA_FILE_PATH_4 || '',
	serverLogPath: process.env.SERVER_LOG_PATH || '',
	serverNpmLogPath: process.env.SERVER_NPM_LOG_PATH || '',
	serverPort: parseInt(process.env.SERVER_PORT || '3000', 10),
	serverSslCertPath: process.env.SERVER_SSL_CERT_PATH || '',
	serverSslKeyPath: process.env.SERVER_SSL_KEY_PATH || '',
	serviceName: process.env.SERVICE_NAME || '',
	staticRootPath: process.env.STATIC_ROOT_PATH || '',
	yubicoApiUrl: process.env.YUBICO_API_URL || ''
};
export const FeatureFlagNames = {
	API_ROUTES_CSR: 'FEATURE_API_ROUTES_CSRF',
	DB_SYNC: 'FEATURE_DB_SYNC',
	DECRYPT_KEYS: 'FEATURE_DECRYPT_KEYS',
	ENABLE_CSRF: 'FEATURE_ENABLE_CSRF',
	ENABLE_ERROR_HANDLER: 'FEATURE_ENABLE_ERROR_HANDLER',
	ENABLE_IP_BLACKLIST: 'FEATURE_ENABLE_IP_BLACKLIST',
	ENABLE_JWT_AUTH: 'FEATURE_ENABLE_JWT_AUTH',
	ENABLE_RATE_LIMIT: 'FEATURE_ENABLE_RATE_LIMIT',
	ENABLE_REDIS: 'FEATURE_ENABLE_REDIS',
	ENABLE_SSL: 'FEATURE_ENABLE_SSL',
	HTTPS_REDIRECT: 'FEATURE_HTTPS_REDIRECT',
	LOAD_TEST_ROUTES: 'FEATURE_LOAD_TEST_ROUTES',
	SECURE_HEADERS: 'FEATURE_SECURE_HEADERS',
	SEQUELIZE_LOGGING: 'FEATURE_SEQUELIZE_LOGGING'
};
export function parseBoolean(value, logger) {
	try {
		validateDependencies(
			[
				{ name: 'logger', instance: logger },
				{ name: 'value', instance: value }
			],
			logger
		);
		if (value === undefined) {
			logger.warn('Feature flag value is undefined. Defaulting to false');
			return false;
		}
		if (typeof value === 'string') {
			return value.toLowerCase() === 'true';
		}
		return value === true;
	} catch (error) {
		processError(error, logger || console);
		return false;
	}
}
export function getFeatureFlags(logger, env = process.env) {
	try {
		validateDependencies(
			[
				{ name: 'logger', instance: logger },
				{ name: 'env', instance: env }
			],
			logger || console
		);
		return {
			apiRoutesCsrfFlag: parseBoolean(
				env.FEATURE_API_ROUTES_CSRF,
				logger
			),
			dbSyncFlag: parseBoolean(env.FEATURE_DB_SYNC, logger),
			decryptKeysFlag: parseBoolean(env.FEATURE_DECRYPT_KEYS, logger),
			enableErrorHandlerFlag: parseBoolean(
				env.FEATURE_ENABLE_ERROR_HANDLER,
				logger
			),
			enableIpBlacklistFlag: parseBoolean(
				env.FEATURE_ENABLE_IP_BLACKLIST,
				logger
			),
			enableJwtAuthFlag: parseBoolean(
				env.FEATURE_ENABLE_JWT_AUTH,
				logger
			),
			enableRateLimitFlag: parseBoolean(
				env.FEATURE_ENABLE_RATE_LIMIT,
				logger
			),
			enableRedisFlag: parseBoolean(env.FEATURE_ENABLE_REDIS, logger),
			enableSslFlag: parseBoolean(env.FEATURE_ENABLE_SSL, logger),
			httpsRedirectFlag: parseBoolean(env.FEATURE_HTTPS_REDIRECT, logger),
			loadTestRoutesFlag: parseBoolean(
				env.FEATURE_LOAD_TEST_ROUTES,
				logger
			),
			sequelizeLoggingFlag: parseBoolean(
				env.FEATURE_SEQUELIZE_LOGGING,
				logger
			)
		};
	} catch (error) {
		processError(error, logger || console);
		logger.error(`Returning 'false' for all feature flags`);
		return {
			apiRoutesCsrfFlag: false,
			dbSyncFlag: false,
			decryptKeysFlag: false,
			enableErrorHandlerFlag: false,
			enableIpBlacklistFlag: false,
			enableJwtAuthFlag: false,
			enableRateLimitFlag: false,
			enableRedisFlag: false,
			enableSslFlag: false,
			httpsRedirectFlag: false,
			loadTestRoutesFlag: false,
			sequelizeLoggingFlag: false
		};
	}
}
export function createFeatureEnabler(logger) {
	try {
		validateDependencies(
			[{ name: 'logger', instance: logger }],
			logger || console
		);
		return {
			enableFeatureBasedOnFlag(flag, description, callback) {
				if (flag) {
					logger.info(`Enabling ${description} (flag is ${flag})`);
					callback();
				} else {
					logger.info(`Skipping ${description} (flag is ${flag})`);
				}
			},
			enableFeatureWithProdOverride(flag, description, callback) {
				if (process.env.NODE_ENV === 'production') {
					logger.info(
						`Enabling ${description} in production regardless of flag value.`
					);
					callback();
				} else if (flag) {
					logger.info(`Enabling ${description} (flag is ${flag})`);
					callback();
				} else {
					logger.info(`Skipping ${description} (flag is ${flag})`);
				}
			}
		};
	} catch (error) {
		processError(error, logger || console);
		return {
			enableFeatureBasedOnFlag: () => {},
			enableFeatureWithProdOverride: () => {}
		};
	}
}
//# sourceMappingURL=data:application/json;base64,
