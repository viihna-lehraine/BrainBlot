import { processError } from '../utils/processError';
import { validateDependencies } from '../utils/validateDependencies';
import { config } from 'dotenv';
import path from 'path';
export function loadEnv() {
	try {
		const envPath = path.join(process.cwd(), './backend.dev.env');
		console.log(`Loading environment variables from ${envPath}`);
		config({ path: envPath });
	} catch (error) {
		processError(error, console);
	}
}
loadEnv();
export const environmentVariables = {
	backendLogExportPath: process.env.BACKEND_LOG_EXPORT_PATH || '',
	emailUser: process.env.EMAIL_USER || '',
	featureApiRoutesCsrf: process.env.FEATURE_API_ROUTES_CSRF === 'true',
	featureDbSync: process.env.FEATURE_DB_SYNC === 'true',
	featureDecryptKeys: process.env.FEATURE_DECRYPT_KEYS === 'true',
	featureEnableErrorHandler:
		process.env.FEATURE_ENABLE_ERROR_HANDLER === 'true',
	featureEnableIpBlacklist:
		process.env.FEATURE_ENABLE_IP_BLACKLIST === 'true',
	featureEnableJwtAuth: process.env.FEATURE_ENABLE_JWT_AUTH === 'true',
	featureEnableRateLimit: process.env.FEATURE_ENABLE_RATE_LIMIT === 'true',
	featureEnableRedis: process.env.FEATURE_ENABLE_REDIS === 'true',
	featureEnableSession: process.env.FEATURE_ENABLE_SESSION === 'true',
	featureEnableSsl: process.env.FEATURE_ENABLE_SSL === 'true',
	featureHttpsRedirect: process.env.FEATURE_HTTPS_REDIRECT === 'true',
	featureLoadTestRoutes: process.env.FEATURE_LOAD_TEST_ROUTES === 'true',
	featureSequelizeLogging: process.env.FEATURE_SEQUELIZE_LOGGING === 'true',
	frontendAppJsPath: process.env.FRONTEND_APP_JS_PATH || '',
	frontendBrowserConfigXmlPath:
		process.env.FRONTEND_BROWSER_CONFIG_XML_PATH || '',
	frontendCssPath: process.env.FRONTEND_CSS_PATH || '',
	frontendFontsPath: process.env.FRONTEND_FONTS_PATH || '',
	frontendHumansMdPath: process.env.FRONTEND_HUMANS_MD_PATH || '',
	frontendIconsPath: process.env.FRONTEND_ICONS_PATH || '',
	frontendImagesPath: process.env.FRONTEND_IMAGES_PATH || '',
	frontendJsPath: process.env.FRONTEND_JS_PATH || '',
	frontendKeysPath: process.env.FRONTEND_KEYS_PATH || '',
	frontendLogosPath: process.env.FRONTEND_LOGOS_PATH || '',
	frontendRobotsTxtPath: process.env.FRONTEND_ROBOTS_TXT_PATH || '',
	frontendSecurityMdPath: process.env.FRONTEND_SECURITY_MD_PATH || '',
	frontendSecretsPath: process.env.FRONTEND_SECRETS_PATH || '',
	frontendSitemapXmlPath: process.env.FRONTEND_SITEMAP_XML_PATH || '',
	ipBlacklistPath: process.env.IP_BLACKLIST_PATH || '',
	loggerLevel: process.env.LOGGER || '1',
	logLevel: process.env.LOG_LEVEL,
	nodeEnv: process.env.NODE_ENV,
	serverDataFilePath1: process.env.SERVER_DATA_FILE_PATH_1 || '',
	serverDataFilePath2: process.env.SERVER_DATA_FILE_PATH_2 || '',
	serverDataFilePath3: process.env.SERVER_DATA_FILE_PATH_3 || '',
	serverDataFilePath4: process.env.SERVER_DATA_FILE_PATH_4 || '',
	serverLogPath: process.env.SERVER_LOG_PATH || '',
	serverNpmLogPath: process.env.SERVER_NPM_LOG_PATH || '',
	serverPort: parseInt(process.env.SERVER_PORT || '3000', 10),
	serverSslCertPath: process.env.SERVER_SSL_CERT_PATH || '',
	serverSslKeyPath: process.env.SERVER_SSL_KEY_PATH || '',
	serviceName: process.env.SERVICE_NAME || '',
	staticRootPath: process.env.STATIC_ROOT_PATH || '',
	yubicoApiUrl: process.env.YUBICO_API_URL || ''
};
export var FeatureFlagNames;
(function (FeatureFlagNames) {
	FeatureFlagNames['API_ROUTES_CSRF'] = 'FEATURE_API_ROUTES_CSRF';
	FeatureFlagNames['DB_SYNC'] = 'FEATURE_DB_SYNC';
	FeatureFlagNames['DECRYPT_KEYS'] = 'FEATURE_DECRYPT_KEYS';
	FeatureFlagNames['ENABLE_CSRF'] = 'FEATURE_ENABLE_CSRF';
	FeatureFlagNames['ENABLE_ERROR_HANDLER'] = 'FEATURE_ENABLE_ERROR_HANDLER';
	FeatureFlagNames['ENABLE_IP_BLACKLIST'] = 'FEATURE_ENABLE_IP_BLACKLIST';
	FeatureFlagNames['ENABLE_JWT_AUTH'] = 'FEATURE_ENABLE_JWT_AUTH';
	FeatureFlagNames['ENABLE_RATE_LIMIT'] = 'FEATURE_ENABLE_RATE_LIMIT';
	FeatureFlagNames['ENABLE_REDIS'] = 'FEATURE_ENABLE_REDIS';
	FeatureFlagNames['ENABLE_SSL'] = 'FEATURE_ENABLE_SSL';
	FeatureFlagNames['HTTPS_REDIRECT'] = 'FEATURE_HTTPS_REDIRECT';
	FeatureFlagNames['LOAD_TEST_ROUTES'] = 'FEATURE_LOAD_TEST_ROUTES';
	FeatureFlagNames['SECURE_HEADERS'] = 'FEATURE_SECURE_HEADERS';
	FeatureFlagNames['SEQUELIZE_LOGGING'] = 'FEATURE_SEQUELIZE_LOGGING';
})(FeatureFlagNames || (FeatureFlagNames = {}));
export function parseBoolean(value, logger) {
	try {
		validateDependencies(
			[
				{ name: 'logger', instance: logger },
				{ name: 'value', instance: value }
			],
			logger
		);
		if (value === undefined) {
			logger.warn('Feature flag value is undefined. Defaulting to false');
			return false;
		}
		if (typeof value === 'string') {
			return value.toLowerCase() === 'true';
		}
		return value === true;
	} catch (error) {
		processError(error, logger || console);
		return false;
	}
}
export function getFeatureFlags(logger, env = process.env) {
	try {
		validateDependencies(
			[
				{ name: 'logger', instance: logger },
				{ name: 'env', instance: env }
			],
			logger || console
		);
		return {
			apiRoutesCsrfFlag: parseBoolean(
				env.FEATURE_API_ROUTES_CSRF,
				logger
			),
			dbSyncFlag: parseBoolean(env.FEATURE_DB_SYNC, logger),
			decryptKeysFlag: parseBoolean(env.FEATURE_DECRYPT_KEYS, logger),
			enableErrorHandlerFlag: parseBoolean(
				env.FEATURE_ENABLE_ERROR_HANDLER,
				logger
			),
			enableIpBlacklistFlag: parseBoolean(
				env.FEATURE_ENABLE_IP_BLACKLIST,
				logger
			),
			enableJwtAuthFlag: parseBoolean(
				env.FEATURE_ENABLE_JWT_AUTH,
				logger
			),
			enableRateLimitFlag: parseBoolean(
				env.FEATURE_ENABLE_RATE_LIMIT,
				logger
			),
			enableRedisFlag: parseBoolean(env.FEATURE_ENABLE_REDIS, logger),
			enableSslFlag: parseBoolean(env.FEATURE_ENABLE_SSL, logger),
			httpsRedirectFlag: parseBoolean(env.FEATURE_HTTPS_REDIRECT, logger),
			loadTestRoutesFlag: parseBoolean(
				env.FEATURE_LOAD_TEST_ROUTES,
				logger
			),
			sequelizeLoggingFlag: parseBoolean(
				env.FEATURE_SEQUELIZE_LOGGING,
				logger
			)
		};
	} catch (error) {
		processError(error, logger || console);
		logger.error(`Returning 'false' for all feature flags`);
		return {
			apiRoutesCsrfFlag: false,
			dbSyncFlag: false,
			decryptKeysFlag: false,
			enableErrorHandlerFlag: false,
			enableIpBlacklistFlag: false,
			enableJwtAuthFlag: false,
			enableRateLimitFlag: false,
			enableRedisFlag: false,
			enableSslFlag: false,
			httpsRedirectFlag: false,
			loadTestRoutesFlag: false,
			sequelizeLoggingFlag: false
		};
	}
}
export function createFeatureEnabler(logger) {
	try {
		validateDependencies(
			[{ name: 'logger', instance: logger }],
			logger || console
		);
		return {
			enableFeatureBasedOnFlag(flag, description, callback) {
				if (flag) {
					logger.info(`Enabling ${description} (flag is ${flag})`);
					callback();
				} else {
					logger.info(`Skipping ${description} (flag is ${flag})`);
				}
			},
			enableFeatureWithProdOverride(flag, description, callback) {
				if (process.env.NODE_ENV === 'production') {
					logger.info(
						`Enabling ${description} in production regardless of flag value.`
					);
					callback();
				} else if (flag) {
					logger.info(`Enabling ${description} (flag is ${flag})`);
					callback();
				} else {
					logger.info(`Skipping ${description} (flag is ${flag})`);
				}
			}
		};
	} catch (error) {
		processError(error, logger || console);
		return {
			enableFeatureBasedOnFlag: () => {},
			enableFeatureWithProdOverride: () => {}
		};
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW52aXJvbm1lbnRDb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnL2Vudmlyb25tZW50Q29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNyRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2hDLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUd4QixNQUFNLFVBQVUsT0FBTztJQUN0QixJQUFJLENBQUM7UUFDSixNQUFNLE9BQU8sR0FDWixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1FBQy9DLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0NBQXNDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFFN0QsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsWUFBWSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM5QixDQUFDO0FBQ0YsQ0FBQztBQUVELE9BQU8sRUFBRSxDQUFDO0FBa0RWLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUE2QjtJQUM3RCxvQkFBb0IsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixJQUFJLEVBQUU7SUFDL0QsU0FBUyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLEVBQUU7SUFDdkMsb0JBQW9CLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsS0FBSyxNQUFNO0lBQ3BFLGFBQWEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsS0FBSyxNQUFNO0lBQ3JELGtCQUFrQixFQUFFLE9B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QUM7UUFDaEIsWUFBWSxDQUFDLEtBQUssRUFBRSxNQUFNLElBQUksT0FBTyxDQUFDLENBQUM7UUFDdkMsT0FBTztZQUNOLHdCQUF3QixFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUM7WUFDbEMsNkJBQTZCLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQztTQUN2QyxDQUFDO0lBQ0gsQ0FBQztBQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcm9jZXNzRXJyb3IgfSBmcm9tICcuLi91dGlscy9wcm9jZXNzRXJyb3InO1xuaW1wb3J0IHsgdmFsaWRhdGVEZXBlbmRlbmNpZXMgfSBmcm9tICcuLi91dGlscy92YWxpZGF0ZURlcGVuZGVuY2llcyc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICdkb3RlbnYnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuL2xvZ2dlcic7XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkRW52KCk6IHZvaWQge1xuXHR0cnkge1xuXHRcdGNvbnN0IGVudlBhdGggPVxuXHRcdFx0cGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICcuL2JhY2tlbmQuZGV2LmVudicpO1xuXHRcdGNvbnNvbGUubG9nKGBMb2FkaW5nIGVudmlyb25tZW50IHZhcmlhYmxlcyBmcm9tICR7ZW52UGF0aH1gKTtcblxuXHRcdGNvbmZpZyh7IHBhdGg6IGVudlBhdGggfSk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cHJvY2Vzc0Vycm9yKGVycm9yLCBjb25zb2xlKTtcblx0fVxufVxuXG5sb2FkRW52KCk7XG5cbmludGVyZmFjZSBFbnZpcm9ubWVudFZhcmlhYmxlVHlwZXMge1xuXHRiYWNrZW5kTG9nRXhwb3J0UGF0aDogc3RyaW5nO1xuXHRlbWFpbFVzZXI6IHN0cmluZztcblx0ZmVhdHVyZUFwaVJvdXRlc0NzcmY6IGJvb2xlYW47XG5cdGZlYXR1cmVEYlN5bmM6IGJvb2xlYW47XG5cdGZlYXR1cmVEZWNyeXB0S2V5czogYm9vbGVhbjtcblx0ZmVhdHVyZUVuYWJsZUVycm9ySGFuZGxlcjogYm9vbGVhbjtcblx0ZmVhdHVyZUVuYWJsZUlwQmxhY2tsaXN0OiBib29sZWFuO1xuXHRmZWF0dXJlRW5hYmxlSnd0QXV0aDogYm9vbGVhbjtcblx0ZmVhdHVyZUVuYWJsZVJhdGVMaW1pdDogYm9vbGVhbjtcblx0ZmVhdHVyZUVuYWJsZVJlZGlzOiBib29sZWFuO1xuXHRmZWF0dXJlRW5hYmxlU2Vzc2lvbjogYm9vbGVhbjtcblx0ZmVhdHVyZUVuYWJsZVNzbDogYm9vbGVhbjtcblx0ZmVhdHVyZUh0dHBzUmVkaXJlY3Q6IGJvb2xlYW47XG5cdGZlYXR1cmVMb2FkVGVzdFJvdXRlczogYm9vbGVhbjtcblx0ZmVhdHVyZVNlcXVlbGl6ZUxvZ2dpbmc6IGJvb2xlYW47XG5cdGZyb250ZW5kQXBwSnNQYXRoOiBzdHJpbmc7XG5cdGZyb250ZW5kQnJvd3NlckNvbmZpZ1htbFBhdGg6IHN0cmluZztcblx0ZnJvbnRlbmRDc3NQYXRoOiBzdHJpbmc7XG5cdGZyb250ZW5kRm9udHNQYXRoOiBzdHJpbmc7XG5cdGZyb250ZW5kSHVtYW5zTWRQYXRoOiBzdHJpbmc7XG5cdGZyb250ZW5kSWNvbnNQYXRoOiBzdHJpbmc7XG5cdGZyb250ZW5kSW1hZ2VzUGF0aDogc3RyaW5nO1xuXHRmcm9udGVuZEpzUGF0aDogc3RyaW5nO1xuXHRmcm9udGVuZEtleXNQYXRoOiBzdHJpbmc7XG5cdGZyb250ZW5kTG9nb3NQYXRoOiBzdHJpbmc7XG5cdGZyb250ZW5kUm9ib3RzVHh0UGF0aDogc3RyaW5nO1xuXHRmcm9udGVuZFNlY3VyaXR5TWRQYXRoOiBzdHJpbmc7XG5cdGZyb250ZW5kU2VjcmV0c1BhdGg6IHN0cmluZztcblx0ZnJvbnRlbmRTaXRlbWFwWG1sUGF0aDogc3RyaW5nO1xuXHRpcEJsYWNrbGlzdFBhdGg6IHN0cmluZztcblx0bG9nZ2VyTGV2ZWw6IHN0cmluZztcblx0bG9nTGV2ZWw6ICdkZWJ1ZycgfCAnaW5mbycgfCAnd2FybicgfCAnZXJyb3InO1xuXHRub2RlRW52OiAnZGV2ZWxvcG1lbnQnIHwgJ3Rlc3RpbmcnIHwgJ3Byb2R1Y3Rpb24nO1xuXHRzZXJ2ZXJEYXRhRmlsZVBhdGgxOiBzdHJpbmc7XG5cdHNlcnZlckRhdGFGaWxlUGF0aDI6IHN0cmluZztcblx0c2VydmVyRGF0YUZpbGVQYXRoMzogc3RyaW5nO1xuXHRzZXJ2ZXJEYXRhRmlsZVBhdGg0OiBzdHJpbmc7XG5cdHNlcnZlckxvZ1BhdGg6IHN0cmluZztcblx0c2VydmVyTnBtTG9nUGF0aDogc3RyaW5nO1xuXHRzZXJ2ZXJQb3J0OiBudW1iZXI7XG5cdHNlcnZlclNzbENlcnRQYXRoOiBzdHJpbmc7XG5cdHNlcnZlclNzbEtleVBhdGg6IHN0cmluZztcblx0c2VydmljZU5hbWU6IHN0cmluZztcblx0c3RhdGljUm9vdFBhdGg6IHN0cmluZztcblx0eXViaWNvQXBpVXJsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBlbnZpcm9ubWVudFZhcmlhYmxlczogRW52aXJvbm1lbnRWYXJpYWJsZVR5cGVzID0ge1xuXHRiYWNrZW5kTG9nRXhwb3J0UGF0aDogcHJvY2Vzcy5lbnYuQkFDS0VORF9MT0dfRVhQT1JUX1BBVEggfHwgJycsXG5cdGVtYWlsVXNlcjogcHJvY2Vzcy5lbnYuRU1BSUxfVVNFUiB8fCAnJyxcblx0ZmVhdHVyZUFwaVJvdXRlc0NzcmY6IHByb2Nlc3MuZW52LkZFQVRVUkVfQVBJX1JPVVRFU19DU1JGID09PSAndHJ1ZScsXG5cdGZlYXR1cmVEYlN5bmM6IHByb2Nlc3MuZW52LkZFQVRVUkVfREJfU1lOQyA9PT0gJ3RydWUnLFxuXHRmZWF0dXJlRGVjcnlwdEtleXM6IHByb2Nlc3MuZW52LkZFQVRVUkVfREVDUllQVF9LRVlTID09PSAndHJ1ZScsXG5cdGZlYXR1cmVFbmFibGVFcnJvckhhbmRsZXI6IHByb2Nlc3MuZW52LkZFQVRVUkVfRU5BQkxFX0VSUk9SX0hBTkRMRVIgPT09ICd0cnVlJyxcblx0ZmVhdHVyZUVuYWJsZUlwQmxhY2tsaXN0OiBwcm9jZXNzLmVudi5GRUFUVVJFX0VOQUJMRV9JUF9CTEFDS0xJU1QgPT09ICd0cnVlJyxcblx0ZmVhdHVyZUVuYWJsZUp3dEF1dGg6IHByb2Nlc3MuZW52LkZFQVRVUkVfRU5BQkxFX0pXVF9BVVRIID09PSAndHJ1ZScsXG5cdGZlYXR1cmVFbmFibGVSYXRlTGltaXQ6IHByb2Nlc3MuZW52LkZFQVRVUkVfRU5BQkxFX1JBVEVfTElNSVQgPT09ICd0cnVlJyxcblx0ZmVhdHVyZUVuYWJsZVJlZGlzOiBwcm9jZXNzLmVudi5GRUFUVVJFX0VOQUJMRV9SRURJUyA9PT0gJ3RydWUnLFxuXHRmZWF0dXJlRW5hYmxlU2Vzc2lvbjogcHJvY2Vzcy5lbnYuRkVBVFVSRV9FTkFCTEVfU0VTU0lPTiA9PT0gJ3RydWUnLFxuXHRmZWF0dXJlRW5hYmxlU3NsOiBwcm9jZXNzLmVudi5GRUFUVVJFX0VOQUJMRV9TU0wgPT09ICd0cnVlJyxcblx0ZmVhdHVyZUh0dHBzUmVkaXJlY3Q6IHByb2Nlc3MuZW52LkZFQVRVUkVfSFRUUFNfUkVESVJFQ1QgPT09ICd0cnVlJyxcblx0ZmVhdHVyZUxvYWRUZXN0Um91dGVzOiBwcm9jZXNzLmVudi5GRUFUVVJFX0xPQURfVEVTVF9ST1VURVMgPT09ICd0cnVlJyxcblx0ZmVhdHVyZVNlcXVlbGl6ZUxvZ2dpbmc6IHByb2Nlc3MuZW52LkZFQVRVUkVfU0VRVUVMSVpFX0xPR0dJTkcgPT09ICd0cnVlJyxcblx0ZnJvbnRlbmRBcHBKc1BhdGg6IHByb2Nlc3MuZW52LkZST05URU5EX0FQUF9KU19QQVRIIHx8ICcnLFxuXHRmcm9udGVuZEJyb3dzZXJDb25maWdYbWxQYXRoOiBwcm9jZXNzLmVudi5GUk9OVEVORF9CUk9XU0VSX0NPTkZJR19YTUxfUEFUSCB8fCAnJyxcblx0ZnJvbnRlbmRDc3NQYXRoOiBwcm9jZXNzLmVudi5GUk9OVEVORF9DU1NfUEFUSCB8fCAnJyxcblx0ZnJvbnRlbmRGb250c1BhdGg6IHByb2Nlc3MuZW52LkZST05URU5EX0ZPTlRTX1BBVEggfHwgJycsXG5cdGZyb250ZW5kSHVtYW5zTWRQYXRoOiBwcm9jZXNzLmVudi5GUk9OVEVORF9IVU1BTlNfTURfUEFUSCB8fCAnJyxcblx0ZnJvbnRlbmRJY29uc1BhdGg6IHByb2Nlc3MuZW52LkZST05URU5EX0lDT05TX1BBVEggfHwgJycsXG5cdGZyb250ZW5kSW1hZ2VzUGF0aDogcHJvY2Vzcy5lbnYuRlJPTlRFTkRfSU1BR0VTX1BBVEggfHwgJycsXG5cdGZyb250ZW5kSnNQYXRoOiBwcm9jZXNzLmVudi5GUk9OVEVORF9KU19QQVRIIHx8ICcnLFxuXHRmcm9udGVuZEtleXNQYXRoOiBwcm9jZXNzLmVudi5GUk9OVEVORF9LRVlTX1BBVEggfHwgJycsXG5cdGZyb250ZW5kTG9nb3NQYXRoOiBwcm9jZXNzLmVudi5GUk9OVEVORF9MT0dPU19QQVRIIHx8ICcnLFxuXHRmcm9udGVuZFJvYm90c1R4dFBhdGg6IHByb2Nlc3MuZW52LkZST05URU5EX1JPQk9UU19UWFRfUEFUSCB8fCAnJyxcblx0ZnJvbnRlbmRTZWN1cml0eU1kUGF0aDogcHJvY2Vzcy5lbnYuRlJPTlRFTkRfU0VDVVJJVFlfTURfUEFUSCB8fCAnJyxcblx0ZnJvbnRlbmRTZWNyZXRzUGF0aDogcHJvY2Vzcy5lbnYuRlJPTlRFTkRfU0VDUkVUU19QQVRIIHx8ICcnLFxuXHRmcm9udGVuZFNpdGVtYXBYbWxQYXRoOiBwcm9jZXNzLmVudi5GUk9OVEVORF9TSVRFTUFQX1hNTF9QQVRIIHx8ICcnLFxuXHRpcEJsYWNrbGlzdFBhdGg6IHByb2Nlc3MuZW52LklQX0JMQUNLTElTVF9QQVRIIHx8ICcnLFxuXHRsb2dnZXJMZXZlbDogcHJvY2Vzcy5lbnYuTE9HR0VSIHx8ICcxJyxcblx0bG9nTGV2ZWw6IHByb2Nlc3MuZW52LkxPR19MRVZFTCBhcyAnZGVidWcnIHwgJ2luZm8nIHwgJ3dhcm4nIHwgJ2Vycm9yJyxcblx0bm9kZUVudjogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgYXMgJ2RldmVsb3BtZW50JyB8ICd0ZXN0aW5nJyB8ICdwcm9kdWN0aW9uJyxcblx0c2VydmVyRGF0YUZpbGVQYXRoMTogcHJvY2Vzcy5lbnYuU0VSVkVSX0RBVEFfRklMRV9QQVRIXzEgfHwgJycsXG5cdHNlcnZlckRhdGFGaWxlUGF0aDI6IHByb2Nlc3MuZW52LlNFUlZFUl9EQVRBX0ZJTEVfUEFUSF8yIHx8ICcnLFxuXHRzZXJ2ZXJEYXRhRmlsZVBhdGgzOiBwcm9jZXNzLmVudi5TRVJWRVJfREFUQV9GSUxFX1BBVEhfMyB8fCAnJyxcblx0c2VydmVyRGF0YUZpbGVQYXRoNDogcHJvY2Vzcy5lbnYuU0VSVkVSX0RBVEFfRklMRV9QQVRIXzQgfHwgJycsXG5cdHNlcnZlckxvZ1BhdGg6IHByb2Nlc3MuZW52LlNFUlZFUl9MT0dfUEFUSCB8fCAnJyxcblx0c2VydmVyTnBtTG9nUGF0aDogcHJvY2Vzcy5lbnYuU0VSVkVSX05QTV9MT0dfUEFUSCB8fCAnJyxcblx0c2VydmVyUG9ydDogcGFyc2VJbnQocHJvY2Vzcy5lbnYuU0VSVkVSX1BPUlQgfHwgJzMwMDAnLCAxMCksXG5cdHNlcnZlclNzbENlcnRQYXRoOiBwcm9jZXNzLmVudi5TRVJWRVJfU1NMX0NFUlRfUEFUSCB8fCAnJyxcblx0c2VydmVyU3NsS2V5UGF0aDogcHJvY2Vzcy5lbnYuU0VSVkVSX1NTTF9LRVlfUEFUSCB8fCAnJyxcblx0c2VydmljZU5hbWU6IHByb2Nlc3MuZW52LlNFUlZJQ0VfTkFNRSB8fCAnJyxcblx0c3RhdGljUm9vdFBhdGg6IHByb2Nlc3MuZW52LlNUQVRJQ19ST09UX1BBVEggfHwgJycsXG5cdHl1Ymljb0FwaVVybDogcHJvY2Vzcy5lbnYuWVVCSUNPX0FQSV9VUkwgfHwgJydcbn07XG5cbmV4cG9ydCBlbnVtIEZlYXR1cmVGbGFnTmFtZXMge1xuXHRBUElfUk9VVEVTX0NTUkYgPSAnRkVBVFVSRV9BUElfUk9VVEVTX0NTUkYnLFxuXHREQl9TWU5DID0gJ0ZFQVRVUkVfREJfU1lOQycsXG5cdERFQ1JZUFRfS0VZUyA9ICdGRUFUVVJFX0RFQ1JZUFRfS0VZUycsXG5cdEVOQUJMRV9DU1JGID0gJ0ZFQVRVUkVfRU5BQkxFX0NTUkYnLFxuXHRFTkFCTEVfRVJST1JfSEFORExFUiA9ICdGRUFUVVJFX0VOQUJMRV9FUlJPUl9IQU5ETEVSJyxcblx0RU5BQkxFX0lQX0JMQUNLTElTVCA9ICdGRUFUVVJFX0VOQUJMRV9JUF9CTEFDS0xJU1QnLFxuXHRFTkFCTEVfSldUX0FVVEggPSAnRkVBVFVSRV9FTkFCTEVfSldUX0FVVEgnLFxuXHRFTkFCTEVfUkFURV9MSU1JVCA9ICdGRUFUVVJFX0VOQUJMRV9SQVRFX0xJTUlUJyxcblx0RU5BQkxFX1JFRElTID0gJ0ZFQVRVUkVfRU5BQkxFX1JFRElTJyxcblx0RU5BQkxFX1NTTCA9ICdGRUFUVVJFX0VOQUJMRV9TU0wnLFxuXHRIVFRQU19SRURJUkVDVCA9ICdGRUFUVVJFX0hUVFBTX1JFRElSRUNUJyxcblx0TE9BRF9URVNUX1JPVVRFUyA9ICdGRUFUVVJFX0xPQURfVEVTVF9ST1VURVMnLFxuXHRTRUNVUkVfSEVBREVSUyA9ICdGRUFUVVJFX1NFQ1VSRV9IRUFERVJTJyxcblx0U0VRVUVMSVpFX0xPR0dJTkcgPSAnRkVBVFVSRV9TRVFVRUxJWkVfTE9HR0lORydcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGZWF0dXJlRmxhZ3Mge1xuXHRhcGlSb3V0ZXNDc3JmRmxhZzogYm9vbGVhbjtcblx0ZGJTeW5jRmxhZzogYm9vbGVhbjtcblx0ZGVjcnlwdEtleXNGbGFnOiBib29sZWFuO1xuXHRlbmFibGVFcnJvckhhbmRsZXJGbGFnOiBib29sZWFuO1xuXHRlbmFibGVJcEJsYWNrbGlzdEZsYWc6IGJvb2xlYW47XG5cdGVuYWJsZUp3dEF1dGhGbGFnOiBib29sZWFuO1xuXHRlbmFibGVSYXRlTGltaXRGbGFnOiBib29sZWFuO1xuXHRlbmFibGVSZWRpc0ZsYWc6IGJvb2xlYW47XG5cdGVuYWJsZVNzbEZsYWc6IGJvb2xlYW47XG5cdGh0dHBzUmVkaXJlY3RGbGFnOiBib29sZWFuO1xuXHRsb2FkVGVzdFJvdXRlc0ZsYWc6IGJvb2xlYW47XG5cdHNlcXVlbGl6ZUxvZ2dpbmdGbGFnOiBib29sZWFuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VCb29sZWFuKFxuXHR2YWx1ZTogc3RyaW5nIHwgYm9vbGVhbiB8IHVuZGVmaW5lZCxcblx0bG9nZ2VyOiBMb2dnZXIgfCBDb25zb2xlXG4pOiBib29sZWFuIHtcblx0dHJ5IHtcblx0XHR2YWxpZGF0ZURlcGVuZGVuY2llcyhcblx0XHRcdFtcblx0XHRcdFx0eyBuYW1lOiAnbG9nZ2VyJywgaW5zdGFuY2U6IGxvZ2dlciB9LFxuXHRcdFx0XHR7IG5hbWU6ICd2YWx1ZScsIGluc3RhbmNlOiB2YWx1ZSB9XG5cdFx0XHRdLFxuXHRcdFx0bG9nZ2VyXG5cdFx0KVxuXG5cdFx0aWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGxvZ2dlci53YXJuKCdGZWF0dXJlIGZsYWcgdmFsdWUgaXMgdW5kZWZpbmVkLiBEZWZhdWx0aW5nIHRvIGZhbHNlJyk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsdWUgPT09IHRydWU7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cHJvY2Vzc0Vycm9yKGVycm9yLCBsb2dnZXIgfHwgY29uc29sZSk7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGZWF0dXJlRmxhZ3MoXG5cdGxvZ2dlcjogTG9nZ2VyIHwgQ29uc29sZSxcblx0ZW52OiBQYXJ0aWFsPE5vZGVKUy5Qcm9jZXNzRW52PiA9IHByb2Nlc3MuZW52XG4pOiBGZWF0dXJlRmxhZ3Mge1xuXHR0cnkge1xuXHRcdHZhbGlkYXRlRGVwZW5kZW5jaWVzKFxuXHRcdFx0W1xuXHRcdFx0XHR7IG5hbWU6ICdsb2dnZXInLCBpbnN0YW5jZTogbG9nZ2VyIH0sXG5cdFx0XHRcdHsgbmFtZTogJ2VudicsIGluc3RhbmNlOiBlbnYgfVxuXHRcdFx0XSxcblx0XHRcdGxvZ2dlciB8fCBjb25zb2xlXG5cdFx0KTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRhcGlSb3V0ZXNDc3JmRmxhZzogcGFyc2VCb29sZWFuKGVudi5GRUFUVVJFX0FQSV9ST1VURVNfQ1NSRiwgbG9nZ2VyKSxcblx0XHRcdGRiU3luY0ZsYWc6IHBhcnNlQm9vbGVhbihlbnYuRkVBVFVSRV9EQl9TWU5DLCBsb2dnZXIpLFxuXHRcdFx0ZGVjcnlwdEtleXNGbGFnOiBwYXJzZUJvb2xlYW4oZW52LkZFQVRVUkVfREVDUllQVF9LRVlTLCBsb2dnZXIpLFxuXHRcdFx0ZW5hYmxlRXJyb3JIYW5kbGVyRmxhZzogcGFyc2VCb29sZWFuKFxuXHRcdFx0XHRlbnYuRkVBVFVSRV9FTkFCTEVfRVJST1JfSEFORExFUixcblx0XHRcdFx0bG9nZ2VyXG5cdFx0XHQpLFxuXHRcdFx0ZW5hYmxlSXBCbGFja2xpc3RGbGFnOiBwYXJzZUJvb2xlYW4oXG5cdFx0XHRcdGVudi5GRUFUVVJFX0VOQUJMRV9JUF9CTEFDS0xJU1QsXG5cdFx0XHRcdGxvZ2dlclxuXHRcdFx0KSxcblx0XHRcdGVuYWJsZUp3dEF1dGhGbGFnOiBwYXJzZUJvb2xlYW4oZW52LkZFQVRVUkVfRU5BQkxFX0pXVF9BVVRILCBsb2dnZXIpLFxuXHRcdFx0ZW5hYmxlUmF0ZUxpbWl0RmxhZzogcGFyc2VCb29sZWFuKFxuXHRcdFx0XHRlbnYuRkVBVFVSRV9FTkFCTEVfUkFURV9MSU1JVCxcblx0XHRcdFx0bG9nZ2VyXG5cdFx0XHQpLFxuXHRcdFx0ZW5hYmxlUmVkaXNGbGFnOiBwYXJzZUJvb2xlYW4oZW52LkZFQVRVUkVfRU5BQkxFX1JFRElTLCBsb2dnZXIpLFxuXHRcdFx0ZW5hYmxlU3NsRmxhZzogcGFyc2VCb29sZWFuKGVudi5GRUFUVVJFX0VOQUJMRV9TU0wsIGxvZ2dlciksXG5cdFx0XHRodHRwc1JlZGlyZWN0RmxhZzogcGFyc2VCb29sZWFuKGVudi5GRUFUVVJFX0hUVFBTX1JFRElSRUNULCBsb2dnZXIpLFxuXHRcdFx0bG9hZFRlc3RSb3V0ZXNGbGFnOiBwYXJzZUJvb2xlYW4oZW52LkZFQVRVUkVfTE9BRF9URVNUX1JPVVRFUywgbG9nZ2VyKSxcblx0XHRcdHNlcXVlbGl6ZUxvZ2dpbmdGbGFnOiBwYXJzZUJvb2xlYW4oXG5cdFx0XHRcdGVudi5GRUFUVVJFX1NFUVVFTElaRV9MT0dHSU5HLFxuXHRcdFx0XHRsb2dnZXJcblx0XHRcdClcblx0XHR9XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cHJvY2Vzc0Vycm9yKGVycm9yLCBsb2dnZXIgfHwgY29uc29sZSk7XG5cdFx0bG9nZ2VyLmVycm9yKGBSZXR1cm5pbmcgJ2ZhbHNlJyBmb3IgYWxsIGZlYXR1cmUgZmxhZ3NgKTtcblx0XHRyZXR1cm4ge1xuXHRcdFx0YXBpUm91dGVzQ3NyZkZsYWc6IGZhbHNlLFxuXHRcdFx0ZGJTeW5jRmxhZzogZmFsc2UsXG5cdFx0XHRkZWNyeXB0S2V5c0ZsYWc6IGZhbHNlLFxuXHRcdFx0ZW5hYmxlRXJyb3JIYW5kbGVyRmxhZzogZmFsc2UsXG5cdFx0XHRlbmFibGVJcEJsYWNrbGlzdEZsYWc6IGZhbHNlLFxuXHRcdFx0ZW5hYmxlSnd0QXV0aEZsYWc6IGZhbHNlLFxuXHRcdFx0ZW5hYmxlUmF0ZUxpbWl0RmxhZzogZmFsc2UsXG5cdFx0XHRlbmFibGVSZWRpc0ZsYWc6IGZhbHNlLFxuXHRcdFx0ZW5hYmxlU3NsRmxhZzogZmFsc2UsXG5cdFx0XHRodHRwc1JlZGlyZWN0RmxhZzogZmFsc2UsXG5cdFx0XHRsb2FkVGVzdFJvdXRlc0ZsYWc6IGZhbHNlLFxuXHRcdFx0c2VxdWVsaXplTG9nZ2luZ0ZsYWc6IGZhbHNlXG5cdFx0fVxuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGZWF0dXJlRW5hYmxlcihsb2dnZXI6IExvZ2dlcikge1xuXHR0cnkge1xuXHRcdHZhbGlkYXRlRGVwZW5kZW5jaWVzKFxuXHRcdFx0W3sgbmFtZTogJ2xvZ2dlcicsIGluc3RhbmNlOiBsb2dnZXIgfV0sXG5cdFx0XHRsb2dnZXIgfHwgY29uc29sZVxuXHRcdCk7XG5cbiAgICBcdHJldHVybiB7XG4gICAgXHQgICAgZW5hYmxlRmVhdHVyZUJhc2VkT25GbGFnKFxuXHRcdFx0XHRmbGFnOiBib29sZWFuLFxuXHRcdFx0XHRkZXNjcmlwdGlvbjogc3RyaW5nLFxuXHRcdFx0XHRjYWxsYmFjazogKCkgPT4gdm9pZFxuXHRcdFx0KSB7XG4gICAgXHQgICAgICAgIGlmIChmbGFnKSB7XG4gICAgXHQgICAgICAgICAgICBsb2dnZXIuaW5mbyhcblx0XHRcdFx0XHRcdGBFbmFibGluZyAke2Rlc2NyaXB0aW9ufSAoZmxhZyBpcyAke2ZsYWd9KWBcblx0XHRcdFx0XHQpO1xuICAgIFx0ICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICBcdCAgICAgICAgfSBlbHNlIHtcbiAgICBcdCAgICAgICAgICAgIGxvZ2dlci5pbmZvKFxuXHRcdFx0XHRcdFx0YFNraXBwaW5nICR7ZGVzY3JpcHRpb259IChmbGFnIGlzICR7ZmxhZ30pYFxuXHRcdFx0XHRcdCk7XG4gICAgXHQgICAgICAgIH1cbiAgICBcdCAgICB9LFxuICAgIFx0ICAgIGVuYWJsZUZlYXR1cmVXaXRoUHJvZE92ZXJyaWRlKFxuXHRcdFx0XHRmbGFnOiBib29sZWFuLFxuXHRcdFx0XHRkZXNjcmlwdGlvbjogc3RyaW5nLFxuXHRcdFx0XHRjYWxsYmFjazogKCkgPT4gdm9pZFxuXHRcdFx0KSB7XG4gICAgXHQgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgXHQgICAgICAgICAgICBsb2dnZXIuaW5mbyhcblx0XHRcdFx0XHRcdGBFbmFibGluZyAke2Rlc2NyaXB0aW9ufSBpbiBwcm9kdWN0aW9uIHJlZ2FyZGxlc3Mgb2YgZmxhZyB2YWx1ZS5gXG5cdFx0XHRcdFx0KTtcbiAgICBcdCAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgXHQgICAgICAgIH0gZWxzZSBpZiAoZmxhZykge1xuICAgIFx0ICAgICAgICAgICAgbG9nZ2VyLmluZm8oXG5cdFx0XHRcdFx0XHRgRW5hYmxpbmcgJHtkZXNjcmlwdGlvbn0gKGZsYWcgaXMgJHtmbGFnfSlgXG5cdFx0XHRcdFx0KTtcbiAgICBcdCAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgXHQgICAgICAgIH0gZWxzZSB7XG4gICAgXHQgICAgICAgICAgICBsb2dnZXIuaW5mbyhcblx0XHRcdFx0XHRcdGBTa2lwcGluZyAke2Rlc2NyaXB0aW9ufSAoZmxhZyBpcyAke2ZsYWd9KWBcblx0XHRcdFx0XHQpO1xuICAgIFx0ICAgICAgICB9XG4gICAgXHQgICAgfSxcbiAgICBcdH07XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cHJvY2Vzc0Vycm9yKGVycm9yLCBsb2dnZXIgfHwgY29uc29sZSk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGVuYWJsZUZlYXR1cmVCYXNlZE9uRmxhZzogKCkgPT4ge30sXG5cdFx0XHRlbmFibGVGZWF0dXJlV2l0aFByb2RPdmVycmlkZTogKCkgPT4ge31cblx0XHR9O1xuXHR9XG59XG4iXX0=
