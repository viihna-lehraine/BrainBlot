import setupLogger from './logger.js';
import loadEnv from './loadEnv.js';
loadEnv();
const logger = setupLogger();
export const parseBoolean = value => {
	if (typeof value === 'string') {
		value = value.toLowerCase();
	}
	if (value === true || value === 'true') {
		return true;
	} else if (value === false || value === 'false') {
		return false;
	} else {
		logger.warn(
			`parseBoolean received an unexpected value: "${value}". Defaulting to false.`
		);
		return false;
	}
};
export function getFeatureFlags() {
	return {
		apiRoutesCsrfFlag: parseBoolean(process.env.FEATURE_API_ROUTES_CSRF),
		dbSyncFlag: parseBoolean(process.env.FEATURE_DB_SYNC),
		enableRedisFlag: parseBoolean(process.env.FEATURE_ENABLE_REDIS),
		enableSentryFlag: parseBoolean(process.env.FEATURE_ENABLE_SENTRY),
		enableSslFlag: parseBoolean(process.env.FEATURE_ENABLE_SSL),
		httpsRedirectFlag: parseBoolean(process.env.FEATURE_HTTPS_REDIRECT),
		ipBlacklistFlag: parseBoolean(process.env.FEATURE_IP_BLACKLIST),
		loadStaticRoutesFlag: parseBoolean(
			process.env.FEATURE_LOAD_STATIC_ROUTES
		),
		loadTestRoutesFlag: parseBoolean(process.env.FEATURE_LOAD_TEST_ROUTES),
		secureHeadersFlag: parseBoolean(process.env.FEATURE_SECURE_HEADERS),
		sequelizeLoggingFlag: parseBoolean(
			process.env.FEATURE_SEQUELIZE_LOGGING
		)
	};
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdHVyZUZsYWdzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZy9mZWF0dXJlRmxhZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxXQUFXLE1BQU0sVUFBVSxDQUFDO0FBQ25DLE9BQU8sT0FBTyxNQUFNLFdBQVcsQ0FBQztBQUVoQyxPQUFPLEVBQUUsQ0FBQztBQUVWLE1BQU0sTUFBTSxHQUFHLFdBQVcsRUFBRSxDQUFDO0FBZ0I3QixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxLQUFtQyxFQUFXLEVBQUU7SUFDNUUsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUUsQ0FBQztRQUMvQixLQUFLLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFJLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLE1BQU0sRUFBRSxDQUFDO1FBQ3hDLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztTQUFNLElBQUksS0FBSyxLQUFLLEtBQUssSUFBSSxLQUFLLEtBQUssT0FBTyxFQUFFLENBQUM7UUFDakQsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO1NBQU0sQ0FBQztRQUNQLE1BQU0sQ0FBQyxJQUFJLENBQ1YsK0NBQStDLEtBQUsseUJBQXlCLENBQzdFLENBQUM7UUFFRixPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7QUFDRixDQUFDLENBQUM7QUFFRixNQUFNLFVBQVUsZUFBZTtJQUM5QixPQUFPO1FBQ04saUJBQWlCLEVBQUUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUM7UUFDcEUsVUFBVSxFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQztRQUNyRCxlQUFlLEVBQUUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUM7UUFDL0QsZ0JBQWdCLEVBQUUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUM7UUFDakUsYUFBYSxFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDO1FBQzNELGlCQUFpQixFQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDO1FBQ25FLGVBQWUsRUFBRSxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQztRQUMvRCxvQkFBb0IsRUFBRSxZQUFZLENBQ2pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQ3RDO1FBQ0Qsa0JBQWtCLEVBQUUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUM7UUFDdEUsaUJBQWlCLEVBQUUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUM7UUFDbkUsb0JBQW9CLEVBQUUsWUFBWSxDQUNqQyxPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QixDQUNyQztLQUNELENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHNldHVwTG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBsb2FkRW52IGZyb20gJy4vbG9hZEVudic7XG5cbmxvYWRFbnYoKTtcblxuY29uc3QgbG9nZ2VyID0gc2V0dXBMb2dnZXIoKTtcblxuaW50ZXJmYWNlIEZlYXR1cmVGbGFncyB7XG5cdGFwaVJvdXRlc0NzcmZGbGFnOiBib29sZWFuO1xuXHRkYlN5bmNGbGFnOiBib29sZWFuO1xuXHRlbmFibGVSZWRpc0ZsYWc6IGJvb2xlYW47XG5cdGVuYWJsZVNlbnRyeUZsYWc6IGJvb2xlYW47XG5cdGVuYWJsZVNzbEZsYWc6IGJvb2xlYW47XG5cdGh0dHBzUmVkaXJlY3RGbGFnOiBib29sZWFuO1xuXHRpcEJsYWNrbGlzdEZsYWc6IGJvb2xlYW47XG5cdGxvYWRTdGF0aWNSb3V0ZXNGbGFnOiBib29sZWFuO1xuXHRsb2FkVGVzdFJvdXRlc0ZsYWc6IGJvb2xlYW47XG5cdHNlY3VyZUhlYWRlcnNGbGFnOiBib29sZWFuO1xuXHRzZXF1ZWxpemVMb2dnaW5nRmxhZzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IHBhcnNlQm9vbGVhbiA9ICh2YWx1ZTogc3RyaW5nIHwgYm9vbGVhbiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4gPT4ge1xuXHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuXHRcdHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcblx0fVxuXG5cdGlmICh2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gJ3RydWUnKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gZWxzZSBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09PSAnZmFsc2UnKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGVsc2Uge1xuXHRcdGxvZ2dlci53YXJuKFxuXHRcdFx0YHBhcnNlQm9vbGVhbiByZWNlaXZlZCBhbiB1bmV4cGVjdGVkIHZhbHVlOiBcIiR7dmFsdWV9XCIuIERlZmF1bHRpbmcgdG8gZmFsc2UuYFxuXHRcdCk7XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGZWF0dXJlRmxhZ3MoKTogRmVhdHVyZUZsYWdzIHtcblx0cmV0dXJuIHtcblx0XHRhcGlSb3V0ZXNDc3JmRmxhZzogcGFyc2VCb29sZWFuKHByb2Nlc3MuZW52LkZFQVRVUkVfQVBJX1JPVVRFU19DU1JGKSxcblx0XHRkYlN5bmNGbGFnOiBwYXJzZUJvb2xlYW4ocHJvY2Vzcy5lbnYuRkVBVFVSRV9EQl9TWU5DKSxcblx0XHRlbmFibGVSZWRpc0ZsYWc6IHBhcnNlQm9vbGVhbihwcm9jZXNzLmVudi5GRUFUVVJFX0VOQUJMRV9SRURJUyksXG5cdFx0ZW5hYmxlU2VudHJ5RmxhZzogcGFyc2VCb29sZWFuKHByb2Nlc3MuZW52LkZFQVRVUkVfRU5BQkxFX1NFTlRSWSksXG5cdFx0ZW5hYmxlU3NsRmxhZzogcGFyc2VCb29sZWFuKHByb2Nlc3MuZW52LkZFQVRVUkVfRU5BQkxFX1NTTCksXG5cdFx0aHR0cHNSZWRpcmVjdEZsYWc6IHBhcnNlQm9vbGVhbihwcm9jZXNzLmVudi5GRUFUVVJFX0hUVFBTX1JFRElSRUNUKSxcblx0XHRpcEJsYWNrbGlzdEZsYWc6IHBhcnNlQm9vbGVhbihwcm9jZXNzLmVudi5GRUFUVVJFX0lQX0JMQUNLTElTVCksXG5cdFx0bG9hZFN0YXRpY1JvdXRlc0ZsYWc6IHBhcnNlQm9vbGVhbihcblx0XHRcdHByb2Nlc3MuZW52LkZFQVRVUkVfTE9BRF9TVEFUSUNfUk9VVEVTXG5cdFx0KSxcblx0XHRsb2FkVGVzdFJvdXRlc0ZsYWc6IHBhcnNlQm9vbGVhbihwcm9jZXNzLmVudi5GRUFUVVJFX0xPQURfVEVTVF9ST1VURVMpLFxuXHRcdHNlY3VyZUhlYWRlcnNGbGFnOiBwYXJzZUJvb2xlYW4ocHJvY2Vzcy5lbnYuRkVBVFVSRV9TRUNVUkVfSEVBREVSUyksXG5cdFx0c2VxdWVsaXplTG9nZ2luZ0ZsYWc6IHBhcnNlQm9vbGVhbihcblx0XHRcdHByb2Nlc3MuZW52LkZFQVRVUkVfU0VRVUVMSVpFX0xPR0dJTkdcblx0XHQpXG5cdH07XG59XG4iXX0=
