import { validateDependencies } from '../utils/validateDependencies';
import { processError } from '../utils/processError';
// Create a transporter instance
async function createTransporter({
	nodemailer,
	getSecrets,
	emailUser,
	logger
}) {
	try {
		validateDependencies(
			[
				{ name: 'nodemailer', instance: nodemailer },
				{ name: 'getSecrets', instance: getSecrets },
				{ name: 'emailUser', instance: emailUser },
				{ name: 'logger', instance: logger }
			],
			logger || console
		);
		const secrets = await getSecrets();
		return nodemailer.createTransport({
			host: secrets.EMAIL_HOST,
			port: secrets.EMAIL_PORT,
			secure: secrets.EMAIL_SECURE,
			auth: {
				user: emailUser,
				pass: secrets.SMTP_TOKEN
			}
		});
	} catch (error) {
		processError(error, logger || console);
		throw error;
	}
}
let transporter = null;
export async function getTransporter(deps) {
	try {
		validateDependencies(
			[
				{ name: 'deps', instance: deps },
				{ name: 'deps.nodemailer', instance: deps.nodemailer },
				{ name: 'deps.getSecrets', instance: deps.getSecrets },
				{ name: 'deps.emailUser', instance: deps.emailUser },
				{ name: 'deps.logger', instance: deps.logger }
			],
			deps.logger || console
		);
		if (!transporter) {
			transporter = await createTransporter(deps);
		}
		return transporter;
	} catch (error) {
		processError(error, deps.logger || console);
		throw error;
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZy9tYWlsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDckUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBZ0JyRCxnQ0FBZ0M7QUFDaEMsS0FBSyxVQUFVLGlCQUFpQixDQUFDLEVBQ2hDLFVBQVUsRUFDVixVQUFVLEVBQ1YsU0FBUyxFQUNULE1BQU0sRUFDYztJQUNwQixJQUFJLENBQUM7UUFDSixvQkFBb0IsQ0FDbkI7WUFDQyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRTtZQUM1QyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRTtZQUM1QyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRTtZQUMxQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRTtTQUNwQyxFQUNELE1BQU0sSUFBSSxPQUFPLENBQ2pCLENBQUM7UUFFRixNQUFNLE9BQU8sR0FBa0IsTUFBTSxVQUFVLEVBQUUsQ0FBQztRQUVsRCxPQUFPLFVBQVUsQ0FBQyxlQUFlLENBQUM7WUFDakMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxVQUFVO1lBQ3hCLElBQUksRUFBRSxPQUFPLENBQUMsVUFBVTtZQUN4QixNQUFNLEVBQUUsT0FBTyxDQUFDLFlBQVk7WUFDNUIsSUFBSSxFQUFFO2dCQUNMLElBQUksRUFBRSxTQUFTO2dCQUNmLElBQUksRUFBRSxPQUFPLENBQUMsVUFBVTthQUN4QjtTQUNELENBQUMsQ0FBQztJQUNKLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sS0FBSyxDQUFDO0lBQ2IsQ0FBQztBQUNGLENBQUM7QUFFRCxJQUFJLFdBQVcsR0FBdUIsSUFBSSxDQUFDO0FBRTNDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsY0FBYyxDQUFDLElBQXdCO0lBQzVELElBQUksQ0FBQztRQUNKLG9CQUFvQixDQUNuQjtZQUNDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO1lBQ2hDLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3RELEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3RELEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ3BELEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRTtTQUM5QyxFQUNELElBQUksQ0FBQyxNQUFNLElBQUksT0FBTyxDQUN0QixDQUFBO1FBQ0QsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2xCLFdBQVcsR0FBRyxNQUFNLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLENBQUM7UUFDRCxPQUFPLFdBQVcsQ0FBQztJQUNwQixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixZQUFZLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLENBQUM7UUFDNUMsTUFBTSxLQUFLLENBQUM7SUFDYixDQUFDO0FBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBub2RlbWFpbGVyLCB7IFRyYW5zcG9ydGVyIH0gZnJvbSAnbm9kZW1haWxlcic7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyB2YWxpZGF0ZURlcGVuZGVuY2llcyB9IGZyb20gJy4uL3V0aWxzL3ZhbGlkYXRlRGVwZW5kZW5jaWVzJztcbmltcG9ydCB7IHByb2Nlc3NFcnJvciB9IGZyb20gJy4uL3V0aWxzL3Byb2Nlc3NFcnJvcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWFpbGVyU2VjcmV0cyB7XG5cdHJlYWRvbmx5IEVNQUlMX0hPU1Q6IHN0cmluZztcblx0cmVhZG9ubHkgRU1BSUxfUE9SVDogbnVtYmVyO1xuXHRyZWFkb25seSBFTUFJTF9TRUNVUkU6IGJvb2xlYW47XG5cdHJlYWRvbmx5IFNNVFBfVE9LRU46IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNYWlsZXJEZXBlbmRlbmNpZXMge1xuXHRyZWFkb25seSBub2RlbWFpbGVyOiB0eXBlb2Ygbm9kZW1haWxlcjtcblx0cmVhZG9ubHkgZ2V0U2VjcmV0czogKCkgPT4gUHJvbWlzZTxNYWlsZXJTZWNyZXRzPjtcblx0cmVhZG9ubHkgZW1haWxVc2VyOiBzdHJpbmc7XG5cdHJlYWRvbmx5IGxvZ2dlcjogTG9nZ2VyO1xufVxuXG4vLyBDcmVhdGUgYSB0cmFuc3BvcnRlciBpbnN0YW5jZVxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlVHJhbnNwb3J0ZXIoe1xuXHRub2RlbWFpbGVyLFxuXHRnZXRTZWNyZXRzLFxuXHRlbWFpbFVzZXIsXG5cdGxvZ2dlclxufTogTWFpbGVyRGVwZW5kZW5jaWVzKTogUHJvbWlzZTxUcmFuc3BvcnRlcj4ge1xuXHR0cnkge1xuXHRcdHZhbGlkYXRlRGVwZW5kZW5jaWVzKFxuXHRcdFx0W1xuXHRcdFx0XHR7IG5hbWU6ICdub2RlbWFpbGVyJywgaW5zdGFuY2U6IG5vZGVtYWlsZXIgfSxcblx0XHRcdFx0eyBuYW1lOiAnZ2V0U2VjcmV0cycsIGluc3RhbmNlOiBnZXRTZWNyZXRzIH0sXG5cdFx0XHRcdHsgbmFtZTogJ2VtYWlsVXNlcicsIGluc3RhbmNlOiBlbWFpbFVzZXIgfSxcblx0XHRcdFx0eyBuYW1lOiAnbG9nZ2VyJywgaW5zdGFuY2U6IGxvZ2dlciB9XG5cdFx0XHRdLFxuXHRcdFx0bG9nZ2VyIHx8IGNvbnNvbGVcblx0XHQpO1xuXG5cdFx0Y29uc3Qgc2VjcmV0czogTWFpbGVyU2VjcmV0cyA9IGF3YWl0IGdldFNlY3JldHMoKTtcblxuXHRcdHJldHVybiBub2RlbWFpbGVyLmNyZWF0ZVRyYW5zcG9ydCh7XG5cdFx0XHRob3N0OiBzZWNyZXRzLkVNQUlMX0hPU1QsXG5cdFx0XHRwb3J0OiBzZWNyZXRzLkVNQUlMX1BPUlQsXG5cdFx0XHRzZWN1cmU6IHNlY3JldHMuRU1BSUxfU0VDVVJFLFxuXHRcdFx0YXV0aDoge1xuXHRcdFx0XHR1c2VyOiBlbWFpbFVzZXIsXG5cdFx0XHRcdHBhc3M6IHNlY3JldHMuU01UUF9UT0tFTlxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdHByb2Nlc3NFcnJvcihlcnJvciwgbG9nZ2VyIHx8IGNvbnNvbGUpO1xuXHRcdHRocm93IGVycm9yO1xuXHR9XG59XG5cbmxldCB0cmFuc3BvcnRlcjogVHJhbnNwb3J0ZXIgfCBudWxsID0gbnVsbDtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFRyYW5zcG9ydGVyKGRlcHM6IE1haWxlckRlcGVuZGVuY2llcyk6IFByb21pc2U8VHJhbnNwb3J0ZXI+IHtcblx0dHJ5IHtcblx0XHR2YWxpZGF0ZURlcGVuZGVuY2llcyhcblx0XHRcdFtcblx0XHRcdFx0eyBuYW1lOiAnZGVwcycsIGluc3RhbmNlOiBkZXBzIH0sXG5cdFx0XHRcdHsgbmFtZTogJ2RlcHMubm9kZW1haWxlcicsIGluc3RhbmNlOiBkZXBzLm5vZGVtYWlsZXIgfSxcblx0XHRcdFx0eyBuYW1lOiAnZGVwcy5nZXRTZWNyZXRzJywgaW5zdGFuY2U6IGRlcHMuZ2V0U2VjcmV0cyB9LFxuXHRcdFx0XHR7IG5hbWU6ICdkZXBzLmVtYWlsVXNlcicsIGluc3RhbmNlOiBkZXBzLmVtYWlsVXNlciB9LFxuXHRcdFx0XHR7IG5hbWU6ICdkZXBzLmxvZ2dlcicsIGluc3RhbmNlOiBkZXBzLmxvZ2dlciB9XG5cdFx0XHRdLFxuXHRcdFx0ZGVwcy5sb2dnZXIgfHwgY29uc29sZVxuXHRcdClcblx0XHRpZiAoIXRyYW5zcG9ydGVyKSB7XG5cdFx0XHR0cmFuc3BvcnRlciA9IGF3YWl0IGNyZWF0ZVRyYW5zcG9ydGVyKGRlcHMpO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJhbnNwb3J0ZXI7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cHJvY2Vzc0Vycm9yKGVycm9yLCBkZXBzLmxvZ2dlciB8fCBjb25zb2xlKTtcblx0XHR0aHJvdyBlcnJvcjtcblx0fVxufVxuIl19
