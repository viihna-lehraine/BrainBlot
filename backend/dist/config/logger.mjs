import { createLogger, format, transports } from 'winston';
import DailyRotateFile from 'winston-daily-rotate-file';
const { colorize, combine, errors, json, printf, timestamp } = format;
const logFormat = printf(({ level, message, timestamp, stack }) => {
	return `${timestamp} ${level}: ${stack || message}`;
});
function setupLogger({
	logLevel = 'debug',
	logDirectory = '../../data/logs/server/main',
	serviceName = 'guestbook-service',
	isProduction = process.env.NODE_ENV === 'development'
} = {}) {
	const logger = createLogger({
		level: isProduction ? 'info' : logLevel,
		format: combine(
			errors({ stack: true }),
			timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
			json()
		),
		defaultMeta: { service: serviceName },
		transports: [
			new transports.Console({
				format: combine(colorize(), logFormat)
			}),
			new DailyRotateFile({
				filename: 'server-%DATE%.log',
				dirname: logDirectory,
				datePattern: 'YYYY-MM-DD',
				zippedArchive: true,
				maxSize: '20m',
				maxFiles: '14d',
				format: combine(
					timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
					logFormat
				)
			})
		]
	});
	return logger;
}
export default setupLogger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZy9sb2dnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQVUsVUFBVSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ25FLE9BQU8sZUFBZSxNQUFNLDJCQUEyQixDQUFDO0FBRXhELE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLE1BQU0sQ0FBQztBQUV0RSxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7SUFDakUsT0FBTyxHQUFHLFNBQVMsSUFBSSxLQUFLLEtBQUssS0FBSyxJQUFJLE9BQU8sRUFBRSxDQUFDO0FBQ3JELENBQUMsQ0FBQyxDQUFDO0FBU0gsU0FBUyxXQUFXLENBQUMsRUFDcEIsUUFBUSxHQUFHLE9BQU8sRUFDbEIsWUFBWSxHQUFHLDZCQUE2QixFQUM1QyxXQUFXLEdBQUcsbUJBQW1CLEVBQ2pDLFlBQVksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxhQUFhLEtBQzlCLEVBQUU7SUFDekIsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDO1FBQzNCLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUTtRQUN2QyxNQUFNLEVBQUUsT0FBTyxDQUNkLE1BQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUN2QixTQUFTLENBQUMsRUFBRSxNQUFNLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyxFQUM1QyxJQUFJLEVBQUUsQ0FDTjtRQUNELFdBQVcsRUFBRSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUU7UUFDckMsVUFBVSxFQUFFO1lBQ1gsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDO2dCQUN0QixNQUFNLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLFNBQVMsQ0FBQzthQUN0QyxDQUFDO1lBQ0YsSUFBSSxlQUFlLENBQUM7Z0JBQ25CLFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLE9BQU8sRUFBRSxZQUFZO2dCQUNyQixXQUFXLEVBQUUsWUFBWTtnQkFDekIsYUFBYSxFQUFFLElBQUk7Z0JBQ25CLE9BQU8sRUFBRSxLQUFLO2dCQUNkLFFBQVEsRUFBRSxLQUFLO2dCQUNmLE1BQU0sRUFBRSxPQUFPLENBQ2QsU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLHFCQUFxQixFQUFFLENBQUMsRUFDNUMsU0FBUyxDQUNUO2FBQ0QsQ0FBQztTQUNGO0tBQ0QsQ0FBQyxDQUFDO0lBRUgsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDO0FBRUQsZUFBZSxXQUFXLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVMb2dnZXIsIGZvcm1hdCwgTG9nZ2VyLCB0cmFuc3BvcnRzIH0gZnJvbSAnd2luc3Rvbic7XG5pbXBvcnQgRGFpbHlSb3RhdGVGaWxlIGZyb20gJ3dpbnN0b24tZGFpbHktcm90YXRlLWZpbGUnO1xuXG5jb25zdCB7IGNvbG9yaXplLCBjb21iaW5lLCBlcnJvcnMsIGpzb24sIHByaW50ZiwgdGltZXN0YW1wIH0gPSBmb3JtYXQ7XG5cbmNvbnN0IGxvZ0Zvcm1hdCA9IHByaW50ZigoeyBsZXZlbCwgbWVzc2FnZSwgdGltZXN0YW1wLCBzdGFjayB9KSA9PiB7XG5cdHJldHVybiBgJHt0aW1lc3RhbXB9ICR7bGV2ZWx9OiAke3N0YWNrIHx8IG1lc3NhZ2V9YDtcbn0pO1xuXG5leHBvcnQgaW50ZXJmYWNlIExvZ2dlckRlcGVuZGVuY2llcyB7XG5cdGxvZ0xldmVsPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXHRsb2dEaXJlY3Rvcnk/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cdHNlcnZpY2VOYW1lPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXHRpc1Byb2R1Y3Rpb24/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBzZXR1cExvZ2dlcih7XG5cdGxvZ0xldmVsID0gJ2RlYnVnJyxcblx0bG9nRGlyZWN0b3J5ID0gJy4uLy4uL2RhdGEvbG9ncy9zZXJ2ZXIvbWFpbicsXG5cdHNlcnZpY2VOYW1lID0gJ2d1ZXN0Ym9vay1zZXJ2aWNlJyxcblx0aXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCdcbn06IExvZ2dlckRlcGVuZGVuY2llcyA9IHt9KTogTG9nZ2VyIHtcblx0Y29uc3QgbG9nZ2VyID0gY3JlYXRlTG9nZ2VyKHtcblx0XHRsZXZlbDogaXNQcm9kdWN0aW9uID8gJ2luZm8nIDogbG9nTGV2ZWwsXG5cdFx0Zm9ybWF0OiBjb21iaW5lKFxuXHRcdFx0ZXJyb3JzKHsgc3RhY2s6IHRydWUgfSksXG5cdFx0XHR0aW1lc3RhbXAoeyBmb3JtYXQ6ICdZWVlZLU1NLUREIEhIOm1tOnNzJyB9KSxcblx0XHRcdGpzb24oKVxuXHRcdCksXG5cdFx0ZGVmYXVsdE1ldGE6IHsgc2VydmljZTogc2VydmljZU5hbWUgfSxcblx0XHR0cmFuc3BvcnRzOiBbXG5cdFx0XHRuZXcgdHJhbnNwb3J0cy5Db25zb2xlKHtcblx0XHRcdFx0Zm9ybWF0OiBjb21iaW5lKGNvbG9yaXplKCksIGxvZ0Zvcm1hdClcblx0XHRcdH0pLFxuXHRcdFx0bmV3IERhaWx5Um90YXRlRmlsZSh7XG5cdFx0XHRcdGZpbGVuYW1lOiAnc2VydmVyLSVEQVRFJS5sb2cnLFxuXHRcdFx0XHRkaXJuYW1lOiBsb2dEaXJlY3RvcnksXG5cdFx0XHRcdGRhdGVQYXR0ZXJuOiAnWVlZWS1NTS1ERCcsXG5cdFx0XHRcdHppcHBlZEFyY2hpdmU6IHRydWUsXG5cdFx0XHRcdG1heFNpemU6ICcyMG0nLFxuXHRcdFx0XHRtYXhGaWxlczogJzE0ZCcsXG5cdFx0XHRcdGZvcm1hdDogY29tYmluZShcblx0XHRcdFx0XHR0aW1lc3RhbXAoeyBmb3JtYXQ6ICdZWVlZLU1NLUREIEhIOm1tOnNzJyB9KSxcblx0XHRcdFx0XHRsb2dGb3JtYXRcblx0XHRcdFx0KVxuXHRcdFx0fSlcblx0XHRdXG5cdH0pO1xuXG5cdHJldHVybiBsb2dnZXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNldHVwTG9nZ2VyO1xuIl19
