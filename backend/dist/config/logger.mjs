import { createLogger, format, transports } from 'winston';
import DailyRotateFile from 'winston-daily-rotate-file';
const { colorize, combine, errors, json, printf, timestamp } = format;
const logFormat = printf(({ level, message, timestamp, stack }) => {
	return `${timestamp} ${level}: ${stack || message}`;
});
function setupLogger({
	logLevel = 'debug',
	logDirectory = '../../data/logs/server/main',
	serviceName = 'guestbook-service',
	isProduction = process.env.NODE_ENV === 'development'
} = {}) {
	const logger = createLogger({
		level: isProduction ? 'info' : logLevel,
		format: combine(
			errors({ stack: true }),
			timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
			json()
		),
		defaultMeta: { service: serviceName },
		transports: [
			new transports.Console({
				format: combine(colorize(), logFormat)
			}),
			new DailyRotateFile({
				filename: 'server-%DATE%.log',
				dirname: logDirectory,
				datePattern: 'YYYY-MM-DD',
				zippedArchive: true,
				maxSize: '20m',
				maxFiles: '14d',
				format: combine(
					timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
					logFormat
				)
			})
		]
	});
	return logger;
}
export default setupLogger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZy9sb2dnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQVUsVUFBVSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ25FLE9BQU8sZUFBZSxNQUFNLDJCQUEyQixDQUFDO0FBRXhELE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLE1BQU0sQ0FBQztBQUV0RSxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7SUFDakUsT0FBTyxHQUFHLFNBQVMsSUFBSSxLQUFLLEtBQUssS0FBSyxJQUFJLE9BQU8sRUFBRSxDQUFDO0FBQ3JELENBQUMsQ0FBQyxDQUFDO0FBU0gsU0FBUyxXQUFXLENBQUMsRUFDcEIsUUFBUSxHQUFHLE9BQU8sRUFDbEIsWUFBWSxHQUFHLDZCQUE2QixFQUM1QyxXQUFXLEdBQUcsbUJBQW1CLEVBQ2pDLFlBQVksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxhQUFhLEtBQzlCLEVBQUU7SUFDekIsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDO1FBQzNCLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUTtRQUN2QyxNQUFNLEVBQUUsT0FBTyxDQUNkLE1BQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUN2QixTQUFTLENBQUMsRUFBRSxNQUFNLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyxFQUM1QyxJQUFJLEVBQUUsQ0FDTjtRQUNELFdBQVcsRUFBRSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUU7UUFDckMsVUFBVSxFQUFFO1lBQ1gsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDO2dCQUN0QixNQUFNLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLFNBQVMsQ0FBQzthQUN0QyxDQUFDO1lBQ0YsSUFBSSxlQUFlLENBQUM7Z0JBQ25CLFFBQVEsRUFBRSxtQkFBbUI7Z0JBQzdCLE9BQU8sRUFBRSxZQUFZO2dCQUNyQixXQUFXLEVBQUUsWUFBWTtnQkFDekIsYUFBYSxFQUFFLElBQUk7Z0JBQ25CLE9BQU8sRUFBRSxLQUFLO2dCQUNkLFFBQVEsRUFBRSxLQUFLO2dCQUNmLE1BQU0sRUFBRSxPQUFPLENBQ2QsU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLHFCQUFxQixFQUFFLENBQUMsRUFDNUMsU0FBUyxDQUNUO2FBQ0QsQ0FBQztTQUNGO0tBQ0QsQ0FBQyxDQUFDO0lBRUgsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDO0FBRUQsZUFBZSxXQUFXLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2cgfSBmcm9tICdjb25zb2xlJztcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciwgZm9ybWF0LCBMb2dnZXIsIHRyYW5zcG9ydHMgfSBmcm9tICd3aW5zdG9uJztcbmltcG9ydCBEYWlseVJvdGF0ZUZpbGUgZnJvbSAnd2luc3Rvbi1kYWlseS1yb3RhdGUtZmlsZSc7XG5cbmNvbnN0IHsgY29sb3JpemUsIGNvbWJpbmUsIGVycm9ycywganNvbiwgcHJpbnRmLCB0aW1lc3RhbXAgfSA9IGZvcm1hdDtcblxuY29uc3QgbG9nRm9ybWF0ID0gcHJpbnRmKCh7IGxldmVsLCBtZXNzYWdlLCB0aW1lc3RhbXAsIHN0YWNrIH0pID0+IHtcblx0cmV0dXJuIGAke3RpbWVzdGFtcH0gJHtsZXZlbH06ICR7c3RhY2sgfHwgbWVzc2FnZX1gO1xufSk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9nZ2VyRGVwZW5kZW5jaWVzIHtcblx0bG9nTGV2ZWw/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cdGxvZ0RpcmVjdG9yeT86IHN0cmluZyB8IHVuZGVmaW5lZDtcblx0c2VydmljZU5hbWU/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cdGlzUHJvZHVjdGlvbj86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIHNldHVwTG9nZ2VyKHtcblx0bG9nTGV2ZWwgPSAnZGVidWcnLFxuXHRsb2dEaXJlY3RvcnkgPSAnLi4vLi4vZGF0YS9sb2dzL3NlcnZlci9tYWluJyxcblx0c2VydmljZU5hbWUgPSAnZ3Vlc3Rib29rLXNlcnZpY2UnLFxuXHRpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50J1xufTogTG9nZ2VyRGVwZW5kZW5jaWVzID0ge30pOiBMb2dnZXIge1xuXHRjb25zdCBsb2dnZXIgPSBjcmVhdGVMb2dnZXIoe1xuXHRcdGxldmVsOiBpc1Byb2R1Y3Rpb24gPyAnaW5mbycgOiBsb2dMZXZlbCxcblx0XHRmb3JtYXQ6IGNvbWJpbmUoXG5cdFx0XHRlcnJvcnMoeyBzdGFjazogdHJ1ZSB9KSxcblx0XHRcdHRpbWVzdGFtcCh7IGZvcm1hdDogJ1lZWVktTU0tREQgSEg6bW06c3MnIH0pLFxuXHRcdFx0anNvbigpXG5cdFx0KSxcblx0XHRkZWZhdWx0TWV0YTogeyBzZXJ2aWNlOiBzZXJ2aWNlTmFtZSB9LFxuXHRcdHRyYW5zcG9ydHM6IFtcblx0XHRcdG5ldyB0cmFuc3BvcnRzLkNvbnNvbGUoe1xuXHRcdFx0XHRmb3JtYXQ6IGNvbWJpbmUoY29sb3JpemUoKSwgbG9nRm9ybWF0KVxuXHRcdFx0fSksXG5cdFx0XHRuZXcgRGFpbHlSb3RhdGVGaWxlKHtcblx0XHRcdFx0ZmlsZW5hbWU6ICdzZXJ2ZXItJURBVEUlLmxvZycsXG5cdFx0XHRcdGRpcm5hbWU6IGxvZ0RpcmVjdG9yeSxcblx0XHRcdFx0ZGF0ZVBhdHRlcm46ICdZWVlZLU1NLUREJyxcblx0XHRcdFx0emlwcGVkQXJjaGl2ZTogdHJ1ZSxcblx0XHRcdFx0bWF4U2l6ZTogJzIwbScsXG5cdFx0XHRcdG1heEZpbGVzOiAnMTRkJyxcblx0XHRcdFx0Zm9ybWF0OiBjb21iaW5lKFxuXHRcdFx0XHRcdHRpbWVzdGFtcCh7IGZvcm1hdDogJ1lZWVktTU0tREQgSEg6bW06c3MnIH0pLFxuXHRcdFx0XHRcdGxvZ0Zvcm1hdFxuXHRcdFx0XHQpXG5cdFx0XHR9KVxuXHRcdF1cblx0fSk7XG5cblx0cmV0dXJuIGxvZ2dlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2V0dXBMb2dnZXI7XG4iXX0=
