import { Sequelize } from 'sequelize';
import AppError from '../errors/AppError.mjs';
let sequelize = null;
export async function initializeDatabase({
	logger,
	getFeatureFlags,
	getSecrets
}) {
	const featureFlags = getFeatureFlags(logger);
	const secrets = await getSecrets();
	const SEQUELIZE_LOGGING = featureFlags.sequelizeLoggingFlag;
	if (!sequelize) {
		logger.info(`Sequelize logging set to ${SEQUELIZE_LOGGING}`);
		sequelize = new Sequelize(
			secrets.DB_NAME,
			secrets.DB_USER,
			secrets.DB_PASSWORD,
			{
				host: secrets.DB_HOST,
				dialect: secrets.DB_DIALECT,
				logging: SEQUELIZE_LOGGING ? msg => logger.info(msg) : false
			}
		);
		try {
			await sequelize.authenticate();
			logger.info('Connection has been established successfully.');
		} catch (error) {
			if (error instanceof Error) {
				logger.error(`Unable to connect to the database: ${error}`);
			} else {
				logger.error(
					'Unable to connect to the database due to an unknown error'
				);
			}
			throw error;
		}
	}
	return sequelize;
}
export function getSequelizeInstance({ logger }) {
	logger.info('getSequelizeInstance() executing');
	if (!sequelize) {
		logger.error('Sequelize instance is not initialized');
		throw new AppError(
			{
				message:
					'Sequelize instance is not initialized. Call initializeDatabase() before attempting to retrieve the Sequelize instance.',
				statusCode: 500,
				isOperational: true,
				errorCode: 'SEQUELIZE_NOT_INITIALIZED'
			},
			{ logger }
		);
	}
	return sequelize;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnL2RiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFdEMsT0FBTyxRQUFRLE1BQU0sb0JBQW9CLENBQUM7QUFpQjFDLElBQUksU0FBUyxHQUFxQixJQUFJLENBQUM7QUFFdkMsTUFBTSxDQUFDLEtBQUssVUFBVSxrQkFBa0IsQ0FBQyxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFrQjtJQUMvRixNQUFNLFlBQVksR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0MsTUFBTSxPQUFPLEdBQWMsTUFBTSxVQUFVLEVBQUUsQ0FBQztJQUU5QyxNQUFNLGlCQUFpQixHQUFHLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQztJQUU1RCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDaEIsTUFBTSxDQUFDLElBQUksQ0FDViw0QkFBNEIsaUJBQWlCLEVBQUUsQ0FDL0MsQ0FBQztRQUVGLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FDeEIsT0FBTyxDQUFDLE9BQU8sRUFDZixPQUFPLENBQUMsT0FBTyxFQUNmLE9BQU8sQ0FBQyxXQUFXLEVBQ25CO1lBQ0MsSUFBSSxFQUFFLE9BQU8sQ0FBQyxPQUFPO1lBQ3JCLE9BQU8sRUFBRSxPQUFPLENBQUMsVUFBVTtZQUMzQixPQUFPLEVBQUUsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBVyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLO1NBQ3RFLENBQ0QsQ0FBQztRQUVGLElBQUksQ0FBQztZQUNKLE1BQU0sU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQy9CLE1BQU0sQ0FBQyxJQUFJLENBQUMsK0NBQStDLENBQUMsQ0FBQztRQUM5RCxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNoQixJQUFJLEtBQUssWUFBWSxLQUFLLEVBQUUsQ0FBQztnQkFDNUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxzQ0FBc0MsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUM3RCxDQUFDO2lCQUFNLENBQUM7Z0JBQ1AsTUFBTSxDQUFDLEtBQUssQ0FDWCwyREFBMkQsQ0FDM0QsQ0FBQztZQUNILENBQUM7WUFDRCxNQUFNLEtBQUssQ0FBQztRQUNiLENBQUM7SUFDRixDQUFDO0lBRUQsT0FBTyxTQUFTLENBQUM7QUFDbEIsQ0FBQztBQUVELE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxFQUFFLE1BQU0sRUFBa0M7SUFDM0UsTUFBTSxDQUFDLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO0lBQ2hELElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNiLE1BQU0sQ0FBQyxLQUFLLENBQUMsdUNBQXVDLENBQUMsQ0FBQztRQUN0RCxNQUFNLElBQUksUUFBUSxDQUFDO1lBQ2YsT0FBTyxFQUFFLHdIQUF3SDtZQUNqSSxVQUFVLEVBQUUsR0FBRztZQUNmLGFBQWEsRUFBRSxJQUFJO1lBQ25CLFNBQVMsRUFBRSwyQkFBMkI7U0FDekMsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDbkIsQ0FBQztJQUVELE9BQU8sU0FBUyxDQUFDO0FBQ3JCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXF1ZWxpemUgfSBmcm9tICdzZXF1ZWxpemUnO1xuaW1wb3J0IHsgZ2V0RmVhdHVyZUZsYWdzIH0gZnJvbSAnLi9mZWF0dXJlRmxhZ3MnO1xuaW1wb3J0IEFwcEVycm9yIGZyb20gJy4uL2Vycm9ycy9BcHBFcnJvcic7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICd3aW5zdG9uJztcblxuZXhwb3J0IGludGVyZmFjZSBEQlNlY3JldHMge1xuXHREQl9OQU1FOiBzdHJpbmc7XG5cdERCX1VTRVI6IHN0cmluZztcblx0REJfUEFTU1dPUkQ6IHN0cmluZztcblx0REJfSE9TVDogc3RyaW5nO1xuXHREQl9ESUFMRUNUOiAnbXlzcWwnIHwgJ3Bvc3RncmVzJyB8ICdzcWxpdGUnIHwgJ21hcmlhZGInIHwgJ21zc3FsJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEQkRlcGVuZGVuY2llcyB7XG5cdGxvZ2dlcjogTG9nZ2VyO1xuXHRnZXRGZWF0dXJlRmxhZ3M6IChsb2dnZXI6IGFueSkgPT4gUmV0dXJuVHlwZTx0eXBlb2YgZ2V0RmVhdHVyZUZsYWdzPjtcblx0Z2V0U2VjcmV0czogKCkgPT4gUHJvbWlzZTxEQlNlY3JldHM+O1xufVxuXG5sZXQgc2VxdWVsaXplOiBTZXF1ZWxpemUgfCBudWxsID0gbnVsbDtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemVEYXRhYmFzZSh7IGxvZ2dlciwgZ2V0RmVhdHVyZUZsYWdzLCBnZXRTZWNyZXRzIH06IERCRGVwZW5kZW5jaWVzKTogUHJvbWlzZTxTZXF1ZWxpemU+IHtcblx0Y29uc3QgZmVhdHVyZUZsYWdzID0gZ2V0RmVhdHVyZUZsYWdzKGxvZ2dlcik7XG5cdGNvbnN0IHNlY3JldHM6IERCU2VjcmV0cyA9IGF3YWl0IGdldFNlY3JldHMoKTtcblxuXHRjb25zdCBTRVFVRUxJWkVfTE9HR0lORyA9IGZlYXR1cmVGbGFncy5zZXF1ZWxpemVMb2dnaW5nRmxhZztcblxuXHRpZiAoIXNlcXVlbGl6ZSkge1xuXHRcdGxvZ2dlci5pbmZvKFxuXHRcdFx0YFNlcXVlbGl6ZSBsb2dnaW5nIHNldCB0byAke1NFUVVFTElaRV9MT0dHSU5HfWBcblx0XHQpO1xuXG5cdFx0c2VxdWVsaXplID0gbmV3IFNlcXVlbGl6ZShcblx0XHRcdHNlY3JldHMuREJfTkFNRSxcblx0XHRcdHNlY3JldHMuREJfVVNFUixcblx0XHRcdHNlY3JldHMuREJfUEFTU1dPUkQsXG5cdFx0XHR7XG5cdFx0XHRcdGhvc3Q6IHNlY3JldHMuREJfSE9TVCxcblx0XHRcdFx0ZGlhbGVjdDogc2VjcmV0cy5EQl9ESUFMRUNULFxuXHRcdFx0XHRsb2dnaW5nOiBTRVFVRUxJWkVfTE9HR0lORyA/IChtc2c6IHN0cmluZykgPT4gbG9nZ2VyLmluZm8obXNnKSA6IGZhbHNlLFxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHR0cnkge1xuXHRcdFx0YXdhaXQgc2VxdWVsaXplLmF1dGhlbnRpY2F0ZSgpO1xuXHRcdFx0bG9nZ2VyLmluZm8oJ0Nvbm5lY3Rpb24gaGFzIGJlZW4gZXN0YWJsaXNoZWQgc3VjY2Vzc2Z1bGx5LicpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuXHRcdFx0XHRsb2dnZXIuZXJyb3IoYFVuYWJsZSB0byBjb25uZWN0IHRvIHRoZSBkYXRhYmFzZTogJHtlcnJvcn1gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0XHQnVW5hYmxlIHRvIGNvbm5lY3QgdG8gdGhlIGRhdGFiYXNlIGR1ZSB0byBhbiB1bmtub3duIGVycm9yJ1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHNlcXVlbGl6ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlcXVlbGl6ZUluc3RhbmNlKHsgbG9nZ2VyIH06IFBpY2s8REJEZXBlbmRlbmNpZXMsICdsb2dnZXInPik6IFNlcXVlbGl6ZSB7XG4gICAgbG9nZ2VyLmluZm8oJ2dldFNlcXVlbGl6ZUluc3RhbmNlKCkgZXhlY3V0aW5nJyk7XG4gICAgaWYgKCFzZXF1ZWxpemUpIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yKCdTZXF1ZWxpemUgaW5zdGFuY2UgaXMgbm90IGluaXRpYWxpemVkJyk7XG4gICAgICAgIHRocm93IG5ldyBBcHBFcnJvcih7XG4gICAgICAgICAgICBtZXNzYWdlOiAnU2VxdWVsaXplIGluc3RhbmNlIGlzIG5vdCBpbml0aWFsaXplZC4gQ2FsbCBpbml0aWFsaXplRGF0YWJhc2UoKSBiZWZvcmUgYXR0ZW1wdGluZyB0byByZXRyaWV2ZSB0aGUgU2VxdWVsaXplIGluc3RhbmNlLicsXG4gICAgICAgICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgICAgICAgICBpc09wZXJhdGlvbmFsOiB0cnVlLFxuICAgICAgICAgICAgZXJyb3JDb2RlOiAnU0VRVUVMSVpFX05PVF9JTklUSUFMSVpFRCcsXG4gICAgICAgIH0sIHsgbG9nZ2VyIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBzZXF1ZWxpemU7XG59XG4iXX0=
