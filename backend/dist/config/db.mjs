import { Sequelize } from 'sequelize';
import AppError from '../errors/AppError';
let sequelize = null;
export async function initializeDatabase({
	logger,
	getFeatureFlags,
	getSecrets
}) {
	const featureFlags = getFeatureFlags(logger);
	const secrets = await getSecrets();
	const SEQUELIZE_LOGGING = featureFlags.sequelizeLoggingFlag;
	if (!sequelize) {
		logger.info(`Sequelize logging set to ${SEQUELIZE_LOGGING}`);
		const sequelizeOptions = {
			host: secrets.DB_HOST,
			dialect: secrets.DB_DIALECT,
			logging: SEQUELIZE_LOGGING ? msg => logger.info(msg) : false
		};
		sequelize = new Sequelize(
			secrets.DB_NAME,
			secrets.DB_USER,
			secrets.DB_PASSWORD,
			sequelizeOptions
		);
		try {
			await sequelize.authenticate();
			logger.info('Connection has been established successfully.');
		} catch (error) {
			const errorMessage =
				error instanceof Error
					? `Unable to connect to the database: ${error.message}`
					: 'Unable to connect to the database due to an unknown error';
			logger.error(errorMessage);
			throw new AppError(
				{
					message: errorMessage,
					statusCode: 500,
					isOperational: true,
					errorCode: 'DB_CONNECTION_FAILED'
				},
				{ logger }
			);
		}
	}
	return sequelize;
}
export function getSequelizeInstance({ logger }) {
	logger.info('getSequelizeInstance() executing');
	if (!sequelize) {
		const error = new AppError(
			{
				message:
					'Sequelize instance is not initialized. Call initializeDatabase() before attempting to retrieve the Sequelize instance.',
				statusCode: 500,
				isOperational: true,
				errorCode: 'SEQUELIZE_NOT_INITIALIZED'
			},
			{ logger }
		);
		logger.error(error.message);
		throw error;
	}
	return sequelize;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnL2RiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVcsTUFBTSxXQUFXLENBQUM7QUFFL0MsT0FBTyxRQUFRLE1BQU0sb0JBQW9CLENBQUM7QUFpQjFDLElBQUksU0FBUyxHQUFxQixJQUFJLENBQUM7QUFFdkMsTUFBTSxDQUFDLEtBQUssVUFBVSxrQkFBa0IsQ0FBQyxFQUN4QyxNQUFNLEVBQ04sZUFBZSxFQUNmLFVBQVUsRUFDTTtJQUNoQixNQUFNLFlBQVksR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0MsTUFBTSxPQUFPLEdBQWMsTUFBTSxVQUFVLEVBQUUsQ0FBQztJQUU5QyxNQUFNLGlCQUFpQixHQUFHLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQztJQUU1RCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDaEIsTUFBTSxDQUFDLElBQUksQ0FDViw0QkFBNEIsaUJBQWlCLEVBQUUsQ0FDL0MsQ0FBQztRQUVGLE1BQU0sZ0JBQWdCLEdBQVk7WUFDakMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxPQUFPO1lBQ3JCLE9BQU8sRUFBRSxPQUFPLENBQUMsVUFBVTtZQUMzQixPQUFPLEVBQUUsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBVyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLO1NBQ3RFLENBQUE7UUFFRCxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQ3hCLE9BQU8sQ0FBQyxPQUFPLEVBQ2YsT0FBTyxDQUFDLE9BQU8sRUFDZixPQUFPLENBQUMsV0FBVyxFQUNuQixnQkFBZ0IsQ0FDaEIsQ0FBQztRQUVGLElBQUksQ0FBQztZQUNKLE1BQU0sU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQy9CLE1BQU0sQ0FBQyxJQUFJLENBQUMsK0NBQStDLENBQUMsQ0FBQztRQUM5RCxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNoQixNQUFNLFlBQVksR0FDakIsS0FBSyxZQUFZLEtBQUs7Z0JBQ3JCLENBQUMsQ0FBQyxzQ0FBc0MsS0FBSyxDQUFDLE9BQU8sRUFBRTtnQkFDdkQsQ0FBQyxDQUFDLDJEQUEyRCxDQUFDO1lBRWhFLE1BQU0sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7WUFFM0IsTUFBTSxJQUFJLFFBQVEsQ0FBQztnQkFDbEIsT0FBTyxFQUFFLFlBQVk7Z0JBQ3JCLFVBQVUsRUFBRSxHQUFHO2dCQUNmLGFBQWEsRUFBRSxJQUFJO2dCQUNuQixTQUFTLEVBQUUsc0JBQXNCO2FBQ2pDLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLENBQUM7SUFDRixDQUFDO0lBRUQsT0FBTyxTQUFTLENBQUM7QUFDbEIsQ0FBQztBQUVELE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxFQUNwQyxNQUFNLEVBQzBCO0lBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0NBQWtDLENBQUMsQ0FBQztJQUVoRCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDbkIsTUFBTSxLQUFLLEdBQUcsSUFBSSxRQUFRLENBQUM7WUFDMUIsT0FBTyxFQUNOLHdIQUF3SDtZQUN6SCxVQUFVLEVBQUUsR0FBRztZQUNmLGFBQWEsRUFBRSxJQUFJO1lBQ25CLFNBQVMsRUFBRSwyQkFBMkI7U0FDdEMsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFFZixNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1QixNQUFNLEtBQUssQ0FBQztJQUNiLENBQUM7SUFFRSxPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2VxdWVsaXplLCBPcHRpb25zIH0gZnJvbSAnc2VxdWVsaXplJztcbmltcG9ydCB7IGdldEZlYXR1cmVGbGFncyB9IGZyb20gJy4uL3V0aWxzL2ZlYXR1cmVGbGFncyc7XG5pbXBvcnQgQXBwRXJyb3IgZnJvbSAnLi4vZXJyb3JzL0FwcEVycm9yJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJ3dpbnN0b24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIERCU2VjcmV0cyB7XG5cdERCX05BTUU6IHN0cmluZztcblx0REJfVVNFUjogc3RyaW5nO1xuXHREQl9QQVNTV09SRDogc3RyaW5nO1xuXHREQl9IT1NUOiBzdHJpbmc7XG5cdERCX0RJQUxFQ1Q6ICdteXNxbCcgfCAncG9zdGdyZXMnIHwgJ3NxbGl0ZScgfCAnbWFyaWFkYicgfCAnbXNzcWwnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERCRGVwZW5kZW5jaWVzIHtcblx0bG9nZ2VyOiBMb2dnZXI7XG5cdGdldEZlYXR1cmVGbGFnczogKGxvZ2dlcjogYW55KSA9PiBSZXR1cm5UeXBlPHR5cGVvZiBnZXRGZWF0dXJlRmxhZ3M+O1xuXHRnZXRTZWNyZXRzOiAoKSA9PiBQcm9taXNlPERCU2VjcmV0cz47XG59XG5cbmxldCBzZXF1ZWxpemU6IFNlcXVlbGl6ZSB8IG51bGwgPSBudWxsO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZURhdGFiYXNlKHtcblx0bG9nZ2VyLFxuXHRnZXRGZWF0dXJlRmxhZ3MsXG5cdGdldFNlY3JldHNcbn06IERCRGVwZW5kZW5jaWVzKTogUHJvbWlzZTxTZXF1ZWxpemU+IHtcblx0Y29uc3QgZmVhdHVyZUZsYWdzID0gZ2V0RmVhdHVyZUZsYWdzKGxvZ2dlcik7XG5cdGNvbnN0IHNlY3JldHM6IERCU2VjcmV0cyA9IGF3YWl0IGdldFNlY3JldHMoKTtcblxuXHRjb25zdCBTRVFVRUxJWkVfTE9HR0lORyA9IGZlYXR1cmVGbGFncy5zZXF1ZWxpemVMb2dnaW5nRmxhZztcblxuXHRpZiAoIXNlcXVlbGl6ZSkge1xuXHRcdGxvZ2dlci5pbmZvKFxuXHRcdFx0YFNlcXVlbGl6ZSBsb2dnaW5nIHNldCB0byAke1NFUVVFTElaRV9MT0dHSU5HfWBcblx0XHQpO1xuXG5cdFx0Y29uc3Qgc2VxdWVsaXplT3B0aW9uczogT3B0aW9ucyA9IHtcblx0XHRcdGhvc3Q6IHNlY3JldHMuREJfSE9TVCxcblx0XHRcdGRpYWxlY3Q6IHNlY3JldHMuREJfRElBTEVDVCxcblx0XHRcdGxvZ2dpbmc6IFNFUVVFTElaRV9MT0dHSU5HID8gKG1zZzogc3RyaW5nKSA9PiBsb2dnZXIuaW5mbyhtc2cpIDogZmFsc2UsXG5cdFx0fVxuXG5cdFx0c2VxdWVsaXplID0gbmV3IFNlcXVlbGl6ZShcblx0XHRcdHNlY3JldHMuREJfTkFNRSxcblx0XHRcdHNlY3JldHMuREJfVVNFUixcblx0XHRcdHNlY3JldHMuREJfUEFTU1dPUkQsXG5cdFx0XHRzZXF1ZWxpemVPcHRpb25zXG5cdFx0KTtcblxuXHRcdHRyeSB7XG5cdFx0XHRhd2FpdCBzZXF1ZWxpemUuYXV0aGVudGljYXRlKCk7XG5cdFx0XHRsb2dnZXIuaW5mbygnQ29ubmVjdGlvbiBoYXMgYmVlbiBlc3RhYmxpc2hlZCBzdWNjZXNzZnVsbHkuJyk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGNvbnN0IGVycm9yTWVzc2FnZSA9XG5cdFx0XHRcdGVycm9yIGluc3RhbmNlb2YgRXJyb3Jcblx0XHRcdFx0XHQ/IGBVbmFibGUgdG8gY29ubmVjdCB0byB0aGUgZGF0YWJhc2U6ICR7ZXJyb3IubWVzc2FnZX1gXG5cdFx0XHRcdFx0OiAnVW5hYmxlIHRvIGNvbm5lY3QgdG8gdGhlIGRhdGFiYXNlIGR1ZSB0byBhbiB1bmtub3duIGVycm9yJztcblxuXHRcdFx0bG9nZ2VyLmVycm9yKGVycm9yTWVzc2FnZSk7XG5cblx0XHRcdHRocm93IG5ldyBBcHBFcnJvcih7XG5cdFx0XHRcdG1lc3NhZ2U6IGVycm9yTWVzc2FnZSxcblx0XHRcdFx0c3RhdHVzQ29kZTogNTAwLFxuXHRcdFx0XHRpc09wZXJhdGlvbmFsOiB0cnVlLFxuXHRcdFx0XHRlcnJvckNvZGU6ICdEQl9DT05ORUNUSU9OX0ZBSUxFRCcsXG5cdFx0XHR9LCB7IGxvZ2dlciB9KTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gc2VxdWVsaXplO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VxdWVsaXplSW5zdGFuY2Uoe1xuXHRsb2dnZXJcbn06IFBpY2s8REJEZXBlbmRlbmNpZXMsICdsb2dnZXInPik6IFNlcXVlbGl6ZSB7XG4gICAgbG9nZ2VyLmluZm8oJ2dldFNlcXVlbGl6ZUluc3RhbmNlKCkgZXhlY3V0aW5nJyk7XG5cbiAgICBpZiAoIXNlcXVlbGl6ZSkge1xuXHRcdGNvbnN0IGVycm9yID0gbmV3IEFwcEVycm9yKHtcblx0XHRcdG1lc3NhZ2U6XG5cdFx0XHRcdCdTZXF1ZWxpemUgaW5zdGFuY2UgaXMgbm90IGluaXRpYWxpemVkLiBDYWxsIGluaXRpYWxpemVEYXRhYmFzZSgpIGJlZm9yZSBhdHRlbXB0aW5nIHRvIHJldHJpZXZlIHRoZSBTZXF1ZWxpemUgaW5zdGFuY2UuJyxcblx0XHRcdHN0YXR1c0NvZGU6IDUwMCxcblx0XHRcdGlzT3BlcmF0aW9uYWw6IHRydWUsXG5cdFx0XHRlcnJvckNvZGU6ICdTRVFVRUxJWkVfTk9UX0lOSVRJQUxJWkVEJyxcblx0XHR9LCB7IGxvZ2dlciB9KTtcblxuXHRcdGxvZ2dlci5lcnJvcihlcnJvci5tZXNzYWdlKTtcblx0XHR0aHJvdyBlcnJvcjtcblx0fVxuXG4gICAgcmV0dXJuIHNlcXVlbGl6ZTtcbn1cbiJdfQ==
