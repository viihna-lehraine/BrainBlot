import { Sequelize } from 'sequelize';
import { errorClasses, ErrorSeverity } from './errorClasses.mjs';
import { processError } from '../utils/processError.mjs';
import { validateDependencies } from '../utils/validateDependencies.mjs';
const { AppError, DatabaseError, DependencyError, InvalidConfigurationError } =
	errorClasses;
let sequelize = null;
export async function initializeDatabase({ logger, featureFlags, getSecrets }) {
	try {
		validateDependencies(
			[
				{ name: 'logger', instance: logger },
				{ name: 'featureFlags', instance: featureFlags },
				{ name: 'getSecrets', instance: getSecrets }
			],
			logger || console
		);
		const secrets = await getSecrets();
		if (
			!secrets.DB_NAME ||
			!secrets.DB_USER ||
			!secrets.DB_PASSWORD ||
			!secrets.DB_HOST ||
			!secrets.DB_DIALECT
		) {
			throw new InvalidConfigurationError(
				'Database credentials are missing. Check DB_NAME, DB_USER, and DB_PASSWORD in your configuration.',
				{ DB_NAME: secrets.DB_NAME, DB_USER: secrets.DB_USER }
			);
		}
		if (!sequelize) {
			logger.info(
				`Sequelize logging set to ${featureFlags.sequelizeLoggingFlag}`
			);
			const sequelizeOptions = {
				host: secrets.DB_HOST,
				dialect: secrets.DB_DIALECT,
				logging: featureFlags.sequelizeLoggingFlag
					? msg => logger.info(msg)
					: false
			};
			try {
				sequelize = new Sequelize(
					secrets.DB_NAME,
					secrets.DB_USER,
					secrets.DB_PASSWORD,
					sequelizeOptions
				);
				await sequelize.authenticate();
				logger.info('Connection has been established successfully.');
			} catch (dbError) {
				const errorMessage =
					dbError instanceof Error
						? dbError.message
						: 'Unknown error';
				throw new DatabaseError(
					`Failed to authenticate database connection: ${errorMessage}`,
					{ DB_HOST: secrets.DB_HOST, DB_DIALECT: secrets.DB_DIALECT }
				);
			}
		}
		return sequelize;
	} catch (error) {
		processError(error, logger || console);
		if (error instanceof AppError) {
			throw error;
		} else {
			throw new DependencyError(
				'Database initialization failed due to a dependency issue.',
				{ originalError: error }
			);
		}
	}
}
export function getSequelizeInstance({ logger }) {
	logger.info('getSequelizeInstance() executing');
	if (!sequelize) {
		const error = new AppError(
			'Sequelize instance is not initialized. Call initializeDatabase() before attempting to retrieve the Sequelize instance.',
			500,
			ErrorSeverity.FATAL,
			'SEQUELIZE_NOT_INITIALIZED'
		);
		processError(error, logger || console);
		throw error;
	}
	return sequelize;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnL2RiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBVyxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFL0MsT0FBTyxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDckQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFckUsTUFBTSxFQUNMLFFBQVEsRUFDUixhQUFhLEVBQ2IsZUFBZSxFQUNmLHlCQUF5QixFQUN6QixHQUFHLFlBQVksQ0FBQztBQWdCakIsSUFBSSxTQUFTLEdBQXFCLElBQUksQ0FBQztBQUV2QyxNQUFNLENBQUMsS0FBSyxVQUFVLGtCQUFrQixDQUFDLEVBQ3hDLE1BQU0sRUFDTixZQUFZLEVBQ1osVUFBVSxFQUNNO0lBQ2hCLElBQUksQ0FBQztRQUNKLG9CQUFvQixDQUNuQjtZQUNDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO1lBQ3BDLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFO1lBQ2hELEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFO1NBQzVDLEVBQ0QsTUFBTSxJQUFJLE9BQU8sQ0FDakIsQ0FBQztRQUVGLE1BQU0sT0FBTyxHQUFjLE1BQU0sVUFBVSxFQUFFLENBQUM7UUFFOUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDN0csTUFBTSxJQUFJLHlCQUF5QixDQUNsQyxrR0FBa0csRUFDbEcsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUN0RCxDQUFDO1FBQ0gsQ0FBQztRQUVELElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNoQixNQUFNLENBQUMsSUFBSSxDQUNWLDRCQUE0QixZQUFZLENBQUMsb0JBQW9CLEVBQUUsQ0FDL0QsQ0FBQztZQUVGLE1BQU0sZ0JBQWdCLEdBQVk7Z0JBQ2pDLElBQUksRUFBRSxPQUFPLENBQUMsT0FBTztnQkFDckIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxVQUFVO2dCQUMzQixPQUFPLEVBQUUsWUFBWSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQVcsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSzthQUN0RixDQUFBO1lBRUQsSUFBSSxDQUFDO2dCQUNKLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FDeEIsT0FBTyxDQUFDLE9BQU8sRUFDZixPQUFPLENBQUMsT0FBTyxFQUNmLE9BQU8sQ0FBQyxXQUFXLEVBQ25CLGdCQUFnQixDQUNoQixDQUFDO2dCQUVGLE1BQU0sU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO2dCQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLCtDQUErQyxDQUFDLENBQUM7WUFDOUQsQ0FBQztZQUFDLE9BQU8sT0FBZ0IsRUFBRSxDQUFDO2dCQUMzQixNQUFNLFlBQVksR0FBRyxDQUFDLE9BQU8sWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDO2dCQUNwRixNQUFNLElBQUksYUFBYSxDQUN0QiwrQ0FBK0MsWUFBWSxFQUFFLEVBQzdELEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FDNUQsQ0FBQTtZQUNGLENBQUM7UUFDRixDQUFDO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFDbEIsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsWUFBWSxDQUFDLEtBQWMsRUFBRSxNQUFNLElBQUksT0FBTyxDQUFDLENBQUM7UUFDaEQsSUFBSSxLQUFLLFlBQVksUUFBUSxFQUFFLENBQUM7WUFDL0IsTUFBTSxLQUFLLENBQUM7UUFDYixDQUFDO2FBQU0sQ0FBQztZQUNQLE1BQU0sSUFBSSxlQUFlLENBQ3hCLDJEQUEyRCxFQUMzRCxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsQ0FDeEIsQ0FBQztRQUNILENBQUM7SUFDRixDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxFQUNwQyxNQUFNLEVBQzBCO0lBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0NBQWtDLENBQUMsQ0FBQztJQUVoRCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDbkIsTUFBTSxLQUFLLEdBQUcsSUFBSSxRQUFRLENBQ3pCLHdIQUF3SCxFQUN4SCxHQUFHLEVBQ0gsYUFBYSxDQUFDLEtBQUssRUFDbkIsMkJBQTJCLENBQzNCLENBQUM7UUFFRixZQUFZLENBQUMsS0FBSyxFQUFFLE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQztRQUN2QyxNQUFNLEtBQUssQ0FBQztJQUNiLENBQUM7SUFFRSxPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3B0aW9ucywgU2VxdWVsaXplIH0gZnJvbSAnc2VxdWVsaXplJztcbmltcG9ydCB7IEZlYXR1cmVGbGFncyB9IGZyb20gJy4vZW52aXJvbm1lbnRDb25maWcnO1xuaW1wb3J0IHsgZXJyb3JDbGFzc2VzLCBFcnJvclNldmVyaXR5IH0gZnJvbSAnLi9lcnJvckNsYXNzZXMnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgcHJvY2Vzc0Vycm9yIH0gZnJvbSAnLi4vdXRpbHMvcHJvY2Vzc0Vycm9yJztcbmltcG9ydCB7IHZhbGlkYXRlRGVwZW5kZW5jaWVzIH0gZnJvbSAnLi4vdXRpbHMvdmFsaWRhdGVEZXBlbmRlbmNpZXMnO1xuXG5jb25zdCB7XG5cdEFwcEVycm9yLFxuXHREYXRhYmFzZUVycm9yLFxuXHREZXBlbmRlbmN5RXJyb3IsXG5cdEludmFsaWRDb25maWd1cmF0aW9uRXJyb3Jcbn0gPSBlcnJvckNsYXNzZXM7XG5cbmV4cG9ydCBpbnRlcmZhY2UgREJTZWNyZXRzIHtcblx0REJfTkFNRTogc3RyaW5nO1xuXHREQl9VU0VSOiBzdHJpbmc7XG5cdERCX1BBU1NXT1JEOiBzdHJpbmc7XG5cdERCX0hPU1Q6IHN0cmluZztcblx0REJfRElBTEVDVDogJ215c3FsJyB8ICdwb3N0Z3JlcycgfCAnc3FsaXRlJyB8ICdtYXJpYWRiJyB8ICdtc3NxbCc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgREJEZXBlbmRlbmNpZXMge1xuXHRsb2dnZXI6IExvZ2dlcjtcblx0ZmVhdHVyZUZsYWdzOiBGZWF0dXJlRmxhZ3MsXG5cdGdldFNlY3JldHM6ICgpID0+IFByb21pc2U8REJTZWNyZXRzPjtcbn1cblxubGV0IHNlcXVlbGl6ZTogU2VxdWVsaXplIHwgbnVsbCA9IG51bGw7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0aWFsaXplRGF0YWJhc2Uoe1xuXHRsb2dnZXIsXG5cdGZlYXR1cmVGbGFncyxcblx0Z2V0U2VjcmV0c1xufTogREJEZXBlbmRlbmNpZXMpOiBQcm9taXNlPFNlcXVlbGl6ZT4ge1xuXHR0cnkge1xuXHRcdHZhbGlkYXRlRGVwZW5kZW5jaWVzKFxuXHRcdFx0W1xuXHRcdFx0XHR7IG5hbWU6ICdsb2dnZXInLCBpbnN0YW5jZTogbG9nZ2VyIH0sXG5cdFx0XHRcdHsgbmFtZTogJ2ZlYXR1cmVGbGFncycsIGluc3RhbmNlOiBmZWF0dXJlRmxhZ3MgfSxcblx0XHRcdFx0eyBuYW1lOiAnZ2V0U2VjcmV0cycsIGluc3RhbmNlOiBnZXRTZWNyZXRzIH1cblx0XHRcdF0sXG5cdFx0XHRsb2dnZXIgfHwgY29uc29sZVxuXHRcdCk7XG5cblx0XHRjb25zdCBzZWNyZXRzOiBEQlNlY3JldHMgPSBhd2FpdCBnZXRTZWNyZXRzKCk7XG5cblx0XHRpZiAoIXNlY3JldHMuREJfTkFNRSB8fCAhc2VjcmV0cy5EQl9VU0VSIHx8ICFzZWNyZXRzLkRCX1BBU1NXT1JEIHx8ICFzZWNyZXRzLkRCX0hPU1QgfHwgIXNlY3JldHMuREJfRElBTEVDVCkge1xuXHRcdFx0dGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uRXJyb3IoXG5cdFx0XHRcdCdEYXRhYmFzZSBjcmVkZW50aWFscyBhcmUgbWlzc2luZy4gQ2hlY2sgREJfTkFNRSwgREJfVVNFUiwgYW5kIERCX1BBU1NXT1JEIGluIHlvdXIgY29uZmlndXJhdGlvbi4nLFxuXHRcdFx0XHR7IERCX05BTUU6IHNlY3JldHMuREJfTkFNRSwgREJfVVNFUjogc2VjcmV0cy5EQl9VU0VSIH1cblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0aWYgKCFzZXF1ZWxpemUpIHtcblx0XHRcdGxvZ2dlci5pbmZvKFxuXHRcdFx0XHRgU2VxdWVsaXplIGxvZ2dpbmcgc2V0IHRvICR7ZmVhdHVyZUZsYWdzLnNlcXVlbGl6ZUxvZ2dpbmdGbGFnfWBcblx0XHRcdCk7XG5cblx0XHRcdGNvbnN0IHNlcXVlbGl6ZU9wdGlvbnM6IE9wdGlvbnMgPSB7XG5cdFx0XHRcdGhvc3Q6IHNlY3JldHMuREJfSE9TVCxcblx0XHRcdFx0ZGlhbGVjdDogc2VjcmV0cy5EQl9ESUFMRUNULFxuXHRcdFx0XHRsb2dnaW5nOiBmZWF0dXJlRmxhZ3Muc2VxdWVsaXplTG9nZ2luZ0ZsYWcgPyAobXNnOiBzdHJpbmcpID0+IGxvZ2dlci5pbmZvKG1zZykgOiBmYWxzZSxcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0c2VxdWVsaXplID0gbmV3IFNlcXVlbGl6ZShcblx0XHRcdFx0XHRzZWNyZXRzLkRCX05BTUUsXG5cdFx0XHRcdFx0c2VjcmV0cy5EQl9VU0VSLFxuXHRcdFx0XHRcdHNlY3JldHMuREJfUEFTU1dPUkQsXG5cdFx0XHRcdFx0c2VxdWVsaXplT3B0aW9uc1xuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdGF3YWl0IHNlcXVlbGl6ZS5hdXRoZW50aWNhdGUoKTtcblx0XHRcdFx0bG9nZ2VyLmluZm8oJ0Nvbm5lY3Rpb24gaGFzIGJlZW4gZXN0YWJsaXNoZWQgc3VjY2Vzc2Z1bGx5LicpO1xuXHRcdFx0fSBjYXRjaCAoZGJFcnJvcjogdW5rbm93bikge1xuXHRcdFx0XHRjb25zdCBlcnJvck1lc3NhZ2UgPSAoZGJFcnJvciBpbnN0YW5jZW9mIEVycm9yKSA/IGRiRXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJztcblx0XHRcdFx0dGhyb3cgbmV3IERhdGFiYXNlRXJyb3IoXG5cdFx0XHRcdFx0YEZhaWxlZCB0byBhdXRoZW50aWNhdGUgZGF0YWJhc2UgY29ubmVjdGlvbjogJHtlcnJvck1lc3NhZ2V9YCxcblx0XHRcdFx0XHR7IERCX0hPU1Q6IHNlY3JldHMuREJfSE9TVCwgREJfRElBTEVDVDogc2VjcmV0cy5EQl9ESUFMRUNUIH1cblx0XHRcdFx0KVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBzZXF1ZWxpemU7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cHJvY2Vzc0Vycm9yKGVycm9yIGFzIEVycm9yLCBsb2dnZXIgfHwgY29uc29sZSk7XG5cdFx0aWYgKGVycm9yIGluc3RhbmNlb2YgQXBwRXJyb3IpIHtcblx0XHRcdHRocm93IGVycm9yO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyBuZXcgRGVwZW5kZW5jeUVycm9yKFxuXHRcdFx0XHQnRGF0YWJhc2UgaW5pdGlhbGl6YXRpb24gZmFpbGVkIGR1ZSB0byBhIGRlcGVuZGVuY3kgaXNzdWUuJyxcblx0XHRcdFx0eyBvcmlnaW5hbEVycm9yOiBlcnJvciB9XG5cdFx0XHQpO1xuXHRcdH1cblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VxdWVsaXplSW5zdGFuY2Uoe1xuXHRsb2dnZXJcbn06IFBpY2s8REJEZXBlbmRlbmNpZXMsICdsb2dnZXInPik6IFNlcXVlbGl6ZSB7XG4gICAgbG9nZ2VyLmluZm8oJ2dldFNlcXVlbGl6ZUluc3RhbmNlKCkgZXhlY3V0aW5nJyk7XG5cbiAgICBpZiAoIXNlcXVlbGl6ZSkge1xuXHRcdGNvbnN0IGVycm9yID0gbmV3IEFwcEVycm9yKFxuXHRcdFx0J1NlcXVlbGl6ZSBpbnN0YW5jZSBpcyBub3QgaW5pdGlhbGl6ZWQuIENhbGwgaW5pdGlhbGl6ZURhdGFiYXNlKCkgYmVmb3JlIGF0dGVtcHRpbmcgdG8gcmV0cmlldmUgdGhlIFNlcXVlbGl6ZSBpbnN0YW5jZS4nLFxuXHRcdFx0NTAwLFxuXHRcdFx0RXJyb3JTZXZlcml0eS5GQVRBTCxcblx0XHRcdCdTRVFVRUxJWkVfTk9UX0lOSVRJQUxJWkVEJ1xuXHRcdCk7XG5cblx0XHRwcm9jZXNzRXJyb3IoZXJyb3IsIGxvZ2dlciB8fCBjb25zb2xlKTtcblx0XHR0aHJvdyBlcnJvcjtcblx0fVxuXG4gICAgcmV0dXJuIHNlcXVlbGl6ZTtcbn1cbiJdfQ==
