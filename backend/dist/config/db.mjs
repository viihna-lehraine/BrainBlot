import { Sequelize } from 'sequelize';
import { errorClasses, ErrorSeverity } from '../config/errorClasses';
import { validateDependencies } from '../utils/validateDependencies';
import { processError } from '../utils/processError';
const { AppError, DatabaseError, InvalidConfigurationError, DependencyError } =
	errorClasses;
let sequelize = null;
export async function initializeDatabase({ logger, featureFlags, getSecrets }) {
	try {
		validateDependencies(
			[
				{ name: 'logger', instance: logger },
				{ name: 'featureFlags', instance: featureFlags },
				{ name: 'getSecrets', instance: getSecrets }
			],
			logger || console
		);
		const secrets = await getSecrets();
		if (
			!secrets.DB_NAME ||
			!secrets.DB_USER ||
			!secrets.DB_PASSWORD ||
			!secrets.DB_HOST ||
			!secrets.DB_DIALECT
		) {
			throw new InvalidConfigurationError(
				'Database credentials are missing. Check DB_NAME, DB_USER, and DB_PASSWORD in your configuration.',
				{ DB_NAME: secrets.DB_NAME, DB_USER: secrets.DB_USER }
			);
		}
		if (!sequelize) {
			logger.info(
				`Sequelize logging set to ${featureFlags.sequelizeLoggingFlag}`
			);
			const sequelizeOptions = {
				host: secrets.DB_HOST,
				dialect: secrets.DB_DIALECT,
				logging: featureFlags.sequelizeLoggingFlag
					? msg => logger.info(msg)
					: false
			};
			try {
				sequelize = new Sequelize(
					secrets.DB_NAME,
					secrets.DB_USER,
					secrets.DB_PASSWORD,
					sequelizeOptions
				);
				await sequelize.authenticate();
				logger.info('Connection has been established successfully.');
			} catch (dbError) {
				const errorMessage =
					dbError instanceof Error
						? dbError.message
						: 'Unknown error';
				throw new DatabaseError(
					`Failed to authenticate database connection: ${errorMessage}`,
					{ DB_HOST: secrets.DB_HOST, DB_DIALECT: secrets.DB_DIALECT }
				);
			}
		}
		return sequelize;
	} catch (error) {
		processError(error, logger || console);
		if (error instanceof AppError) {
			throw error;
		} else {
			throw new DependencyError(
				'Database initialization failed due to a dependency issue.',
				{ originalError: error }
			);
		}
	}
}
export function getSequelizeInstance({ logger }) {
	logger.info('getSequelizeInstance() executing');
	if (!sequelize) {
		const error = new AppError(
			'Sequelize instance is not initialized. Call initializeDatabase() before attempting to retrieve the Sequelize instance.',
			500,
			ErrorSeverity.FATAL,
			'SEQUELIZE_NOT_INITIALIZED'
		);
		processError(error, logger || console);
		throw error;
	}
	return sequelize;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnL2RiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVcsTUFBTSxXQUFXLENBQUM7QUFDL0MsT0FBTyxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUdyRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNyRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFckQsTUFBTSxFQUNMLFFBQVEsRUFDUixhQUFhLEVBQ2IseUJBQXlCLEVBQ3pCLGVBQWUsRUFDZixHQUFHLFlBQVksQ0FBQztBQWdCakIsSUFBSSxTQUFTLEdBQXFCLElBQUksQ0FBQztBQUV2QyxNQUFNLENBQUMsS0FBSyxVQUFVLGtCQUFrQixDQUFDLEVBQ3hDLE1BQU0sRUFDTixZQUFZLEVBQ1osVUFBVSxFQUNNO0lBQ2hCLElBQUksQ0FBQztRQUNKLG9CQUFvQixDQUNuQjtZQUNDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO1lBQ3BDLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFO1lBQ2hELEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFO1NBQzVDLEVBQ0QsTUFBTSxJQUFJLE9BQU8sQ0FDakIsQ0FBQztRQUVGLE1BQU0sT0FBTyxHQUFjLE1BQU0sVUFBVSxFQUFFLENBQUM7UUFFOUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDN0csTUFBTSxJQUFJLHlCQUF5QixDQUNsQyxrR0FBa0csRUFDbEcsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUN0RCxDQUFDO1FBQ0gsQ0FBQztRQUVELElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNoQixNQUFNLENBQUMsSUFBSSxDQUNWLDRCQUE0QixZQUFZLENBQUMsb0JBQW9CLEVBQUUsQ0FDL0QsQ0FBQztZQUVGLE1BQU0sZ0JBQWdCLEdBQVk7Z0JBQ2pDLElBQUksRUFBRSxPQUFPLENBQUMsT0FBTztnQkFDckIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxVQUFVO2dCQUMzQixPQUFPLEVBQUUsWUFBWSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQVcsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSzthQUN0RixDQUFBO1lBRUQsSUFBSSxDQUFDO2dCQUNKLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FDeEIsT0FBTyxDQUFDLE9BQU8sRUFDZixPQUFPLENBQUMsT0FBTyxFQUNmLE9BQU8sQ0FBQyxXQUFXLEVBQ25CLGdCQUFnQixDQUNoQixDQUFDO2dCQUVGLE1BQU0sU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO2dCQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLCtDQUErQyxDQUFDLENBQUM7WUFDOUQsQ0FBQztZQUFDLE9BQU8sT0FBZ0IsRUFBRSxDQUFDO2dCQUMzQixNQUFNLFlBQVksR0FBRyxDQUFDLE9BQU8sWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDO2dCQUNwRixNQUFNLElBQUksYUFBYSxDQUN0QiwrQ0FBK0MsWUFBWSxFQUFFLEVBQzdELEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FDNUQsQ0FBQTtZQUNGLENBQUM7UUFDRixDQUFDO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFDbEIsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsWUFBWSxDQUFDLEtBQWMsRUFBRSxNQUFNLElBQUksT0FBTyxDQUFDLENBQUM7UUFDaEQsSUFBSSxLQUFLLFlBQVksUUFBUSxFQUFFLENBQUM7WUFDL0IsTUFBTSxLQUFLLENBQUM7UUFDYixDQUFDO2FBQU0sQ0FBQztZQUNQLE1BQU0sSUFBSSxlQUFlLENBQ3hCLDJEQUEyRCxFQUMzRCxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUUsQ0FDeEIsQ0FBQztRQUNILENBQUM7SUFDRixDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxFQUNwQyxNQUFNLEVBQzBCO0lBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0NBQWtDLENBQUMsQ0FBQztJQUVoRCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDbkIsTUFBTSxLQUFLLEdBQUcsSUFBSSxRQUFRLENBQ3pCLHdIQUF3SCxFQUN4SCxHQUFHLEVBQ0gsYUFBYSxDQUFDLEtBQUssRUFDbkIsMkJBQTJCLENBQzNCLENBQUM7UUFFRixZQUFZLENBQUMsS0FBSyxFQUFFLE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQztRQUN2QyxNQUFNLEtBQUssQ0FBQztJQUNiLENBQUM7SUFFRSxPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2VxdWVsaXplLCBPcHRpb25zIH0gZnJvbSAnc2VxdWVsaXplJztcbmltcG9ydCB7IGVycm9yQ2xhc3NlcywgRXJyb3JTZXZlcml0eSB9IGZyb20gJy4uL2NvbmZpZy9lcnJvckNsYXNzZXMnO1xuaW1wb3J0IHsgRmVhdHVyZUZsYWdzIH0gZnJvbSAnLi9lbnZpcm9ubWVudENvbmZpZyc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyB2YWxpZGF0ZURlcGVuZGVuY2llcyB9IGZyb20gJy4uL3V0aWxzL3ZhbGlkYXRlRGVwZW5kZW5jaWVzJztcbmltcG9ydCB7IHByb2Nlc3NFcnJvciB9IGZyb20gJy4uL3V0aWxzL3Byb2Nlc3NFcnJvcic7XG5cbmNvbnN0IHtcblx0QXBwRXJyb3IsXG5cdERhdGFiYXNlRXJyb3IsXG5cdEludmFsaWRDb25maWd1cmF0aW9uRXJyb3IsXG5cdERlcGVuZGVuY3lFcnJvclxufSA9IGVycm9yQ2xhc3NlcztcblxuZXhwb3J0IGludGVyZmFjZSBEQlNlY3JldHMge1xuXHREQl9OQU1FOiBzdHJpbmc7XG5cdERCX1VTRVI6IHN0cmluZztcblx0REJfUEFTU1dPUkQ6IHN0cmluZztcblx0REJfSE9TVDogc3RyaW5nO1xuXHREQl9ESUFMRUNUOiAnbXlzcWwnIHwgJ3Bvc3RncmVzJyB8ICdzcWxpdGUnIHwgJ21hcmlhZGInIHwgJ21zc3FsJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEQkRlcGVuZGVuY2llcyB7XG5cdGxvZ2dlcjogTG9nZ2VyO1xuXHRmZWF0dXJlRmxhZ3M6IEZlYXR1cmVGbGFncyxcblx0Z2V0U2VjcmV0czogKCkgPT4gUHJvbWlzZTxEQlNlY3JldHM+O1xufVxuXG5sZXQgc2VxdWVsaXplOiBTZXF1ZWxpemUgfCBudWxsID0gbnVsbDtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemVEYXRhYmFzZSh7XG5cdGxvZ2dlcixcblx0ZmVhdHVyZUZsYWdzLFxuXHRnZXRTZWNyZXRzXG59OiBEQkRlcGVuZGVuY2llcyk6IFByb21pc2U8U2VxdWVsaXplPiB7XG5cdHRyeSB7XG5cdFx0dmFsaWRhdGVEZXBlbmRlbmNpZXMoXG5cdFx0XHRbXG5cdFx0XHRcdHsgbmFtZTogJ2xvZ2dlcicsIGluc3RhbmNlOiBsb2dnZXIgfSxcblx0XHRcdFx0eyBuYW1lOiAnZmVhdHVyZUZsYWdzJywgaW5zdGFuY2U6IGZlYXR1cmVGbGFncyB9LFxuXHRcdFx0XHR7IG5hbWU6ICdnZXRTZWNyZXRzJywgaW5zdGFuY2U6IGdldFNlY3JldHMgfVxuXHRcdFx0XSxcblx0XHRcdGxvZ2dlciB8fCBjb25zb2xlXG5cdFx0KTtcblxuXHRcdGNvbnN0IHNlY3JldHM6IERCU2VjcmV0cyA9IGF3YWl0IGdldFNlY3JldHMoKTtcblxuXHRcdGlmICghc2VjcmV0cy5EQl9OQU1FIHx8ICFzZWNyZXRzLkRCX1VTRVIgfHwgIXNlY3JldHMuREJfUEFTU1dPUkQgfHwgIXNlY3JldHMuREJfSE9TVCB8fCAhc2VjcmV0cy5EQl9ESUFMRUNUKSB7XG5cdFx0XHR0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb25FcnJvcihcblx0XHRcdFx0J0RhdGFiYXNlIGNyZWRlbnRpYWxzIGFyZSBtaXNzaW5nLiBDaGVjayBEQl9OQU1FLCBEQl9VU0VSLCBhbmQgREJfUEFTU1dPUkQgaW4geW91ciBjb25maWd1cmF0aW9uLicsXG5cdFx0XHRcdHsgREJfTkFNRTogc2VjcmV0cy5EQl9OQU1FLCBEQl9VU0VSOiBzZWNyZXRzLkRCX1VTRVIgfVxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRpZiAoIXNlcXVlbGl6ZSkge1xuXHRcdFx0bG9nZ2VyLmluZm8oXG5cdFx0XHRcdGBTZXF1ZWxpemUgbG9nZ2luZyBzZXQgdG8gJHtmZWF0dXJlRmxhZ3Muc2VxdWVsaXplTG9nZ2luZ0ZsYWd9YFxuXHRcdFx0KTtcblxuXHRcdFx0Y29uc3Qgc2VxdWVsaXplT3B0aW9uczogT3B0aW9ucyA9IHtcblx0XHRcdFx0aG9zdDogc2VjcmV0cy5EQl9IT1NULFxuXHRcdFx0XHRkaWFsZWN0OiBzZWNyZXRzLkRCX0RJQUxFQ1QsXG5cdFx0XHRcdGxvZ2dpbmc6IGZlYXR1cmVGbGFncy5zZXF1ZWxpemVMb2dnaW5nRmxhZyA/IChtc2c6IHN0cmluZykgPT4gbG9nZ2VyLmluZm8obXNnKSA6IGZhbHNlLFxuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRzZXF1ZWxpemUgPSBuZXcgU2VxdWVsaXplKFxuXHRcdFx0XHRcdHNlY3JldHMuREJfTkFNRSxcblx0XHRcdFx0XHRzZWNyZXRzLkRCX1VTRVIsXG5cdFx0XHRcdFx0c2VjcmV0cy5EQl9QQVNTV09SRCxcblx0XHRcdFx0XHRzZXF1ZWxpemVPcHRpb25zXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0YXdhaXQgc2VxdWVsaXplLmF1dGhlbnRpY2F0ZSgpO1xuXHRcdFx0XHRsb2dnZXIuaW5mbygnQ29ubmVjdGlvbiBoYXMgYmVlbiBlc3RhYmxpc2hlZCBzdWNjZXNzZnVsbHkuJyk7XG5cdFx0XHR9IGNhdGNoIChkYkVycm9yOiB1bmtub3duKSB7XG5cdFx0XHRcdGNvbnN0IGVycm9yTWVzc2FnZSA9IChkYkVycm9yIGluc3RhbmNlb2YgRXJyb3IpID8gZGJFcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InO1xuXHRcdFx0XHR0aHJvdyBuZXcgRGF0YWJhc2VFcnJvcihcblx0XHRcdFx0XHRgRmFpbGVkIHRvIGF1dGhlbnRpY2F0ZSBkYXRhYmFzZSBjb25uZWN0aW9uOiAke2Vycm9yTWVzc2FnZX1gLFxuXHRcdFx0XHRcdHsgREJfSE9TVDogc2VjcmV0cy5EQl9IT1NULCBEQl9ESUFMRUNUOiBzZWNyZXRzLkRCX0RJQUxFQ1QgfVxuXHRcdFx0XHQpXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNlcXVlbGl6ZTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRwcm9jZXNzRXJyb3IoZXJyb3IgYXMgRXJyb3IsIGxvZ2dlciB8fCBjb25zb2xlKTtcblx0XHRpZiAoZXJyb3IgaW5zdGFuY2VvZiBBcHBFcnJvcikge1xuXHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IG5ldyBEZXBlbmRlbmN5RXJyb3IoXG5cdFx0XHRcdCdEYXRhYmFzZSBpbml0aWFsaXphdGlvbiBmYWlsZWQgZHVlIHRvIGEgZGVwZW5kZW5jeSBpc3N1ZS4nLFxuXHRcdFx0XHR7IG9yaWdpbmFsRXJyb3I6IGVycm9yIH1cblx0XHRcdCk7XG5cdFx0fVxuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZXF1ZWxpemVJbnN0YW5jZSh7XG5cdGxvZ2dlclxufTogUGljazxEQkRlcGVuZGVuY2llcywgJ2xvZ2dlcic+KTogU2VxdWVsaXplIHtcbiAgICBsb2dnZXIuaW5mbygnZ2V0U2VxdWVsaXplSW5zdGFuY2UoKSBleGVjdXRpbmcnKTtcblxuICAgIGlmICghc2VxdWVsaXplKSB7XG5cdFx0Y29uc3QgZXJyb3IgPSBuZXcgQXBwRXJyb3IoXG5cdFx0XHQnU2VxdWVsaXplIGluc3RhbmNlIGlzIG5vdCBpbml0aWFsaXplZC4gQ2FsbCBpbml0aWFsaXplRGF0YWJhc2UoKSBiZWZvcmUgYXR0ZW1wdGluZyB0byByZXRyaWV2ZSB0aGUgU2VxdWVsaXplIGluc3RhbmNlLicsXG5cdFx0XHQ1MDAsXG5cdFx0XHRFcnJvclNldmVyaXR5LkZBVEFMLFxuXHRcdFx0J1NFUVVFTElaRV9OT1RfSU5JVElBTElaRUQnXG5cdFx0KTtcblxuXHRcdHByb2Nlc3NFcnJvcihlcnJvciwgbG9nZ2VyIHx8IGNvbnNvbGUpO1xuXHRcdHRocm93IGVycm9yO1xuXHR9XG5cbiAgICByZXR1cm4gc2VxdWVsaXplO1xufVxuIl19
