import { Sequelize } from 'sequelize';
import setupLogger from './logger.js';
import featureFlags from './featureFlags.js';
import getSecrets from './secrets.js';
let sequelize = null;
const logger = await setupLogger();
const secrets = await getSecrets();
export async function initializeDatabase() {
	if (!sequelize) {
		logger.info(
			`Sequelize logging is set to ${featureFlags.sequelizeLoggingFlag}, data type: ${typeof featureFlags.sequelizeLoggingFlag}`
		);
		sequelize = new Sequelize(
			secrets.DB_NAME,
			secrets.DB_USER,
			secrets.DB_PASSWORD,
			{
				host: secrets.DB_HOST,
				dialect: secrets.DB_DIALECT,
				logging: featureFlags.sequelizeLoggingFlag
					? msg => logger.info(msg)
					: false
			}
		);
		try {
			await sequelize.authenticate();
			logger.info('Connection has been established successfully.');
		} catch (error) {
			if (error instanceof Error) {
				logger.error('Unable to connect to the database:', error);
			} else {
				logger.error(
					'Unable to connect to the database due to an unknown error'
				);
			}
			throw error;
		}
	}
	return sequelize;
}
export function getSequelizeInstance() {
	if (!sequelize) {
		throw new Error(
			'Database has not been initialized. Call initializeDatabase() before attempting to retrieve the Sequelize instance.'
		);
	}
	return sequelize;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnL2RiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDdEMsT0FBTyxXQUFXLE1BQU0sVUFBVSxDQUFDO0FBQ25DLE9BQU8sWUFBWSxNQUFNLGdCQUFnQixDQUFDO0FBQzFDLE9BQU8sVUFBVSxNQUFNLFdBQVcsQ0FBQztBQVVuQyxJQUFJLFNBQVMsR0FBcUIsSUFBSSxDQUFDO0FBQ3ZDLE1BQU0sTUFBTSxHQUFHLE1BQU0sV0FBVyxFQUFFLENBQUM7QUFDbkMsTUFBTSxPQUFPLEdBQWMsTUFBTSxVQUFVLEVBQUUsQ0FBQztBQUU5QyxNQUFNLENBQUMsS0FBSyxVQUFVLGtCQUFrQjtJQUN2QyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDaEIsTUFBTSxDQUFDLElBQUksQ0FDViwrQkFBK0IsWUFBWSxDQUFDLG9CQUFvQixnQkFBZ0IsT0FBTyxZQUFZLENBQUMsb0JBQW9CLEVBQUUsQ0FDMUgsQ0FBQztRQUVGLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FDeEIsT0FBTyxDQUFDLE9BQU8sRUFDZixPQUFPLENBQUMsT0FBTyxFQUNmLE9BQU8sQ0FBQyxXQUFXLEVBQ25CO1lBQ0MsSUFBSSxFQUFFLE9BQU8sQ0FBQyxPQUFPO1lBQ3JCLE9BQU8sRUFBRSxPQUFPLENBQUMsVUFBVTtZQUMzQixPQUFPLEVBQUUsWUFBWSxDQUFDLG9CQUFvQjtnQkFDekMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7Z0JBQ3pCLENBQUMsQ0FBQyxLQUFLO1NBQ1IsQ0FDRCxDQUFDO1FBRUYsSUFBSSxDQUFDO1lBQ0osTUFBTSxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO1FBQzlELENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2hCLElBQUksS0FBSyxZQUFZLEtBQUssRUFBRSxDQUFDO2dCQUM1QixNQUFNLENBQUMsS0FBSyxDQUFDLG9DQUFvQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzNELENBQUM7aUJBQU0sQ0FBQztnQkFDUCxNQUFNLENBQUMsS0FBSyxDQUNYLDJEQUEyRCxDQUMzRCxDQUFDO1lBQ0gsQ0FBQztZQUNELE1BQU0sS0FBSyxDQUFDO1FBQ2IsQ0FBQztJQUNGLENBQUM7SUFFRCxPQUFPLFNBQVMsQ0FBQztBQUNsQixDQUFDO0FBRUQsTUFBTSxVQUFVLG9CQUFvQjtJQUNuQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FDZCxvSEFBb0gsQ0FDcEgsQ0FBQztJQUNILENBQUM7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2VxdWVsaXplIH0gZnJvbSAnc2VxdWVsaXplJztcbmltcG9ydCBzZXR1cExvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgZmVhdHVyZUZsYWdzIGZyb20gJy4vZmVhdHVyZUZsYWdzJztcbmltcG9ydCBnZXRTZWNyZXRzIGZyb20gJy4vc2VjcmV0cyc7XG5cbmludGVyZmFjZSBEQlNlY3JldHMge1xuXHREQl9OQU1FOiBzdHJpbmc7XG5cdERCX1VTRVI6IHN0cmluZztcblx0REJfUEFTU1dPUkQ6IHN0cmluZztcblx0REJfSE9TVDogc3RyaW5nO1xuXHREQl9ESUFMRUNUOiAnbXlzcWwnIHwgJ3Bvc3RncmVzJyB8ICdzcWxpdGUnIHwgJ21hcmlhZGInIHwgJ21zc3FsJztcbn1cblxubGV0IHNlcXVlbGl6ZTogU2VxdWVsaXplIHwgbnVsbCA9IG51bGw7XG5jb25zdCBsb2dnZXIgPSBhd2FpdCBzZXR1cExvZ2dlcigpO1xuY29uc3Qgc2VjcmV0czogREJTZWNyZXRzID0gYXdhaXQgZ2V0U2VjcmV0cygpO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZURhdGFiYXNlKCk6IFByb21pc2U8U2VxdWVsaXplPiB7XG5cdGlmICghc2VxdWVsaXplKSB7XG5cdFx0bG9nZ2VyLmluZm8oXG5cdFx0XHRgU2VxdWVsaXplIGxvZ2dpbmcgaXMgc2V0IHRvICR7ZmVhdHVyZUZsYWdzLnNlcXVlbGl6ZUxvZ2dpbmdGbGFnfSwgZGF0YSB0eXBlOiAke3R5cGVvZiBmZWF0dXJlRmxhZ3Muc2VxdWVsaXplTG9nZ2luZ0ZsYWd9YFxuXHRcdCk7XG5cblx0XHRzZXF1ZWxpemUgPSBuZXcgU2VxdWVsaXplKFxuXHRcdFx0c2VjcmV0cy5EQl9OQU1FLFxuXHRcdFx0c2VjcmV0cy5EQl9VU0VSLFxuXHRcdFx0c2VjcmV0cy5EQl9QQVNTV09SRCxcblx0XHRcdHtcblx0XHRcdFx0aG9zdDogc2VjcmV0cy5EQl9IT1NULFxuXHRcdFx0XHRkaWFsZWN0OiBzZWNyZXRzLkRCX0RJQUxFQ1QsXG5cdFx0XHRcdGxvZ2dpbmc6IGZlYXR1cmVGbGFncy5zZXF1ZWxpemVMb2dnaW5nRmxhZ1xuXHRcdFx0XHRcdD8gbXNnID0+IGxvZ2dlci5pbmZvKG1zZylcblx0XHRcdFx0XHQ6IGZhbHNlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdHRyeSB7XG5cdFx0XHRhd2FpdCBzZXF1ZWxpemUuYXV0aGVudGljYXRlKCk7XG5cdFx0XHRsb2dnZXIuaW5mbygnQ29ubmVjdGlvbiBoYXMgYmVlbiBlc3RhYmxpc2hlZCBzdWNjZXNzZnVsbHkuJyk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG5cdFx0XHRcdGxvZ2dlci5lcnJvcignVW5hYmxlIHRvIGNvbm5lY3QgdG8gdGhlIGRhdGFiYXNlOicsIGVycm9yKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0XHQnVW5hYmxlIHRvIGNvbm5lY3QgdG8gdGhlIGRhdGFiYXNlIGR1ZSB0byBhbiB1bmtub3duIGVycm9yJ1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHNlcXVlbGl6ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlcXVlbGl6ZUluc3RhbmNlKCk6IFNlcXVlbGl6ZSB7XG5cdGlmICghc2VxdWVsaXplKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0J0RhdGFiYXNlIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZC4gQ2FsbCBpbml0aWFsaXplRGF0YWJhc2UoKSBiZWZvcmUgYXR0ZW1wdGluZyB0byByZXRyaWV2ZSB0aGUgU2VxdWVsaXplIGluc3RhbmNlLidcblx0XHQpO1xuXHR9XG5cdHJldHVybiBzZXF1ZWxpemU7XG59XG4iXX0=
