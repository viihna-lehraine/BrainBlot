import { Sequelize } from 'sequelize';
import setupLogger from '../middleware/logger.js';
import featureFlags from './featureFlags.js';
import getSecrets from './secrets.js';
let sequelize = null;
const logger = await setupLogger();
export async function initializeDatabase() {
	if (!sequelize) {
		const secrets = await getSecrets();
		console.log(
			'Sequelize logging is set to ',
			featureFlags.sequelizeLoggingFlag,
			' data type: ',
			typeof featureFlags.sequelizeLoggingFlag
		);
		sequelize = new Sequelize(
			secrets.DB_NAME,
			secrets.DB_USER,
			secrets.DB_PASSWORD,
			{
				host: secrets.DB_HOST,
				dialect: secrets.DB_DIALECT,
				logging: featureFlags.sequelizeLoggingFlag
					? (msg) => logger.info(msg)
					: false
			}
		);
		try {
			await sequelize.authenticate();
			logger.info('Connection has been established successfully.');
		} catch (error) {
			logger.error('Unable to connect to the database:', error);
			throw error;
		}
	}
	return sequelize;
}
export function getSequelizeInstance() {
	if (!sequelize) {
		throw new Error(
			'Database has not been initialized. Call initializeDatabase() first.'
		);
	}
	return sequelize;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnL2RiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDdEMsT0FBTyxXQUFXLE1BQU0sc0JBQXNCLENBQUM7QUFDL0MsT0FBTyxZQUFZLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUMsT0FBTyxVQUFVLE1BQU0sV0FBVyxDQUFDO0FBRW5DLElBQUksU0FBUyxHQUFxQixJQUFJLENBQUM7QUFDdkMsTUFBTSxNQUFNLEdBQUcsTUFBTSxXQUFXLEVBQUUsQ0FBQztBQUVuQyxNQUFNLENBQUMsS0FBSyxVQUFVLGtCQUFrQjtJQUN2QyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDaEIsTUFBTSxPQUFPLEdBQUcsTUFBTSxVQUFVLEVBQUUsQ0FBQztRQUVuQyxPQUFPLENBQUMsR0FBRyxDQUNWLDhCQUE4QixFQUM5QixZQUFZLENBQUMsb0JBQW9CLEVBQ2pDLGNBQWMsRUFDZCxPQUFPLFlBQVksQ0FBQyxvQkFBb0IsQ0FDeEMsQ0FBQztRQUVGLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FDeEIsT0FBTyxDQUFDLE9BQU8sRUFDZixPQUFPLENBQUMsT0FBTyxFQUNmLE9BQU8sQ0FBQyxXQUFXLEVBQ25CO1lBQ0MsSUFBSSxFQUFFLE9BQU8sQ0FBQyxPQUFPO1lBQ3JCLE9BQU8sRUFBRSxPQUFPLENBQUMsVUFBVTtZQUMzQixPQUFPLEVBQUUsWUFBWSxDQUFDLG9CQUFvQjtnQkFDekMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztnQkFDM0IsQ0FBQyxDQUFDLEtBQUs7U0FDUixDQUNELENBQUM7UUFFRixJQUFJLENBQUM7WUFDSixNQUFNLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUMvQixNQUFNLENBQUMsSUFBSSxDQUFDLCtDQUErQyxDQUFDLENBQUM7UUFDOUQsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDaEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxvQ0FBb0MsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUMxRCxNQUFNLEtBQUssQ0FBQztRQUNiLENBQUM7SUFDRixDQUFDO0lBRUQsT0FBTyxTQUFTLENBQUM7QUFDbEIsQ0FBQztBQUVELE1BQU0sVUFBVSxvQkFBb0I7SUFDbkMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQ2QscUVBQXFFLENBQ3JFLENBQUM7SUFDSCxDQUFDO0lBQ0QsT0FBTyxTQUFTLENBQUM7QUFDbEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlcXVlbGl6ZSB9IGZyb20gJ3NlcXVlbGl6ZSc7XG5pbXBvcnQgc2V0dXBMb2dnZXIgZnJvbSAnLi4vbWlkZGxld2FyZS9sb2dnZXInO1xuaW1wb3J0IGZlYXR1cmVGbGFncyBmcm9tICcuL2ZlYXR1cmVGbGFncyc7XG5pbXBvcnQgZ2V0U2VjcmV0cyBmcm9tICcuL3NlY3JldHMnO1xuXG5sZXQgc2VxdWVsaXplOiBTZXF1ZWxpemUgfCBudWxsID0gbnVsbDtcbmNvbnN0IGxvZ2dlciA9IGF3YWl0IHNldHVwTG9nZ2VyKCk7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0aWFsaXplRGF0YWJhc2UoKTogUHJvbWlzZTxTZXF1ZWxpemU+IHtcblx0aWYgKCFzZXF1ZWxpemUpIHtcblx0XHRjb25zdCBzZWNyZXRzID0gYXdhaXQgZ2V0U2VjcmV0cygpO1xuXG5cdFx0Y29uc29sZS5sb2coXG5cdFx0XHQnU2VxdWVsaXplIGxvZ2dpbmcgaXMgc2V0IHRvICcsXG5cdFx0XHRmZWF0dXJlRmxhZ3Muc2VxdWVsaXplTG9nZ2luZ0ZsYWcsXG5cdFx0XHQnIGRhdGEgdHlwZTogJyxcblx0XHRcdHR5cGVvZiBmZWF0dXJlRmxhZ3Muc2VxdWVsaXplTG9nZ2luZ0ZsYWdcblx0XHQpO1xuXG5cdFx0c2VxdWVsaXplID0gbmV3IFNlcXVlbGl6ZShcblx0XHRcdHNlY3JldHMuREJfTkFNRSxcblx0XHRcdHNlY3JldHMuREJfVVNFUixcblx0XHRcdHNlY3JldHMuREJfUEFTU1dPUkQsXG5cdFx0XHR7XG5cdFx0XHRcdGhvc3Q6IHNlY3JldHMuREJfSE9TVCxcblx0XHRcdFx0ZGlhbGVjdDogc2VjcmV0cy5EQl9ESUFMRUNULFxuXHRcdFx0XHRsb2dnaW5nOiBmZWF0dXJlRmxhZ3Muc2VxdWVsaXplTG9nZ2luZ0ZsYWdcblx0XHRcdFx0XHQ/IChtc2cpID0+IGxvZ2dlci5pbmZvKG1zZylcblx0XHRcdFx0XHQ6IGZhbHNlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdHRyeSB7XG5cdFx0XHRhd2FpdCBzZXF1ZWxpemUuYXV0aGVudGljYXRlKCk7XG5cdFx0XHRsb2dnZXIuaW5mbygnQ29ubmVjdGlvbiBoYXMgYmVlbiBlc3RhYmxpc2hlZCBzdWNjZXNzZnVsbHkuJyk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGxvZ2dlci5lcnJvcignVW5hYmxlIHRvIGNvbm5lY3QgdG8gdGhlIGRhdGFiYXNlOicsIGVycm9yKTtcblx0XHRcdHRocm93IGVycm9yO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBzZXF1ZWxpemU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZXF1ZWxpemVJbnN0YW5jZSgpOiBTZXF1ZWxpemUge1xuXHRpZiAoIXNlcXVlbGl6ZSkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdCdEYXRhYmFzZSBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQuIENhbGwgaW5pdGlhbGl6ZURhdGFiYXNlKCkgZmlyc3QuJ1xuXHRcdCk7XG5cdH1cblx0cmV0dXJuIHNlcXVlbGl6ZTtcbn1cbiJdfQ==
