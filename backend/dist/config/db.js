import { Sequelize } from 'sequelize';
import setupLogger from './logger.js';
import { getFeatureFlags } from './featureFlags.js';
import getSecrets from './sops.js';
import AppError from '../errors/AppError.js';
let sequelize = null;
const featureFlags = getFeatureFlags();
const logger = setupLogger();
const secrets = await getSecrets.getSecrets();
const SEQUELIZE_LOGGING = featureFlags.sequelizeLoggingFlag;
export async function initializeDatabase() {
	if (!sequelize) {
		logger.info(
			`Sequelize logging set to ${SEQUELIZE_LOGGING}, data type: ${typeof SEQUELIZE_LOGGING}`
		);
		sequelize = new Sequelize(
			secrets.DB_NAME,
			secrets.DB_USER,
			secrets.DB_PASSWORD,
			{
				host: secrets.DB_HOST,
				dialect: secrets.DB_DIALECT,
				logging: SEQUELIZE_LOGGING ? msg => logger.info(msg) : false
			}
		);
		try {
			await sequelize.authenticate();
			logger.info('Connection has been established successfully.');
		} catch (error) {
			if (error instanceof Error) {
				logger.error('Unable to connect to the database:', error);
			} else {
				logger.error(
					'Unable to connect to the database due to an unknown error'
				);
			}
			throw error;
		}
	}
	return sequelize;
}
export function getSequelizeInstance() {
	logger.info('getSequelizeInstance() executing');
	if (!sequelize) {
		logger.error('Database has not bee initialized');
		throw new AppError(
			'Database has not been initialized. Call initializeDatabase() before attempting to retrieve the Sequelize instance.',
			400
		);
	}
	return sequelize;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnL2RiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDdEMsT0FBTyxXQUFXLE1BQU0sVUFBVSxDQUFDO0FBQ25DLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLFVBQVUsTUFBTSxRQUFRLENBQUM7QUFDaEMsT0FBTyxRQUFRLE1BQU0sb0JBQW9CLENBQUM7QUFTMUMsSUFBSSxTQUFTLEdBQXFCLElBQUksQ0FBQztBQUN2QyxNQUFNLFlBQVksR0FBRyxlQUFlLEVBQUUsQ0FBQztBQUN2QyxNQUFNLE1BQU0sR0FBRyxXQUFXLEVBQUUsQ0FBQztBQUM3QixNQUFNLE9BQU8sR0FBYyxNQUFNLFVBQVUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUV6RCxNQUFNLGlCQUFpQixHQUFHLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQztBQUU1RCxNQUFNLENBQUMsS0FBSyxVQUFVLGtCQUFrQjtJQUN2QyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDaEIsTUFBTSxDQUFDLElBQUksQ0FDViw0QkFBNEIsaUJBQWlCLGdCQUFnQixPQUFPLGlCQUFpQixFQUFFLENBQ3ZGLENBQUM7UUFFRixTQUFTLEdBQUcsSUFBSSxTQUFTLENBQ3hCLE9BQU8sQ0FBQyxPQUFPLEVBQ2YsT0FBTyxDQUFDLE9BQU8sRUFDZixPQUFPLENBQUMsV0FBVyxFQUNuQjtZQUNDLElBQUksRUFBRSxPQUFPLENBQUMsT0FBTztZQUNyQixPQUFPLEVBQUUsT0FBTyxDQUFDLFVBQVU7WUFDM0IsT0FBTyxFQUFFLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUs7U0FDNUQsQ0FDRCxDQUFDO1FBRUYsSUFBSSxDQUFDO1lBQ0osTUFBTSxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO1FBQzlELENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2hCLElBQUksS0FBSyxZQUFZLEtBQUssRUFBRSxDQUFDO2dCQUM1QixNQUFNLENBQUMsS0FBSyxDQUFDLG9DQUFvQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzNELENBQUM7aUJBQU0sQ0FBQztnQkFDUCxNQUFNLENBQUMsS0FBSyxDQUNYLDJEQUEyRCxDQUMzRCxDQUFDO1lBQ0gsQ0FBQztZQUNELE1BQU0sS0FBSyxDQUFDO1FBQ2IsQ0FBQztJQUNGLENBQUM7SUFFRCxPQUFPLFNBQVMsQ0FBQztBQUNsQixDQUFDO0FBRUQsTUFBTSxVQUFVLG9CQUFvQjtJQUNuQyxNQUFNLENBQUMsSUFBSSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7SUFDaEQsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2hCLE1BQU0sQ0FBQyxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQztRQUNqRCxNQUFNLElBQUksUUFBUSxDQUNqQixvSEFBb0gsRUFDcEgsR0FBRyxDQUNILENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBTyxTQUFTLENBQUM7QUFDbEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlcXVlbGl6ZSB9IGZyb20gJ3NlcXVlbGl6ZSc7XG5pbXBvcnQgc2V0dXBMb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgZ2V0RmVhdHVyZUZsYWdzIH0gZnJvbSAnLi9mZWF0dXJlRmxhZ3MnO1xuaW1wb3J0IGdldFNlY3JldHMgZnJvbSAnLi9zb3BzJztcbmltcG9ydCBBcHBFcnJvciBmcm9tICcuLi9lcnJvcnMvQXBwRXJyb3InO1xuXG5pbnRlcmZhY2UgREJTZWNyZXRzIHtcblx0REJfTkFNRTogc3RyaW5nO1xuXHREQl9VU0VSOiBzdHJpbmc7XG5cdERCX1BBU1NXT1JEOiBzdHJpbmc7XG5cdERCX0hPU1Q6IHN0cmluZztcblx0REJfRElBTEVDVDogJ215c3FsJyB8ICdwb3N0Z3JlcycgfCAnc3FsaXRlJyB8ICdtYXJpYWRiJyB8ICdtc3NxbCc7XG59XG5sZXQgc2VxdWVsaXplOiBTZXF1ZWxpemUgfCBudWxsID0gbnVsbDtcbmNvbnN0IGZlYXR1cmVGbGFncyA9IGdldEZlYXR1cmVGbGFncygpO1xuY29uc3QgbG9nZ2VyID0gc2V0dXBMb2dnZXIoKTtcbmNvbnN0IHNlY3JldHM6IERCU2VjcmV0cyA9IGF3YWl0IGdldFNlY3JldHMuZ2V0U2VjcmV0cygpO1xuXG5jb25zdCBTRVFVRUxJWkVfTE9HR0lORyA9IGZlYXR1cmVGbGFncy5zZXF1ZWxpemVMb2dnaW5nRmxhZztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemVEYXRhYmFzZSgpOiBQcm9taXNlPFNlcXVlbGl6ZT4ge1xuXHRpZiAoIXNlcXVlbGl6ZSkge1xuXHRcdGxvZ2dlci5pbmZvKFxuXHRcdFx0YFNlcXVlbGl6ZSBsb2dnaW5nIHNldCB0byAke1NFUVVFTElaRV9MT0dHSU5HfSwgZGF0YSB0eXBlOiAke3R5cGVvZiBTRVFVRUxJWkVfTE9HR0lOR31gXG5cdFx0KTtcblxuXHRcdHNlcXVlbGl6ZSA9IG5ldyBTZXF1ZWxpemUoXG5cdFx0XHRzZWNyZXRzLkRCX05BTUUsXG5cdFx0XHRzZWNyZXRzLkRCX1VTRVIsXG5cdFx0XHRzZWNyZXRzLkRCX1BBU1NXT1JELFxuXHRcdFx0e1xuXHRcdFx0XHRob3N0OiBzZWNyZXRzLkRCX0hPU1QsXG5cdFx0XHRcdGRpYWxlY3Q6IHNlY3JldHMuREJfRElBTEVDVCxcblx0XHRcdFx0bG9nZ2luZzogU0VRVUVMSVpFX0xPR0dJTkcgPyBtc2cgPT4gbG9nZ2VyLmluZm8obXNnKSA6IGZhbHNlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdHRyeSB7XG5cdFx0XHRhd2FpdCBzZXF1ZWxpemUuYXV0aGVudGljYXRlKCk7XG5cdFx0XHRsb2dnZXIuaW5mbygnQ29ubmVjdGlvbiBoYXMgYmVlbiBlc3RhYmxpc2hlZCBzdWNjZXNzZnVsbHkuJyk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG5cdFx0XHRcdGxvZ2dlci5lcnJvcignVW5hYmxlIHRvIGNvbm5lY3QgdG8gdGhlIGRhdGFiYXNlOicsIGVycm9yKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0XHQnVW5hYmxlIHRvIGNvbm5lY3QgdG8gdGhlIGRhdGFiYXNlIGR1ZSB0byBhbiB1bmtub3duIGVycm9yJ1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHNlcXVlbGl6ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlcXVlbGl6ZUluc3RhbmNlKCk6IFNlcXVlbGl6ZSB7XG5cdGxvZ2dlci5pbmZvKCdnZXRTZXF1ZWxpemVJbnN0YW5jZSgpIGV4ZWN1dGluZycpO1xuXHRpZiAoIXNlcXVlbGl6ZSkge1xuXHRcdGxvZ2dlci5lcnJvcignRGF0YWJhc2UgaGFzIG5vdCBiZWUgaW5pdGlhbGl6ZWQnKTtcblx0XHR0aHJvdyBuZXcgQXBwRXJyb3IoXG5cdFx0XHQnRGF0YWJhc2UgaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkLiBDYWxsIGluaXRpYWxpemVEYXRhYmFzZSgpIGJlZm9yZSBhdHRlbXB0aW5nIHRvIHJldHJpZXZlIHRoZSBTZXF1ZWxpemUgaW5zdGFuY2UuJyxcblx0XHRcdDQwMFxuXHRcdCk7XG5cdH1cblxuXHRyZXR1cm4gc2VxdWVsaXplO1xufVxuIl19
