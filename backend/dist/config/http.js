import { constants } from 'crypto';
import gracefulShutdown from 'http-graceful-shutdown';
import https from 'https';
import setupLogger from './logger.js';
import sops from './sops.js';
import { getSequelizeInstance } from './db.js';
import connectRedis from './redis.js';
const logger = await setupLogger();
const sslKeys = await sops.getSSLKeys();
const SERVER_PORT = process.env.SERVER_PORT || 3000;
const sequelize = getSequelizeInstance();
const ciphers = [
	'ECDHE-ECDSA-AES256-GCM-SHA384',
	'ECDHE-RSA-AES256-GCM-SHA384',
	'ECDHE-ECDSA-CHACHA20-POLY1305',
	'ECDHE-RSA-CHACHA20-POLY1305',
	'ECDHE-ECDSA-AES128-GCM-SHA256',
	'ECDHE-RSA-AES128-GCM-SHA256',
	'ECDHE-ECDSA-AES256-SHA384',
	'ECDHE-RSA-AES256-SHA384',
	'ECDHE-ECDSA-AES128-SHA256',
	'ECDHE-RSA-AES128-SHA256'
];
const options = {
	key: sslKeys.key,
	cert: sslKeys.cert,
	allowHTTP1: true,
	secureOptions: constants.SSL_OP_NO_TLSv1 | constants.SSL_OP_NO_TLSv1_1,
	ciphers: ciphers.join(':'),
	honorCipherOrder: true
};
export async function setupHttp(app) {
	logger.info('setupHttp() executing');
	async function onShutdown() {
		logger.info('Cleaning up resources before shutdown');
		try {
			await sequelize.close();
			logger.info('Database connection closed');
		} catch (error) {
			logger.error(`Error closing database connection: ${error}`);
		}
		try {
			const redisClient = await connectRedis;
			await redisClient.quit();
			logger.info('Redis connection closed');
		} catch (error) {
			logger.error(`Error closing Redis connection: ${error}`);
		}
		try {
			await new Promise((resolve, reject) => {
				logger.close();
				resolve();
			});
			logger.info('Logger closed');
		} catch (error) {
			logger.error(`Error closing logger: ${error}`);
		}
		// Notify monitoring systems here
	}
	async function startServer() {
		try {
			logger.info('Starting HTTP1.1 server');
			logger.info(`Server port: ${SERVER_PORT}`);
			const server = https
				.createServer(options, app)
				.listen(SERVER_PORT, () => {
					logger.info(
						`HTTP1.1 server running on port ${SERVER_PORT}`
					);
				});
			gracefulShutdown(server, {
				signals: 'SIGINT SIGTERM',
				timeout: 30000,
				development: false,
				onShutdown,
				finally: () => {
					logger.info('Server has gracefully shut down');
				}
			});
		} catch (err) {
			if (err instanceof Error) {
				logger.error(`Failed to start server: ${err.message}`);
			} else {
				logger.error('Failed to start server due to an unknown error');
			}
			process.exit(1);
		}
	}
	return { startServer };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25maWcvaHR0cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ25DLE9BQU8sZ0JBQWdCLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sV0FBVyxNQUFNLFVBQVUsQ0FBQztBQUNuQyxPQUFPLElBQUksTUFBTSxRQUFRLENBQUM7QUFDMUIsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRTVDLE9BQU8sWUFBWSxNQUFNLFNBQVMsQ0FBQztBQU9uQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFdBQVcsRUFBRSxDQUFDO0FBQ25DLE1BQU0sT0FBTyxHQUFZLE1BQU0sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQ2pELE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQztBQUNwRCxNQUFNLFNBQVMsR0FBYyxvQkFBb0IsRUFBRSxDQUFDO0FBRXBELE1BQU0sT0FBTyxHQUFHO0lBQ2YsK0JBQStCO0lBQy9CLDZCQUE2QjtJQUM3QiwrQkFBK0I7SUFDL0IsNkJBQTZCO0lBQzdCLCtCQUErQjtJQUMvQiw2QkFBNkI7SUFDN0IsMkJBQTJCO0lBQzNCLHlCQUF5QjtJQUN6QiwyQkFBMkI7SUFDM0IseUJBQXlCO0NBQ3pCLENBQUM7QUFFRixNQUFNLE9BQU8sR0FBRztJQUNmLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRztJQUNoQixJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7SUFDbEIsVUFBVSxFQUFFLElBQUk7SUFDaEIsYUFBYSxFQUFFLFNBQVMsQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDLGlCQUFpQjtJQUN0RSxPQUFPLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENB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IHsgY29uc3RhbnRzIH0gZnJvbSAnY3J5cHRvJztcbmltcG9ydCBncmFjZWZ1bFNodXRkb3duIGZyb20gJ2h0dHAtZ3JhY2VmdWwtc2h1dGRvd24nO1xuaW1wb3J0IGh0dHBzIGZyb20gJ2h0dHBzJztcbmltcG9ydCBzZXR1cExvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgc29wcyBmcm9tICcuL3NvcHMnO1xuaW1wb3J0IHsgZ2V0U2VxdWVsaXplSW5zdGFuY2UgfSBmcm9tICcuL2RiJztcbmltcG9ydCB7IFNlcXVlbGl6ZSB9IGZyb20gJ3NlcXVlbGl6ZSc7XG5pbXBvcnQgY29ubmVjdFJlZGlzIGZyb20gJy4vcmVkaXMnO1xuXG5pbnRlcmZhY2UgU1NMS2V5cyB7XG5cdGtleTogc3RyaW5nO1xuXHRjZXJ0OiBzdHJpbmc7XG59XG5cbmNvbnN0IGxvZ2dlciA9IGF3YWl0IHNldHVwTG9nZ2VyKCk7XG5jb25zdCBzc2xLZXlzOiBTU0xLZXlzID0gYXdhaXQgc29wcy5nZXRTU0xLZXlzKCk7XG5jb25zdCBTRVJWRVJfUE9SVCA9IHByb2Nlc3MuZW52LlNFUlZFUl9QT1JUIHx8IDMwMDA7XG5jb25zdCBzZXF1ZWxpemU6IFNlcXVlbGl6ZSA9IGdldFNlcXVlbGl6ZUluc3RhbmNlKCk7XG5cbmNvbnN0IGNpcGhlcnMgPSBbXG5cdCdFQ0RIRS1FQ0RTQS1BRVMyNTYtR0NNLVNIQTM4NCcsXG5cdCdFQ0RIRS1SU0EtQUVTMjU2LUdDTS1TSEEzODQnLFxuXHQnRUNESEUtRUNEU0EtQ0hBQ0hBMjAtUE9MWTEzMDUnLFxuXHQnRUNESEUtUlNBLUNIQUNIQTIwLVBPTFkxMzA1Jyxcblx0J0VDREhFLUVDRFNBLUFFUzEyOC1HQ00tU0hBMjU2Jyxcblx0J0VDREhFLVJTQS1BRVMxMjgtR0NNLVNIQTI1NicsXG5cdCdFQ0RIRS1FQ0RTQS1BRVMyNTYtU0hBMzg0Jyxcblx0J0VDREhFLVJTQS1BRVMyNTYtU0hBMzg0Jyxcblx0J0VDREhFLUVDRFNBLUFFUzEyOC1TSEEyNTYnLFxuXHQnRUNESEUtUlNBLUFFUzEyOC1TSEEyNTYnXG5dO1xuXG5jb25zdCBvcHRpb25zID0ge1xuXHRrZXk6IHNzbEtleXMua2V5LFxuXHRjZXJ0OiBzc2xLZXlzLmNlcnQsXG5cdGFsbG93SFRUUDE6IHRydWUsXG5cdHNlY3VyZU9wdGlvbnM6IGNvbnN0YW50cy5TU0xfT1BfTk9fVExTdjEgfCBjb25zdGFudHMuU1NMX09QX05PX1RMU3YxXzEsXG5cdGNpcGhlcnM6IGNpcGhlcnMuam9pbignOicpLFxuXHRob25vckNpcGhlck9yZGVyOiB0cnVlXG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2V0dXBIdHRwKGFwcDogQXBwbGljYXRpb24pIHtcblx0bG9nZ2VyLmluZm8oJ3NldHVwSHR0cCgpIGV4ZWN1dGluZycpO1xuXG5cdGFzeW5jIGZ1bmN0aW9uIG9uU2h1dGRvd24oKSB7XG5cdFx0bG9nZ2VyLmluZm8oJ0NsZWFuaW5nIHVwIHJlc291cmNlcyBiZWZvcmUgc2h1dGRvd24nKTtcblxuXHRcdHRyeSB7XG5cdFx0XHRhd2FpdCBzZXF1ZWxpemUuY2xvc2UoKTtcblx0XHRcdGxvZ2dlci5pbmZvKCdEYXRhYmFzZSBjb25uZWN0aW9uIGNsb3NlZCcpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRsb2dnZXIuZXJyb3IoYEVycm9yIGNsb3NpbmcgZGF0YWJhc2UgY29ubmVjdGlvbjogJHtlcnJvcn1gKTtcblx0XHR9XG5cblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgcmVkaXNDbGllbnQgPSBhd2FpdCBjb25uZWN0UmVkaXM7XG5cdFx0XHRhd2FpdCByZWRpc0NsaWVudC5xdWl0KCk7XG5cdFx0XHRsb2dnZXIuaW5mbygnUmVkaXMgY29ubmVjdGlvbiBjbG9zZWQnKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0bG9nZ2VyLmVycm9yKGBFcnJvciBjbG9zaW5nIFJlZGlzIGNvbm5lY3Rpb246ICR7ZXJyb3J9YCk7XG5cdFx0fVxuXG5cdFx0dHJ5IHtcblx0XHRcdGF3YWl0IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdFx0bG9nZ2VyLmNsb3NlKCk7XG5cdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdH0pO1xuXHRcdFx0bG9nZ2VyLmluZm8oJ0xvZ2dlciBjbG9zZWQnKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0bG9nZ2VyLmVycm9yKGBFcnJvciBjbG9zaW5nIGxvZ2dlcjogJHtlcnJvcn1gKTtcblx0XHR9XG5cblx0XHQvLyBOb3RpZnkgbW9uaXRvcmluZyBzeXN0ZW1zIGhlcmVcblx0fVxuXG5cdGFzeW5jIGZ1bmN0aW9uIHN0YXJ0U2VydmVyKCkge1xuXHRcdHRyeSB7XG5cdFx0XHRsb2dnZXIuaW5mbygnU3RhcnRpbmcgSFRUUDEuMSBzZXJ2ZXInKTtcblx0XHRcdGxvZ2dlci5pbmZvKGBTZXJ2ZXIgcG9ydDogJHtTRVJWRVJfUE9SVH1gKTtcblxuXHRcdFx0Y29uc3Qgc2VydmVyID0gaHR0cHNcblx0XHRcdFx0LmNyZWF0ZVNlcnZlcihvcHRpb25zLCBhcHApXG5cdFx0XHRcdC5saXN0ZW4oU0VSVkVSX1BPUlQsICgpID0+IHtcblx0XHRcdFx0XHRsb2dnZXIuaW5mbyhcblx0XHRcdFx0XHRcdGBIVFRQMS4xIHNlcnZlciBydW5uaW5nIG9uIHBvcnQgJHtTRVJWRVJfUE9SVH1gXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdGdyYWNlZnVsU2h1dGRvd24oc2VydmVyLCB7XG5cdFx0XHRcdHNpZ25hbHM6ICdTSUdJTlQgU0lHVEVSTScsXG5cdFx0XHRcdHRpbWVvdXQ6IDMwMDAwLFxuXHRcdFx0XHRkZXZlbG9wbWVudDogZmFsc2UsXG5cdFx0XHRcdG9uU2h1dGRvd24sXG5cdFx0XHRcdGZpbmFsbHk6ICgpID0+IHtcblx0XHRcdFx0XHRsb2dnZXIuaW5mbygnU2VydmVyIGhhcyBncmFjZWZ1bGx5IHNodXQgZG93bicpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuXHRcdFx0XHRsb2dnZXIuZXJyb3IoYEZhaWxlZCB0byBzdGFydCBzZXJ2ZXI6ICR7ZXJyLm1lc3NhZ2V9YCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRsb2dnZXIuZXJyb3IoJ0ZhaWxlZCB0byBzdGFydCBzZXJ2ZXIgZHVlIHRvIGFuIHVua25vd24gZXJyb3InKTtcblx0XHRcdH1cblx0XHRcdHByb2Nlc3MuZXhpdCgxKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGFydFNlcnZlciB9O1xufVxuIl19
