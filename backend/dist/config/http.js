import express from 'express';
import { constants } from 'crypto';
import http2 from 'http2';
import createHttp2ExpressBridge from 'http2-express-bridge';
import https from 'https';
import featureFlags from './featureFlags.js';
import setupLogger from '../middleware/logger.js';
import sops from './sops.js';
export async function setupHttp(app) {
	console.log('setupHttp() executing');
	let logger = await setupLogger();
	let sslKeys = await sops.getSSLKeys();
	// Define global SSL options
	let options = {
		key: sslKeys.key,
		cert: sslKeys.cert,
		allowHTTP1: true,
		secureOptions: constants.SSL_OP_NO_TLSv1 | constants.SSL_OP_NO_TLSv1_1,
		ciphers: [
			'ECDHE-ECDSA-AES256-GCM-SHA384',
			'ECDHE-RSA-AES256-GCM-SHA384',
			'ECDHE-ECDSA-CHACHA20-POLY1305',
			'ECDHE-RSA-CHACHA20-POLY1305',
			'ECDHE-ECDSA-AES128-GCM-SHA256',
			'ECDHE-RSA-AES128-GCM-SHA256',
			'ECDHE-ECDSA-AES256-SHA384',
			'ECDHE-RSA-AES256-SHA384',
			'ECDHE-ECDSA-AES128-SHA256',
			'ECDHE-RSA-AES128-SHA256'
		].join(':'),
		honorCipherOrder: true
	};
	async function startHttp1Server() {
		logger.info('Starting HTTP1.1 server');
		logger.info('Server port: ', process.env.SERVER_PORT);
		https.createServer(options, app).listen(process.env.SERVER_PORT, () => {
			logger.info(
				`HTTP1.1 server running on port ${process.env.SERVER_PORT}`
			);
		});
	}
	async function startHttp2Server() {
		let http2App = createHttp2ExpressBridge(express);
		// Use the existing Express app as middleware for the HTTP2-compatible app
		http2App.use(app);
		try {
			http2
				.createSecureServer(options, http2App)
				.listen(process.env.SERVER_PORT, () => {
					logger.info(
						`HTTP2 server running on port ${process.env.SERVER_PORT}`
					);
				});
		} catch (err) {
			logger.error('Error starting HTTP2 server: ', err);
			throw err;
		}
	}
	async function startServer() {
		if (featureFlags.http1Flag) {
			await startHttp1Server();
		} else if (featureFlags.http2Flag) {
			await startHttp2Server();
		} else {
			logger.error(
				'Please set one of the HTTP flags to true in the .env file'
			);
			throw new Error(
				'Please set one of the HTTP flags to true in the .env file'
			);
		}
	}
	return { startServer };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25maWcvaHR0cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE9BQXdCLE1BQU0sU0FBUyxDQUFDO0FBQy9DLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbkMsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sd0JBQXdCLE1BQU0sc0JBQXNCLENBQUM7QUFDNUQsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sWUFBWSxNQUFNLGdCQUFnQixDQUFDO0FBQzFDLE9BQU8sV0FBVyxNQUFNLHNCQUFzQixDQUFDO0FBQy9DLE9BQU8sSUFBSSxNQUFNLFFBQVEsQ0FBQztBQUUxQixNQUFNLENBQUMsS0FBSyxVQUFVLFNBQVMsQ0FBQyxHQUFnQjtJQUMvQyxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDckMsSUFBSSxNQUFNLEdBQUcsTUFBTSxXQUFXLEVBQUUsQ0FBQztJQUNqQyxJQUFJLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUV0Qyw0QkFBNEI7SUFDNUIsSUFBSSxPQUFPLEdBQUc7UUFDYixHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUc7UUFDaEIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO1FBQ2xCLFVBQVUsRUFBRSxJQUFJO1FBQ2hCLGFBQWEsRUFBRSxTQUFTLENBQUMsZUFBZSxHQUFHLFNBQVMsQ0FBQyxpQkFBaUI7UUFDdEUsT0FBTyxFQUFFO1lBQ1IsK0JBQStCO1lBQy9CLDZCQUE2QjtZQUM3QiwrQkFBK0I7WUFDL0IsNkJBQTZCO1lBQzdCLCtCQUErQjtZQUMvQiw2QkFBNkI7WUFDN0IsMkJBQTJCO1lBQzNCLHlCQUF5QjtZQUN6QiwyQkFBMkI7WUFDM0IseUJBQXlCO1NBQ3pCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNYLGdCQUFnQixFQUFFLElBQUk7S0FDdEIsQ0FBQztJQUVGLEtBQUssVUFBVSxnQkFBZ0I7UUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFdEQsS0FBSyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtZQUNyRSxNQUFNLENBQUMsSUFBSSxDQUNWLGtDQUFrQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUMzRCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsS0FBSyxVQUFVLGdCQUFnQjtRQUM5QixJQUFJLFFBQVEsR0FBRyx3QkFBd0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVqRCwwRUFBMEU7UUFDMUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVsQixJQUFJLENBQUM7WUFDSixLQUFLO2lCQUNILGtCQUFrQixDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUM7aUJBQ3JDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUU7Z0JBQ3JDLE1BQU0sQ0FBQyxJQUFJLENBQ1YsZ0NBQWdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQ3pELENBQUM7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7UUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ2QsTUFBTSxDQUFDLEtBQUssQ0FBQywrQkFBK0IsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNuRCxNQUFNLEdBQUcsQ0FBQztRQUNYLENBQUM7SUFDRixDQUFDO0lBRUQsS0FBSyxVQUFVLFdBQVc7UUFDekIsSUFBSSxZQUFZLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDNUIsTUFBTSxnQkFBZ0IsRUFBRSxDQUFDO1FBQzFCLENBQUM7YUFBTSxJQUFJLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNuQyxNQUFNLGdCQUFnQixFQUFFLENBQUM7UUFDMUIsQ0FBQzthQUFNLENBQUM7WUFDUCxNQUFNLENBQUMsS0FBSyxDQUNYLDJEQUEyRCxDQUMzRCxDQUFDO1lBQ0YsTUFBTSxJQUFJLEtBQUssQ0FDZCwyREFBMkQsQ0FDM0QsQ0FBQztRQUNILENBQUM7SUFDRixDQUFDO0lBRUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxDQUFDO0FBQ3hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcywgeyBBcHBsaWNhdGlvbiB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgY29uc3RhbnRzIH0gZnJvbSAnY3J5cHRvJztcbmltcG9ydCBodHRwMiBmcm9tICdodHRwMic7XG5pbXBvcnQgY3JlYXRlSHR0cDJFeHByZXNzQnJpZGdlIGZyb20gJ2h0dHAyLWV4cHJlc3MtYnJpZGdlJztcbmltcG9ydCBodHRwcyBmcm9tICdodHRwcyc7XG5pbXBvcnQgZmVhdHVyZUZsYWdzIGZyb20gJy4vZmVhdHVyZUZsYWdzJztcbmltcG9ydCBzZXR1cExvZ2dlciBmcm9tICcuLi9taWRkbGV3YXJlL2xvZ2dlcic7XG5pbXBvcnQgc29wcyBmcm9tICcuL3NvcHMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2V0dXBIdHRwKGFwcDogQXBwbGljYXRpb24pIHtcblx0Y29uc29sZS5sb2coJ3NldHVwSHR0cCgpIGV4ZWN1dGluZycpO1xuXHRsZXQgbG9nZ2VyID0gYXdhaXQgc2V0dXBMb2dnZXIoKTtcblx0bGV0IHNzbEtleXMgPSBhd2FpdCBzb3BzLmdldFNTTEtleXMoKTtcblxuXHQvLyBEZWZpbmUgZ2xvYmFsIFNTTCBvcHRpb25zXG5cdGxldCBvcHRpb25zID0ge1xuXHRcdGtleTogc3NsS2V5cy5rZXksXG5cdFx0Y2VydDogc3NsS2V5cy5jZXJ0LFxuXHRcdGFsbG93SFRUUDE6IHRydWUsXG5cdFx0c2VjdXJlT3B0aW9uczogY29uc3RhbnRzLlNTTF9PUF9OT19UTFN2MSB8IGNvbnN0YW50cy5TU0xfT1BfTk9fVExTdjFfMSxcblx0XHRjaXBoZXJzOiBbXG5cdFx0XHQnRUNESEUtRUNEU0EtQUVTMjU2LUdDTS1TSEEzODQnLFxuXHRcdFx0J0VDREhFLVJTQS1BRVMyNTYtR0NNLVNIQTM4NCcsXG5cdFx0XHQnRUNESEUtRUNEU0EtQ0hBQ0hBMjAtUE9MWTEzMDUnLFxuXHRcdFx0J0VDREhFLVJTQS1DSEFDSEEyMC1QT0xZMTMwNScsXG5cdFx0XHQnRUNESEUtRUNEU0EtQUVTMTI4LUdDTS1TSEEyNTYnLFxuXHRcdFx0J0VDREhFLVJTQS1BRVMxMjgtR0NNLVNIQTI1NicsXG5cdFx0XHQnRUNESEUtRUNEU0EtQUVTMjU2LVNIQTM4NCcsXG5cdFx0XHQnRUNESEUtUlNBLUFFUzI1Ni1TSEEzODQnLFxuXHRcdFx0J0VDREhFLUVDRFNBLUFFUzEyOC1TSEEyNTYnLFxuXHRcdFx0J0VDREhFLVJTQS1BRVMxMjgtU0hBMjU2J1xuXHRcdF0uam9pbignOicpLFxuXHRcdGhvbm9yQ2lwaGVyT3JkZXI6IHRydWVcblx0fTtcblxuXHRhc3luYyBmdW5jdGlvbiBzdGFydEh0dHAxU2VydmVyKCkge1xuXHRcdGxvZ2dlci5pbmZvKCdTdGFydGluZyBIVFRQMS4xIHNlcnZlcicpO1xuXHRcdGxvZ2dlci5pbmZvKCdTZXJ2ZXIgcG9ydDogJywgcHJvY2Vzcy5lbnYuU0VSVkVSX1BPUlQpO1xuXG5cdFx0aHR0cHMuY3JlYXRlU2VydmVyKG9wdGlvbnMsIGFwcCkubGlzdGVuKHByb2Nlc3MuZW52LlNFUlZFUl9QT1JULCAoKSA9PiB7XG5cdFx0XHRsb2dnZXIuaW5mbyhcblx0XHRcdFx0YEhUVFAxLjEgc2VydmVyIHJ1bm5pbmcgb24gcG9ydCAke3Byb2Nlc3MuZW52LlNFUlZFUl9QT1JUfWBcblx0XHRcdCk7XG5cdFx0fSk7XG5cdH1cblxuXHRhc3luYyBmdW5jdGlvbiBzdGFydEh0dHAyU2VydmVyKCkge1xuXHRcdGxldCBodHRwMkFwcCA9IGNyZWF0ZUh0dHAyRXhwcmVzc0JyaWRnZShleHByZXNzKTtcblxuXHRcdC8vIFVzZSB0aGUgZXhpc3RpbmcgRXhwcmVzcyBhcHAgYXMgbWlkZGxld2FyZSBmb3IgdGhlIEhUVFAyLWNvbXBhdGlibGUgYXBwXG5cdFx0aHR0cDJBcHAudXNlKGFwcCk7XG5cblx0XHR0cnkge1xuXHRcdFx0aHR0cDJcblx0XHRcdFx0LmNyZWF0ZVNlY3VyZVNlcnZlcihvcHRpb25zLCBodHRwMkFwcClcblx0XHRcdFx0Lmxpc3Rlbihwcm9jZXNzLmVudi5TRVJWRVJfUE9SVCwgKCkgPT4ge1xuXHRcdFx0XHRcdGxvZ2dlci5pbmZvKFxuXHRcdFx0XHRcdFx0YEhUVFAyIHNlcnZlciBydW5uaW5nIG9uIHBvcnQgJHtwcm9jZXNzLmVudi5TRVJWRVJfUE9SVH1gXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fSk7XG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRsb2dnZXIuZXJyb3IoJ0Vycm9yIHN0YXJ0aW5nIEhUVFAyIHNlcnZlcjogJywgZXJyKTtcblx0XHRcdHRocm93IGVycjtcblx0XHR9XG5cdH1cblxuXHRhc3luYyBmdW5jdGlvbiBzdGFydFNlcnZlcigpIHtcblx0XHRpZiAoZmVhdHVyZUZsYWdzLmh0dHAxRmxhZykge1xuXHRcdFx0YXdhaXQgc3RhcnRIdHRwMVNlcnZlcigpO1xuXHRcdH0gZWxzZSBpZiAoZmVhdHVyZUZsYWdzLmh0dHAyRmxhZykge1xuXHRcdFx0YXdhaXQgc3RhcnRIdHRwMlNlcnZlcigpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdCdQbGVhc2Ugc2V0IG9uZSBvZiB0aGUgSFRUUCBmbGFncyB0byB0cnVlIGluIHRoZSAuZW52IGZpbGUnXG5cdFx0XHQpO1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHQnUGxlYXNlIHNldCBvbmUgb2YgdGhlIEhUVFAgZmxhZ3MgdG8gdHJ1ZSBpbiB0aGUgLmVudiBmaWxlJ1xuXHRcdFx0KTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGFydFNlcnZlciB9O1xufVxuIl19
