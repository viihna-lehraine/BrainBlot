async function initializeApp({
	express,
	session,
	cookieParser,
	cors,
	hpp,
	morgan,
	passport,
	randomBytes,
	path,
	RedisStore,
	initializeStaticRoutes,
	csrfMiddleware,
	errorHandler,
	getRedisClient,
	ipBlacklistMiddleware,
	createTestRouter,
	rateLimitMiddleware,
	setupSecurityHeaders,
	startMemoryMonitor,
	logger,
	staticRootPath,
	NODE_ENV,
	SSL_FLAG,
	REDIS_FLAG
}) {
	const app = express();
	const memoryMonitor = NODE_ENV === 'development' || NODE_ENV === 'testing';
	if (memoryMonitor) {
		logger.info('Memory Monitor enabled');
		startMemoryMonitor();
	}
	const middlewares = [
		express.json(),
		express.urlencoded({ extended: true }),
		cookieParser(),
		passport.initialize(),
		express.static(staticRootPath),
		hpp(),
		rateLimitMiddleware,
		ipBlacklistMiddleware,
		csrfMiddleware
	];
	app.use(...middlewares);
	app.use(
		cors({
			methods: 'GET,POST,PUT,DELETE',
			allowedHeaders: 'Content-Type,Authorization',
			credentials: true
		})
	);
	app.use(
		morgan('combined', {
			stream: { write: (message = '') => logger.info(message.trim()) }
		})
	);
	initializeStaticRoutes(app);
	app.use(async (req, res, next) => {
		try {
			res.locals.cspNonce = randomBytes(16).toString('hex');
			next();
		} catch {
			next();
		}
	});
	setupSecurityHeaders(app, {
		helmetOptions: {
			// *DEV-NOTE* FILL THIS OUT
		},
		permissionsPolicyOptions: {
			// *DEV-NOTE* FILL THIS OUT
		}
	});
	createTestRouter(app);
	// session management
	if (REDIS_FLAG && getRedisClient()) {
		logger.info('REDIS_FLAG is true. Using Redis for session management');
		app.use(
			session({
				store: new RedisStore({ client: getRedisClient() }),
				secret: 'secrets.REDIS_KEY',
				resave: false,
				saveUninitialized: false,
				cookie: { secure: true }
			})
		);
	} else {
		logger.info(
			'REDIS_FLAG is false. Using in-memory store for session management'
		);
		app.use(
			session({
				secret: 'secrets.SESSION_KEY',
				resave: false,
				saveUninitialized: false,
				cookie: { secure: SSL_FLAG }
			})
		);
	}
	// 404 error handling
	app.use((req, res, next) => {
		res.status(404).sendFile(path.join(staticRootPath, '404.html'));
		next();
	});
	// general error handling
	app.use(errorHandler);
	return app;
}
export { initializeApp };
//# sourceMappingURL=data:application/json;base64,
