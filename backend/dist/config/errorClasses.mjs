const errorCounts = new Map();
export var ErrorSeverity;
(function (ErrorSeverity) {
	ErrorSeverity['FATAL'] = 'fatal';
	ErrorSeverity['RECOVERABLE'] = 'recoverable';
	ErrorSeverity['WARNING'] = 'warning';
	ErrorSeverity['INFO'] = 'info';
})(ErrorSeverity || (ErrorSeverity = {}));
export class AppError extends Error {
	statusCode;
	errorCode;
	details;
	severity;
	constructor(
		message,
		statusCode = 500,
		severity = ErrorSeverity.RECOVERABLE,
		errorCode,
		details
	) {
		super(message);
		this.statusCode = statusCode;
		this.severity = severity;
		this.errorCode = errorCode;
		this.details = details;
		Error.captureStackTrace(this, this.constructor);
	}
}
export class AuthenticationError extends AppError {
	constructor(message, details) {
		super(message, 401, ErrorSeverity.RECOVERABLE, 'AUTH_ERROR', details);
		this.name = 'AuthenticationError';
	}
}
export class AutoCorrectedInputWarning extends AppError {
	constructor(fieldName, details) {
		super(
			`${fieldName} was auto-corrected`,
			200,
			ErrorSeverity.WARNING,
			'AUTOCORRECT_WARNING',
			details
		);
		this.name = 'AutoCorrectedInputWarning';
	}
}
export class ConfigurationError extends AppError {
	constructor(message = 'Configuration error', details) {
		super(message, 500, ErrorSeverity.RECOVERABLE, 'CONFIG_ERROR', details);
	}
}
export class ConcurrencyError extends AppError {
	constructor(resource, details) {
		super(
			`Concurrency error on resource: ${resource}`,
			409,
			ErrorSeverity.RECOVERABLE,
			'CONCURRENCY_ERROR',
			details
		);
		this.name = 'ConcurrencyError';
	}
}
export class ConflictError extends AppError {
	constructor(resource, details) {
		super(
			`Conflict: ${resource} already exists`,
			409,
			ErrorSeverity.RECOVERABLE,
			'CONFLICT_ERROR',
			details
		);
		this.name = 'ConflictError';
	}
}
export class CriticalServiceUnavailableError extends AppError {
	constructor(service, details) {
		super(
			`${service} is currently unavailable`,
			503,
			ErrorSeverity.FATAL,
			'SERVICE_UNAVAILABLE',
			details
		);
		this.name = 'ServiceUnavailableError';
	}
}
export class DatabaseError extends AppError {
	constructor(message, details) {
		super(message, 500, ErrorSeverity.FATAL, 'DATABASE_ERROR', details);
		this.name = 'DatabaseError';
	}
}
export class DataIntegrityError extends AppError {
	constructor(details) {
		super(
			`Data integrity issue detected`,
			500,
			ErrorSeverity.FATAL,
			'DATA_INTEGRITY_ERROR',
			details
		);
		this.name = 'DataIntegrityError';
	}
}
export class DependencyError extends AppError {
	constructor(dependencyName, details) {
		super(
			`Dependency ${dependencyName} failed`,
			500,
			ErrorSeverity.FATAL,
			'DEPENDENCY_ERROR',
			details
		);
		this.name = 'DependencyError';
	}
}
export class DeprecatedApiWarning extends AppError {
	constructor(apiVersion, details) {
		super(
			`Deprecated API version ${apiVersion} used`,
			200,
			ErrorSeverity.INFO,
			'DEPRECATED_API_WARNING',
			details
		);
		this.name = 'DeprecatedApiWarning';
	}
}
export class ExternalServiceError extends AppError {
	constructor(message = 'External service error', details) {
		super(
			message,
			503,
			ErrorSeverity.RECOVERABLE,
			'EXTERNAL_SERVICE_ERROR',
			details
		);
	}
}
export class FallbackSuccessInfo extends AppError {
	constructor(service, details) {
		super(
			`Successfully fell back to ${service}`,
			200,
			ErrorSeverity.INFO,
			'FALLBACK_SUCCESS',
			details
		);
		this.name = 'FallbackSuccessInfo';
	}
}
export class FileProcessingError extends AppError {
	constructor(message = 'File processing failed', details) {
		super(
			message,
			500,
			ErrorSeverity.RECOVERABLE,
			'FILE_PROCESSING_ERROR',
			details
		);
	}
}
export class ForbiddenError extends AppError {
	constructor(action, details) {
		super(
			`Forbidden: You are not allowed to ${action}`,
			403,
			ErrorSeverity.RECOVERABLE,
			'FORBIDDEN',
			details
		);
		this.name = 'ForbiddenError';
	}
}
export class InsufficientStorageError extends AppError {
	constructor(requiredSpace, availableSpace, details) {
		super(
			`Insufficient storage. Required: ${requiredSpace}MB, Available: ${availableSpace}MB`,
			507,
			ErrorSeverity.FATAL,
			'INSUFFICIENT_STORAGE',
			details
		);
		this.name = 'InsufficientStorageError';
	}
}
export class InvalidCredentialsError extends AppError {
	constructor(details) {
		super(
			'Invalid credentials provided',
			401,
			ErrorSeverity.RECOVERABLE,
			'INVALID_CREDENTIALS',
			details
		);
		this.name = 'InvalidCredentialsError';
	}
}
export class InvalidInputError extends AppError {
	constructor(inputName, details) {
		super(
			`Invalid input: ${inputName}`,
			400,
			ErrorSeverity.WARNING,
			'INVALID_INPUT',
			details
		);
		this.name = 'InvalidInputError';
	}
}
export class InvalidConfigurationError extends AppError {
	constructor(configKey, details) {
		super(
			`Invalid or missing configuration for: ${configKey}`,
			500,
			ErrorSeverity.FATAL,
			'INVALID_CONFIGURATION',
			details
		);
		this.name = 'InvalidConfigurationError';
	}
}
export class InvalidTokenError extends AppError {
	constructor(details) {
		super(
			'Invalid or expired token',
			401,
			ErrorSeverity.RECOVERABLE,
			'INVALID_TOKEN',
			details
		);
		this.name = 'InvalidTokenError';
	}
}
export class MissingResourceError extends AppError {
	constructor(resource, details) {
		super(
			`${resource} not found`,
			404,
			ErrorSeverity.RECOVERABLE,
			'MISSING_RESOURCE',
			details
		);
		this.name = 'MissingResourceError';
	}
}
export class PartialServiceFailureWarning extends AppError {
	constructor(serviceName, details) {
		super(
			`${serviceName} is partially failing`,
			500,
			ErrorSeverity.WARNING,
			'PARTIAL_SERVICE_FAILURE',
			details
		);
		this.name = 'PartialServiceFailureWarning';
	}
}
export class PasswordValidationError extends AppError {
	constructor(message = 'Password validation error', details) {
		super(
			message,
			400,
			ErrorSeverity.WARNING,
			'PASSWORD_VALIDATION_ERROR',
			details
		);
		this.name = 'PasswordValidationError';
	}
}
export class PermissionDeniedError extends AppError {
	constructor(action, details) {
		super(
			`Permission denied for action: ${action}`,
			403,
			ErrorSeverity.RECOVERABLE,
			'PERMISSION_DENIED',
			details
		);
		this.name = 'PermissionDeniedError';
	}
}
export class QuotaExceededError extends AppError {
	constructor(quotaName, limit, details) {
		super(
			`${quotaName} limit of ${limit} exceeded`,
			429,
			ErrorSeverity.RECOVERABLE,
			'QUOTA_EXCEEDED',
			details
		);
		this.name = 'QuotaExceededError';
	}
}
export class RateLimitError extends AppError {
	constructor(message, retryAfter, details = {}) {
		super(message, 429, ErrorSeverity.RECOVERABLE, 'RATE_LIMIT_EXCEEDED', {
			...details,
			retryAfter
		});
		this.name = 'RateLimitError';
	}
}
export class ServiceDegradedError extends AppError {
	constructor(service, details) {
		super(
			`${service} is degraded and functioning below capacity`,
			200,
			ErrorSeverity.WARNING,
			'SERVICE_DEGRADED',
			details
		);
		this.name = 'ServiceDegradedError';
	}
}
export class SessionExpiredError extends AppError {
	constructor(details) {
		super(
			'Session expired',
			401,
			ErrorSeverity.RECOVERABLE,
			'SESSION_EXPIRED',
			details
		);
		this.name = 'SessionExpiredError';
	}
}
export class SlowApiWarning extends AppError {
	constructor(apiName, responseTime, details) {
		super(
			`${apiName} is responding slowly`,
			200,
			ErrorSeverity.WARNING,
			'SLOW_API_WARNING',
			{ responseTime, ...details }
		);
		this.name = 'SlowApiWarning';
	}
}
export class TimeoutError extends AppError {
	constructor(message = 'Request timed out', details) {
		super(
			message,
			504,
			ErrorSeverity.RECOVERABLE,
			'TIMEOUT_ERROR',
			details
		);
		this.name = 'TimeoutError';
	}
}
export class UserActionInfo extends AppError {
	constructor(action, details) {
		super(
			`User performed action: ${action}`,
			200,
			ErrorSeverity.INFO,
			'USER_ACTION_LOGGED',
			details
		);
		this.name = 'UserActionInfo';
	}
}
export class ValidationError extends AppError {
	constructor(message = 'Validation error', details) {
		super(message, 400, ErrorSeverity.WARNING, 'VALIDATION_ERROR', details);
		this.name = 'ValidationError';
	}
}
export const errorClasses = {
	AppError,
	AuthenticationError,
	AutoCorrectedInputWarning,
	ConfigurationError,
	ConcurrencyError,
	ConflictError,
	CriticalServiceUnavailableError,
	DatabaseError,
	DataIntegrityError,
	DependencyError,
	DeprecatedApiWarning,
	ExternalServiceError,
	FallbackSuccessInfo,
	FileProcessingError,
	ForbiddenError,
	InsufficientStorageError,
	InvalidCredentialsError,
	InvalidInputError,
	InvalidConfigurationError,
	InvalidTokenError,
	MissingResourceError,
	PartialServiceFailureWarning,
	PasswordValidationError,
	PermissionDeniedError,
	QuotaExceededError,
	RateLimitError,
	ServiceDegradedError,
	SessionExpiredError,
	SlowApiWarning,
	TimeoutError,
	UserActionInfo,
	ValidationError
};
//# sourceMappingURL=data:application/json;base64,
