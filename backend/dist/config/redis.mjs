import { validateDependencies } from '../utils/validateDependencies.mjs';
import { processError } from '../utils/processError.mjs';
let redisClient = null;
export async function connectRedis({
	logger,
	featureFlags,
	createRedisClient,
	redisUrl
}) {
	try {
		validateDependencies(
			[
				{ name: 'logger', instance: logger },
				{ name: 'featureFlags', instance: 'featureFlags' },
				{ name: 'createRedisClient', instance: createRedisClient },
				{ name: 'redisUrl', instance: redisUrl }
			],
			logger || console
		);
		if (!featureFlags.enableRedisFlag) {
			logger.info(`Redis is disabled based on REDIS_FLAG`);
			return null;
		}
		if (!redisClient) {
			const client = createRedisClient({
				url: redisUrl,
				socket: {
					reconnectStrategy: retries => {
						logger.warn(`Redis retry attempt: ${retries}`);
						if (retries >= 10) {
							logger.error(
								'Max retries reached. Could not connect to Redis.'
							);
							return new Error('Max retries reached');
						}
						return Math.min(retries * 100, 3000);
					}
				}
			});
			client.on('error', err => {
				processError(err, logger || console);
			});
			await client.connect();
			logger.info('Connected to Redis');
			redisClient = client;
		}
		return redisClient;
	} catch (err) {
		processError(err, logger || console);
		return null;
	}
}
export async function getRedisClient() {
	if (!redisClient) {
		throw new Error(
			'Redis client is not connected. Call connectRedis first.'
		);
	}
	return redisClient;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkaXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnL3JlZGlzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQVNyRCxJQUFJLFdBQVcsR0FBMkIsSUFBSSxDQUFDO0FBRS9DLE1BQU0sQ0FBQyxLQUFLLFVBQVUsWUFBWSxDQUFDLEVBQ2pDLE1BQU0sRUFDTixZQUFZLEVBQ1osaUJBQWlCLEVBQ2pCLFFBQVEsRUFDVTtJQUNsQixJQUFJLENBQUM7UUFDSCxvQkFBb0IsQ0FDbEI7WUFDRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRTtZQUNwQyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRTtZQUNsRCxFQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUU7WUFDMUQsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUU7U0FDekMsRUFDRCxNQUFNLElBQUksT0FBTyxDQUNsQixDQUFDO1FBRUYsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDLHVDQUF1QyxDQUFDLENBQUM7WUFDckQsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBRUQsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2pCLE1BQU0sTUFBTSxHQUFvQixpQkFBaUIsQ0FBQztnQkFDaEQsR0FBRyxFQUFFLFFBQVE7Z0JBQ2IsTUFBTSxFQUFFO29CQUNOLGlCQUFpQixFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUU7d0JBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsd0JBQXdCLE9BQU8sRUFBRSxDQUFDLENBQUM7d0JBQy9DLElBQUksT0FBTyxJQUFJLEVBQUUsRUFBRSxDQUFDOzRCQUNsQixNQUFNLENBQUMsS0FBSyxDQUFDLGtEQUFrRCxDQUFDLENBQUM7NEJBQ2pFLE9BQU8sSUFBSSxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQzt3QkFDMUMsQ0FBQzt3QkFDRCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztvQkFDdkMsQ0FBQztpQkFDRjthQUNGLENBQUMsQ0FBQztZQUVILE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQ3pCLFlBQVksQ0FBQyxHQUFHLEVBQUUsTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZDLENBQUMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDdkIsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBRWxDLFdBQVcsR0FBRyxNQUFNLENBQUM7UUFDdkIsQ0FBQztRQUVELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsWUFBWSxDQUFDLEdBQUcsRUFBRSxNQUFNLElBQUksT0FBTyxDQUFDLENBQUM7UUFDckMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0FBQ0gsQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUsY0FBYztJQUNsQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5REFBeUQsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFDRCxPQUFPLFdBQVcsQ0FBQztBQUNyQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ2xpZW50LCBSZWRpc0NsaWVudFR5cGUgfSBmcm9tICdyZWRpcyc7XG5pbXBvcnQgeyBGZWF0dXJlRmxhZ3MgfSBmcm9tICcuL2Vudmlyb25tZW50Q29uZmlnJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IHZhbGlkYXRlRGVwZW5kZW5jaWVzIH0gZnJvbSAnLi4vdXRpbHMvdmFsaWRhdGVEZXBlbmRlbmNpZXMnO1xuaW1wb3J0IHsgcHJvY2Vzc0Vycm9yIH0gZnJvbSAnLi4vdXRpbHMvcHJvY2Vzc0Vycm9yJztcblxuaW50ZXJmYWNlIFJlZGlzRGVwZW5kZW5jaWVzIHtcbiAgbG9nZ2VyOiBMb2dnZXI7XG4gIGZlYXR1cmVGbGFnczogRmVhdHVyZUZsYWdzO1xuICBjcmVhdGVSZWRpc0NsaWVudDogdHlwZW9mIGNyZWF0ZUNsaWVudDtcbiAgcmVkaXNVcmw6IHN0cmluZztcbn1cblxubGV0IHJlZGlzQ2xpZW50OiBSZWRpc0NsaWVudFR5cGUgfCBudWxsID0gbnVsbDtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbm5lY3RSZWRpcyh7XG4gIGxvZ2dlcixcbiAgZmVhdHVyZUZsYWdzLFxuICBjcmVhdGVSZWRpc0NsaWVudCxcbiAgcmVkaXNVcmxcbn06IFJlZGlzRGVwZW5kZW5jaWVzKTogUHJvbWlzZTxSZWRpc0NsaWVudFR5cGUgfCBudWxsPiB7XG4gIHRyeSB7XG4gICAgdmFsaWRhdGVEZXBlbmRlbmNpZXMoXG4gICAgICBbXG4gICAgICAgIHsgbmFtZTogJ2xvZ2dlcicsIGluc3RhbmNlOiBsb2dnZXIgfSxcbiAgICAgICAgeyBuYW1lOiAnZmVhdHVyZUZsYWdzJywgaW5zdGFuY2U6ICdmZWF0dXJlRmxhZ3MnIH0sXG4gICAgICAgIHsgbmFtZTogJ2NyZWF0ZVJlZGlzQ2xpZW50JywgaW5zdGFuY2U6IGNyZWF0ZVJlZGlzQ2xpZW50IH0sXG4gICAgICAgIHsgbmFtZTogJ3JlZGlzVXJsJywgaW5zdGFuY2U6IHJlZGlzVXJsIH0sXG4gICAgICBdLFxuICAgICAgbG9nZ2VyIHx8IGNvbnNvbGVcbiAgICApO1xuXG4gICAgaWYgKCFmZWF0dXJlRmxhZ3MuZW5hYmxlUmVkaXNGbGFnKSB7XG4gICAgICBsb2dnZXIuaW5mbyhgUmVkaXMgaXMgZGlzYWJsZWQgYmFzZWQgb24gUkVESVNfRkxBR2ApO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCFyZWRpc0NsaWVudCkge1xuICAgICAgY29uc3QgY2xpZW50OiBSZWRpc0NsaWVudFR5cGUgPSBjcmVhdGVSZWRpc0NsaWVudCh7XG4gICAgICAgIHVybDogcmVkaXNVcmwsXG4gICAgICAgIHNvY2tldDoge1xuICAgICAgICAgIHJlY29ubmVjdFN0cmF0ZWd5OiAocmV0cmllcykgPT4ge1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4oYFJlZGlzIHJldHJ5IGF0dGVtcHQ6ICR7cmV0cmllc31gKTtcbiAgICAgICAgICAgIGlmIChyZXRyaWVzID49IDEwKSB7XG4gICAgICAgICAgICAgIGxvZ2dlci5lcnJvcignTWF4IHJldHJpZXMgcmVhY2hlZC4gQ291bGQgbm90IGNvbm5lY3QgdG8gUmVkaXMuJyk7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01heCByZXRyaWVzIHJlYWNoZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbihyZXRyaWVzICogMTAwLCAzMDAwKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIGNsaWVudC5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICAgIHByb2Nlc3NFcnJvcihlcnIsIGxvZ2dlciB8fCBjb25zb2xlKTtcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCBjbGllbnQuY29ubmVjdCgpO1xuICAgICAgbG9nZ2VyLmluZm8oJ0Nvbm5lY3RlZCB0byBSZWRpcycpO1xuXG4gICAgICByZWRpc0NsaWVudCA9IGNsaWVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVkaXNDbGllbnQ7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHByb2Nlc3NFcnJvcihlcnIsIGxvZ2dlciB8fCBjb25zb2xlKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UmVkaXNDbGllbnQoKTogUHJvbWlzZTxSZWRpc0NsaWVudFR5cGUgfCBudWxsPiB7XG4gIGlmICghcmVkaXNDbGllbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZGlzIGNsaWVudCBpcyBub3QgY29ubmVjdGVkLiBDYWxsIGNvbm5lY3RSZWRpcyBmaXJzdC4nKTtcbiAgfVxuICByZXR1cm4gcmVkaXNDbGllbnQ7XG59XG4iXX0=
