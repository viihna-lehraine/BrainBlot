let redisClient = null;
export async function connectRedis({
	logger,
	getFeatureFlags,
	createRedisClient,
	redisUrl
}) {
	const REDIS_FLAG = getFeatureFlags().enableRedisFlag;
	if (!REDIS_FLAG) {
		logger.info(`Redis is disabled based on REDIS_FLAG`);
		return null;
	}
	try {
		const client = createRedisClient({
			url: redisUrl,
			socket: {
				reconnectStrategy: retries => {
					logger.warn(`Redis retry attempt: ${retries}`);
					if (retries >= 10) {
						logger.error(
							'Max retries reached. Could not connect to Redis.'
						);
						return new Error('Max retries reached');
					}
					return Math.min(retries * 100, 3000); // reconnect after increasing intervals up to 3 seconds
				}
			}
		});
		client.on('error', err => {
			logger.error(`Redis client error: ${err}`);
		});
		await client.connect();
		logger.info('Connected to Redis');
		redisClient = client;
		return client;
	} catch (err) {
		logger.error(`Failed to connect to Redis: ${err}`);
		return null; // ensure no further Redis operations are attempted
	}
}
export function getRedisClient() {
	return redisClient;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkaXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnL3JlZGlzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVNBLElBQUksV0FBVyxHQUEyQixJQUFJLENBQUM7QUFFL0MsTUFBTSxDQUFDLEtBQUssVUFBVSxZQUFZLENBQUMsRUFDbEMsTUFBTSxFQUNOLGVBQWUsRUFDZixpQkFBaUIsRUFDakIsUUFBUSxFQUNXO0lBQ25CLE1BQU0sVUFBVSxHQUFHLGVBQWUsRUFBRSxDQUFDLGVBQWUsQ0FBQztJQUVyRCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDakIsTUFBTSxDQUFDLElBQUksQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO1FBQ3JELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVELElBQUksQ0FBQztRQUNKLE1BQU0sTUFBTSxHQUFvQixpQkFBaUIsQ0FBQztZQUNqRCxHQUFHLEVBQUUsUUFBUTtZQUNiLE1BQU0sRUFBRTtnQkFDUCxpQkFBaUIsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFO29CQUM5QixNQUFNLENBQUMsSUFBSSxDQUFDLHdCQUF3QixPQUFPLEVBQUUsQ0FBQyxDQUFDO29CQUMvQyxJQUFJLE9BQU8sSUFBSSxFQUFFLEVBQUUsQ0FBQzt3QkFDbkIsTUFBTSxDQUFDLEtBQUssQ0FDWCxrREFBa0QsQ0FDbEQsQ0FBQzt3QkFDRixPQUFPLElBQUksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7b0JBQ3pDLENBQUM7b0JBQ0QsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sR0FBRyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyx1REFBdUQ7Z0JBQzlGLENBQUM7YUFDRDtTQUNELENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDMUIsTUFBTSxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUM1QyxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUVsQyxXQUFXLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLE9BQU8sTUFBTSxDQUFDO0lBQ2YsQ0FBQztJQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDZCxNQUFNLENBQUMsS0FBSyxDQUFDLCtCQUErQixHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ25ELE9BQU8sSUFBSSxDQUFDLENBQUMsbURBQW1EO0lBQ2pFLENBQUM7QUFDRixDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWM7SUFDN0IsT0FBTyxXQUFXLENBQUM7QUFDcEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNsaWVudCwgUmVkaXNDbGllbnRUeXBlIH0gZnJvbSAncmVkaXMnO1xuXG5pbnRlcmZhY2UgUmVkaXNEZXBlbmRlbmNpZXMge1xuXHRsb2dnZXI6IFJldHVyblR5cGU8dHlwZW9mIGltcG9ydCgnLi9sb2dnZXInKS5kZWZhdWx0Pjtcblx0Z2V0RmVhdHVyZUZsYWdzOiAoKSA9PiB7IGVuYWJsZVJlZGlzRmxhZzogYm9vbGVhbiB9O1xuXHRjcmVhdGVSZWRpc0NsaWVudDogdHlwZW9mIGNyZWF0ZUNsaWVudDtcblx0cmVkaXNVcmw6IHN0cmluZztcbn1cblxubGV0IHJlZGlzQ2xpZW50OiBSZWRpc0NsaWVudFR5cGUgfCBudWxsID0gbnVsbDtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbm5lY3RSZWRpcyh7XG5cdGxvZ2dlcixcblx0Z2V0RmVhdHVyZUZsYWdzLFxuXHRjcmVhdGVSZWRpc0NsaWVudCxcblx0cmVkaXNVcmxcbn06IFJlZGlzRGVwZW5kZW5jaWVzKTogUHJvbWlzZTxSZWRpc0NsaWVudFR5cGUgfCBudWxsPiB7XG5cdGNvbnN0IFJFRElTX0ZMQUcgPSBnZXRGZWF0dXJlRmxhZ3MoKS5lbmFibGVSZWRpc0ZsYWc7XG5cblx0aWYgKCFSRURJU19GTEFHKSB7XG5cdFx0bG9nZ2VyLmluZm8oYFJlZGlzIGlzIGRpc2FibGVkIGJhc2VkIG9uIFJFRElTX0ZMQUdgKTtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHRyeSB7XG5cdFx0Y29uc3QgY2xpZW50OiBSZWRpc0NsaWVudFR5cGUgPSBjcmVhdGVSZWRpc0NsaWVudCh7XG5cdFx0XHR1cmw6IHJlZGlzVXJsLFxuXHRcdFx0c29ja2V0OiB7XG5cdFx0XHRcdHJlY29ubmVjdFN0cmF0ZWd5OiAocmV0cmllcykgPT4ge1xuXHRcdFx0XHRcdGxvZ2dlci53YXJuKGBSZWRpcyByZXRyeSBhdHRlbXB0OiAke3JldHJpZXN9YCk7XG5cdFx0XHRcdFx0aWYgKHJldHJpZXMgPj0gMTApIHtcblx0XHRcdFx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0XHRcdFx0J01heCByZXRyaWVzIHJlYWNoZWQuIENvdWxkIG5vdCBjb25uZWN0IHRvIFJlZGlzLidcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gbmV3IEVycm9yKCdNYXggcmV0cmllcyByZWFjaGVkJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1pbihyZXRyaWVzICogMTAwLCAzMDAwKTsgLy8gcmVjb25uZWN0IGFmdGVyIGluY3JlYXNpbmcgaW50ZXJ2YWxzIHVwIHRvIDMgc2Vjb25kc1xuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHR9KTtcblxuXHRcdGNsaWVudC5vbignZXJyb3InLCAoZXJyKSA9PiB7XG5cdFx0XHRsb2dnZXIuZXJyb3IoYFJlZGlzIGNsaWVudCBlcnJvcjogJHtlcnJ9YCk7XG5cdFx0fSk7XG5cblx0XHRhd2FpdCBjbGllbnQuY29ubmVjdCgpO1xuXHRcdGxvZ2dlci5pbmZvKCdDb25uZWN0ZWQgdG8gUmVkaXMnKTtcblxuXHRcdHJlZGlzQ2xpZW50ID0gY2xpZW50O1xuXHRcdHJldHVybiBjbGllbnQ7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdGxvZ2dlci5lcnJvcihgRmFpbGVkIHRvIGNvbm5lY3QgdG8gUmVkaXM6ICR7ZXJyfWApO1xuXHRcdHJldHVybiBudWxsOyAvLyBlbnN1cmUgbm8gZnVydGhlciBSZWRpcyBvcGVyYXRpb25zIGFyZSBhdHRlbXB0ZWRcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVkaXNDbGllbnQoKTogUmVkaXNDbGllbnRUeXBlIHwgbnVsbCB7XG5cdHJldHVybiByZWRpc0NsaWVudDtcbn1cbiJdfQ==
