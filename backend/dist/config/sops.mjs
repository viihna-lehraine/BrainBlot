import { execSync } from 'child_process';
import path from 'path';
import setupLogger from './logger';
const logger = setupLogger();
const __dirname = process.cwd();
function getDirectoryPath() {
	return path.resolve(__dirname);
}
async function getSecrets() {
	try {
		const secretsPath = path.join(
			getDirectoryPath(),
			'../backend/config/secrets.json.gpg'
		);
		logger.info('Resolved secrets path:', secretsPath);
		const decryptedSecrets = execSync(
			`sops -d --output-type json ${secretsPath}`
		).toString();
		return JSON.parse(decryptedSecrets);
	} catch (err) {
		logger.info('Error retrieving secrets from SOPS: ', err);
		throw err;
	}
}
async function decryptKey(encryptedFilePath) {
	try {
		const decryptedKey = execSync(
			`sops -d --output-type string ${encryptedFilePath}`
		).toString('utf-8');
		return decryptedKey;
	} catch (err) {
		logger.error('Error decrypting key from SOPS: ', err);
		throw err;
	}
}
async function decryptDataFiles() {
	try {
		const filePaths = [
			process.env.SERVER_DATA_FILE_PATH_1,
			process.env.SERVER_DATA_FILE_PATH_2,
			process.env.SERVER_DATA_FILE_PATH_3,
			process.env.SERVER_DATA_FILE_PATH_4
		];
		const decryptedFiles = {};
		for (const [index, filePath] of filePaths.entries()) {
			if (filePath) {
				decryptedFiles[`files${index + 1}`] = execSync(
					`sops -d --output-type json ${filePath}`
				).toString();
			} else {
				logger.warn(
					`SERVER_DATA_FILE_PATH_${index + 1} is not defined`
				);
			}
		}
		return decryptedFiles;
	} catch (err) {
		logger.error('Error decrypting files from backend data folder: ', err);
		throw err;
	}
}
async function getSSLKeys() {
	try {
		const keyPath = path.join(
			__dirname,
			'./keys/ssl/guestbook_key.pem.gpg'
		);
		const certPath = path.join(
			__dirname,
			'./keys/ssl/guestbook_cert.pem.gpg'
		);
		const decryptedKey = await decryptKey(keyPath);
		const decryptedCert = await decryptKey(certPath);
		return {
			key: decryptedKey,
			cert: decryptedCert
		};
	} catch (err) {
		logger.error('Error retrieving SSL keys from SOPS: ', err);
		throw err;
	}
}
export default { decryptDataFiles, getSecrets, getSSLKeys };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29wcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb25maWcvc29wcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLFdBQVcsTUFBTSxVQUFVLENBQUM7QUFFbkMsTUFBTSxNQUFNLEdBQUcsV0FBVyxFQUFFLENBQUM7QUFDN0IsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRWhDLFNBQVMsZ0JBQWdCO0lBQ3hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNoQyxDQUFDO0FBRUQsS0FBSyxVQUFVLFVBQVU7SUFDeEIsSUFBSSxDQUFDO1FBQ0osTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FDNUIsZ0JBQWdCLEVBQUUsRUFDbEIsb0NBQW9DLENBQ3BDLENBQUM7UUFDRixNQUFNLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ25ELE1BQU0sZ0JBQWdCLEdBQUcsUUFBUSxDQUNoQyw4QkFBOEIsV0FBVyxFQUFFLENBQzNDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNkLE1BQU0sQ0FBQyxJQUFJLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDekQsTUFBTSxHQUFHLENBQUM7SUFDWCxDQUFDO0FBQ0YsQ0FBQztBQUVELEtBQUssVUFBVSxVQUFVLENBQUMsaUJBQXlCO0lBQ2xELElBQUksQ0FBQztRQUNKLElBQUksWUFBWSxHQUFHLFFBQVEsQ0FDMUIsZ0NBQWdDLGlCQUFpQixFQUFFLENBQ25ELENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BCLE9BQU8sWUFBWSxDQUFDO0lBQ3JCLENBQUM7SUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2QsTUFBTSxDQUFDLEtBQUssQ0FBQyxrQ0FBa0MsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN0RCxNQUFNLEdBQUcsQ0FBQztJQUNYLENBQUM7QUFDRixDQUFDO0FBRUQsS0FBSyxVQUFVLGdCQUFnQjtJQUM5QixJQUFJLENBQUM7UUFDSixNQUFNLFNBQVMsR0FBRztZQUNqQixPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QjtZQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QjtZQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QjtZQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QjtTQUNuQyxDQUFDO1FBRUYsTUFBTSxjQUFjLEdBQThCLEVBQUUsQ0FBQztRQUVyRCxLQUFLLElBQUksQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLElBQUksU0FBUyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUM7WUFDbkQsSUFBSSxRQUFRLEVBQUUsQ0FBQztnQkFDZCxjQUFjLENBQUMsUUFBUSxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQzdDLDhCQUE4QixRQUFRLEVBQUUsQ0FDeEMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNkLENBQUM7aUJBQU0sQ0FBQztnQkFDUCxNQUFNLENBQUMsSUFBSSxDQUNWLHlCQUF5QixLQUFLLEdBQUcsQ0FBQyxpQkFBaUIsQ0FDbkQsQ0FBQztZQUNILENBQUM7UUFDRixDQUFDO1FBRUQsT0FBTyxjQUFjLENBQUM7SUFDdkIsQ0FBQztJQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDZCxNQUFNLENBQUMsS0FBSyxDQUFDLG1EQUFtRCxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZFLE1BQU0sR0FBRyxDQUFDO0lBQ1gsQ0FBQztBQUNGLENBQUM7QUFDRCxLQUFLLFVBQVUsVUFBVTtJQUN4QixJQUFJLENBQUM7UUFDSixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUN4QixTQUFTLEVBQ1Qsa0NBQWtDLENBQ2xDLENBQUM7UUFDRixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUN6QixTQUFTLEVBQ1QsbUNBQW1DLENBQ25DLENBQUM7UUFDRixNQUFNLFlBQVksR0FBRyxNQUFNLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvQyxNQUFNLGFBQWEsR0FBRyxNQUFNLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVqRCxPQUFPO1lBQ04sR0FBRyxFQUFFLFlBQVk7WUFDakIsSUFBSSxFQUFFLGFBQWE7U0FDbkIsQ0FBQztJQUNILENBQUM7SUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2QsTUFBTSxDQUFDLEtBQUssQ0FBQyx1Q0FBdUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMzRCxNQUFNLEdBQUcsQ0FBQztJQUNYLENBQUM7QUFDRixDQUFDO0FBRUQsZUFBZSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWNTeW5jIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBzZXR1cExvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5cbmNvbnN0IGxvZ2dlciA9IHNldHVwTG9nZ2VyKCk7XG5jb25zdCBfX2Rpcm5hbWUgPSBwcm9jZXNzLmN3ZCgpO1xuXG5mdW5jdGlvbiBnZXREaXJlY3RvcnlQYXRoKCkge1xuXHRyZXR1cm4gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFNlY3JldHMoKSB7XG5cdHRyeSB7XG5cdFx0Y29uc3Qgc2VjcmV0c1BhdGggPSBwYXRoLmpvaW4oXG5cdFx0XHRnZXREaXJlY3RvcnlQYXRoKCksXG5cdFx0XHQnLi4vYmFja2VuZC9jb25maWcvc2VjcmV0cy5qc29uLmdwZydcblx0XHQpO1xuXHRcdGxvZ2dlci5pbmZvKCdSZXNvbHZlZCBzZWNyZXRzIHBhdGg6Jywgc2VjcmV0c1BhdGgpO1xuXHRcdGNvbnN0IGRlY3J5cHRlZFNlY3JldHMgPSBleGVjU3luYyhcblx0XHRcdGBzb3BzIC1kIC0tb3V0cHV0LXR5cGUganNvbiAke3NlY3JldHNQYXRofWBcblx0XHQpLnRvU3RyaW5nKCk7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoZGVjcnlwdGVkU2VjcmV0cyk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdGxvZ2dlci5pbmZvKCdFcnJvciByZXRyaWV2aW5nIHNlY3JldHMgZnJvbSBTT1BTOiAnLCBlcnIpO1xuXHRcdHRocm93IGVycjtcblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiBkZWNyeXB0S2V5KGVuY3J5cHRlZEZpbGVQYXRoOiBzdHJpbmcpIHtcblx0dHJ5IHtcblx0XHRsZXQgZGVjcnlwdGVkS2V5ID0gZXhlY1N5bmMoXG5cdFx0XHRgc29wcyAtZCAtLW91dHB1dC10eXBlIHN0cmluZyAke2VuY3J5cHRlZEZpbGVQYXRofWBcblx0XHQpLnRvU3RyaW5nKCd1dGYtOCcpO1xuXHRcdHJldHVybiBkZWNyeXB0ZWRLZXk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdGxvZ2dlci5lcnJvcignRXJyb3IgZGVjcnlwdGluZyBrZXkgZnJvbSBTT1BTOiAnLCBlcnIpO1xuXHRcdHRocm93IGVycjtcblx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiBkZWNyeXB0RGF0YUZpbGVzKCkge1xuXHR0cnkge1xuXHRcdGNvbnN0IGZpbGVQYXRocyA9IFtcblx0XHRcdHByb2Nlc3MuZW52LlNFUlZFUl9EQVRBX0ZJTEVfUEFUSF8xLFxuXHRcdFx0cHJvY2Vzcy5lbnYuU0VSVkVSX0RBVEFfRklMRV9QQVRIXzIsXG5cdFx0XHRwcm9jZXNzLmVudi5TRVJWRVJfREFUQV9GSUxFX1BBVEhfMyxcblx0XHRcdHByb2Nlc3MuZW52LlNFUlZFUl9EQVRBX0ZJTEVfUEFUSF80XG5cdFx0XTtcblxuXHRcdGNvbnN0IGRlY3J5cHRlZEZpbGVzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge307XG5cblx0XHRmb3IgKGxldCBbaW5kZXgsIGZpbGVQYXRoXSBvZiBmaWxlUGF0aHMuZW50cmllcygpKSB7XG5cdFx0XHRpZiAoZmlsZVBhdGgpIHtcblx0XHRcdFx0ZGVjcnlwdGVkRmlsZXNbYGZpbGVzJHtpbmRleCArIDF9YF0gPSBleGVjU3luYyhcblx0XHRcdFx0XHRgc29wcyAtZCAtLW91dHB1dC10eXBlIGpzb24gJHtmaWxlUGF0aH1gXG5cdFx0XHRcdCkudG9TdHJpbmcoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxvZ2dlci53YXJuKFxuXHRcdFx0XHRcdGBTRVJWRVJfREFUQV9GSUxFX1BBVEhfJHtpbmRleCArIDF9IGlzIG5vdCBkZWZpbmVkYFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBkZWNyeXB0ZWRGaWxlcztcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0bG9nZ2VyLmVycm9yKCdFcnJvciBkZWNyeXB0aW5nIGZpbGVzIGZyb20gYmFja2VuZCBkYXRhIGZvbGRlcjogJywgZXJyKTtcblx0XHR0aHJvdyBlcnI7XG5cdH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGdldFNTTEtleXMoKSB7XG5cdHRyeSB7XG5cdFx0Y29uc3Qga2V5UGF0aCA9IHBhdGguam9pbihcblx0XHRcdF9fZGlybmFtZSxcblx0XHRcdCcuL2tleXMvc3NsL2d1ZXN0Ym9va19rZXkucGVtLmdwZydcblx0XHQpO1xuXHRcdGNvbnN0IGNlcnRQYXRoID0gcGF0aC5qb2luKFxuXHRcdFx0X19kaXJuYW1lLFxuXHRcdFx0Jy4va2V5cy9zc2wvZ3Vlc3Rib29rX2NlcnQucGVtLmdwZydcblx0XHQpO1xuXHRcdGNvbnN0IGRlY3J5cHRlZEtleSA9IGF3YWl0IGRlY3J5cHRLZXkoa2V5UGF0aCk7XG5cdFx0Y29uc3QgZGVjcnlwdGVkQ2VydCA9IGF3YWl0IGRlY3J5cHRLZXkoY2VydFBhdGgpO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGtleTogZGVjcnlwdGVkS2V5LFxuXHRcdFx0Y2VydDogZGVjcnlwdGVkQ2VydFxuXHRcdH07XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdGxvZ2dlci5lcnJvcignRXJyb3IgcmV0cmlldmluZyBTU0wga2V5cyBmcm9tIFNPUFM6ICcsIGVycik7XG5cdFx0dGhyb3cgZXJyO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHsgZGVjcnlwdERhdGFGaWxlcywgZ2V0U2VjcmV0cywgZ2V0U1NMS2V5cyB9O1xuIl19
