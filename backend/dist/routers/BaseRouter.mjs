import express from 'express';
import { APIRouter } from './APIRouter.mjs';
import { HealthRouter } from './HealthRouter.mjs';
import { StaticRouter } from './StaticRouter.mjs';
import { TestRouter } from './TestRouter.mjs';
import { ServiceFactory } from '../index/factory.mjs';
import { sanitizeRequestBody } from '../utils/validator.mjs';
import { validateDependencies } from '../utils/helpers.mjs';
import { withRetry } from '../utils/helpers.mjs';
import compression from 'compression';
import hpp from 'hpp';
import passport from 'passport';
import xss from 'xss';
export class BaseRouter {
	static instance = null;
	router;
	logger;
	errorLogger;
	errorHandler;
	envConfig;
	cacheService;
	gatekeeperService;
	helmetService;
	JWTMiddleware;
	passportMiddleware;
	apiRouteTable = {};
	healthRouteTable = {};
	staticRouteTable = {};
	testRouteTable = {};
	constructor(
		logger,
		errorLogger,
		errorHandler,
		envConfig,
		cacheService,
		gatekeeperService,
		helmetService,
		JWTMiddleware,
		passportMiddleware
	) {
		this.router = express.Router();
		this.logger = logger;
		this.errorLogger = errorLogger;
		this.errorHandler = errorHandler;
		this.envConfig = envConfig;
		this.cacheService = cacheService;
		this.gatekeeperService = gatekeeperService;
		this.helmetService = helmetService;
		this.JWTMiddleware = JWTMiddleware;
		this.passportMiddleware = passportMiddleware;
	}
	static async getInstance() {
		if (!BaseRouter.instance) {
			BaseRouter.instance = new BaseRouter(
				await ServiceFactory.getLoggerService(),
				await ServiceFactory.getErrorLoggerService(),
				await ServiceFactory.getErrorHandlerService(),
				await ServiceFactory.getEnvConfigService(),
				await ServiceFactory.getCacheService(),
				await ServiceFactory.getGatekeeperService(),
				await ServiceFactory.getHelmetMiddlewareService(),
				await ServiceFactory.getJWTAuthMiddlewareService(),
				await ServiceFactory.getPassportAuthMiddlewareService()
			);
			await BaseRouter.instance.initializeBaseRouter();
		}
		return BaseRouter.instance;
	}
	getRouter() {
		return this.router;
	}
	async initializeBaseRouter() {
		await withRetry(
			async () => {
				this.router = express.Router();
				await this.loadRouteTables();
				await this.applyMiddlewares();
				this.setUpRoutes();
			},
			10,
			250,
			true
		);
	}
	async loadRouteTables() {
		const apiRouteTable = (await import('../config/routeTables'))
			.apiRouteTable;
		const healthRoutes = (await import('../config/routeTables'))
			.healthRouteTable;
		const staticRoutes = (await import('../config/routeTables'))
			.staticRouteTable;
		const testRoutes = (await import('../config/routeTables'))
			.testRouteTable;
		this.apiRouteTable = apiRouteTable;
		this.healthRouteTable = healthRoutes;
		this.staticRouteTable = staticRoutes;
		this.testRouteTable = testRoutes;
	}
	setUpRoutes() {
		this.router.all('*', this.asyncHandler(this.routeHandler.bind(this)));
	}
	async routeHandler(req, res, next) {
		const method = req.method;
		const path = req.path;
		try {
			if (
				this.staticRouteTable[path] &&
				this.staticRouteTable[path][method]
			) {
				return await this.handleRoute(
					this.staticRouteTable[path][method],
					req,
					res,
					next
				);
			}
			if (this.apiRouteTable[path] && this.apiRouteTable[path][method]) {
				return await this.handleRoute(
					this.apiRouteTable[path][method],
					req,
					res,
					next
				);
			}
			if (
				this.healthRouteTable[path] &&
				this.healthRouteTable[path][method]
			) {
				return await this.handleRoute(
					this.healthRouteTable[path][method],
					req,
					res,
					next
				);
			}
			if (
				this.testRouteTable[path] &&
				this.testRouteTable[path][method] &&
				this.envConfig.getFeatureFlags().loadTestRoutes
			) {
				return await this.handleRoute(
					this.testRouteTable[path][method],
					req,
					res,
					next
				);
			}
			const staticRouterInstance = await StaticRouter.getInstance();
			await staticRouterInstance.serveNotFoundPage(req, res, next);
		} catch (error) {
			this.handleRouteError(error, req, res, next);
		}
	}
	async handleRoute(routerName, req, res, next) {
		await withRetry(
			async () => {
				switch (routerName) {
					case 'staticRouter':
						(await StaticRouter.getInstance()).getRouter()(
							req,
							res,
							next
						);
						break;
					case 'apiRouter':
						(await APIRouter.getInstance()).getRouter()(
							req,
							res,
							next
						);
						break;
					case 'healthRouter':
						(await HealthRouter.getInstance()).getRouter()(
							req,
							res,
							next
						);
						break;
					case 'testRouter':
						(await TestRouter.getInstance()).getRouter()(
							req,
							res,
							next
						);
						break;
					default:
						res.status(500).json({
							message: 'Internal server error'
						});
						next();
				}
			},
			5,
			250,
			true
		).catch(error => {
			this.logger.error(`Failed to handle route: ${error}`);
			res.status(500).json({
				message: 'Failed to handle route after multiple attempts'
			});
			next();
		});
	}
	async applyMiddlewares() {
		const app = express();
		this.applyErrorHandler();
		this.applySanitization();
		this.applyGatekeeper();
		this.applySecurityHeaders(app);
		this.applyCompression();
		this.applyPassportAndJWTAuth();
	}
	applyCompression() {
		this.router.use(compression());
	}
	applyGatekeeper() {
		this.router.use(this.gatekeeperService.rateLimitMiddleware());
		this.router.use(this.gatekeeperService.slowdownMiddleware());
		this.router.use(this.gatekeeperService.ipBlacklistMiddleware());
	}
	applyPassportAndJWTAuth() {
		this.router.use(
			this.asyncHandler(async (req, res, next) => {
				const passportDeps = {
					passport,
					authenticateOptions: { session: false },
					validateDependencies
				};
				this.passportMiddleware.initializePassportAuthMiddleware(
					passportDeps
				);
				passport.session();
				this.JWTMiddleware.initializeJWTAuthMiddleware();
				next();
			})
		);
	}
	applySanitization() {
		this.router.use(
			this.asyncHandler(async (req, res, next) => {
				req.body = await sanitizeRequestBody(req.body);
				for (const key in req.query) {
					if (req.query.hasOwnProperty(key)) {
						req.query[key] = xss(req.query[key]);
					}
				}
				for (const key in req.params) {
					if (req.params.hasOwnProperty(key)) {
						req.params[key] = xss(req.params[key]);
					}
				}
				next();
			})
		);
	}
	async applySecurityHeaders(app) {
		try {
			await withRetry(
				() => this.helmetService.initializeHelmetMiddleware(app),
				3,
				1000
			);
			this.router.use(hpp());
		} catch (error) {
			this.errorLogger.logError('Failed to initialize Helmet middleware');
			this.handleRouteError(error, {}, {}, {});
		}
	}
	asyncHandler = fn => {
		return (req, res, next) => {
			fn(req, res, next).catch(next);
		};
	};
	async shutdown() {
		try {
			this.logger.info('Shutting down Base Router...');
			this.logger.info('Clearing API Router cache...');
			await this.cacheService.clearNamespace('userLogin');
			await this.cacheService.clearNamespace('recoverPassword');
			await this.cacheService.clearNamespace('generateTOTP');
			await this.cacheService.clearNamespace('generateEmailMFA');
			this.logger.info('APIRouter cache cleared successfully.');
			this.logger.info('Clearing Static Router cache...');
			await this.cacheService.clearNamespace('static-files');
			this.logger.info('StaticRouter cache cleared successfully.');
			this.logger.info('Clearing Health Router cache...');
			await this.cacheService.clearNamespace('healthCheck');
			this.logger.info('HealthRouter cache cleared successfully.');
			if (
				this.envConfig.getFeatureFlags().loadTestRoutes &&
				this.envConfig.getEnvVariable('nodeEnv') !== 'production'
			) {
				this.logger.info('Clearing Test Router cache...');
				await this.cacheService.clearNamespace('test');
				this.logger.info('TestRouter cache cleared successfully.');
			}
			this.logger.info(
				'Base Router extension caches cleared. Completing shutdown process'
			);
			BaseRouter.instance = null;
			this.logger.info('Base Router shutdown complete.');
		} catch (error) {
			const utilityError =
				new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
					`Error during APIRouter shutdown: ${error instanceof Error ? error.message : error}`
				);
			this.errorLogger.logError(utilityError.message);
			this.errorHandler.handleError({ error: utilityError });
		}
	}
	handleRouteError(error, req, res, next) {
		const expressError = new this.errorHandler.ErrorClasses.ExpressError(
			`Route error: ${error instanceof Error ? error.message : 'Unknown error'}`,
			{ exposeToClient: false }
		);
		this.errorLogger.logError(expressError.message);
		this.errorHandler.expressErrorHandler()(expressError, req, res, next);
	}
	applyErrorHandler() {
		this.router.use((err, req, res, next) => {
			this.errorHandler.expressErrorHandler()(err, req, res, next);
		});
	}
}
//# sourceMappingURL=data:application/json;base64,
