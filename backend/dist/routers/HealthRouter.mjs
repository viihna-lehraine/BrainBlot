import { BaseRouter } from './BaseRouter.mjs';
import { ServiceFactory } from '../index/factory.mjs';
import { serviceTTLConfig } from '../config/cache.mjs';
export class HealthRouter extends BaseRouter {
	healthCheckService;
	accessControl;
	csrfMiddleware;
	cacheTTL = 300;
	constructor(
		logger,
		errorLogger,
		errorHandler,
		envConfig,
		cacheService,
		gatekeeperService,
		helmetService,
		JWTMiddleware,
		passportMiddleware
	) {
		super(
			logger,
			errorLogger,
			errorHandler,
			envConfig,
			cacheService,
			gatekeeperService,
			helmetService,
			JWTMiddleware,
			passportMiddleware
		);
		this.initializeServices().then(() => {
			this.router.use(this.csrfMiddleware.initializeCSRFMiddleware());
			this.setupRoutes();
		});
	}
	async initializeServices() {
		this.healthCheckService = await ServiceFactory.getHealthCheckService();
		this.accessControl =
			await ServiceFactory.getAccessControlMiddlewareService();
		this.csrfMiddleware = await ServiceFactory.getCSRFMiddlewareService();
		this.cacheTTL = serviceTTLConfig.HealthRouter || 300;
	}
	setupRoutes() {
		this.router.get(
			'/health.html',
			this.accessControl.restrictTo('admin'),
			this.asyncHandler(async (req, res, next) => {
				const cacheKey = 'healthCheckData';
				try {
					const cachedData = await this.cacheService.get(
						cacheKey,
						'healthCheck'
					);
					if (cachedData) {
						this.logger.info('Returning cached health check data');
						res.json(cachedData);
						return;
					}
					const healthData =
						await this.healthCheckService.performHealthCheck();
					await this.cacheService.set(
						cacheKey,
						healthData,
						'healthCheck',
						this.cacheTTL
					);
					this.logger.info('Health check data cached successfully');
					res.json(healthData);
					return;
				} catch (err) {
					next(err);
				}
			})
		);
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGVhbHRoUm91dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JvdXRlcnMvSGVhbHRoUm91dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDMUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWxELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBZ0JuRCxNQUFNLE9BQU8sWUFBYSxTQUFRLFVBQVU7SUFDbkMsa0JBQWtCLENBQStCO0lBQ2pELGFBQWEsQ0FBMkM7SUFDeEQsY0FBYyxDQUFrQztJQUNoRCxRQUFRLEdBQVcsR0FBRyxDQUFDO0lBRS9CLFlBQ0MsTUFBaUMsRUFDakMsV0FBd0MsRUFDeEMsWUFBMEMsRUFDMUMsU0FBb0MsRUFDcEMsWUFBbUMsRUFDbkMsaUJBQTZDLEVBQzdDLGFBQStDLEVBQy9DLGFBQWdELEVBQ2hELGtCQUEwRDtRQUUxRCxLQUFLLENBQ0osTUFBTSxFQUNOLFdBQVcsRUFDWCxZQUFZLEVBQ1osU0FBUyxFQUNULFlBQVksRUFDWixpQkFBaUIsRUFDakIsYUFBYSxFQUNiLGFBQWEsRUFDYixrQkFBa0IsQ0FDbEIsQ0FBQztRQUVGLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDbkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDLENBQUM7WUFDaEUsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVPLEtBQUssQ0FBQyxrQkFBa0I7UUFDL0IsSUFBSSxDQUFDLGtCQUFrQixHQUFHLE1BQU0sY0FBYyxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDdkUsSUFBSSxDQUFDLGFBQWE7WUFDakIsTUFBTSxjQUFjLENBQUMsaUNBQWlDLEVBQUUsQ0FBQztRQUMxRCxJQUFJLENBQUMsY0FBYyxHQUFHLE1BQU0sY0FBYyxDQUFDLHdCQUF3QixFQUFFLENBQUM7UUFDdEUsSUFBSSxDQUFDLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQyxZQUFZLElBQUksR0FBRyxDQUFDO0lBQ3RELENBQUM7SUFFTyxXQUFXO1FBQ2xCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUNkLGNBQWMsRUFDZCxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFDdEMsSUFBSSxDQUFDLFlBQVksQ0FDaEIsS0FBSyxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0IsRUFBRSxFQUFFO1lBQ3pELE1BQU0sUUFBUSxHQUFHLGlCQUFpQixDQUFDO1lBRW5DLElBQUksQ0FBQztnQkFDSixNQUFNLFVBQVUsR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUM3QyxRQUFRLEVBQ1IsYUFBYSxDQUNiLENBQUM7Z0JBRUYsSUFBSSxVQUFVLEVBQUUsQ0FBQztvQkFDaEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ2Ysb0NBQW9DLENBQ3BDLENBQUM7b0JBQ0YsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztvQkFDckIsT0FBTztnQkFDUixDQUFDO2dCQUVELE1BQU0sVUFBVSxHQUNmLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGtCQUFrQixFQUFFLENBQUM7Z0JBQ3BELE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQzFCLFFBQVEsRUFDUixVQUFVLEVBQ1YsYUFBYSxFQUNiLElBQUksQ0FBQyxRQUFRLENBQ2IsQ0FBQztnQkFFRixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDZix1Q0FBdUMsQ0FDdkMsQ0FBQztnQkFDRixHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUNyQixPQUFPO1lBQ1IsQ0FBQztZQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7Z0JBQ2QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ1gsQ0FBQztRQUNGLENBQUMsQ0FDRCxDQUNELENBQUM7SUFDSCxDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlUm91dGVyIH0gZnJvbSAnLi9CYXNlUm91dGVyJztcbmltcG9ydCB7IFNlcnZpY2VGYWN0b3J5IH0gZnJvbSAnLi4vaW5kZXgvZmFjdG9yeSc7XG5pbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9uIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBzZXJ2aWNlVFRMQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL2NhY2hlJztcbmltcG9ydCB7XG5cdEFjY2Vzc0NvbnRyb2xNaWRkbGV3YXJlU2VydmljZUludGVyZmFjZSxcblx0QXBwTG9nZ2VyU2VydmljZUludGVyZmFjZSxcblx0Q2FjaGVTZXJ2aWNlSW50ZXJmYWNlLFxuXHRDU1JGTWlkZGxld2FyZVNlcnZpY2VJbnRlcmZhY2UsXG5cdEVudkNvbmZpZ1NlcnZpY2VJbnRlcmZhY2UsXG5cdEVycm9ySGFuZGxlclNlcnZpY2VJbnRlcmZhY2UsXG5cdEVycm9yTG9nZ2VyU2VydmljZUludGVyZmFjZSxcblx0R2F0ZWtlZXBlclNlcnZpY2VJbnRlcmZhY2UsXG5cdEhlYWx0aENoZWNrU2VydmljZUludGVyZmFjZSxcblx0SGVsbWV0TWlkZGxld2FyZVNlcnZpY2VJbnRlcmZhY2UsXG5cdEpXVEF1dGhNaWRkbGV3YXJlU2VydmljZUludGVyZmFjZSxcblx0UGFzc3BvcnRBdXRoTWlkZGxld2FyZVNlcnZpY2VJbnRlcmZhY2Vcbn0gZnJvbSAnLi4vaW5kZXgvaW50ZXJmYWNlcy9zZXJ2aWNlcyc7XG5cbmV4cG9ydCBjbGFzcyBIZWFsdGhSb3V0ZXIgZXh0ZW5kcyBCYXNlUm91dGVyIHtcblx0cHJpdmF0ZSBoZWFsdGhDaGVja1NlcnZpY2UhOiBIZWFsdGhDaGVja1NlcnZpY2VJbnRlcmZhY2U7XG5cdHByaXZhdGUgYWNjZXNzQ29udHJvbCE6IEFjY2Vzc0NvbnRyb2xNaWRkbGV3YXJlU2VydmljZUludGVyZmFjZTtcblx0cHJpdmF0ZSBjc3JmTWlkZGxld2FyZSE6IENTUkZNaWRkbGV3YXJlU2VydmljZUludGVyZmFjZTtcblx0cHJpdmF0ZSBjYWNoZVRUTDogbnVtYmVyID0gMzAwO1xuXG5cdHByaXZhdGUgY29uc3RydWN0b3IoXG5cdFx0bG9nZ2VyOiBBcHBMb2dnZXJTZXJ2aWNlSW50ZXJmYWNlLFxuXHRcdGVycm9yTG9nZ2VyOiBFcnJvckxvZ2dlclNlcnZpY2VJbnRlcmZhY2UsXG5cdFx0ZXJyb3JIYW5kbGVyOiBFcnJvckhhbmRsZXJTZXJ2aWNlSW50ZXJmYWNlLFxuXHRcdGVudkNvbmZpZzogRW52Q29uZmlnU2VydmljZUludGVyZmFjZSxcblx0XHRjYWNoZVNlcnZpY2U6IENhY2hlU2VydmljZUludGVyZmFjZSxcblx0XHRnYXRla2VlcGVyU2VydmljZTogR2F0ZWtlZXBlclNlcnZpY2VJbnRlcmZhY2UsXG5cdFx0aGVsbWV0U2VydmljZTogSGVsbWV0TWlkZGxld2FyZVNlcnZpY2VJbnRlcmZhY2UsXG5cdFx0SldUTWlkZGxld2FyZTogSldUQXV0aE1pZGRsZXdhcmVTZXJ2aWNlSW50ZXJmYWNlLFxuXHRcdHBhc3Nwb3J0TWlkZGxld2FyZTogUGFzc3BvcnRBdXRoTWlkZGxld2FyZVNlcnZpY2VJbnRlcmZhY2Vcblx0KSB7XG5cdFx0c3VwZXIoXG5cdFx0XHRsb2dnZXIsXG5cdFx0XHRlcnJvckxvZ2dlcixcblx0XHRcdGVycm9ySGFuZGxlcixcblx0XHRcdGVudkNvbmZpZyxcblx0XHRcdGNhY2hlU2VydmljZSxcblx0XHRcdGdhdGVrZWVwZXJTZXJ2aWNlLFxuXHRcdFx0aGVsbWV0U2VydmljZSxcblx0XHRcdEpXVE1pZGRsZXdhcmUsXG5cdFx0XHRwYXNzcG9ydE1pZGRsZXdhcmVcblx0XHQpO1xuXG5cdFx0dGhpcy5pbml0aWFsaXplU2VydmljZXMoKS50aGVuKCgpID0+IHtcblx0XHRcdHRoaXMucm91dGVyLnVzZSh0aGlzLmNzcmZNaWRkbGV3YXJlLmluaXRpYWxpemVDU1JGTWlkZGxld2FyZSgpKTtcblx0XHRcdHRoaXMuc2V0dXBSb3V0ZXMoKTtcblx0XHR9KTtcblx0fVxuXG5cdHByaXZhdGUgYXN5bmMgaW5pdGlhbGl6ZVNlcnZpY2VzKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdHRoaXMuaGVhbHRoQ2hlY2tTZXJ2aWNlID0gYXdhaXQgU2VydmljZUZhY3RvcnkuZ2V0SGVhbHRoQ2hlY2tTZXJ2aWNlKCk7XG5cdFx0dGhpcy5hY2Nlc3NDb250cm9sID1cblx0XHRcdGF3YWl0IFNlcnZpY2VGYWN0b3J5LmdldEFjY2Vzc0NvbnRyb2xNaWRkbGV3YXJlU2VydmljZSgpO1xuXHRcdHRoaXMuY3NyZk1pZGRsZXdhcmUgPSBhd2FpdCBTZXJ2aWNlRmFjdG9yeS5nZXRDU1JGTWlkZGxld2FyZVNlcnZpY2UoKTtcblx0XHR0aGlzLmNhY2hlVFRMID0gc2VydmljZVRUTENvbmZpZy5IZWFsdGhSb3V0ZXIgfHwgMzAwO1xuXHR9XG5cblx0cHJpdmF0ZSBzZXR1cFJvdXRlcygpOiB2b2lkIHtcblx0XHR0aGlzLnJvdXRlci5nZXQoXG5cdFx0XHQnL2hlYWx0aC5odG1sJyxcblx0XHRcdHRoaXMuYWNjZXNzQ29udHJvbC5yZXN0cmljdFRvKCdhZG1pbicpLFxuXHRcdFx0dGhpcy5hc3luY0hhbmRsZXIoXG5cdFx0XHRcdGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IGNhY2hlS2V5ID0gJ2hlYWx0aENoZWNrRGF0YSc7XG5cblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0Y29uc3QgY2FjaGVkRGF0YSA9IGF3YWl0IHRoaXMuY2FjaGVTZXJ2aWNlLmdldChcblx0XHRcdFx0XHRcdFx0Y2FjaGVLZXksXG5cdFx0XHRcdFx0XHRcdCdoZWFsdGhDaGVjaydcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGlmIChjYWNoZWREYXRhKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMubG9nZ2VyLmluZm8oXG5cdFx0XHRcdFx0XHRcdFx0J1JldHVybmluZyBjYWNoZWQgaGVhbHRoIGNoZWNrIGRhdGEnXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdHJlcy5qc29uKGNhY2hlZERhdGEpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGNvbnN0IGhlYWx0aERhdGEgPVxuXHRcdFx0XHRcdFx0XHRhd2FpdCB0aGlzLmhlYWx0aENoZWNrU2VydmljZS5wZXJmb3JtSGVhbHRoQ2hlY2soKTtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMuY2FjaGVTZXJ2aWNlLnNldChcblx0XHRcdFx0XHRcdFx0Y2FjaGVLZXksXG5cdFx0XHRcdFx0XHRcdGhlYWx0aERhdGEsXG5cdFx0XHRcdFx0XHRcdCdoZWFsdGhDaGVjaycsXG5cdFx0XHRcdFx0XHRcdHRoaXMuY2FjaGVUVExcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdHRoaXMubG9nZ2VyLmluZm8oXG5cdFx0XHRcdFx0XHRcdCdIZWFsdGggY2hlY2sgZGF0YSBjYWNoZWQgc3VjY2Vzc2Z1bGx5J1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJlcy5qc29uKGhlYWx0aERhdGEpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdFx0bmV4dChlcnIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0KVxuXHRcdCk7XG5cdH1cbn1cbiJdfQ==
