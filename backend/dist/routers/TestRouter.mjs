import { BaseRouter } from './BaseRouter.mjs';
// *DEV-NOTE* need to create a test page to utilize this router
export class TestRouter extends BaseRouter {
	nodeEnv = this.envConfig.getEnvVariable('nodeEnv');
	constructor(
		logger,
		errorLogger,
		errorHandler,
		envConfig,
		cacheService,
		gatekeeperService,
		helmetService,
		JWTMiddleware,
		passportMiddleware
	) {
		super(
			logger,
			errorLogger,
			errorHandler,
			envConfig,
			cacheService,
			gatekeeperService,
			helmetService,
			JWTMiddleware,
			passportMiddleware
		);
		this.nodeEnv = this.envConfig.getEnvVariable('nodeEnv');
		this.setUpTestRoutes();
	}
	setUpTestRoutes() {
		if (this.nodeEnv === 'production') {
			this.router.use((_req, res) => {
				this.logger.info(
					'Test route accessed in production environment.'
				);
				res.status(404).json({
					message: 'Test routes are not available in production.'
				});
			});
		} else {
			this.router.connect('/test', this.testConnectRoute.bind(this));
			this.router.delete('/test', this.testDeleteRoute.bind(this));
			this.router.get('/test', this.testGetRoute.bind(this));
			this.router.head('/test', this.testHeadRoute.bind(this));
			this.router.options('/test', this.testOptionsRoute.bind(this));
			this.router.patch('/test', this.testPatchRoute.bind(this));
			this.router.post('/test', this.testPostRoute.bind(this));
			this.router.put('/test', this.testPutRoute.bind(this));
			this.router.trace('/test', this.testTraceRoute.bind(this));
		}
		this.router.use(this.handleTestRouteErrors.bind(this));
	}
	testConnectRoute(req, res, next) {
		try {
			this.logger.info('Test route accessed.');
			res.send('Test route is working!');
		} catch (error) {
			this.handleRouteError(error, req, res, next);
		}
	}
	testDeleteRoute(req, res, next) {
		try {
			this.logger.info('DELETE Test route accessed.');
			res.send('DELETE Test route is working!');
		} catch (error) {
			this.handleRouteError(error, req, res, next);
		}
	}
	testGetRoute(req, res, next) {
		try {
			this.logger.info('Test route accessed.');
			res.send('Test route is working!');
		} catch (error) {
			this.handleRouteError(error, req, res, next);
		}
	}
	testHeadRoute(req, res, next) {
		try {
			this.logger.info('Test route accessed.');
			res.send('Test route is working!');
		} catch (error) {
			this.handleRouteError(error, req, res, next);
		}
	}
	testOptionsRoute(req, res, next) {
		try {
			this.logger.info('Test route accessed.');
			res.send('Test route is working!');
		} catch (error) {
			this.handleRouteError(error, req, res, next);
		}
	}
	testPatchRoute(req, res, next) {
		try {
			this.logger.info('Test route accessed.');
			res.send('Test route is working!');
		} catch (error) {
			this.handleRouteError(error, req, res, next);
		}
	}
	testPostRoute(req, res, next) {
		try {
			this.logger.info('POST Test route accessed.');
			res.send('POST Test route is working!');
		} catch (error) {
			this.handleRouteError(error, req, res, next);
		}
	}
	testPutRoute(req, res, next) {
		try {
			this.logger.info('PUT Test route accessed.');
			res.send('PUT Test route is working!');
		} catch (error) {
			this.handleRouteError(error, req, res, next);
		}
	}
	testTraceRoute(req, res, next) {
		try {
			this.logger.info('Test route accessed.');
			res.send('Test route is working!');
		} catch (error) {
			this.handleRouteError(error, req, res, next);
		}
	}
	handleTestRouteErrors(error, req, res, next) {
		if (error instanceof Error) {
			this.logger.error('Unexpected error on test route');
			this.errorHandler.expressErrorHandler()(error, req, res, next);
		} else {
			this.logger.error(
				'Unexpected non-error thrown on test route',
				error
			);
			this.errorHandler.handleError({
				error,
				req
			});
		}
		res.status(500).json({
			error: 'Internal routing error on test route'
		});
	}
}
//# sourceMappingURL=data:application/json;base64,
