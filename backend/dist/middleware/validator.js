import validator from 'validator';
export const validateEntry = (req, res, next) => {
	const errors = [];
	// Name validation
	if (validator.isEmpty(req.body.name || '')) {
		errors.push({ msg: 'Name is required', param: 'name' });
	}
	// Message validation
	if (validator.isEmpty(req.body.message || '')) {
		errors.push({ msg: 'Message is required', param: 'message' });
	}
	if (errors.length) {
		res.status(400).json({ errors });
		return;
	}
	next();
};
export const registrationValidationRules = (req, res, next) => {
	const errors = [];
	// Username validation
	if (!validator.isLength(req.body.username || '', { min: 3 })) {
		errors.push({
			msg: 'Username must be at least 3 characters long',
			param: 'username'
		});
	}
	if (!validator.matches(req.body.username || '', /^[\w-]+$/)) {
		errors.push({
			msg: 'Username can only contain letters, numbers, underscores, and dashes',
			param: 'username'
		});
	}
	// Email validation
	if (!validator.isEmail(req.body.email || '')) {
		errors.push({
			msg: 'Please provide a valid email address',
			param: 'email'
		});
	}
	// Password validation
	if (!validator.isLength(req.body.password || '', { min: 8 })) {
		errors.push({
			msg: 'Password must be at least 8 characters long',
			param: 'password'
		});
	}
	if (!validator.matches(req.body.password || '', /[A-Z]/)) {
		errors.push({
			msg: 'Password must contain at least one uppercase letter',
			param: 'password'
		});
	}
	if (!validator.matches(req.body.password || '', /[a-z]/)) {
		errors.push({
			msg: 'Password must contain at least one lowercase letter',
			param: 'password'
		});
	}
	if (!validator.matches(req.body.password || '', /\d/)) {
		errors.push({
			msg: 'Password must contain at least one number',
			param: 'password'
		});
	}
	if (!validator.matches(req.body.password || '', /[^\dA-Za-z]/)) {
		errors.push({
			msg: 'Password must contain at least one special character',
			param: 'password'
		});
	}
	// Confirm password validation
	if (req.body.password !== req.body.confirmPassword) {
		errors.push({
			msg: 'Passwords do not match',
			param: 'confirmPassword'
		});
	}
	if (errors.length) {
		res.status(400).json({ errors });
		return;
	}
	next();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21pZGRsZXdhcmUvdmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sU0FBUyxNQUFNLFdBQVcsQ0FBQztBQUVsQyxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FDNUIsR0FBWSxFQUNaLEdBQWEsRUFDYixJQUFrQixFQUNYLEVBQUU7SUFDVCxNQUFNLE1BQU0sR0FBMEMsRUFBRSxDQUFDO0lBRXpELGtCQUFrQjtJQUNsQixJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUM1QyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLGtCQUFrQixFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxxQkFBcUI7SUFDckIsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDL0MsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDbkIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ2pDLE9BQU87SUFDUixDQUFDO0lBRUQsSUFBSSxFQUFFLENBQUM7QUFDUixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxDQUMxQyxHQUFZLEVBQ1osR0FBYSxFQUNiLElBQWtCLEVBQ1gsRUFBRTtJQUNULE1BQU0sTUFBTSxHQUEwQyxFQUFFLENB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TSxFQUFFLENBQUM7UUFDbkIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQ2pDLE9BQU87SUFDUixDQUFDO0lBRUQsSUFBSSxFQUFFLENBQUM7QUFDUixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0RnVuY3Rpb24sIFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgdmFsaWRhdG9yIGZyb20gJ3ZhbGlkYXRvcic7XG5cbmV4cG9ydCBjb25zdCB2YWxpZGF0ZUVudHJ5ID0gKFxuXHRyZXE6IFJlcXVlc3QsXG5cdHJlczogUmVzcG9uc2UsXG5cdG5leHQ6IE5leHRGdW5jdGlvblxuKTogdm9pZCA9PiB7XG5cdGNvbnN0IGVycm9yczogQXJyYXk8eyBtc2c6IHN0cmluZzsgcGFyYW06IHN0cmluZyB9PiA9IFtdO1xuXG5cdC8vIE5hbWUgdmFsaWRhdGlvblxuXHRpZiAodmFsaWRhdG9yLmlzRW1wdHkocmVxLmJvZHkubmFtZSB8fCAnJykpIHtcblx0XHRlcnJvcnMucHVzaCh7IG1zZzogJ05hbWUgaXMgcmVxdWlyZWQnLCBwYXJhbTogJ25hbWUnIH0pO1xuXHR9XG5cblx0Ly8gTWVzc2FnZSB2YWxpZGF0aW9uXG5cdGlmICh2YWxpZGF0b3IuaXNFbXB0eShyZXEuYm9keS5tZXNzYWdlIHx8ICcnKSkge1xuXHRcdGVycm9ycy5wdXNoKHsgbXNnOiAnTWVzc2FnZSBpcyByZXF1aXJlZCcsIHBhcmFtOiAnbWVzc2FnZScgfSk7XG5cdH1cblxuXHRpZiAoZXJyb3JzLmxlbmd0aCkge1xuXHRcdHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3JzIH0pO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdG5leHQoKTtcbn07XG5cbmV4cG9ydCBjb25zdCByZWdpc3RyYXRpb25WYWxpZGF0aW9uUnVsZXMgPSAoXG5cdHJlcTogUmVxdWVzdCxcblx0cmVzOiBSZXNwb25zZSxcblx0bmV4dDogTmV4dEZ1bmN0aW9uXG4pOiB2b2lkID0+IHtcblx0Y29uc3QgZXJyb3JzOiBBcnJheTx7IG1zZzogc3RyaW5nOyBwYXJhbTogc3RyaW5nIH0+ID0gW107XG5cblx0Ly8gVXNlcm5hbWUgdmFsaWRhdGlvblxuXHRpZiAoIXZhbGlkYXRvci5pc0xlbmd0aChyZXEuYm9keS51c2VybmFtZSB8fCAnJywgeyBtaW46IDMgfSkpIHtcblx0XHRlcnJvcnMucHVzaCh7XG5cdFx0XHRtc2c6ICdVc2VybmFtZSBtdXN0IGJlIGF0IGxlYXN0IDMgY2hhcmFjdGVycyBsb25nJyxcblx0XHRcdHBhcmFtOiAndXNlcm5hbWUnXG5cdFx0fSk7XG5cdH1cblx0aWYgKCF2YWxpZGF0b3IubWF0Y2hlcyhyZXEuYm9keS51c2VybmFtZSB8fCAnJywgL15bXFx3LV0rJC8pKSB7XG5cdFx0ZXJyb3JzLnB1c2goe1xuXHRcdFx0bXNnOiAnVXNlcm5hbWUgY2FuIG9ubHkgY29udGFpbiBsZXR0ZXJzLCBudW1iZXJzLCB1bmRlcnNjb3JlcywgYW5kIGRhc2hlcycsXG5cdFx0XHRwYXJhbTogJ3VzZXJuYW1lJ1xuXHRcdH0pO1xuXHR9XG5cblx0Ly8gRW1haWwgdmFsaWRhdGlvblxuXHRpZiAoIXZhbGlkYXRvci5pc0VtYWlsKHJlcS5ib2R5LmVtYWlsIHx8ICcnKSkge1xuXHRcdGVycm9ycy5wdXNoKHtcblx0XHRcdG1zZzogJ1BsZWFzZSBwcm92aWRlIGEgdmFsaWQgZW1haWwgYWRkcmVzcycsXG5cdFx0XHRwYXJhbTogJ2VtYWlsJ1xuXHRcdH0pO1xuXHR9XG5cblx0Ly8gUGFzc3dvcmQgdmFsaWRhdGlvblxuXHRpZiAoIXZhbGlkYXRvci5pc0xlbmd0aChyZXEuYm9keS5wYXNzd29yZCB8fCAnJywgeyBtaW46IDggfSkpIHtcblx0XHRlcnJvcnMucHVzaCh7XG5cdFx0XHRtc2c6ICdQYXNzd29yZCBtdXN0IGJlIGF0IGxlYXN0IDggY2hhcmFjdGVycyBsb25nJyxcblx0XHRcdHBhcmFtOiAncGFzc3dvcmQnXG5cdFx0fSk7XG5cdH1cblx0aWYgKCF2YWxpZGF0b3IubWF0Y2hlcyhyZXEuYm9keS5wYXNzd29yZCB8fCAnJywgL1tBLVpdLykpIHtcblx0XHRlcnJvcnMucHVzaCh7XG5cdFx0XHRtc2c6ICdQYXNzd29yZCBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIHVwcGVyY2FzZSBsZXR0ZXInLFxuXHRcdFx0cGFyYW06ICdwYXNzd29yZCdcblx0XHR9KTtcblx0fVxuXHRpZiAoIXZhbGlkYXRvci5tYXRjaGVzKHJlcS5ib2R5LnBhc3N3b3JkIHx8ICcnLCAvW2Etel0vKSkge1xuXHRcdGVycm9ycy5wdXNoKHtcblx0XHRcdG1zZzogJ1Bhc3N3b3JkIG11c3QgY29udGFpbiBhdCBsZWFzdCBvbmUgbG93ZXJjYXNlIGxldHRlcicsXG5cdFx0XHRwYXJhbTogJ3Bhc3N3b3JkJ1xuXHRcdH0pO1xuXHR9XG5cdGlmICghdmFsaWRhdG9yLm1hdGNoZXMocmVxLmJvZHkucGFzc3dvcmQgfHwgJycsIC9cXGQvKSkge1xuXHRcdGVycm9ycy5wdXNoKHtcblx0XHRcdG1zZzogJ1Bhc3N3b3JkIG11c3QgY29udGFpbiBhdCBsZWFzdCBvbmUgbnVtYmVyJyxcblx0XHRcdHBhcmFtOiAncGFzc3dvcmQnXG5cdFx0fSk7XG5cdH1cblx0aWYgKCF2YWxpZGF0b3IubWF0Y2hlcyhyZXEuYm9keS5wYXNzd29yZCB8fCAnJywgL1teXFxkQS1aYS16XS8pKSB7XG5cdFx0ZXJyb3JzLnB1c2goe1xuXHRcdFx0bXNnOiAnUGFzc3dvcmQgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSBzcGVjaWFsIGNoYXJhY3RlcicsXG5cdFx0XHRwYXJhbTogJ3Bhc3N3b3JkJ1xuXHRcdH0pO1xuXHR9XG5cblx0Ly8gQ29uZmlybSBwYXNzd29yZCB2YWxpZGF0aW9uXG5cdGlmIChyZXEuYm9keS5wYXNzd29yZCAhPT0gcmVxLmJvZHkuY29uZmlybVBhc3N3b3JkKSB7XG5cdFx0ZXJyb3JzLnB1c2goe1xuXHRcdFx0bXNnOiAnUGFzc3dvcmRzIGRvIG5vdCBtYXRjaCcsXG5cdFx0XHRwYXJhbTogJ2NvbmZpcm1QYXNzd29yZCdcblx0XHR9KTtcblx0fVxuXG5cdGlmIChlcnJvcnMubGVuZ3RoKSB7XG5cdFx0cmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcnMgfSk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0bmV4dCgpO1xufTtcbiJdfQ==
