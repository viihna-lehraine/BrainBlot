import validator from 'validator';
export const validateEntry = (req, res, next) => {
	let errors = [];
	// Name validation
	if (validator.isEmpty(req.body.name || '')) {
		errors.push({ msg: 'Name is required', param: 'name' });
	}
	// Message validation
	if (validator.isEmpty(req.body.message || '')) {
		errors.push({ msg: 'Message is required', param: 'message' });
	}
	if (errors.length) {
		return res.status(400).json({ errors });
	}
	return next;
};
export const registrationValidationRules = (req, res, next) => {
	const errors = [];
	// Username validation
	if (!validator.isLength(req.body.username || '', { min: 3 })) {
		errors.push({
			msg: 'Username must be at least 3 characters long',
			param: 'username'
		});
	}
	if (!validator.matches(req.body.username || '', /^[\w-]+$/)) {
		errors.push({
			msg: 'Username can only contain letters, numbers, underscores, and dashes',
			param: 'username'
		});
	}
	// Email validation
	if (!validator.isEmail(req.body.email || '')) {
		errors.push({
			msg: 'Please provide a valid email address',
			param: 'email'
		});
	}
	// Password validation
	if (!validator.isLength(req.body.password || '', { min: 8 })) {
		errors.push({
			msg: 'Password must be at least 8 characters long',
			param: 'password'
		});
	}
	if (!validator.matches(req.body.password || '', /[A-Z]/)) {
		errors.push({
			msg: 'Password must contain at least one uppercase letter',
			param: 'password'
		});
	}
	if (!validator.matches(req.body.password || '', /[a-z]/)) {
		errors.push({
			msg: 'Password must contain at least one lowercase letter',
			param: 'password'
		});
	}
	if (!validator.matches(req.body.password || '', /\d/)) {
		errors.push({
			msg: 'Password must contain at least one number',
			param: 'password'
		});
	}
	if (!validator.matches(req.body.password || '', /[^\dA-Za-z]/)) {
		errors.push({
			msg: 'Password must contain at least one special character',
			param: 'password'
		});
	}
	// Confirm password validation
	if (req.body.password !== req.body.confirmPassword) {
		errors.push({
			msg: 'Passwords do not match',
			param: 'confirmPassword'
		});
	}
	if (errors.length) {
		res.status(400).json({ errors });
		return;
	}
	next();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21pZGRsZXdhcmUvdmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sU0FBUyxNQUFNLFdBQVcsQ0FBQztBQUVsQyxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FDNUIsR0FBWSxFQUNaLEdBQWEsRUFDYixJQUFrQixFQUNqQixFQUFFO0lBQ0gsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBRWhCLGtCQUFrQjtJQUNsQixJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUM1QyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLGtCQUFrQixFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxxQkFBcUI7SUFDckIsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDL0MsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDbkIsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2IsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUcsQ0FDMUMsR0FBWSxFQUNaLEdBQWEsRUFDYixJQUFrQixFQUNqQixFQUFFO0lBQ0gsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO0lB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RSxDQUFDO1FBQ25CLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUNqQyxPQUFPO0lBQ1IsQ0FBQztJQUVELElBQUksRUFBRSxDQUFDO0FBQ1IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dEZ1bmN0aW9uLCBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHZhbGlkYXRvciBmcm9tICd2YWxpZGF0b3InO1xuXG5leHBvcnQgY29uc3QgdmFsaWRhdGVFbnRyeSA9IChcblx0cmVxOiBSZXF1ZXN0LFxuXHRyZXM6IFJlc3BvbnNlLFxuXHRuZXh0OiBOZXh0RnVuY3Rpb25cbikgPT4ge1xuXHRsZXQgZXJyb3JzID0gW107XG5cblx0Ly8gTmFtZSB2YWxpZGF0aW9uXG5cdGlmICh2YWxpZGF0b3IuaXNFbXB0eShyZXEuYm9keS5uYW1lIHx8ICcnKSkge1xuXHRcdGVycm9ycy5wdXNoKHsgbXNnOiAnTmFtZSBpcyByZXF1aXJlZCcsIHBhcmFtOiAnbmFtZScgfSk7XG5cdH1cblxuXHQvLyBNZXNzYWdlIHZhbGlkYXRpb25cblx0aWYgKHZhbGlkYXRvci5pc0VtcHR5KHJlcS5ib2R5Lm1lc3NhZ2UgfHwgJycpKSB7XG5cdFx0ZXJyb3JzLnB1c2goeyBtc2c6ICdNZXNzYWdlIGlzIHJlcXVpcmVkJywgcGFyYW06ICdtZXNzYWdlJyB9KTtcblx0fVxuXG5cdGlmIChlcnJvcnMubGVuZ3RoKSB7XG5cdFx0cmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3JzIH0pO1xuXHR9XG5cblx0cmV0dXJuIG5leHQ7XG59O1xuXG5leHBvcnQgY29uc3QgcmVnaXN0cmF0aW9uVmFsaWRhdGlvblJ1bGVzID0gKFxuXHRyZXE6IFJlcXVlc3QsXG5cdHJlczogUmVzcG9uc2UsXG5cdG5leHQ6IE5leHRGdW5jdGlvblxuKSA9PiB7XG5cdGNvbnN0IGVycm9ycyA9IFtdO1xuXG5cdC8vIFVzZXJuYW1lIHZhbGlkYXRpb25cblx0aWYgKCF2YWxpZGF0b3IuaXNMZW5ndGgocmVxLmJvZHkudXNlcm5hbWUgfHwgJycsIHsgbWluOiAzIH0pKSB7XG5cdFx0ZXJyb3JzLnB1c2goe1xuXHRcdFx0bXNnOiAnVXNlcm5hbWUgbXVzdCBiZSBhdCBsZWFzdCAzIGNoYXJhY3RlcnMgbG9uZycsXG5cdFx0XHRwYXJhbTogJ3VzZXJuYW1lJ1xuXHRcdH0pO1xuXHR9XG5cdGlmICghdmFsaWRhdG9yLm1hdGNoZXMocmVxLmJvZHkudXNlcm5hbWUgfHwgJycsIC9eW1xcdy1dKyQvKSkge1xuXHRcdGVycm9ycy5wdXNoKHtcblx0XHRcdG1zZzogJ1VzZXJuYW1lIGNhbiBvbmx5IGNvbnRhaW4gbGV0dGVycywgbnVtYmVycywgdW5kZXJzY29yZXMsIGFuZCBkYXNoZXMnLFxuXHRcdFx0cGFyYW06ICd1c2VybmFtZSdcblx0XHR9KTtcblx0fVxuXG5cdC8vIEVtYWlsIHZhbGlkYXRpb25cblx0aWYgKCF2YWxpZGF0b3IuaXNFbWFpbChyZXEuYm9keS5lbWFpbCB8fCAnJykpIHtcblx0XHRlcnJvcnMucHVzaCh7XG5cdFx0XHRtc2c6ICdQbGVhc2UgcHJvdmlkZSBhIHZhbGlkIGVtYWlsIGFkZHJlc3MnLFxuXHRcdFx0cGFyYW06ICdlbWFpbCdcblx0XHR9KTtcblx0fVxuXG5cdC8vIFBhc3N3b3JkIHZhbGlkYXRpb25cblx0aWYgKCF2YWxpZGF0b3IuaXNMZW5ndGgocmVxLmJvZHkucGFzc3dvcmQgfHwgJycsIHsgbWluOiA4IH0pKSB7XG5cdFx0ZXJyb3JzLnB1c2goe1xuXHRcdFx0bXNnOiAnUGFzc3dvcmQgbXVzdCBiZSBhdCBsZWFzdCA4IGNoYXJhY3RlcnMgbG9uZycsXG5cdFx0XHRwYXJhbTogJ3Bhc3N3b3JkJ1xuXHRcdH0pO1xuXHR9XG5cdGlmICghdmFsaWRhdG9yLm1hdGNoZXMocmVxLmJvZHkucGFzc3dvcmQgfHwgJycsIC9bQS1aXS8pKSB7XG5cdFx0ZXJyb3JzLnB1c2goe1xuXHRcdFx0bXNnOiAnUGFzc3dvcmQgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSB1cHBlcmNhc2UgbGV0dGVyJyxcblx0XHRcdHBhcmFtOiAncGFzc3dvcmQnXG5cdFx0fSk7XG5cdH1cblx0aWYgKCF2YWxpZGF0b3IubWF0Y2hlcyhyZXEuYm9keS5wYXNzd29yZCB8fCAnJywgL1thLXpdLykpIHtcblx0XHRlcnJvcnMucHVzaCh7XG5cdFx0XHRtc2c6ICdQYXNzd29yZCBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIGxvd2VyY2FzZSBsZXR0ZXInLFxuXHRcdFx0cGFyYW06ICdwYXNzd29yZCdcblx0XHR9KTtcblx0fVxuXHRpZiAoIXZhbGlkYXRvci5tYXRjaGVzKHJlcS5ib2R5LnBhc3N3b3JkIHx8ICcnLCAvXFxkLykpIHtcblx0XHRlcnJvcnMucHVzaCh7XG5cdFx0XHRtc2c6ICdQYXNzd29yZCBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIG51bWJlcicsXG5cdFx0XHRwYXJhbTogJ3Bhc3N3b3JkJ1xuXHRcdH0pO1xuXHR9XG5cdGlmICghdmFsaWRhdG9yLm1hdGNoZXMocmVxLmJvZHkucGFzc3dvcmQgfHwgJycsIC9bXlxcZEEtWmEtel0vKSkge1xuXHRcdGVycm9ycy5wdXNoKHtcblx0XHRcdG1zZzogJ1Bhc3N3b3JkIG11c3QgY29udGFpbiBhdCBsZWFzdCBvbmUgc3BlY2lhbCBjaGFyYWN0ZXInLFxuXHRcdFx0cGFyYW06ICdwYXNzd29yZCdcblx0XHR9KTtcblx0fVxuXG5cdC8vIENvbmZpcm0gcGFzc3dvcmQgdmFsaWRhdGlvblxuXHRpZiAocmVxLmJvZHkucGFzc3dvcmQgIT09IHJlcS5ib2R5LmNvbmZpcm1QYXNzd29yZCkge1xuXHRcdGVycm9ycy5wdXNoKHtcblx0XHRcdG1zZzogJ1Bhc3N3b3JkcyBkbyBub3QgbWF0Y2gnLFxuXHRcdFx0cGFyYW06ICdjb25maXJtUGFzc3dvcmQnXG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoZXJyb3JzLmxlbmd0aCkge1xuXHRcdHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3JzIH0pO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdG5leHQoKTtcbn07XG4iXX0=
