import { validateDependencies } from '../utils/validateDependencies';
import { processError } from '../utils/processError';
export function createMemoryMonitor({ logger, os, process, setInterval }) {
	try {
		validateDependencies(
			[
				{ name: 'logger', instance: logger },
				{ name: 'os', instance: os },
				{ name: 'process', instance: process },
				{ name: 'setInterval', instance: setInterval }
			],
			logger
		);
		function logMemoryUsage() {
			try {
				const memoryUsage = process.memoryUsage();
				const memoryStats = {
					rss: (memoryUsage.rss / 1024 / 1024).toFixed(2), // convert bytes to MB
					heapTotal: (memoryUsage.heapTotal / 1024 / 1024).toFixed(2),
					heapUsed: (memoryUsage.heapUsed / 1024 / 1024).toFixed(2),
					external: (memoryUsage.external / 1024 / 1024).toFixed(2),
					available: (os.freemem() / 1024 / 1024).toFixed(2)
				};
				logger.info(
					`Memory usage (MB): RSS: ${memoryStats.rss}, Heap Total: ${memoryStats.heapTotal}, Heap Used: ${memoryStats.heapUsed}, External: ${memoryStats.external}, System Available: ${memoryStats.available}`
				);
			} catch (error) {
				processError(error, logger);
			}
		}
		function startMemoryMonitor() {
			// start monitoring memory usage every 5 minutes (300000 ms)
			return setInterval(logMemoryUsage, 300000);
		}
		return { startMemoryMonitor };
	} catch (error) {
		processError(error, logger);
		throw new Error(
			`Failed to create and start memory monitor: ${error instanceof Error ? error.message : String(error)}`
		);
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVtb3J5TW9uaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlL21lbW9yeU1vbml0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDckUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBaUJyRCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsRUFDbkMsTUFBTSxFQUNOLEVBQUUsRUFDRixPQUFPLEVBQ1AsV0FBVyxFQUNnQjtJQUczQixJQUFJLENBQUM7UUFDSixvQkFBb0IsQ0FDbkI7WUFDQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRTtZQUNwQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRTtZQUM1QixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRTtZQUN0QyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRTtTQUM5QyxFQUNELE1BQU0sQ0FDTixDQUFDO1FBRUYsU0FBUyxjQUFjO1lBQ3RCLElBQUksQ0FBQztnQkFDSixNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQzFDLE1BQU0sV0FBVyxHQUFnQjtvQkFDaEMsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLHNCQUFzQjtvQkFDdkUsU0FBUyxFQUFFLENBQUMsV0FBVyxDQUFDLFNBQVMsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztvQkFDM0QsUUFBUSxFQUFFLENBQUMsV0FBVyxDQUFDLFFBQVEsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztvQkFDekQsUUFBUSxFQUFFLENBQUMsV0FBVyxDQUFDLFFBQVEsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztvQkFDekQsU0FBUyxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2lCQUNsRCxDQUFDO2dCQUVGLE1BQU0sQ0FBQyxJQUFJLENBQ1YsMkJBQTJCLFdBQVcsQ0FBQyxHQUFHLGlCQUFpQixXQUFXLENBQUMsU0FBUyxnQkFBZ0IsV0FBVyxDQUFDLFFBQVEsZUFBZSxXQUFXLENBQUMsUUFBUSx1QkFBdUIsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUNyTSxDQUFDO1lBQ0gsQ0FBQztZQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7Z0JBQ2hCLFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDN0IsQ0FBQztRQUNGLENBQUM7UUFFRCxTQUFTLGtCQUFrQjtZQUMxQiw0REFBNEQ7WUFDNUQsT0FBTyxXQUFXLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzVDLENBQUM7UUFFRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixZQUFZLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzVCLE1BQU0sSUFBSSxLQUFLLENBQ2QsOENBQ0MsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FDdEQsRUFBRSxDQUNGLENBQUM7SUFDSCxDQUFDO0FBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBvcyBmcm9tICdvcyc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9jb25maWcvbG9nZ2VyJztcbmltcG9ydCB7IHZhbGlkYXRlRGVwZW5kZW5jaWVzIH0gZnJvbSAnLi4vdXRpbHMvdmFsaWRhdGVEZXBlbmRlbmNpZXMnO1xuaW1wb3J0IHsgcHJvY2Vzc0Vycm9yIH0gZnJvbSAnLi4vdXRpbHMvcHJvY2Vzc0Vycm9yJztcblxuaW50ZXJmYWNlIE1lbW9yeVN0YXRzIHtcblx0cnNzOiBzdHJpbmc7IC8vIE1CXG5cdGhlYXBUb3RhbDogc3RyaW5nOyAvLyBNQlxuXHRoZWFwVXNlZDogc3RyaW5nOyAvLyBNQlxuXHRleHRlcm5hbDogc3RyaW5nOyAvLyBNQlxuXHRhdmFpbGFibGU6IHN0cmluZzsgLy8gTUJcbn1cblxuaW50ZXJmYWNlIE1lbW9yeU1vbml0b3JEZXBlbmRlbmNpZXMge1xuXHRsb2dnZXI6IExvZ2dlcjtcblx0b3M6IHR5cGVvZiBvcztcblx0cHJvY2VzczogTm9kZUpTLlByb2Nlc3M7XG5cdHNldEludGVydmFsOiB0eXBlb2Ygc2V0SW50ZXJ2YWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNZW1vcnlNb25pdG9yKHtcblx0bG9nZ2VyLFxuXHRvcyxcblx0cHJvY2Vzcyxcblx0c2V0SW50ZXJ2YWxcbn06IE1lbW9yeU1vbml0b3JEZXBlbmRlbmNpZXMpOiB7XG5cdHN0YXJ0TWVtb3J5TW9uaXRvcjogKCkgPT4gTm9kZUpTLlRpbWVvdXQ7XG59IHtcblx0dHJ5IHtcblx0XHR2YWxpZGF0ZURlcGVuZGVuY2llcyhcblx0XHRcdFtcblx0XHRcdFx0eyBuYW1lOiAnbG9nZ2VyJywgaW5zdGFuY2U6IGxvZ2dlciB9LFxuXHRcdFx0XHR7IG5hbWU6ICdvcycsIGluc3RhbmNlOiBvcyB9LFxuXHRcdFx0XHR7IG5hbWU6ICdwcm9jZXNzJywgaW5zdGFuY2U6IHByb2Nlc3MgfSxcblx0XHRcdFx0eyBuYW1lOiAnc2V0SW50ZXJ2YWwnLCBpbnN0YW5jZTogc2V0SW50ZXJ2YWwgfVxuXHRcdFx0XSxcblx0XHRcdGxvZ2dlclxuXHRcdCk7XG5cblx0XHRmdW5jdGlvbiBsb2dNZW1vcnlVc2FnZSgpOiB2b2lkIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbnN0IG1lbW9yeVVzYWdlID0gcHJvY2Vzcy5tZW1vcnlVc2FnZSgpO1xuXHRcdFx0XHRjb25zdCBtZW1vcnlTdGF0czogTWVtb3J5U3RhdHMgPSB7XG5cdFx0XHRcdFx0cnNzOiAobWVtb3J5VXNhZ2UucnNzIC8gMTAyNCAvIDEwMjQpLnRvRml4ZWQoMiksIC8vIGNvbnZlcnQgYnl0ZXMgdG8gTUJcblx0XHRcdFx0XHRoZWFwVG90YWw6IChtZW1vcnlVc2FnZS5oZWFwVG90YWwgLyAxMDI0IC8gMTAyNCkudG9GaXhlZCgyKSxcblx0XHRcdFx0XHRoZWFwVXNlZDogKG1lbW9yeVVzYWdlLmhlYXBVc2VkIC8gMTAyNCAvIDEwMjQpLnRvRml4ZWQoMiksXG5cdFx0XHRcdFx0ZXh0ZXJuYWw6IChtZW1vcnlVc2FnZS5leHRlcm5hbCAvIDEwMjQgLyAxMDI0KS50b0ZpeGVkKDIpLFxuXHRcdFx0XHRcdGF2YWlsYWJsZTogKG9zLmZyZWVtZW0oKSAvIDEwMjQgLyAxMDI0KS50b0ZpeGVkKDIpXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0bG9nZ2VyLmluZm8oXG5cdFx0XHRcdFx0YE1lbW9yeSB1c2FnZSAoTUIpOiBSU1M6ICR7bWVtb3J5U3RhdHMucnNzfSwgSGVhcCBUb3RhbDogJHttZW1vcnlTdGF0cy5oZWFwVG90YWx9LCBIZWFwIFVzZWQ6ICR7bWVtb3J5U3RhdHMuaGVhcFVzZWR9LCBFeHRlcm5hbDogJHttZW1vcnlTdGF0cy5leHRlcm5hbH0sIFN5c3RlbSBBdmFpbGFibGU6ICR7bWVtb3J5U3RhdHMuYXZhaWxhYmxlfWBcblx0XHRcdFx0KTtcblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdHByb2Nlc3NFcnJvcihlcnJvciwgbG9nZ2VyKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBzdGFydE1lbW9yeU1vbml0b3IoKTogTm9kZUpTLlRpbWVvdXQge1xuXHRcdFx0Ly8gc3RhcnQgbW9uaXRvcmluZyBtZW1vcnkgdXNhZ2UgZXZlcnkgNSBtaW51dGVzICgzMDAwMDAgbXMpXG5cdFx0XHRyZXR1cm4gc2V0SW50ZXJ2YWwobG9nTWVtb3J5VXNhZ2UsIDMwMDAwMCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHsgc3RhcnRNZW1vcnlNb25pdG9yIH07XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cHJvY2Vzc0Vycm9yKGVycm9yLCBsb2dnZXIpO1xuXHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdGBGYWlsZWQgdG8gY3JlYXRlIGFuZCBzdGFydCBtZW1vcnkgbW9uaXRvcjogJHtcblx0XHRcdFx0ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpXG5cdFx0XHR9YFxuXHRcdCk7XG5cdH1cbn1cbiJdfQ==
