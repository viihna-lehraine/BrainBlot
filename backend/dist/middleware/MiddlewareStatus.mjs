import { LoggerServiceFactory } from '../index/factory/subfactories/LoggerServiceFactory.mjs';
import { ErrorHandlerServiceFactory } from '../index/factory/subfactories/ErrorHandlerServiceFactory.mjs';
export class MiddlewareStatusService {
	static instance = null;
	middlewareStatus = new Map();
	logger;
	errorLogger;
	errorHandler;
	constructor(logger, errorLogger, errorHandler) {
		this.logger = logger;
		this.errorLogger = errorLogger;
		this.errorHandler = errorHandler;
	}
	static async getInstance() {
		if (!MiddlewareStatusService.instance) {
			const logger = await LoggerServiceFactory.getLoggerService();
			const errorLogger =
				await LoggerServiceFactory.getErrorLoggerService();
			const errorHandler =
				await ErrorHandlerServiceFactory.getErrorHandlerService();
			MiddlewareStatusService.instance = new MiddlewareStatusService(
				logger,
				errorLogger,
				errorHandler
			);
		}
		return MiddlewareStatusService.instance;
	}
	setStatus(middlewareName, status) {
		try {
			this.middlewareStatus.set(middlewareName, status);
		} catch (error) {
			this.errorLogger.logError(
				`Failed to update middleware for middleware ${middlewareName}: ${error}`
			);
			this.errorHandler.handleError({
				error,
				details: {
					context: 'MIDDLEWARE_STATUS',
					reason: 'Failed to update middleware status'
				}
			});
		}
		if (status === 'on') {
			this.logger.info(
				`Middleware ${middlewareName} status updated to ${status}`
			);
		} else if (status === 'off') {
			this.errorLogger.logWarn(
				`Middleware ${middlewareName} status updated to ${status}`
			);
		}
	}
	getStatus(middlewareName) {
		try {
			return this.middlewareStatus.get(middlewareName);
		} catch (error) {
			this.errorLogger.logError(
				`Failed to retrieve middleware status for ${middlewareName}: ${error}`
			);
			this.errorHandler.handleError({
				error,
				details: {
					context: 'MIDDLEWARE_STATUS',
					reason: 'Failed to retrieve middleware status'
				}
			});
		}
	}
	isMiddlewareOn(middlewareName) {
		return this.getStatus(middlewareName) === 'on';
	}
	async shutdown() {
		try {
			this.middlewareStatus.clear();
			this.logger.info(
				'Middleware Status Service shutdown successfully.'
			);
			MiddlewareStatusService.instance = null;
		} catch (error) {
			this.errorLogger.logError(
				`Error shutting down Middleware Status Service: ${error instanceof Error ? error.message : error}`
			);
		}
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWlkZGxld2FyZVN0YXR1cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlL01pZGRsZXdhcmVTdGF0dXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUEsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFDMUYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sMERBQTBELENBQUM7QUFFdEcsTUFBTSxPQUFPLHVCQUF1QjtJQUczQixNQUFNLENBQUMsUUFBUSxHQUFtQyxJQUFJLENBQUM7SUFFdkQsZ0JBQWdCLEdBQThCLElBQUksR0FBRyxFQUFFLENBQUM7SUFDeEQsTUFBTSxDQUE0QjtJQUNsQyxXQUFXLENBQThCO0lBQ3pDLFlBQVksQ0FBK0I7SUFFbkQsWUFDQyxNQUFpQyxFQUNqQyxXQUF3QyxFQUN4QyxZQUEwQztRQUUxQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztJQUNsQyxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXO1FBQzlCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN2QyxNQUFNLE1BQU0sR0FBRyxNQUFNLG9CQUFvQixDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDN0QsTUFBTSxXQUFXLEdBQ2hCLE1BQU0sb0JBQW9CLENBQUMscUJBQXFCLEVBQUUsQ0FBQztZQUNwRCxNQUFNLFlBQVksR0FDakIsTUFBTSwwQkFBMEIsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1lBRTNELHVCQUF1QixDQUFDLFFBQVEsR0FBRyxJQUFJLHVCQUF1QixDQUM3RCxNQUFNLEVBQ04sV0FBVyxFQUNYLFlBQVksQ0FDWixDQUFDO1FBQ0gsQ0FBQztRQUVELE9BQU8sdUJBQXVCLENBQUMsUUFBUSxDQUFDO0lBQ3pDLENBQUM7SUFFTSxTQUFTLENBQUMsY0FBc0IsRUFBRSxNQUFvQjtRQUM1RCxJQUFJLENBQUM7WUFDSixJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNuRCxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNoQixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FDeEIsOENBQThDLGNBQWMsS0FBSyxLQUFLLEVBQUUsQ0FDeEUsQ0FBQztZQUNGLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDO2dCQUM3QixLQUFLO2dCQUNMLE9BQU8sRUFBRTtvQkFDUixPQUFPLEVBQUUsbUJBQW1CO29CQUM1QixNQUFNLEVBQUUsb0NBQW9DO2lCQUM1QzthQUNELENBQUMsQ0FBQztRQUNKLENBQUM7UUFFRCxJQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUUsQ0FBQztZQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDZixjQUFjLGNBQWMsc0JBQXNCLE1BQU0sRUFBRSxDQUMxRCxDQUFDO1FBQ0gsQ0FBQzthQUFNLElBQUksTUFBTSxLQUFLLEtBQUssRUFBRSxDQUFDO1lBQzdCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUN2QixjQUFjLGNBQWMsc0JBQXNCLE1BQU0sRUFBRSxDQUMxRCxDQUFDO1FBQ0gsQ0FBQztJQUNGLENBQUM7SUFFTSxTQUFTLENBQUMsY0FBc0I7UUFDdEMsSUFBSSxDQUFDO1lBQ0osT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2xELENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2hCLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUN4Qiw0Q0FBNEMsY0FBYyxLQUFLLEtBQUssRUFBRSxDQUN0RSxDQUFDO1lBQ0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7Z0JBQzdCLEtBQUs7Z0JBQ0wsT0FBTyxFQUFFO29CQUNSLE9BQU8sRUFBRSxtQkFBbUI7b0JBQzVCLE1BQU0sRUFBRSxzQ0FBc0M7aUJBQzlDO2FBQ0QsQ0FBQyxDQUFDO1FBQ0osQ0FBQztJQUNGLENBQUM7SUFFTSxjQUFjLENBQUMsY0FBc0I7UUFDM0MsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxLQUFLLElBQUksQ0FBQztJQUNoRCxDQUFDO0lBRU0sS0FBSyxDQUFDLFFBQVE7UUFDcEIsSUFBSSxDQUFDO1lBQ0osSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzlCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNmLGtEQUFrRCxDQUNsRCxDQUFDO1lBQ0YsdUJBQXVCLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUN6QyxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNoQixJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FDeEIsa0RBQ0MsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FDMUMsRUFBRSxDQUNGLENBQUM7UUFDSCxDQUFDO0lBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdEFwcExvZ2dlclNlcnZpY2VJbnRlcmZhY2UsXG5cdEVycm9ySGFuZGxlclNlcnZpY2VJbnRlcmZhY2UsXG5cdEVycm9yTG9nZ2VyU2VydmljZUludGVyZmFjZSxcblx0TWlkZGxld2FyZVN0YXR1c1NlcnZpY2VJbnRlcmZhY2Vcbn0gZnJvbSAnLi4vaW5kZXgvaW50ZXJmYWNlcy9tYWluJztcbmltcG9ydCB7IExvZ2dlclNlcnZpY2VGYWN0b3J5IH0gZnJvbSAnLi4vaW5kZXgvZmFjdG9yeS9zdWJmYWN0b3JpZXMvTG9nZ2VyU2VydmljZUZhY3RvcnknO1xuaW1wb3J0IHsgRXJyb3JIYW5kbGVyU2VydmljZUZhY3RvcnkgfSBmcm9tICcuLi9pbmRleC9mYWN0b3J5L3N1YmZhY3Rvcmllcy9FcnJvckhhbmRsZXJTZXJ2aWNlRmFjdG9yeSc7XG5cbmV4cG9ydCBjbGFzcyBNaWRkbGV3YXJlU3RhdHVzU2VydmljZVxuXHRpbXBsZW1lbnRzIE1pZGRsZXdhcmVTdGF0dXNTZXJ2aWNlSW50ZXJmYWNlXG57XG5cdHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBNaWRkbGV3YXJlU3RhdHVzU2VydmljZSB8IG51bGwgPSBudWxsO1xuXG5cdHByaXZhdGUgbWlkZGxld2FyZVN0YXR1czogTWFwPHN0cmluZywgJ29uJyB8ICdvZmYnPiA9IG5ldyBNYXAoKTtcblx0cHJpdmF0ZSBsb2dnZXI6IEFwcExvZ2dlclNlcnZpY2VJbnRlcmZhY2U7XG5cdHByaXZhdGUgZXJyb3JMb2dnZXI6IEVycm9yTG9nZ2VyU2VydmljZUludGVyZmFjZTtcblx0cHJpdmF0ZSBlcnJvckhhbmRsZXI6IEVycm9ySGFuZGxlclNlcnZpY2VJbnRlcmZhY2U7XG5cblx0cHJpdmF0ZSBjb25zdHJ1Y3Rvcihcblx0XHRsb2dnZXI6IEFwcExvZ2dlclNlcnZpY2VJbnRlcmZhY2UsXG5cdFx0ZXJyb3JMb2dnZXI6IEVycm9yTG9nZ2VyU2VydmljZUludGVyZmFjZSxcblx0XHRlcnJvckhhbmRsZXI6IEVycm9ySGFuZGxlclNlcnZpY2VJbnRlcmZhY2Vcblx0KSB7XG5cdFx0dGhpcy5sb2dnZXIgPSBsb2dnZXI7XG5cdFx0dGhpcy5lcnJvckxvZ2dlciA9IGVycm9yTG9nZ2VyO1xuXHRcdHRoaXMuZXJyb3JIYW5kbGVyID0gZXJyb3JIYW5kbGVyO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBhc3luYyBnZXRJbnN0YW5jZSgpOiBQcm9taXNlPE1pZGRsZXdhcmVTdGF0dXNTZXJ2aWNlPiB7XG5cdFx0aWYgKCFNaWRkbGV3YXJlU3RhdHVzU2VydmljZS5pbnN0YW5jZSkge1xuXHRcdFx0Y29uc3QgbG9nZ2VyID0gYXdhaXQgTG9nZ2VyU2VydmljZUZhY3RvcnkuZ2V0TG9nZ2VyU2VydmljZSgpO1xuXHRcdFx0Y29uc3QgZXJyb3JMb2dnZXIgPVxuXHRcdFx0XHRhd2FpdCBMb2dnZXJTZXJ2aWNlRmFjdG9yeS5nZXRFcnJvckxvZ2dlclNlcnZpY2UoKTtcblx0XHRcdGNvbnN0IGVycm9ySGFuZGxlciA9XG5cdFx0XHRcdGF3YWl0IEVycm9ySGFuZGxlclNlcnZpY2VGYWN0b3J5LmdldEVycm9ySGFuZGxlclNlcnZpY2UoKTtcblxuXHRcdFx0TWlkZGxld2FyZVN0YXR1c1NlcnZpY2UuaW5zdGFuY2UgPSBuZXcgTWlkZGxld2FyZVN0YXR1c1NlcnZpY2UoXG5cdFx0XHRcdGxvZ2dlcixcblx0XHRcdFx0ZXJyb3JMb2dnZXIsXG5cdFx0XHRcdGVycm9ySGFuZGxlclxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gTWlkZGxld2FyZVN0YXR1c1NlcnZpY2UuaW5zdGFuY2U7XG5cdH1cblxuXHRwdWJsaWMgc2V0U3RhdHVzKG1pZGRsZXdhcmVOYW1lOiBzdHJpbmcsIHN0YXR1czogJ29uJyB8ICdvZmYnKTogdm9pZCB7XG5cdFx0dHJ5IHtcblx0XHRcdHRoaXMubWlkZGxld2FyZVN0YXR1cy5zZXQobWlkZGxld2FyZU5hbWUsIHN0YXR1cyk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdHRoaXMuZXJyb3JMb2dnZXIubG9nRXJyb3IoXG5cdFx0XHRcdGBGYWlsZWQgdG8gdXBkYXRlIG1pZGRsZXdhcmUgZm9yIG1pZGRsZXdhcmUgJHttaWRkbGV3YXJlTmFtZX06ICR7ZXJyb3J9YFxuXHRcdFx0KTtcblx0XHRcdHRoaXMuZXJyb3JIYW5kbGVyLmhhbmRsZUVycm9yKHtcblx0XHRcdFx0ZXJyb3IsXG5cdFx0XHRcdGRldGFpbHM6IHtcblx0XHRcdFx0XHRjb250ZXh0OiAnTUlERExFV0FSRV9TVEFUVVMnLFxuXHRcdFx0XHRcdHJlYXNvbjogJ0ZhaWxlZCB0byB1cGRhdGUgbWlkZGxld2FyZSBzdGF0dXMnXG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmIChzdGF0dXMgPT09ICdvbicpIHtcblx0XHRcdHRoaXMubG9nZ2VyLmluZm8oXG5cdFx0XHRcdGBNaWRkbGV3YXJlICR7bWlkZGxld2FyZU5hbWV9IHN0YXR1cyB1cGRhdGVkIHRvICR7c3RhdHVzfWBcblx0XHRcdCk7XG5cdFx0fSBlbHNlIGlmIChzdGF0dXMgPT09ICdvZmYnKSB7XG5cdFx0XHR0aGlzLmVycm9yTG9nZ2VyLmxvZ1dhcm4oXG5cdFx0XHRcdGBNaWRkbGV3YXJlICR7bWlkZGxld2FyZU5hbWV9IHN0YXR1cyB1cGRhdGVkIHRvICR7c3RhdHVzfWBcblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIGdldFN0YXR1cyhtaWRkbGV3YXJlTmFtZTogc3RyaW5nKTogJ29uJyB8ICdvZmYnIHwgdW5kZWZpbmVkIHwgdm9pZCB7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiB0aGlzLm1pZGRsZXdhcmVTdGF0dXMuZ2V0KG1pZGRsZXdhcmVOYW1lKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0dGhpcy5lcnJvckxvZ2dlci5sb2dFcnJvcihcblx0XHRcdFx0YEZhaWxlZCB0byByZXRyaWV2ZSBtaWRkbGV3YXJlIHN0YXR1cyBmb3IgJHttaWRkbGV3YXJlTmFtZX06ICR7ZXJyb3J9YFxuXHRcdFx0KTtcblx0XHRcdHRoaXMuZXJyb3JIYW5kbGVyLmhhbmRsZUVycm9yKHtcblx0XHRcdFx0ZXJyb3IsXG5cdFx0XHRcdGRldGFpbHM6IHtcblx0XHRcdFx0XHRjb250ZXh0OiAnTUlERExFV0FSRV9TVEFUVVMnLFxuXHRcdFx0XHRcdHJlYXNvbjogJ0ZhaWxlZCB0byByZXRyaWV2ZSBtaWRkbGV3YXJlIHN0YXR1cydcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIGlzTWlkZGxld2FyZU9uKG1pZGRsZXdhcmVOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRTdGF0dXMobWlkZGxld2FyZU5hbWUpID09PSAnb24nO1xuXHR9XG5cblx0cHVibGljIGFzeW5jIHNodXRkb3duKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdHRyeSB7XG5cdFx0XHR0aGlzLm1pZGRsZXdhcmVTdGF0dXMuY2xlYXIoKTtcblx0XHRcdHRoaXMubG9nZ2VyLmluZm8oXG5cdFx0XHRcdCdNaWRkbGV3YXJlIFN0YXR1cyBTZXJ2aWNlIHNodXRkb3duIHN1Y2Nlc3NmdWxseS4nXG5cdFx0XHQpO1xuXHRcdFx0TWlkZGxld2FyZVN0YXR1c1NlcnZpY2UuaW5zdGFuY2UgPSBudWxsO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHR0aGlzLmVycm9yTG9nZ2VyLmxvZ0Vycm9yKFxuXHRcdFx0XHRgRXJyb3Igc2h1dHRpbmcgZG93biBNaWRkbGV3YXJlIFN0YXR1cyBTZXJ2aWNlOiAke1xuXHRcdFx0XHRcdGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogZXJyb3Jcblx0XHRcdFx0fWBcblx0XHRcdCk7XG5cdFx0fVxuXHR9XG59XG4iXX0=
