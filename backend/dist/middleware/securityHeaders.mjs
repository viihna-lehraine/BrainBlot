import helmet from 'helmet';
import setupLogger from '../config/logger';
import {
	contentSecurityPolicyOptions,
	helmetOptions as defaultHelmetOptions,
	permissionsPolicyOptions as defaultPermissionsPolicyOptions
} from '../config/securityOptions';
const logger = setupLogger({
	serviceName: 'security-headers',
	isProduction: process.env.NODE_ENV === 'development' // *DEV-NOTE* set to production before deployment
});
export function setupSecurityHeaders(
	app,
	{
		helmetOptions = defaultHelmetOptions,
		permissionsPolicyOptions = defaultPermissionsPolicyOptions
	}
) {
	try {
		app.use(helmet(helmetOptions));
	} catch (error) {
		logger.error(`Failed to set helmet middleware ${error}`);
	}
	if (
		permissionsPolicyOptions &&
		typeof permissionsPolicyOptions === 'object'
	) {
		app.use((req, res, next) => {
			try {
				const policies = Object.entries(permissionsPolicyOptions)
					.map(
						([feature, origins]) =>
							`${feature} ${origins.join(' ')}`
					)
					.join(', ');
				res.setHeader('Permissions-Policy', policies);
			} catch (error) {
				logger.error(
					`Failed to set Permissions-Policy header: ${error}`
				);
			}
			next();
		});
	} else {
		logger.warn('Permissions-Policy options are not provided or invalid');
	}
	try {
		app.use(
			helmet.contentSecurityPolicy({
				directives: contentSecurityPolicyOptions.directives,
				reportOnly: false
			})
		);
	} catch (error) {
		logger.error(`Failed to apply Content Security Policy: ${error}`);
	}
	try {
		app.use((req, res, next) => {
			res.setHeader('Expect-CT', 'enforce, max-age=86400');
			next();
		});
	} catch (error) {
		logger.error(`Failed to set Expect-CT header: ${error}`);
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdXJpdHlIZWFkZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21pZGRsZXdhcmUvc2VjdXJpdHlIZWFkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sTUFBeUIsTUFBTSxRQUFRLENBQUM7QUFDL0MsT0FBTyxXQUFXLE1BQU0sa0JBQWtCLENBQUM7QUFDM0MsT0FBTyxFQUNOLDRCQUE0QixFQUM1QixhQUFhLElBQUksb0JBQW9CLEVBQ3JDLHdCQUF3QixJQUFJLCtCQUErQixFQUMzRCxNQUFNLDJCQUEyQixDQUFDO0FBU25DLE1BQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQztJQUMxQixXQUFXLEVBQUUsa0JBQWtCO0lBQy9CLFlBQVksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxhQUFhLENBQUMsaURBQWlEO0NBQ3RHLENBQUMsQ0FBQztBQUVILE1BQU0sVUFBVSxvQkFBb0IsQ0FDbkMsR0FBZ0IsRUFDaEIsRUFDQyxhQUFhLEdBQUcsb0JBQW9CLEVBQ3BDLHdCQUF3QixHQUFHLCtCQUErQixFQUM3QjtJQUU5QixJQUFJLENBQUM7UUFDSixHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUNBQW1DLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELElBQ0Msd0JBQXdCO1FBQ3hCLE9BQU8sd0JBQXdCLEtBQUssUUFBUSxFQUMzQyxDQUFDO1FBQ0YsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0IsRUFBRSxFQUFFO1lBQzNELElBQUksQ0FBQztnQkFDSixNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDO3FCQUN2RCxHQUFHLENBQ0gsQ0FBQyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFLENBQ3RCLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FDbEM7cUJBQ0EsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUViLEdBQUcsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDL0MsQ0FBQztZQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7Z0JBQ2hCLE1BQU0sQ0FBQyxLQUFLLENBQ1gsNENBQTRDLEtBQUssRUFBRSxDQUNuRCxDQUFDO1lBQ0gsQ0FBQztZQUNELElBQUksRUFBRSxDQUFDO1FBQ1IsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO1NBQU0sQ0FBQztRQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsd0RBQXdELENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQsSUFBSSxDQUFDO1FBQ0osR0FBRyxDQUFDLEdBQUcsQ0FDTixNQUFNLENBQUMscUJBQXFCLENBQUM7WUFDNUIsVUFBVSxFQUFFLDRCQUE0QixDQUFDLFVBQVU7WUFDbkQsVUFBVSxFQUFFLEtBQUs7U0FDakIsQ0FBQyxDQUNGLENBQUM7SUFDSCxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixNQUFNLENBQUMsS0FBSyxDQUFDLDRDQUE0QyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRCxJQUFJLENBQUM7UUFDSixHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBWSxFQUFFLEdBQWEsRUFBRSxJQUFrQixFQUFFLEVBQUU7WUFDM0QsR0FBRyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztZQUNyRCxJQUFJLEVBQUUsQ0FBQztRQUNSLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxtQ0FBbUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUMxRCxDQUFDO0FBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcGxpY2F0aW9uLCBOZXh0RnVuY3Rpb24sIFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgaGVsbWV0LCB7IEhlbG1ldE9wdGlvbnMgfSBmcm9tICdoZWxtZXQnO1xuaW1wb3J0IHNldHVwTG9nZ2VyIGZyb20gJy4uL2NvbmZpZy9sb2dnZXInO1xuaW1wb3J0IHtcblx0Y29udGVudFNlY3VyaXR5UG9saWN5T3B0aW9ucyxcblx0aGVsbWV0T3B0aW9ucyBhcyBkZWZhdWx0SGVsbWV0T3B0aW9ucyxcblx0cGVybWlzc2lvbnNQb2xpY3lPcHRpb25zIGFzIGRlZmF1bHRQZXJtaXNzaW9uc1BvbGljeU9wdGlvbnNcbn0gZnJvbSAnLi4vY29uZmlnL3NlY3VyaXR5T3B0aW9ucyc7XG5cbmludGVyZmFjZSBTZWN1cml0eUhlYWRlcnNEZXBlbmRlbmNpZXMge1xuXHRoZWxtZXRPcHRpb25zPzogSGVsbWV0T3B0aW9ucztcblx0cGVybWlzc2lvbnNQb2xpY3lPcHRpb25zPzoge1xuXHRcdFtrZXk6IHN0cmluZ106IHN0cmluZ1tdO1xuXHR9O1xufVxuXG5jb25zdCBsb2dnZXIgPSBzZXR1cExvZ2dlcih7XG5cdHNlcnZpY2VOYW1lOiAnc2VjdXJpdHktaGVhZGVycycsXG5cdGlzUHJvZHVjdGlvbjogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgLy8gKkRFVi1OT1RFKiBzZXQgdG8gcHJvZHVjdGlvbiBiZWZvcmUgZGVwbG95bWVudFxufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cFNlY3VyaXR5SGVhZGVycyhcblx0YXBwOiBBcHBsaWNhdGlvbixcblx0e1xuXHRcdGhlbG1ldE9wdGlvbnMgPSBkZWZhdWx0SGVsbWV0T3B0aW9ucyxcblx0XHRwZXJtaXNzaW9uc1BvbGljeU9wdGlvbnMgPSBkZWZhdWx0UGVybWlzc2lvbnNQb2xpY3lPcHRpb25zXG5cdH06IFNlY3VyaXR5SGVhZGVyc0RlcGVuZGVuY2llc1xuKTogdm9pZCB7XG5cdHRyeSB7XG5cdFx0YXBwLnVzZShoZWxtZXQoaGVsbWV0T3B0aW9ucykpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGxvZ2dlci5lcnJvcihgRmFpbGVkIHRvIHNldCBoZWxtZXQgbWlkZGxld2FyZSAke2Vycm9yfWApO1xuXHR9XG5cblx0aWYgKFxuXHRcdHBlcm1pc3Npb25zUG9saWN5T3B0aW9ucyAmJlxuXHRcdHR5cGVvZiBwZXJtaXNzaW9uc1BvbGljeU9wdGlvbnMgPT09ICdvYmplY3QnXG5cdCkge1xuXHRcdGFwcC51c2UoKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb25zdCBwb2xpY2llcyA9IE9iamVjdC5lbnRyaWVzKHBlcm1pc3Npb25zUG9saWN5T3B0aW9ucylcblx0XHRcdFx0XHQubWFwKFxuXHRcdFx0XHRcdFx0KFtmZWF0dXJlLCBvcmlnaW5zXSkgPT5cblx0XHRcdFx0XHRcdFx0YCR7ZmVhdHVyZX0gJHtvcmlnaW5zLmpvaW4oJyAnKX1gXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHRcdC5qb2luKCcsICcpO1xuXG5cdFx0XHRcdHJlcy5zZXRIZWFkZXIoJ1Blcm1pc3Npb25zLVBvbGljeScsIHBvbGljaWVzKTtcblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdFx0XHRgRmFpbGVkIHRvIHNldCBQZXJtaXNzaW9ucy1Qb2xpY3kgaGVhZGVyOiAke2Vycm9yfWBcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG5leHQoKTtcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRsb2dnZXIud2FybignUGVybWlzc2lvbnMtUG9saWN5IG9wdGlvbnMgYXJlIG5vdCBwcm92aWRlZCBvciBpbnZhbGlkJyk7XG5cdH1cblxuXHR0cnkge1xuXHRcdGFwcC51c2UoXG5cdFx0XHRoZWxtZXQuY29udGVudFNlY3VyaXR5UG9saWN5KHtcblx0XHRcdFx0ZGlyZWN0aXZlczogY29udGVudFNlY3VyaXR5UG9saWN5T3B0aW9ucy5kaXJlY3RpdmVzLFxuXHRcdFx0XHRyZXBvcnRPbmx5OiBmYWxzZVxuXHRcdFx0fSlcblx0XHQpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdGxvZ2dlci5lcnJvcihgRmFpbGVkIHRvIGFwcGx5IENvbnRlbnQgU2VjdXJpdHkgUG9saWN5OiAke2Vycm9yfWApO1xuXHR9XG5cblx0dHJ5IHtcblx0XHRhcHAudXNlKChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikgPT4ge1xuXHRcdFx0cmVzLnNldEhlYWRlcignRXhwZWN0LUNUJywgJ2VuZm9yY2UsIG1heC1hZ2U9ODY0MDAnKTtcblx0XHRcdG5leHQoKTtcblx0XHR9KTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRsb2dnZXIuZXJyb3IoYEZhaWxlZCB0byBzZXQgRXhwZWN0LUNUIGhlYWRlcjogJHtlcnJvcn1gKTtcblx0fVxufVxuIl19
