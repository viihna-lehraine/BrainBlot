import helmet from 'helmet';
import { environmentVariables } from '../config/environmentConfig';
import { setupLogger } from '../config/logger';
import {
	contentSecurityPolicyOptions,
	helmetOptions as defaultHelmetOptions,
	permissionsPolicyOptions as defaultPermissionsPolicyOptions
} from '../config/securityOptions';
import { validateDependencies } from '../utils/validateDependencies';
import { processError } from '../utils/processError';
const logger = setupLogger({
	serviceName: 'security-headers',
	isProduction: environmentVariables.nodeEnv === 'production'
});
export function initializeSecurityHeaders(
	app,
	{
		helmetOptions = defaultHelmetOptions,
		permissionsPolicyOptions = defaultPermissionsPolicyOptions
	}
) {
	try {
		validateDependencies(
			[
				{ name: 'app', instance: app },
				{ name: 'helmetOptions', instance: helmetOptions },
				{
					name: 'permissionsPolicyOptions',
					instance: permissionsPolicyOptions
				}
			],
			logger
		);
		app.use(helmet(helmetOptions));
		logger.info('Helmet middleware applied successfully');
	} catch (error) {
		processError(error, logger);
	}
	if (
		permissionsPolicyOptions &&
		typeof permissionsPolicyOptions === 'object'
	) {
		app.use((req, res, next) => {
			try {
				const policies = Object.entries(permissionsPolicyOptions)
					.map(
						([feature, origins]) =>
							`${feature} ${origins.join(' ')}`
					)
					.join(', ');
				res.setHeader('Permissions-Policy', policies);
				logger.info('Permissions-Policy header set successfully');
			} catch (error) {
				processError(error, logger, req);
			}
			next();
		});
	} else {
		logger.warn('Permissions-Policy options are not provided or invalid');
	}
	try {
		app.use(
			helmet.contentSecurityPolicy({
				directives: contentSecurityPolicyOptions.directives,
				reportOnly: false
			})
		);
		logger.info('Content Security Policy applied successfully');
	} catch (error) {
		processError(error, logger);
	}
	try {
		app.use((req, res, next) => {
			res.setHeader('Expect-CT', 'enforce, max-age=86400');
			logger.info('Expect-CT header set successfully');
			next();
		});
	} catch (error) {
		processError(error, logger);
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjdXJpdHlIZWFkZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21pZGRsZXdhcmUvc2VjdXJpdHlIZWFkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sTUFBeUIsTUFBTSxRQUFRLENBQUM7QUFDL0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDbkUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQy9DLE9BQU8sRUFDTiw0QkFBNEIsRUFDNUIsYUFBYSxJQUFJLG9CQUFvQixFQUNyQyx3QkFBd0IsSUFBSSwrQkFBK0IsRUFDM0QsTUFBTSwyQkFBMkIsQ0FBQztBQUNuQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNyRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFTckQsTUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDO0lBQzFCLFdBQVcsRUFBRSxrQkFBa0I7SUFDL0IsWUFBWSxFQUFFLG9CQUFvQixDQUFDLE9BQU8sS0FBSyxZQUFZO0NBQzNELENBQUMsQ0FBQztBQUVILE1BQU0sVUFBVSx5QkFBeUIsQ0FDeEMsR0FBZ0IsRUFDaEIsRUFDQyxhQUFhLEdBQUcsb0JBQW9CLEVBQ3BDLHdCQUF3QixHQUFHLCtCQUErQixFQUM3QjtJQUU5QixJQUFJLENBQUM7UUFDSixvQkFBb0IsQ0FDbkI7WUFDQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRTtZQUM5QixFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRTtZQUNsRDtnQkFDQyxJQUFJLEVBQUUsMEJBQTBCO2dCQUNoQyxRQUFRLEVBQUUsd0JBQXdCO2FBQ2xDO1NBQ0QsRUFDRCxNQUFNLENBQ04sQ0FBQztRQUVGLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVELElBQ0Msd0JBQXdCO1FBQ3hCLE9BQU8sd0JBQXdCLEtBQUssUUFBUSxFQUMzQyxDQUFDO1FBQ0YsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0IsRUFBRSxFQUFFO1lBQzNELElBQUksQ0FBQztnQkFDSixNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDO3FCQUN2RCxHQUFHLENBQ0gsQ0FBQyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFLENBQ3RCLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FDbEM7cUJBQ0EsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUViLEdBQUcsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0JBQzlDLE1BQU0sQ0FBQyxJQUFJLENBQUMsNENBQTRDLENBQUMsQ0FBQztZQUMzRCxDQUFDO1lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztnQkFDaEIsWUFBWSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDbEMsQ0FBQztZQUNELElBQUksRUFBRSxDQUFDO1FBQ1IsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO1NBQU0sQ0FBQztRQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsd0RBQXdELENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQsSUFBSSxDQUFDO1FBQ0osR0FBRyxDQUFDLEdBQUcsQ0FDTixNQUFNLENBQUMscUJBQXFCLENBQUM7WUFDNUIsVUFBVSxFQUFFLDRCQUE0QixDQUFDLFVBQVU7WUFDbkQsVUFBVSxFQUFFLEtBQUs7U0FDakIsQ0FBQyxDQUNGLENBQUM7UUFDRixNQUFNLENBQUMsSUFBSSxDQUFDLDhDQUE4QyxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsWUFBWSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFBSSxDQUFDO1FBQ0osR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0IsRUFBRSxFQUFFO1lBQzNELEdBQUcsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLHdCQUF3QixDQUFDLENBQUM7WUFDckQsTUFBTSxDQUFDLElBQUksQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1lBQ2pELElBQUksRUFBRSxDQUFDO1FBQ1IsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixZQUFZLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzdCLENBQUM7QUFDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwbGljYXRpb24sIE5leHRGdW5jdGlvbiwgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCBoZWxtZXQsIHsgSGVsbWV0T3B0aW9ucyB9IGZyb20gJ2hlbG1ldCc7XG5pbXBvcnQgeyBlbnZpcm9ubWVudFZhcmlhYmxlcyB9IGZyb20gJy4uL2NvbmZpZy9lbnZpcm9ubWVudENvbmZpZyc7XG5pbXBvcnQgeyBzZXR1cExvZ2dlciB9IGZyb20gJy4uL2NvbmZpZy9sb2dnZXInO1xuaW1wb3J0IHtcblx0Y29udGVudFNlY3VyaXR5UG9saWN5T3B0aW9ucyxcblx0aGVsbWV0T3B0aW9ucyBhcyBkZWZhdWx0SGVsbWV0T3B0aW9ucyxcblx0cGVybWlzc2lvbnNQb2xpY3lPcHRpb25zIGFzIGRlZmF1bHRQZXJtaXNzaW9uc1BvbGljeU9wdGlvbnNcbn0gZnJvbSAnLi4vY29uZmlnL3NlY3VyaXR5T3B0aW9ucyc7XG5pbXBvcnQgeyB2YWxpZGF0ZURlcGVuZGVuY2llcyB9IGZyb20gJy4uL3V0aWxzL3ZhbGlkYXRlRGVwZW5kZW5jaWVzJztcbmltcG9ydCB7IHByb2Nlc3NFcnJvciB9IGZyb20gJy4uL3V0aWxzL3Byb2Nlc3NFcnJvcic7XG5cbmludGVyZmFjZSBTZWN1cml0eUhlYWRlcnNEZXBlbmRlbmNpZXMge1xuXHRoZWxtZXRPcHRpb25zPzogSGVsbWV0T3B0aW9ucztcblx0cGVybWlzc2lvbnNQb2xpY3lPcHRpb25zPzoge1xuXHRcdFtrZXk6IHN0cmluZ106IHN0cmluZ1tdO1xuXHR9O1xufVxuXG5jb25zdCBsb2dnZXIgPSBzZXR1cExvZ2dlcih7XG5cdHNlcnZpY2VOYW1lOiAnc2VjdXJpdHktaGVhZGVycycsXG5cdGlzUHJvZHVjdGlvbjogZW52aXJvbm1lbnRWYXJpYWJsZXMubm9kZUVudiA9PT0gJ3Byb2R1Y3Rpb24nXG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVTZWN1cml0eUhlYWRlcnMoXG5cdGFwcDogQXBwbGljYXRpb24sXG5cdHtcblx0XHRoZWxtZXRPcHRpb25zID0gZGVmYXVsdEhlbG1ldE9wdGlvbnMsXG5cdFx0cGVybWlzc2lvbnNQb2xpY3lPcHRpb25zID0gZGVmYXVsdFBlcm1pc3Npb25zUG9saWN5T3B0aW9uc1xuXHR9OiBTZWN1cml0eUhlYWRlcnNEZXBlbmRlbmNpZXNcbik6IHZvaWQge1xuXHR0cnkge1xuXHRcdHZhbGlkYXRlRGVwZW5kZW5jaWVzKFxuXHRcdFx0W1xuXHRcdFx0XHR7IG5hbWU6ICdhcHAnLCBpbnN0YW5jZTogYXBwIH0sXG5cdFx0XHRcdHsgbmFtZTogJ2hlbG1ldE9wdGlvbnMnLCBpbnN0YW5jZTogaGVsbWV0T3B0aW9ucyB9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ3Blcm1pc3Npb25zUG9saWN5T3B0aW9ucycsXG5cdFx0XHRcdFx0aW5zdGFuY2U6IHBlcm1pc3Npb25zUG9saWN5T3B0aW9uc1xuXHRcdFx0XHR9XG5cdFx0XHRdLFxuXHRcdFx0bG9nZ2VyXG5cdFx0KTtcblxuXHRcdGFwcC51c2UoaGVsbWV0KGhlbG1ldE9wdGlvbnMpKTtcblx0XHRsb2dnZXIuaW5mbygnSGVsbWV0IG1pZGRsZXdhcmUgYXBwbGllZCBzdWNjZXNzZnVsbHknKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRwcm9jZXNzRXJyb3IoZXJyb3IsIGxvZ2dlcik7XG5cdH1cblxuXHRpZiAoXG5cdFx0cGVybWlzc2lvbnNQb2xpY3lPcHRpb25zICYmXG5cdFx0dHlwZW9mIHBlcm1pc3Npb25zUG9saWN5T3B0aW9ucyA9PT0gJ29iamVjdCdcblx0KSB7XG5cdFx0YXBwLnVzZSgocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pID0+IHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbnN0IHBvbGljaWVzID0gT2JqZWN0LmVudHJpZXMocGVybWlzc2lvbnNQb2xpY3lPcHRpb25zKVxuXHRcdFx0XHRcdC5tYXAoXG5cdFx0XHRcdFx0XHQoW2ZlYXR1cmUsIG9yaWdpbnNdKSA9PlxuXHRcdFx0XHRcdFx0XHRgJHtmZWF0dXJlfSAke29yaWdpbnMuam9pbignICcpfWBcblx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0LmpvaW4oJywgJyk7XG5cblx0XHRcdFx0cmVzLnNldEhlYWRlcignUGVybWlzc2lvbnMtUG9saWN5JywgcG9saWNpZXMpO1xuXHRcdFx0XHRsb2dnZXIuaW5mbygnUGVybWlzc2lvbnMtUG9saWN5IGhlYWRlciBzZXQgc3VjY2Vzc2Z1bGx5Jyk7XG5cdFx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0XHRwcm9jZXNzRXJyb3IoZXJyb3IsIGxvZ2dlciwgcmVxKTtcblx0XHRcdH1cblx0XHRcdG5leHQoKTtcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRsb2dnZXIud2FybignUGVybWlzc2lvbnMtUG9saWN5IG9wdGlvbnMgYXJlIG5vdCBwcm92aWRlZCBvciBpbnZhbGlkJyk7XG5cdH1cblxuXHR0cnkge1xuXHRcdGFwcC51c2UoXG5cdFx0XHRoZWxtZXQuY29udGVudFNlY3VyaXR5UG9saWN5KHtcblx0XHRcdFx0ZGlyZWN0aXZlczogY29udGVudFNlY3VyaXR5UG9saWN5T3B0aW9ucy5kaXJlY3RpdmVzLFxuXHRcdFx0XHRyZXBvcnRPbmx5OiBmYWxzZVxuXHRcdFx0fSlcblx0XHQpO1xuXHRcdGxvZ2dlci5pbmZvKCdDb250ZW50IFNlY3VyaXR5IFBvbGljeSBhcHBsaWVkIHN1Y2Nlc3NmdWxseScpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdHByb2Nlc3NFcnJvcihlcnJvciwgbG9nZ2VyKTtcblx0fVxuXG5cdHRyeSB7XG5cdFx0YXBwLnVzZSgocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pID0+IHtcblx0XHRcdHJlcy5zZXRIZWFkZXIoJ0V4cGVjdC1DVCcsICdlbmZvcmNlLCBtYXgtYWdlPTg2NDAwJyk7XG5cdFx0XHRsb2dnZXIuaW5mbygnRXhwZWN0LUNUIGhlYWRlciBzZXQgc3VjY2Vzc2Z1bGx5Jyk7XG5cdFx0XHRuZXh0KCk7XG5cdFx0fSk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cHJvY2Vzc0Vycm9yKGVycm9yLCBsb2dnZXIpO1xuXHR9XG59XG4iXX0=
