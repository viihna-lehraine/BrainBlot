import csrf from 'csrf';
// Create a new CSRF protection instance
const csrfProtection = new csrf({ secretLength: 32 });
// Middleware to add CSRF token to the respone and validate incoming CSRF tokens
export function csrfMiddleware(req, res, next) {
	try {
		// Generate and set a CSRFm token in the response locals
		res.locals.csrfToken = csrfProtection.create(req.sessionID || ''); // Generate CSRF token based on session ID or some unique identifier
		// If the request method is not GET, validate the CSRF token
		if (req.method !== 'GET') {
			let token = req.body.csrfToken || req.headers['x-xsrf-token'];
			if (!token || !csrfProtection.verify(req.sessionID || '', token)) {
				return res.status(403).send('Invalid CSRF token');
			}
		}
		next(); // if validation passes, proceed to the next middleware
	} catch (err) {
		next(err); // pass any errors to the error handling middleware
	}
	return;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3NyZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlL2NzcmYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBR3hCLHdDQUF3QztBQUN4QyxNQUFNLGNBQWMsR0FBRyxJQUFJLElBQUksQ0FBQyxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBRXRELGdGQUFnRjtBQUNoRixNQUFNLFVBQVUsY0FBYyxDQUM3QixHQUFZLEVBQ1osR0FBYSxFQUNiLElBQWtCO0lBRWxCLElBQUksQ0FBQztRQUNKLHdEQUF3RDtRQUN4RCxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxvRUFBb0U7UUFFdkksNERBQTREO1FBQzVELElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxLQUFLLEVBQUUsQ0FBQztZQUMxQixJQUFJLEtBQUssR0FDUixHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSyxHQUFHLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBWSxDQUFDO1lBQy9ELElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLElBQUksRUFBRSxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUM7Z0JBQ2xFLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUNuRCxDQUFDO1FBQ0YsQ0FBQztRQUVELElBQUksRUFBRSxDQUFDLENBQUMsdURBQXVEO0lBQ2hFLENBQUM7SUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsbURBQW1EO0lBQy9ELENBQUM7SUFFRCxPQUFPO0FBQ1IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjc3JmIGZyb20gJ2NzcmYnO1xuaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UsIE5leHRGdW5jdGlvbiB9IGZyb20gJ2V4cHJlc3MnO1xuXG4vLyBDcmVhdGUgYSBuZXcgQ1NSRiBwcm90ZWN0aW9uIGluc3RhbmNlXG5jb25zdCBjc3JmUHJvdGVjdGlvbiA9IG5ldyBjc3JmKHsgc2VjcmV0TGVuZ3RoOiAzMiB9KTtcblxuLy8gTWlkZGxld2FyZSB0byBhZGQgQ1NSRiB0b2tlbiB0byB0aGUgcmVzcG9uZSBhbmQgdmFsaWRhdGUgaW5jb21pbmcgQ1NSRiB0b2tlbnNcbmV4cG9ydCBmdW5jdGlvbiBjc3JmTWlkZGxld2FyZShcblx0cmVxOiBSZXF1ZXN0LFxuXHRyZXM6IFJlc3BvbnNlLFxuXHRuZXh0OiBOZXh0RnVuY3Rpb25cbikge1xuXHR0cnkge1xuXHRcdC8vIEdlbmVyYXRlIGFuZCBzZXQgYSBDU1JGbSB0b2tlbiBpbiB0aGUgcmVzcG9uc2UgbG9jYWxzXG5cdFx0cmVzLmxvY2Fscy5jc3JmVG9rZW4gPSBjc3JmUHJvdGVjdGlvbi5jcmVhdGUocmVxLnNlc3Npb25JRCB8fCAnJyk7IC8vIEdlbmVyYXRlIENTUkYgdG9rZW4gYmFzZWQgb24gc2Vzc2lvbiBJRCBvciBzb21lIHVuaXF1ZSBpZGVudGlmaWVyXG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBtZXRob2QgaXMgbm90IEdFVCwgdmFsaWRhdGUgdGhlIENTUkYgdG9rZW5cblx0XHRpZiAocmVxLm1ldGhvZCAhPT0gJ0dFVCcpIHtcblx0XHRcdGxldCB0b2tlbiA9XG5cdFx0XHRcdHJlcS5ib2R5LmNzcmZUb2tlbiB8fCAocmVxLmhlYWRlcnNbJ3gteHNyZi10b2tlbiddIGFzIHN0cmluZyk7XG5cdFx0XHRpZiAoIXRva2VuIHx8ICFjc3JmUHJvdGVjdGlvbi52ZXJpZnkocmVxLnNlc3Npb25JRCB8fCAnJywgdG9rZW4pKSB7XG5cdFx0XHRcdHJldHVybiByZXMuc3RhdHVzKDQwMykuc2VuZCgnSW52YWxpZCBDU1JGIHRva2VuJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bmV4dCgpOyAvLyBpZiB2YWxpZGF0aW9uIHBhc3NlcywgcHJvY2VlZCB0byB0aGUgbmV4dCBtaWRkbGV3YXJlXG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdG5leHQoZXJyKTsgLy8gcGFzcyBhbnkgZXJyb3JzIHRvIHRoZSBlcnJvciBoYW5kbGluZyBtaWRkbGV3YXJlXG5cdH1cblxuXHRyZXR1cm47XG59XG4iXX0=
