import { validateDependencies } from '../utils/validateDependencies.mjs';
import { processError } from '../utils/processError.mjs';
export function initializeSlowdownMiddleware({
	slowdownThreshold = 100, // in ms
	logger
}) {
	try {
		validateDependencies(
			[
				{ name: 'slowdownThreshold', instance: slowdownThreshold },
				{ name: 'logger', instance: logger }
			],
			logger || console
		);
		return function slowdownMiddleware(req, res, next) {
			const requestTime = Date.now();
			if (!req.session) {
				logger.warn(
					'Session is undefined; proceeding without slowdown'
				);
				next();
				return;
			}
			try {
				if (!req.session.lastRequestTime) {
					logger.info(
						`First request from IP: ${req.ip}, proceeding without delay`
					);
					req.session.lastRequestTime = requestTime;
					next();
				} else {
					const timeDiff = requestTime - req.session.lastRequestTime;
					if (timeDiff < slowdownThreshold) {
						const waitTime = slowdownThreshold - timeDiff;
						logger.warn(
							`Rapid request detected from IP: ${req.ip}. Delaying response by ${waitTime} ms`
						);
						setTimeout(() => {
							req.session.lastRequestTime = requestTime;
							logger.info(
								`Resuming delayed request from IP: ${req.ip}`
							);
							next();
						}, waitTime);
					} else {
						logger.info(
							`Request from IP: ${req.ip} within acceptable time frame. Proceeding`
						);
						req.session.lastRequestTime = requestTime;
						next();
					}
				}
			} catch (err) {
				processError(err, logger || console, req);
				next(err);
			}
		};
	} catch (error) {
		processError(error, logger || console);
		throw error;
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xvd2Rvd24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWlkZGxld2FyZS9zbG93ZG93bi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNyRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFXckQsTUFBTSxVQUFVLDRCQUE0QixDQUFDLEVBQzVDLGlCQUFpQixHQUFHLEdBQUcsRUFBRSxRQUFRO0FBQ2pDLE1BQU0sRUFDVTtJQUNoQixJQUFJLENBQUM7UUFDSixvQkFBb0IsQ0FDbkI7WUFDQyxFQUFFLElBQUksRUFBRSxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUU7WUFDMUQsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUU7U0FDcEMsRUFDRCxNQUFNLElBQUksT0FBTyxDQUNqQixDQUFDO1FBRUYsT0FBTyxTQUFTLGtCQUFrQixDQUNqQyxHQUEyQyxFQUMzQyxHQUFhLEVBQ2IsSUFBa0I7WUFFbEIsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBRS9CLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ2xCLE1BQU0sQ0FBQyxJQUFJLENBQ1YsbURBQW1ELENBQ25ELENBQUM7Z0JBQ0YsSUFBSSxFQUFFLENBQUM7Z0JBQ1AsT0FBTztZQUNSLENBQUM7WUFFRCxJQUFJLENBQUM7Z0JBQ0osSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLENBQUM7b0JBQ2xDLE1BQU0sQ0FBQyxJQUFJLENBQ1YsMEJBQTBCLEdBQUcsQ0FBQyxFQUFFLDRCQUE0QixDQUM1RCxDQUFDO29CQUNGLEdBQUcsQ0FBQyxPQUFPLENBQUMsZUFBZSxHQUFHLFdBQVcsQ0FBQztvQkFDMUMsSUFBSSxFQUFFLENBQUM7Z0JBQ1IsQ0FBQztxQkFBTSxDQUFDO29CQUNQLE1BQU0sUUFBUSxHQUFHLFdBQVcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQztvQkFFM0QsSUFBSSxRQUFRLEdBQUcsaUJBQWlCLEVBQUUsQ0FBQzt3QkFDbEMsTUFBTSxRQUFRLEdBQUcsaUJBQWlCLEdBQUcsUUFBUSxDQUFDO3dCQUM5QyxNQUFNLENBQUMsSUFBSSxDQUNWLG1DQUFtQyxHQUFHLENBQUMsRUFBRSwwQkFBMEIsUUFBUSxLQUFLLENBQ2hGLENBQUM7d0JBQ0YsVUFBVSxDQUFDLEdBQUcsRUFBRTs0QkFDZixHQUFHLENBQUMsT0FBTyxDQUFDLGVBQWUsR0FBRyxXQUFXLENBQUM7NEJBQzFDLE1BQU0sQ0FBQyxJQUFJLENBQ1YscUNBQXFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FDN0MsQ0FBQzs0QkFDRixJQUFJLEVBQUUsQ0FBQzt3QkFDUixDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7b0JBQ2QsQ0FBQzt5QkFBTSxDQUFDO3dCQUNQLE1BQU0sQ0FBQyxJQUFJLENBQ1Ysb0JBQW9CLEdBQUcsQ0FBQyxFQUFFLDJDQUEyQyxDQUNyRSxDQUFDO3dCQUNGLEdBQUcsQ0FBQyxPQUFPLENBQUMsZUFBZSxHQUFHLFdBQVcsQ0FBQzt3QkFDMUMsSUFBSSxFQUFFLENBQUM7b0JBQ1IsQ0FBQztnQkFDRixDQUFDO1lBQ0YsQ0FBQztZQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7Z0JBQ2QsWUFBWSxDQUFDLEdBQUcsRUFBRSxNQUFNLElBQUksT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUMxQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDWCxDQUFDO1FBQ0YsQ0FBQyxDQUFDO0lBQ0gsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsWUFBWSxDQUFDLEtBQUssRUFBRSxNQUFNLElBQUksT0FBTyxDQUFDLENBQUM7UUFDdkMsTUFBTSxLQUFLLENBQUM7SUFDYixDQUFDO0FBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRGdW5jdGlvbiwgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IFNlc3Npb24gfSBmcm9tICdleHByZXNzLXNlc3Npb24nO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vY29uZmlnL2xvZ2dlcic7XG5pbXBvcnQgeyB2YWxpZGF0ZURlcGVuZGVuY2llcyB9IGZyb20gJy4uL3V0aWxzL3ZhbGlkYXRlRGVwZW5kZW5jaWVzJztcbmltcG9ydCB7IHByb2Nlc3NFcnJvciB9IGZyb20gJy4uL3V0aWxzL3Byb2Nlc3NFcnJvcic7XG5cbmludGVyZmFjZSBTbG93ZG93bkNvbmZpZyB7XG5cdHNsb3dkb3duVGhyZXNob2xkOiBudW1iZXI7XG5cdGxvZ2dlcjogTG9nZ2VyO1xufVxuXG5pbnRlcmZhY2UgU2xvd2Rvd25TZXNzaW9uIGV4dGVuZHMgU2Vzc2lvbiB7XG5cdGxhc3RSZXF1ZXN0VGltZT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRpYWxpemVTbG93ZG93bk1pZGRsZXdhcmUoe1xuXHRzbG93ZG93blRocmVzaG9sZCA9IDEwMCwgLy8gaW4gbXNcblx0bG9nZ2VyXG59OiBTbG93ZG93bkNvbmZpZykge1xuXHR0cnkge1xuXHRcdHZhbGlkYXRlRGVwZW5kZW5jaWVzKFxuXHRcdFx0W1xuXHRcdFx0XHR7IG5hbWU6ICdzbG93ZG93blRocmVzaG9sZCcsIGluc3RhbmNlOiBzbG93ZG93blRocmVzaG9sZCB9LFxuXHRcdFx0XHR7IG5hbWU6ICdsb2dnZXInLCBpbnN0YW5jZTogbG9nZ2VyIH1cblx0XHRcdF0sXG5cdFx0XHRsb2dnZXIgfHwgY29uc29sZVxuXHRcdCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gc2xvd2Rvd25NaWRkbGV3YXJlKFxuXHRcdFx0cmVxOiBSZXF1ZXN0ICYgeyBzZXNzaW9uOiBTbG93ZG93blNlc3Npb24gfSxcblx0XHRcdHJlczogUmVzcG9uc2UsXG5cdFx0XHRuZXh0OiBOZXh0RnVuY3Rpb25cblx0XHQpOiB2b2lkIHtcblx0XHRcdGNvbnN0IHJlcXVlc3RUaW1lID0gRGF0ZS5ub3coKTtcblxuXHRcdFx0aWYgKCFyZXEuc2Vzc2lvbikge1xuXHRcdFx0XHRsb2dnZXIud2Fybihcblx0XHRcdFx0XHQnU2Vzc2lvbiBpcyB1bmRlZmluZWQ7IHByb2NlZWRpbmcgd2l0aG91dCBzbG93ZG93bidcblx0XHRcdFx0KTtcblx0XHRcdFx0bmV4dCgpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGlmICghcmVxLnNlc3Npb24ubGFzdFJlcXVlc3RUaW1lKSB7XG5cdFx0XHRcdFx0bG9nZ2VyLmluZm8oXG5cdFx0XHRcdFx0XHRgRmlyc3QgcmVxdWVzdCBmcm9tIElQOiAke3JlcS5pcH0sIHByb2NlZWRpbmcgd2l0aG91dCBkZWxheWBcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJlcS5zZXNzaW9uLmxhc3RSZXF1ZXN0VGltZSA9IHJlcXVlc3RUaW1lO1xuXHRcdFx0XHRcdG5leHQoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb25zdCB0aW1lRGlmZiA9IHJlcXVlc3RUaW1lIC0gcmVxLnNlc3Npb24ubGFzdFJlcXVlc3RUaW1lO1xuXG5cdFx0XHRcdFx0aWYgKHRpbWVEaWZmIDwgc2xvd2Rvd25UaHJlc2hvbGQpIHtcblx0XHRcdFx0XHRcdGNvbnN0IHdhaXRUaW1lID0gc2xvd2Rvd25UaHJlc2hvbGQgLSB0aW1lRGlmZjtcblx0XHRcdFx0XHRcdGxvZ2dlci53YXJuKFxuXHRcdFx0XHRcdFx0XHRgUmFwaWQgcmVxdWVzdCBkZXRlY3RlZCBmcm9tIElQOiAke3JlcS5pcH0uIERlbGF5aW5nIHJlc3BvbnNlIGJ5ICR7d2FpdFRpbWV9IG1zYFxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRyZXEuc2Vzc2lvbi5sYXN0UmVxdWVzdFRpbWUgPSByZXF1ZXN0VGltZTtcblx0XHRcdFx0XHRcdFx0bG9nZ2VyLmluZm8oXG5cdFx0XHRcdFx0XHRcdFx0YFJlc3VtaW5nIGRlbGF5ZWQgcmVxdWVzdCBmcm9tIElQOiAke3JlcS5pcH1gXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdG5leHQoKTtcblx0XHRcdFx0XHRcdH0sIHdhaXRUaW1lKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0bG9nZ2VyLmluZm8oXG5cdFx0XHRcdFx0XHRcdGBSZXF1ZXN0IGZyb20gSVA6ICR7cmVxLmlwfSB3aXRoaW4gYWNjZXB0YWJsZSB0aW1lIGZyYW1lLiBQcm9jZWVkaW5nYFxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJlcS5zZXNzaW9uLmxhc3RSZXF1ZXN0VGltZSA9IHJlcXVlc3RUaW1lO1xuXHRcdFx0XHRcdFx0bmV4dCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdHByb2Nlc3NFcnJvcihlcnIsIGxvZ2dlciB8fCBjb25zb2xlLCByZXEpO1xuXHRcdFx0XHRuZXh0KGVycik7XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRwcm9jZXNzRXJyb3IoZXJyb3IsIGxvZ2dlciB8fCBjb25zb2xlKTtcblx0XHR0aHJvdyBlcnJvcjtcblx0fVxufVxuIl19
