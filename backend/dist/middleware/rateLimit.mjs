import { RateLimiterMemory, RateLimiterRes } from 'rate-limiter-flexible';
import { AppError, errorClasses } from '../config/errorClasses.mjs';
import { processError } from '../utils/processError.mjs';
import { validateDependencies } from '../utils/validateDependencies.mjs';
const { RateLimitError } = errorClasses;
export const initializeRateLimitMiddleware = ({
	logger,
	points = 10, // 10 requests
	duration = 1 // 1 second per IP
}) => {
	validateDependencies(
		[
			{ name: 'logger', instance: logger },
			{ name: 'points', instance: points },
			{ name: 'duration', instance: duration }
		],
		logger || console
	);
	const rateLimiter = new RateLimiterMemory({
		points,
		duration
	});
	return async (req, res, next) => {
		const ip = req.ip || 'unknown'; // fallback if req.ip is undefined
		try {
			await rateLimiter.consume(ip);
			next();
		} catch (err) {
			if (err instanceof RateLimiterRes) {
				logger.warn(
					`Rate limit exceeded for IP: ${ip} - Remaining points: ${err.remainingPoints}`
				);
				next(
					new RateLimitError(
						'Too Many Requests',
						Math.ceil(err.msBeforeNext / 1000)
					)
				);
			} else {
				processError(err, logger || console, req);
				next(new AppError('Internal Server Error', 500));
			}
		}
	};
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF0ZUxpbWl0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21pZGRsZXdhcmUvcmF0ZUxpbWl0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRWhFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUVyRSxNQUFNLEVBQUUsY0FBYyxFQUFFLEdBQUcsWUFBWSxDQUFDO0FBUXhDLE1BQU0sQ0FBQyxNQUFNLDZCQUE2QixHQUFHLENBQUMsRUFDN0MsTUFBTSxFQUNOLE1BQU0sR0FBRyxFQUFFLEVBQUUsY0FBYztBQUMzQixRQUFRLEdBQUcsQ0FBQyxDQUFDLGtCQUFrQjtFQUNFLEVBQUUsRUFBRTtJQUNyQyxvQkFBb0IsQ0FDbkI7UUFDQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRTtRQUNwQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRTtRQUNwQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRTtLQUN4QyxFQUNELE1BQU0sSUFBSSxPQUFPLENBQ2pCLENBQUM7SUFFRixNQUFNLFdBQVcsR0FBRyxJQUFJLGlCQUFpQixDQUFDO1FBQ3pDLE1BQU07UUFDTixRQUFRO0tBQ1IsQ0FBQyxDQUFDO0lBRUgsT0FBTyxLQUFLLEVBQ1gsR0FBWSxFQUNaLEdBQWEsRUFDYixJQUFrQixFQUNGLEVBQUU7UUFDbEIsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxTQUFTLENBQUMsQ0FBQyxrQ0FBa0M7UUFFbEUsSUFBSSxDQUFDO1lBQ0osTUFBTSxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzlCLElBQUksRUFBRSxDQUFDO1FBQ1IsQ0FBQztRQUFDLE9BQU8sR0FBWSxFQUFFLENBQUM7WUFDdkIsSUFBSSxHQUFHLFlBQVksY0FBYyxFQUFFLENBQUM7Z0JBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQ1YsK0JBQStCLEVBQUUsd0JBQXdCLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FDOUUsQ0FBQztnQkFFRixJQUFJLENBQ0gsSUFBSSxjQUFjLENBQ2pCLG1CQUFtQixFQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQ2xDLENBQ0QsQ0FBQztZQUNILENBQUM7aUJBQU0sQ0FBQztnQkFDUCxZQUFZLENBQUMsR0FBRyxFQUFFLE1BQU0sSUFBSSxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQzFDLElBQUksQ0FBQyxJQUFJLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2xELENBQUM7UUFDRixDQUFDO0lBQ0YsQ0FBQyxDQUFDO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dEZ1bmN0aW9uLCBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgUmF0ZUxpbWl0ZXJNZW1vcnksIFJhdGVMaW1pdGVyUmVzIH0gZnJvbSAncmF0ZS1saW1pdGVyLWZsZXhpYmxlJztcbmltcG9ydCB7IEFwcEVycm9yLCBlcnJvckNsYXNzZXMgfSBmcm9tICcuLi9jb25maWcvZXJyb3JDbGFzc2VzJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL2NvbmZpZy9sb2dnZXInO1xuaW1wb3J0IHsgcHJvY2Vzc0Vycm9yIH0gZnJvbSAnLi4vdXRpbHMvcHJvY2Vzc0Vycm9yJztcbmltcG9ydCB7IHZhbGlkYXRlRGVwZW5kZW5jaWVzIH0gZnJvbSAnLi4vdXRpbHMvdmFsaWRhdGVEZXBlbmRlbmNpZXMnO1xuXG5jb25zdCB7IFJhdGVMaW1pdEVycm9yIH0gPSBlcnJvckNsYXNzZXM7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmF0ZUxpbWl0TWlkZGxld2FyZURlcGVuZGVuY2llcyB7XG5cdGxvZ2dlcjogTG9nZ2VyO1xuXHRwb2ludHM/OiBudW1iZXI7XG5cdGR1cmF0aW9uPzogbnVtYmVyO1xufVxuXG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZVJhdGVMaW1pdE1pZGRsZXdhcmUgPSAoe1xuXHRsb2dnZXIsXG5cdHBvaW50cyA9IDEwLCAvLyAxMCByZXF1ZXN0c1xuXHRkdXJhdGlvbiA9IDEgLy8gMSBzZWNvbmQgcGVyIElQXG59OiBSYXRlTGltaXRNaWRkbGV3YXJlRGVwZW5kZW5jaWVzKSA9PiB7XG5cdHZhbGlkYXRlRGVwZW5kZW5jaWVzKFxuXHRcdFtcblx0XHRcdHsgbmFtZTogJ2xvZ2dlcicsIGluc3RhbmNlOiBsb2dnZXIgfSxcblx0XHRcdHsgbmFtZTogJ3BvaW50cycsIGluc3RhbmNlOiBwb2ludHMgfSxcblx0XHRcdHsgbmFtZTogJ2R1cmF0aW9uJywgaW5zdGFuY2U6IGR1cmF0aW9uIH1cblx0XHRdLFxuXHRcdGxvZ2dlciB8fCBjb25zb2xlXG5cdCk7XG5cblx0Y29uc3QgcmF0ZUxpbWl0ZXIgPSBuZXcgUmF0ZUxpbWl0ZXJNZW1vcnkoe1xuXHRcdHBvaW50cyxcblx0XHRkdXJhdGlvblxuXHR9KTtcblxuXHRyZXR1cm4gYXN5bmMgKFxuXHRcdHJlcTogUmVxdWVzdCxcblx0XHRyZXM6IFJlc3BvbnNlLFxuXHRcdG5leHQ6IE5leHRGdW5jdGlvblxuXHQpOiBQcm9taXNlPHZvaWQ+ID0+IHtcblx0XHRjb25zdCBpcCA9IHJlcS5pcCB8fCAndW5rbm93bic7IC8vIGZhbGxiYWNrIGlmIHJlcS5pcCBpcyB1bmRlZmluZWRcblxuXHRcdHRyeSB7XG5cdFx0XHRhd2FpdCByYXRlTGltaXRlci5jb25zdW1lKGlwKTtcblx0XHRcdG5leHQoKTtcblx0XHR9IGNhdGNoIChlcnI6IHVua25vd24pIHtcblx0XHRcdGlmIChlcnIgaW5zdGFuY2VvZiBSYXRlTGltaXRlclJlcykge1xuXHRcdFx0XHRsb2dnZXIud2Fybihcblx0XHRcdFx0XHRgUmF0ZSBsaW1pdCBleGNlZWRlZCBmb3IgSVA6ICR7aXB9IC0gUmVtYWluaW5nIHBvaW50czogJHtlcnIucmVtYWluaW5nUG9pbnRzfWBcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRuZXh0KFxuXHRcdFx0XHRcdG5ldyBSYXRlTGltaXRFcnJvcihcblx0XHRcdFx0XHRcdCdUb28gTWFueSBSZXF1ZXN0cycsXG5cdFx0XHRcdFx0XHRNYXRoLmNlaWwoZXJyLm1zQmVmb3JlTmV4dCAvIDEwMDApXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHJvY2Vzc0Vycm9yKGVyciwgbG9nZ2VyIHx8IGNvbnNvbGUsIHJlcSk7XG5cdFx0XHRcdG5leHQobmV3IEFwcEVycm9yKCdJbnRlcm5hbCBTZXJ2ZXIgRXJyb3InLCA1MDApKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuIl19
