import { validateDependencies } from '../utils/validateDependencies';
import { processError } from '../utils/processError';
export function initializeCsrfMiddleware({ logger, csrfProtection }) {
	validateDependencies(
		[
			{ name: 'logger', instance: logger },
			{ name: 'csrfProtection', instance: csrfProtection }
		],
		logger || console
	);
	return function csrfMiddleware(req, res, next) {
		try {
			logger.info('CSRF middleware enabled');
			try {
				// generate and set a CSRF token in the response locals
				const sessionID = req.sessionID || '';
				const csrfToken = csrfProtection.create(sessionID);
				res.locals.csrfToken = csrfToken;
				if (req.method !== 'GET') {
					const token =
						req.body.csrfToken || req.headers['x-xsrf-token'];
					if (!token) {
						logger.warn('No CSRF token provided');
						res.status(403).send('No CSRF token provided');
						return;
					}
					if (!csrfProtection.verify(sessionID, token)) {
						logger.warn(
							`Invalid CSRF token for session ID: ${sessionID}`
						);
						res.status(403).send('Invalid CSRF token');
						return;
					}
					logger.info('CSRF token validated successfully');
				}
				next();
			} catch (err) {
				processError(err, logger || console, req);
				next(err);
			}
		} catch (error) {
			processError(error, logger || console, req);
			next(error);
		}
	};
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3NyZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlL2NzcmYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDckUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBT3JELE1BQU0sVUFBVSx3QkFBd0IsQ0FBQyxFQUN4QyxNQUFNLEVBQ04sY0FBYyxFQUNJO0lBQ2xCLG9CQUFvQixDQUNuQjtRQUNDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO1FBQ3BDLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUU7S0FDcEQsRUFDRCxNQUFNLElBQUksT0FBTyxDQUNqQixDQUFDO0lBRUYsT0FBTyxTQUFTLGNBQWMsQ0FDN0IsR0FBWSxFQUNaLEdBQWEsRUFDYixJQUFrQjtRQUVsQixJQUFJLENBQUM7WUFDSixNQUFNLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDdkMsSUFBSSxDQUFDO2dCQUNKLHVEQUF1RDtnQkFDdkQsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUM7Z0JBQ3RDLE1BQU0sU0FBUyxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ25ELEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztnQkFFakMsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRSxDQUFDO29CQUMxQixNQUFNLEtBQUssR0FDVixHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVM7d0JBQ2pCLEdBQUcsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFZLENBQUM7b0JBQ3pDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQzt3QkFDWixNQUFNLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7d0JBQ3RDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7d0JBQy9DLE9BQU87b0JBQ1IsQ0FBQztvQkFDRCxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQzt3QkFDOUMsTUFBTSxDQUFDLElBQUksQ0FDVixzQ0FBc0MsU0FBUyxFQUFFLENBQ2pELENBQUM7d0JBQ0YsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQzt3QkFDM0MsT0FBTztvQkFDUixDQUFDO29CQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsbUNBQW1DLENBQUMsQ0FBQztnQkFDbEQsQ0FBQztnQkFDRCxJQUFJLEVBQUUsQ0FBQztZQUNSLENBQUM7WUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO2dCQUNkLFlBQVksQ0FBQyxHQUFHLEVBQUUsTUFBTSxJQUFJLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDMUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ1gsQ0FBQztRQUNGLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2hCLFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxJQUFJLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztZQUM1QyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDYixDQUFDO0lBQ0YsQ0FBQyxDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjc3JmIGZyb20gJ2NzcmYnO1xuaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UsIE5leHRGdW5jdGlvbiB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vY29uZmlnL2xvZ2dlcic7XG5pbXBvcnQgeyB2YWxpZGF0ZURlcGVuZGVuY2llcyB9IGZyb20gJy4uL3V0aWxzL3ZhbGlkYXRlRGVwZW5kZW5jaWVzJztcbmltcG9ydCB7IHByb2Nlc3NFcnJvciB9IGZyb20gJy4uL3V0aWxzL3Byb2Nlc3NFcnJvcic7XG5cbmludGVyZmFjZSBDc3JmRGVwZW5kZW5jaWVzIHtcblx0bG9nZ2VyOiBMb2dnZXI7XG5cdGNzcmZQcm90ZWN0aW9uOiBjc3JmO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZUNzcmZNaWRkbGV3YXJlKHtcblx0bG9nZ2VyLFxuXHRjc3JmUHJvdGVjdGlvblxufTogQ3NyZkRlcGVuZGVuY2llcykge1xuXHR2YWxpZGF0ZURlcGVuZGVuY2llcyhcblx0XHRbXG5cdFx0XHR7IG5hbWU6ICdsb2dnZXInLCBpbnN0YW5jZTogbG9nZ2VyIH0sXG5cdFx0XHR7IG5hbWU6ICdjc3JmUHJvdGVjdGlvbicsIGluc3RhbmNlOiBjc3JmUHJvdGVjdGlvbiB9XG5cdFx0XSxcblx0XHRsb2dnZXIgfHwgY29uc29sZVxuXHQpO1xuXG5cdHJldHVybiBmdW5jdGlvbiBjc3JmTWlkZGxld2FyZShcblx0XHRyZXE6IFJlcXVlc3QsXG5cdFx0cmVzOiBSZXNwb25zZSxcblx0XHRuZXh0OiBOZXh0RnVuY3Rpb25cblx0KTogdm9pZCB7XG5cdFx0dHJ5IHtcblx0XHRcdGxvZ2dlci5pbmZvKCdDU1JGIG1pZGRsZXdhcmUgZW5hYmxlZCcpO1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gZ2VuZXJhdGUgYW5kIHNldCBhIENTUkYgdG9rZW4gaW4gdGhlIHJlc3BvbnNlIGxvY2Fsc1xuXHRcdFx0XHRjb25zdCBzZXNzaW9uSUQgPSByZXEuc2Vzc2lvbklEIHx8ICcnO1xuXHRcdFx0XHRjb25zdCBjc3JmVG9rZW4gPSBjc3JmUHJvdGVjdGlvbi5jcmVhdGUoc2Vzc2lvbklEKTtcblx0XHRcdFx0cmVzLmxvY2Fscy5jc3JmVG9rZW4gPSBjc3JmVG9rZW47XG5cblx0XHRcdFx0aWYgKHJlcS5tZXRob2QgIT09ICdHRVQnKSB7XG5cdFx0XHRcdFx0Y29uc3QgdG9rZW4gPVxuXHRcdFx0XHRcdFx0cmVxLmJvZHkuY3NyZlRva2VuIHx8XG5cdFx0XHRcdFx0XHQocmVxLmhlYWRlcnNbJ3gteHNyZi10b2tlbiddIGFzIHN0cmluZyk7XG5cdFx0XHRcdFx0aWYgKCF0b2tlbikge1xuXHRcdFx0XHRcdFx0bG9nZ2VyLndhcm4oJ05vIENTUkYgdG9rZW4gcHJvdmlkZWQnKTtcblx0XHRcdFx0XHRcdHJlcy5zdGF0dXMoNDAzKS5zZW5kKCdObyBDU1JGIHRva2VuIHByb3ZpZGVkJyk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICghY3NyZlByb3RlY3Rpb24udmVyaWZ5KHNlc3Npb25JRCwgdG9rZW4pKSB7XG5cdFx0XHRcdFx0XHRsb2dnZXIud2Fybihcblx0XHRcdFx0XHRcdFx0YEludmFsaWQgQ1NSRiB0b2tlbiBmb3Igc2Vzc2lvbiBJRDogJHtzZXNzaW9uSUR9YFxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJlcy5zdGF0dXMoNDAzKS5zZW5kKCdJbnZhbGlkIENTUkYgdG9rZW4nKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bG9nZ2VyLmluZm8oJ0NTUkYgdG9rZW4gdmFsaWRhdGVkIHN1Y2Nlc3NmdWxseScpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG5leHQoKTtcblx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRwcm9jZXNzRXJyb3IoZXJyLCBsb2dnZXIgfHwgY29uc29sZSwgcmVxKTtcblx0XHRcdFx0bmV4dChlcnIpO1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRwcm9jZXNzRXJyb3IoZXJyb3IsIGxvZ2dlciB8fCBjb25zb2xlLCByZXEpO1xuXHRcdFx0bmV4dChlcnJvcik7XG5cdFx0fVxuXHR9O1xufVxuIl19
