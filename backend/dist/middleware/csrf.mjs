import csrf from 'csrf';
import { getFeatureFlags } from '../config/featureFlags.mjs';
import setupLogger from '../config/logger.mjs';
const featureFlags = getFeatureFlags();
const CSRF_ENABLED = featureFlags.enableCsrfFlag;
const logger = setupLogger();
const csrfProtection = new csrf({ secretLength: 32 });
// Middleware to add CSRF token to the response and validate incoming CSRF tokens
export function csrfMiddleware(req, res, next) {
	if (CSRF_ENABLED) {
		logger.info('CSRF middleware enabled');
		try {
			// generate and set a CSRFm token in the response locals
			res.locals.csrfToken = csrfProtection.create(req.sessionID || ''); // generate CSRF token based on session ID or some unique identifier
			// if the request method is not GET, validate the CSRF token
			if (req.method !== 'GET') {
				const token = req.body.csrfToken || req.headers['x-xsrf-token'];
				if (
					!token ||
					!csrfProtection.verify(req.sessionID || '', token)
				) {
					res.status(403).send('Invalid CSRF token');
					return;
				}
			}
			next(); // if validation passes, proceed to the next middleware
		} catch (err) {
			next(err); // pass any errors to the error handling middleware
		}
		return;
	} else {
		logger.info('CSRF middleware disabled');
		next();
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3NyZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlL2NzcmYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBRXhCLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RCxPQUFPLFdBQVcsTUFBTSxrQkFBa0IsQ0FBQztBQUUzQyxNQUFNLFlBQVksR0FBRyxlQUFlLEVBQUUsQ0FBQztBQUN2QyxNQUFNLFlBQVksR0FBRyxZQUFZLENBQUMsY0FBYyxDQUFDO0FBQ2pELE1BQU0sTUFBTSxHQUFHLFdBQVcsRUFBRSxDQUFDO0FBQzdCLE1BQU0sY0FBYyxHQUFHLElBQUksSUFBSSxDQUFDLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFFdEQsaUZBQWlGO0FBQ2pGLE1BQU0sVUFBVSxjQUFjLENBQzdCLEdBQVksRUFDWixHQUFhLEVBQ2IsSUFBa0I7SUFFbEIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNsQixNQUFNLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDO1lBQ0osd0RBQXdEO1lBQ3hELEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLG9FQUFvRTtZQUV2SSw0REFBNEQ7WUFDNUQsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRSxDQUFDO2dCQUMxQixNQUFNLEtBQUssR0FDVixHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVM7b0JBQ2pCLEdBQUcsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFZLENBQUM7Z0JBQ3pDLElBQ0MsQ0FBQyxLQUFLO29CQUNOLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxJQUFJLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFDakQsQ0FBQztvQkFDRixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO29CQUMzQyxPQUFPO2dCQUNSLENBQUM7WUFDRixDQUFDO1lBRUQsSUFBSSxFQUFFLENBQUMsQ0FBQyx1REFBdUQ7UUFDaEUsQ0FBQztRQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7WUFDZCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxtREFBbUQ7UUFDL0QsQ0FBQztRQUVELE9BQU87SUFDUixDQUFDO1NBQU0sQ0FBQztRQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUN4QyxJQUFJLEVBQUUsQ0FBQztJQUNSLENBQUM7QUFDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNzcmYgZnJvbSAnY3NyZic7XG5pbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9uIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBnZXRGZWF0dXJlRmxhZ3MgfSBmcm9tICcuLi9jb25maWcvZmVhdHVyZUZsYWdzJztcbmltcG9ydCBzZXR1cExvZ2dlciBmcm9tICcuLi9jb25maWcvbG9nZ2VyJztcblxuY29uc3QgZmVhdHVyZUZsYWdzID0gZ2V0RmVhdHVyZUZsYWdzKCk7XG5jb25zdCBDU1JGX0VOQUJMRUQgPSBmZWF0dXJlRmxhZ3MuZW5hYmxlQ3NyZkZsYWc7XG5jb25zdCBsb2dnZXIgPSBzZXR1cExvZ2dlcigpO1xuY29uc3QgY3NyZlByb3RlY3Rpb24gPSBuZXcgY3NyZih7IHNlY3JldExlbmd0aDogMzIgfSk7XG5cbi8vIE1pZGRsZXdhcmUgdG8gYWRkIENTUkYgdG9rZW4gdG8gdGhlIHJlc3BvbnNlIGFuZCB2YWxpZGF0ZSBpbmNvbWluZyBDU1JGIHRva2Vuc1xuZXhwb3J0IGZ1bmN0aW9uIGNzcmZNaWRkbGV3YXJlKFxuXHRyZXE6IFJlcXVlc3QsXG5cdHJlczogUmVzcG9uc2UsXG5cdG5leHQ6IE5leHRGdW5jdGlvblxuKTogdm9pZCB7XG5cdGlmIChDU1JGX0VOQUJMRUQpIHtcblx0XHRsb2dnZXIuaW5mbygnQ1NSRiBtaWRkbGV3YXJlIGVuYWJsZWQnKTtcblx0XHR0cnkge1xuXHRcdFx0Ly8gZ2VuZXJhdGUgYW5kIHNldCBhIENTUkZtIHRva2VuIGluIHRoZSByZXNwb25zZSBsb2NhbHNcblx0XHRcdHJlcy5sb2NhbHMuY3NyZlRva2VuID0gY3NyZlByb3RlY3Rpb24uY3JlYXRlKHJlcS5zZXNzaW9uSUQgfHwgJycpOyAvLyBnZW5lcmF0ZSBDU1JGIHRva2VuIGJhc2VkIG9uIHNlc3Npb24gSUQgb3Igc29tZSB1bmlxdWUgaWRlbnRpZmllclxuXG5cdFx0XHQvLyBpZiB0aGUgcmVxdWVzdCBtZXRob2QgaXMgbm90IEdFVCwgdmFsaWRhdGUgdGhlIENTUkYgdG9rZW5cblx0XHRcdGlmIChyZXEubWV0aG9kICE9PSAnR0VUJykge1xuXHRcdFx0XHRjb25zdCB0b2tlbiA9XG5cdFx0XHRcdFx0cmVxLmJvZHkuY3NyZlRva2VuIHx8XG5cdFx0XHRcdFx0KHJlcS5oZWFkZXJzWyd4LXhzcmYtdG9rZW4nXSBhcyBzdHJpbmcpO1xuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0IXRva2VuIHx8XG5cdFx0XHRcdFx0IWNzcmZQcm90ZWN0aW9uLnZlcmlmeShyZXEuc2Vzc2lvbklEIHx8ICcnLCB0b2tlbilcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmVzLnN0YXR1cyg0MDMpLnNlbmQoJ0ludmFsaWQgQ1NSRiB0b2tlbicpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRuZXh0KCk7IC8vIGlmIHZhbGlkYXRpb24gcGFzc2VzLCBwcm9jZWVkIHRvIHRoZSBuZXh0IG1pZGRsZXdhcmVcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdG5leHQoZXJyKTsgLy8gcGFzcyBhbnkgZXJyb3JzIHRvIHRoZSBlcnJvciBoYW5kbGluZyBtaWRkbGV3YXJlXG5cdFx0fVxuXG5cdFx0cmV0dXJuO1xuXHR9IGVsc2Uge1xuXHRcdGxvZ2dlci5pbmZvKCdDU1JGIG1pZGRsZXdhcmUgZGlzYWJsZWQnKTtcblx0XHRuZXh0KCk7XG5cdH1cbn1cbiJdfQ==
