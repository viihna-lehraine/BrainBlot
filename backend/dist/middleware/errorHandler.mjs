import AppError from '../errors/AppError';
export function createErrorHandler({ logger, featureFlags }) {
	const ERROR_HANDLER_ENABLED = featureFlags.enableErrorHandlerFlag;
	return function errorHandler(err, req, res, next) {
		if (ERROR_HANDLER_ENABLED) {
			logger.info('Error handler middleware enabled');
			if (err instanceof AppError) {
				// operational, trusted error: send message to client
				logger.error(`Operational error occurred: ${err.message}`);
				res.status(err.statusCode).json({
					status: 'error',
					message: err.message
				});
				next();
			} else {
				// programming or other unknown error: don't leak error details
				logger.error(`Unexpected error occurred: ${err.message}`);
				res.status(500).json({
					status: 'error',
					message: 'Internal server error'
				});
				next();
			}
		} else {
			logger.info('Error handler middleware disabled');
			next();
		}
	};
}
export default createErrorHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JIYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21pZGRsZXdhcmUvZXJyb3JIYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sUUFBUSxNQUFNLG9CQUFvQixDQUFDO0FBUzFDLE1BQU0sVUFBVSxrQkFBa0IsQ0FBQyxFQUNsQyxNQUFNLEVBQ04sWUFBWSxFQUNjO0lBQzFCLE1BQU0scUJBQXFCLEdBQUcsWUFBWSxDQUFDLHNCQUFzQixDQUFDO0lBRWxFLE9BQU8sU0FBUyxZQUFZLENBQzNCLEdBQXFCLEVBQ3JCLEdBQVksRUFDWixHQUFhLEVBQ2IsSUFBa0I7UUFFbEIsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO1lBQzNCLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0NBQWtDLENBQUMsQ0FBQztZQUNoRCxJQUFJLEdBQUcsWUFBWSxRQUFRLEVBQUUsQ0FBQztnQkFDN0IscURBQXFEO2dCQUNyRCxNQUFNLENBQUMsS0FBSyxDQUFDLCtCQUErQixHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztnQkFDM0QsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDO29CQUMvQixNQUFNLEVBQUUsT0FBTztvQkFDZixPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU87aUJBQ3BCLENBQUMsQ0FBQztnQkFDSCxJQUFJLEVBQUUsQ0FBQztZQUNSLENBQUM7aUJBQU0sQ0FBQztnQkFDUCwrREFBK0Q7Z0JBQy9ELE1BQU0sQ0FBQyxLQUFLLENBQUMsOEJBQThCLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO2dCQUMxRCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztvQkFDcEIsTUFBTSxFQUFFLE9BQU87b0JBQ2YsT0FBTyxFQUFFLHVCQUF1QjtpQkFDaEMsQ0FBQyxDQUFDO2dCQUNILElBQUksRUFBRSxDQUFDO1lBQ1IsQ0FBQztRQUNGLENBQUM7YUFBTSxDQUFDO1lBQ1AsTUFBTSxDQUFDLElBQUksQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1lBQ2pELElBQUksRUFBRSxDQUFDO1FBQ1IsQ0FBQztJQUNGLENBQUMsQ0FBQztBQUNILENBQUM7QUFFRCxlQUFlLGtCQUFrQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UsIE5leHRGdW5jdGlvbiB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IEFwcEVycm9yIGZyb20gJy4uL2Vycm9ycy9BcHBFcnJvcic7XG5cbmludGVyZmFjZSBFcnJvckhhbmRsZXJEZXBlbmRlbmNpZXMge1xuXHRsb2dnZXI6IFJldHVyblR5cGU8dHlwZW9mIGltcG9ydCgnLi4vY29uZmlnL2xvZ2dlcicpLmRlZmF1bHQ+O1xuXHRmZWF0dXJlRmxhZ3M6IFJldHVyblR5cGU8XG5cdFx0dHlwZW9mIGltcG9ydCgnLi4vdXRpbHMvZmVhdHVyZUZsYWdzJykuZ2V0RmVhdHVyZUZsYWdzXG5cdD47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFcnJvckhhbmRsZXIoe1xuXHRsb2dnZXIsXG5cdGZlYXR1cmVGbGFnc1xufTogRXJyb3JIYW5kbGVyRGVwZW5kZW5jaWVzKSB7XG5cdGNvbnN0IEVSUk9SX0hBTkRMRVJfRU5BQkxFRCA9IGZlYXR1cmVGbGFncy5lbmFibGVFcnJvckhhbmRsZXJGbGFnO1xuXG5cdHJldHVybiBmdW5jdGlvbiBlcnJvckhhbmRsZXIoXG5cdFx0ZXJyOiBBcHBFcnJvciB8IEVycm9yLFxuXHRcdHJlcTogUmVxdWVzdCxcblx0XHRyZXM6IFJlc3BvbnNlLFxuXHRcdG5leHQ6IE5leHRGdW5jdGlvblxuXHQpOiB2b2lkIHtcblx0XHRpZiAoRVJST1JfSEFORExFUl9FTkFCTEVEKSB7XG5cdFx0XHRsb2dnZXIuaW5mbygnRXJyb3IgaGFuZGxlciBtaWRkbGV3YXJlIGVuYWJsZWQnKTtcblx0XHRcdGlmIChlcnIgaW5zdGFuY2VvZiBBcHBFcnJvcikge1xuXHRcdFx0XHQvLyBvcGVyYXRpb25hbCwgdHJ1c3RlZCBlcnJvcjogc2VuZCBtZXNzYWdlIHRvIGNsaWVudFxuXHRcdFx0XHRsb2dnZXIuZXJyb3IoYE9wZXJhdGlvbmFsIGVycm9yIG9jY3VycmVkOiAke2Vyci5tZXNzYWdlfWApO1xuXHRcdFx0XHRyZXMuc3RhdHVzKGVyci5zdGF0dXNDb2RlKS5qc29uKHtcblx0XHRcdFx0XHRzdGF0dXM6ICdlcnJvcicsXG5cdFx0XHRcdFx0bWVzc2FnZTogZXJyLm1lc3NhZ2Vcblx0XHRcdFx0fSk7XG5cdFx0XHRcdG5leHQoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIHByb2dyYW1taW5nIG9yIG90aGVyIHVua25vd24gZXJyb3I6IGRvbid0IGxlYWsgZXJyb3IgZGV0YWlsc1xuXHRcdFx0XHRsb2dnZXIuZXJyb3IoYFVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQ6ICR7ZXJyLm1lc3NhZ2V9YCk7XG5cdFx0XHRcdHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcblx0XHRcdFx0XHRzdGF0dXM6ICdlcnJvcicsXG5cdFx0XHRcdFx0bWVzc2FnZTogJ0ludGVybmFsIHNlcnZlciBlcnJvcidcblx0XHRcdFx0fSk7XG5cdFx0XHRcdG5leHQoKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0bG9nZ2VyLmluZm8oJ0Vycm9yIGhhbmRsZXIgbWlkZGxld2FyZSBkaXNhYmxlZCcpO1xuXHRcdFx0bmV4dCgpO1xuXHRcdH1cblx0fTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRXJyb3JIYW5kbGVyO1xuIl19
