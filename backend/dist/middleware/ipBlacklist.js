import { inRange } from 'range_check';
import fs from 'fs';
import path from 'path';
import { __dirname } from '../config/loadEnv.js';
import setupLogger from '../config/logger.js';
let blacklist = [];
const logger = setupLogger();
// Initialize rangeCheck and load the blacklist
const initializeBlacklist = async () => {
	try {
		await loadBlacklist();
		logger.info('Blacklist and range_check module loaded successfully.');
	} catch (err) {
		logger.error('Error during blacklist initialization: ', err);
		throw err;
	}
};
// Load the blacklist from file
export const loadBlacklist = async () => {
	const filePath = path.join(__dirname, '../../data/blacklist.json');
	try {
		if (fs.existsSync(filePath)) {
			const data = fs.readFileSync(filePath, 'utf8');
			blacklist = JSON.parse(data);
		}
	} catch (err) {
		logger.error('Error loading blacklist: ', err);
		blacklist = []; // default to empty array in case of failure
	}
};
// Add an IP or range to the blacklist
export const addToBlacklist = ip => {
	if (!blacklist.includes(ip)) {
		blacklist.push(ip);
		saveBlacklist();
	}
};
// Save the blacklist
const saveBlacklist = async () => {
	const filePath = path.join(__dirname, '../../data/blacklist.json');
	try {
		fs.writeFileSync(filePath, JSON.stringify(blacklist, undefined, 2));
	} catch (err) {
		console.error('Error saving blacklist: ', err);
	}
};
// Middleware to check if the requester's IP is blacklisted
export const ipBlacklistMiddleware = (req, res, next) => {
	const clientIp = req.ip;
	if (!clientIp) {
		console.error('Client IP undefined');
		res.status(500).json({ error: 'Bad request' });
		return;
	}
	if (blacklist.some(range => inRange(clientIp, range))) {
		console.log(`Blocked request from blacklisted IP: ${clientIp}`);
		res.status(403).json({ error: 'Access denied' });
		return;
	}
	next();
};
// Remove an IP or range from the blacklist
export const removeFromBlacklist = ip => {
	blacklist = blacklist.filter(range => range != ip);
	saveBlacklist();
};
export const initializeIpBlacklist = initializeBlacklist;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXBCbGFja2xpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWlkZGxld2FyZS9pcEJsYWNrbGlzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3RDLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQztBQUNwQixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzlDLE9BQU8sV0FBVyxNQUFNLGtCQUFrQixDQUFDO0FBRTNDLElBQUksU0FBUyxHQUFhLEVBQUUsQ0FBQztBQUM3QixNQUFNLE1BQU0sR0FBVyxXQUFXLEVBQUUsQ0FBQztBQUVyQywrQ0FBK0M7QUFDL0MsTUFBTSxtQkFBbUIsR0FBRyxLQUFLLElBQW1CLEVBQUU7SUFDckQsSUFBSSxDQUFDO1FBQ0osTUFBTSxhQUFhLEVBQUUsQ0FBQztRQUN0QixNQUFNLENBQUMsSUFBSSxDQUFDLHVEQUF1RCxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDZCxNQUFNLENBQUMsS0FBSyxDQUFDLHlDQUF5QyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzdELE1BQU0sR0FBRyxDQUFDO0lBQ1gsQ0FBQztBQUNGLENBQUMsQ0FBQztBQUVGLCtCQUErQjtBQUMvQixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsS0FBSyxJQUFtQixFQUFFO0lBQ3RELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLDJCQUEyQixDQUFDLENBQUM7SUFDbkUsSUFBSSxDQUFDO1FBQ0osSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7WUFDN0IsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDL0MsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsQ0FBQztJQUNGLENBQUM7SUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2QsTUFBTSxDQUFDLEtBQUssQ0FBQywyQkFBMkIsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMvQyxTQUFTLEdBQUcsRUFBRSxDQUFDLENBQUMsNENBQTRDO0lBQzdELENBQUM7QUFDRixDQUFDLENBQUM7QUFFRixzQ0FBc0M7QUFDdEMsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQUMsRUFBVSxFQUFRLEVBQUU7SUFDbEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUM3QixTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ25CLGFBQWEsRUFBRSxDQUFDO0lBQ2pCLENBQUM7QUFDRixDQUFDLENBQUM7QUFFRixxQkFBcUI7QUFDckIsTUFBTSxhQUFhLEdBQUcsS0FBSyxJQUFtQixFQUFFO0lBQy9DLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLDJCQUEyQixDQUFDLENBQUM7SUFDbkUsSUFBSSxDQUFDO1FBQ0osRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLDBCQUEwQixFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2hELENBQUM7QUFDRixDQUFDLENBQUM7QUFFRiwyREFBMkQ7QUFDM0QsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsQ0FDcEMsR0FBWSxFQUNaLEdBQWEsRUFDYixJQUFrQixFQUNYLEVBQUU7SUFDVCxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDO0lBRXhCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUNyQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLE9BQU87SUFDUixDQUFDO0lBRUQsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDdkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3Q0FBd0MsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNoRSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ2pELE9BQU87SUFDUixDQUFDO0lBRUQsSUFBSSxFQUFFLENBQUM7QUFDUixDQUFDLENBQUM7QUFFRiwyQ0FBMkM7QUFDM0MsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxFQUFVLEVBQVEsRUFBRTtJQUN2RCxTQUFTLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNuRCxhQUFhLEVBQUUsQ0FBQztBQUNqQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxtQkFBbUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluUmFuZ2UgfSBmcm9tICdyYW5nZV9jaGVjayc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICd3aW5zdG9uJztcbmltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlLCBOZXh0RnVuY3Rpb24gfSBmcm9tICdleHByZXNzJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IF9fZGlybmFtZSB9IGZyb20gJy4uL2NvbmZpZy9sb2FkRW52JztcbmltcG9ydCBzZXR1cExvZ2dlciBmcm9tICcuLi9jb25maWcvbG9nZ2VyJztcblxubGV0IGJsYWNrbGlzdDogc3RyaW5nW10gPSBbXTtcbmNvbnN0IGxvZ2dlcjogTG9nZ2VyID0gc2V0dXBMb2dnZXIoKTtcblxuLy8gSW5pdGlhbGl6ZSByYW5nZUNoZWNrIGFuZCBsb2FkIHRoZSBibGFja2xpc3RcbmNvbnN0IGluaXRpYWxpemVCbGFja2xpc3QgPSBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG5cdHRyeSB7XG5cdFx0YXdhaXQgbG9hZEJsYWNrbGlzdCgpO1xuXHRcdGxvZ2dlci5pbmZvKCdCbGFja2xpc3QgYW5kIHJhbmdlX2NoZWNrIG1vZHVsZSBsb2FkZWQgc3VjY2Vzc2Z1bGx5LicpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRsb2dnZXIuZXJyb3IoJ0Vycm9yIGR1cmluZyBibGFja2xpc3QgaW5pdGlhbGl6YXRpb246ICcsIGVycik7XG5cdFx0dGhyb3cgZXJyO1xuXHR9XG59O1xuXG4vLyBMb2FkIHRoZSBibGFja2xpc3QgZnJvbSBmaWxlXG5leHBvcnQgY29uc3QgbG9hZEJsYWNrbGlzdCA9IGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcblx0Y29uc3QgZmlsZVBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vZGF0YS9ibGFja2xpc3QuanNvbicpO1xuXHR0cnkge1xuXHRcdGlmIChmcy5leGlzdHNTeW5jKGZpbGVQYXRoKSkge1xuXHRcdFx0Y29uc3QgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhmaWxlUGF0aCwgJ3V0ZjgnKTtcblx0XHRcdGJsYWNrbGlzdCA9IEpTT04ucGFyc2UoZGF0YSk7XG5cdFx0fVxuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRsb2dnZXIuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgYmxhY2tsaXN0OiAnLCBlcnIpO1xuXHRcdGJsYWNrbGlzdCA9IFtdOyAvLyBkZWZhdWx0IHRvIGVtcHR5IGFycmF5IGluIGNhc2Ugb2YgZmFpbHVyZVxuXHR9XG59O1xuXG4vLyBBZGQgYW4gSVAgb3IgcmFuZ2UgdG8gdGhlIGJsYWNrbGlzdFxuZXhwb3J0IGNvbnN0IGFkZFRvQmxhY2tsaXN0ID0gKGlwOiBzdHJpbmcpOiB2b2lkID0+IHtcblx0aWYgKCFibGFja2xpc3QuaW5jbHVkZXMoaXApKSB7XG5cdFx0YmxhY2tsaXN0LnB1c2goaXApO1xuXHRcdHNhdmVCbGFja2xpc3QoKTtcblx0fVxufTtcblxuLy8gU2F2ZSB0aGUgYmxhY2tsaXN0XG5jb25zdCBzYXZlQmxhY2tsaXN0ID0gYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuXHRjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi8uLi9kYXRhL2JsYWNrbGlzdC5qc29uJyk7XG5cdHRyeSB7XG5cdFx0ZnMud3JpdGVGaWxlU3luYyhmaWxlUGF0aCwgSlNPTi5zdHJpbmdpZnkoYmxhY2tsaXN0LCB1bmRlZmluZWQsIDIpKTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Y29uc29sZS5lcnJvcignRXJyb3Igc2F2aW5nIGJsYWNrbGlzdDogJywgZXJyKTtcblx0fVxufTtcblxuLy8gTWlkZGxld2FyZSB0byBjaGVjayBpZiB0aGUgcmVxdWVzdGVyJ3MgSVAgaXMgYmxhY2tsaXN0ZWRcbmV4cG9ydCBjb25zdCBpcEJsYWNrbGlzdE1pZGRsZXdhcmUgPSAoXG5cdHJlcTogUmVxdWVzdCxcblx0cmVzOiBSZXNwb25zZSxcblx0bmV4dDogTmV4dEZ1bmN0aW9uXG4pOiB2b2lkID0+IHtcblx0Y29uc3QgY2xpZW50SXAgPSByZXEuaXA7XG5cblx0aWYgKCFjbGllbnRJcCkge1xuXHRcdGNvbnNvbGUuZXJyb3IoJ0NsaWVudCBJUCB1bmRlZmluZWQnKTtcblx0XHRyZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnQmFkIHJlcXVlc3QnIH0pO1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmIChibGFja2xpc3Quc29tZShyYW5nZSA9PiBpblJhbmdlKGNsaWVudElwLCByYW5nZSkpKSB7XG5cdFx0Y29uc29sZS5sb2coYEJsb2NrZWQgcmVxdWVzdCBmcm9tIGJsYWNrbGlzdGVkIElQOiAke2NsaWVudElwfWApO1xuXHRcdHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgZXJyb3I6ICdBY2Nlc3MgZGVuaWVkJyB9KTtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRuZXh0KCk7XG59O1xuXG4vLyBSZW1vdmUgYW4gSVAgb3IgcmFuZ2UgZnJvbSB0aGUgYmxhY2tsaXN0XG5leHBvcnQgY29uc3QgcmVtb3ZlRnJvbUJsYWNrbGlzdCA9IChpcDogc3RyaW5nKTogdm9pZCA9PiB7XG5cdGJsYWNrbGlzdCA9IGJsYWNrbGlzdC5maWx0ZXIocmFuZ2UgPT4gcmFuZ2UgIT0gaXApO1xuXHRzYXZlQmxhY2tsaXN0KCk7XG59O1xuXG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZUlwQmxhY2tsaXN0ID0gaW5pdGlhbGl6ZUJsYWNrbGlzdDtcbiJdfQ==
