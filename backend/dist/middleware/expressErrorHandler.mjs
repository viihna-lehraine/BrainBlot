import { AppError } from '../config/errorClasses.mjs';
import { processError } from '../utils/processError.mjs';
import { validateDependencies } from '../utils/validateDependencies.mjs';
export function expressErrorHandler({ logger, featureFlags }) {
	return function errorHandler(err, req, res, _next) {
		try {
			validateDependencies(
				[
					{ name: 'logger', instance: logger },
					{ name: 'featureFlags', instance: featureFlags }
				],
				logger
			);
			if (featureFlags.enableErrorHandlerFlag) {
				logger.info('Error handler middleware enabled');
				processError(err, logger, req);
				if (err instanceof AppError) {
					const responsePayload = {
						status: 'error',
						message: err.message ?? 'An error occurred',
						code: err.errorCode ?? 'ERR_GENERIC'
					};
					if (err.details) {
						responsePayload.details = err.details;
						if (err.details.retryAfter) {
							res.set(
								'Retry-After',
								String(err.details.retryAfter)
							);
						}
					}
					res.status(err.statusCode ?? 500).json(responsePayload);
				} else {
					res.status(500).json({
						status: 'error',
						message: err.message ?? 'Internal server error'
					});
				}
			} else {
				logger.info('Error handler middleware disabled');
				_next(err);
			}
		} catch (error) {
			processError(error, logger, req);
			res.status(500).json({
				status: 'error',
				message: 'Internal server error: error handler failed'
			});
		}
	};
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc0Vycm9ySGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlL2V4cHJlc3NFcnJvckhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRWxELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQU9yRSxNQUFNLFVBQVUsbUJBQW1CLENBQUMsRUFDbkMsTUFBTSxFQUNOLFlBQVksRUFDcUI7SUFDakMsT0FBTyxTQUFTLFlBQVksQ0FDM0IsR0FBcUIsRUFDckIsR0FBWSxFQUNaLEdBQWEsRUFDYixLQUFtQjtRQUVuQixJQUFJLENBQUM7WUFDSixvQkFBb0IsQ0FDbkI7Z0JBQ0MsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUU7Z0JBQ3BDLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFO2FBQ2hELEVBQ0QsTUFBTSxDQUNOLENBQUM7WUFFRixJQUFJLFlBQVksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO2dCQUN6QyxNQUFNLENBQUMsSUFBSSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7Z0JBQ2hELFlBQVksQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUUvQixJQUFJLEdBQUcsWUFBWSxRQUFRLEVBQUUsQ0FBQztvQkFDN0IsTUFBTSxlQUFlLEdBQTRCO3dCQUNoRCxNQUFNLEVBQUUsT0FBTzt3QkFDZixPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU8sSUFBSSxtQkFBbUI7d0JBQzNDLElBQUksRUFBRSxHQUFHLENBQUMsU0FBUyxJQUFJLGFBQWE7cUJBQ3BDLENBQUM7b0JBRUYsSUFBSSxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7d0JBQ2pCLGVBQWUsQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQzt3QkFDdEMsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDOzRCQUM1QixHQUFHLENBQUMsR0FBRyxDQUNOLGFBQWEsRUFDYixNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FDOUIsQ0FBQzt3QkFDSCxDQUFDO29CQUNGLENBQUM7b0JBRUQsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztnQkFDekQsQ0FBQztxQkFBTSxDQUFDO29CQUNQLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO3dCQUNwQixNQUFNLEVBQUUsT0FBTzt3QkFDZixPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU8sSUFBSSx1QkFBdUI7cUJBQy9DLENBQUMsQ0FBQztnQkFDSixDQUFDO1lBQ0YsQ0FBQztpQkFBTSxDQUFDO2dCQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsbUNBQW1DLENBQUMsQ0FBQztnQkFDakQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ1osQ0FBQztRQUNGLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2hCLFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ2pDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNwQixNQUFNLEVBQUUsT0FBTztnQkFDZixPQUFPLEVBQUUsNkNBQTZDO2FBQ3RELENBQUMsQ0FBQztRQUNKLENBQUM7SUFDRixDQUFDLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dEZ1bmN0aW9uLCBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgRmVhdHVyZUZsYWdzIH0gZnJvbSAnLi4vY29uZmlnL2Vudmlyb25tZW50Q29uZmlnJztcbmltcG9ydCB7IEFwcEVycm9yIH0gZnJvbSAnLi4vY29uZmlnL2Vycm9yQ2xhc3Nlcyc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9jb25maWcvbG9nZ2VyJztcbmltcG9ydCB7IHByb2Nlc3NFcnJvciB9IGZyb20gJy4uL3V0aWxzL3Byb2Nlc3NFcnJvcic7XG5pbXBvcnQgeyB2YWxpZGF0ZURlcGVuZGVuY2llcyB9IGZyb20gJy4uL3V0aWxzL3ZhbGlkYXRlRGVwZW5kZW5jaWVzJztcblxuaW50ZXJmYWNlIEV4cHJlc3NFcnJvckhhbmRsZXJEZXBlbmRlbmNpZXMge1xuXHRsb2dnZXI6IExvZ2dlcjtcblx0ZmVhdHVyZUZsYWdzOiBGZWF0dXJlRmxhZ3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHByZXNzRXJyb3JIYW5kbGVyKHtcblx0bG9nZ2VyLFxuXHRmZWF0dXJlRmxhZ3Ncbn06IEV4cHJlc3NFcnJvckhhbmRsZXJEZXBlbmRlbmNpZXMpIHtcblx0cmV0dXJuIGZ1bmN0aW9uIGVycm9ySGFuZGxlcihcblx0XHRlcnI6IEFwcEVycm9yIHwgRXJyb3IsXG5cdFx0cmVxOiBSZXF1ZXN0LFxuXHRcdHJlczogUmVzcG9uc2UsXG5cdFx0X25leHQ6IE5leHRGdW5jdGlvblxuXHQpOiB2b2lkIHtcblx0XHR0cnkge1xuXHRcdFx0dmFsaWRhdGVEZXBlbmRlbmNpZXMoXG5cdFx0XHRcdFtcblx0XHRcdFx0XHR7IG5hbWU6ICdsb2dnZXInLCBpbnN0YW5jZTogbG9nZ2VyIH0sXG5cdFx0XHRcdFx0eyBuYW1lOiAnZmVhdHVyZUZsYWdzJywgaW5zdGFuY2U6IGZlYXR1cmVGbGFncyB9XG5cdFx0XHRcdF0sXG5cdFx0XHRcdGxvZ2dlclxuXHRcdFx0KTtcblxuXHRcdFx0aWYgKGZlYXR1cmVGbGFncy5lbmFibGVFcnJvckhhbmRsZXJGbGFnKSB7XG5cdFx0XHRcdGxvZ2dlci5pbmZvKCdFcnJvciBoYW5kbGVyIG1pZGRsZXdhcmUgZW5hYmxlZCcpO1xuXHRcdFx0XHRwcm9jZXNzRXJyb3IoZXJyLCBsb2dnZXIsIHJlcSk7XG5cblx0XHRcdFx0aWYgKGVyciBpbnN0YW5jZW9mIEFwcEVycm9yKSB7XG5cdFx0XHRcdFx0Y29uc3QgcmVzcG9uc2VQYXlsb2FkOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiA9IHtcblx0XHRcdFx0XHRcdHN0YXR1czogJ2Vycm9yJyxcblx0XHRcdFx0XHRcdG1lc3NhZ2U6IGVyci5tZXNzYWdlID8/ICdBbiBlcnJvciBvY2N1cnJlZCcsXG5cdFx0XHRcdFx0XHRjb2RlOiBlcnIuZXJyb3JDb2RlID8/ICdFUlJfR0VORVJJQydcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0aWYgKGVyci5kZXRhaWxzKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZVBheWxvYWQuZGV0YWlscyA9IGVyci5kZXRhaWxzO1xuXHRcdFx0XHRcdFx0aWYgKGVyci5kZXRhaWxzLnJldHJ5QWZ0ZXIpIHtcblx0XHRcdFx0XHRcdFx0cmVzLnNldChcblx0XHRcdFx0XHRcdFx0XHQnUmV0cnktQWZ0ZXInLFxuXHRcdFx0XHRcdFx0XHRcdFN0cmluZyhlcnIuZGV0YWlscy5yZXRyeUFmdGVyKVxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJlcy5zdGF0dXMoZXJyLnN0YXR1c0NvZGUgPz8gNTAwKS5qc29uKHJlc3BvbnNlUGF5bG9hZCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmVzLnN0YXR1cyg1MDApLmpzb24oe1xuXHRcdFx0XHRcdFx0c3RhdHVzOiAnZXJyb3InLFxuXHRcdFx0XHRcdFx0bWVzc2FnZTogZXJyLm1lc3NhZ2UgPz8gJ0ludGVybmFsIHNlcnZlciBlcnJvcidcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bG9nZ2VyLmluZm8oJ0Vycm9yIGhhbmRsZXIgbWlkZGxld2FyZSBkaXNhYmxlZCcpO1xuXHRcdFx0XHRfbmV4dChlcnIpO1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRwcm9jZXNzRXJyb3IoZXJyb3IsIGxvZ2dlciwgcmVxKTtcblx0XHRcdHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcblx0XHRcdFx0c3RhdHVzOiAnZXJyb3InLFxuXHRcdFx0XHRtZXNzYWdlOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yOiBlcnJvciBoYW5kbGVyIGZhaWxlZCdcblx0XHRcdH0pO1xuXHRcdH1cblx0fTtcbn1cbiJdfQ==
