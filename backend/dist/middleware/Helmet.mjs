import helmet from 'helmet';
import {
	cspOptions,
	helmetOptions,
	permissionsPolicyOptions
} from '../config/middlewareOptions.mjs';
import { withRetry } from '../utils/helpers.mjs';
import { LoggerServiceFactory } from '../index/factory/subfactories/LoggerServiceFactory.mjs';
import { ErrorHandlerServiceFactory } from '../index/factory/subfactories/ErrorHandlerServiceFactory.mjs';
export class HelmetMiddlewareService {
	static instance = null;
	logger;
	errorLogger;
	errorHandler;
	constructor(logger, errorLogger, errorHandler) {
		this.logger = logger;
		this.errorLogger = errorLogger;
		this.errorHandler = errorHandler;
	}
	static async getInstance() {
		if (!HelmetMiddlewareService.instance) {
			const logger = await LoggerServiceFactory.getLoggerService();
			const errorLogger =
				await LoggerServiceFactory.getErrorLoggerService();
			const errorHandler =
				await ErrorHandlerServiceFactory.getErrorHandlerService();
			HelmetMiddlewareService.instance = new HelmetMiddlewareService(
				logger,
				errorLogger,
				errorHandler
			);
		}
		return HelmetMiddlewareService.instance;
	}
	async initializeHelmetMiddleware(app) {
		try {
			await withRetry(() => this.applyHelmet(app), 3, 1000);
			await withRetry(() => this.applyCSP(app), 3, 1000);
			await withRetry(() => this.applyReferrerPolicy(app), 3, 1000);
			await withRetry(() => this.applyExpectCT(app), 3, 1000);
			await withRetry(() => this.applyPermissionsPolicy(app), 3, 1000);
			await withRetry(() => this.applyCrossOriginPolicies(app), 3, 1000);
			await withRetry(() => this.applyXssFilter(app), 3, 1000);
			this.logger.info('Helmet middleware initialized successfully');
		} catch (error) {
			this.errorLogger.logError(
				'Failed to initialize Helmet middleware stack'
			);
			this.errorHandler.handleError({ error });
		}
	}
	async applyHelmet(app) {
		try {
			this.logger.info('Applying Helmet middleware');
			app.use(helmet(helmetOptions));
			this.logger.info('Helmet middleware applied successfully');
		} catch (configError) {
			this.handleHelmetError('applyHelmet', configError);
		}
	}
	async applyCSP(app) {
		try {
			this.logger.info('Applying Content Security Policy');
			app.use(
				helmet.contentSecurityPolicy({
					directives: {
						...cspOptions.directives,
						styleSrc: ['self', 'nonce-{NONCE}'],
						scriptSrc: ['self', 'nonce-{NONCE}']
					},
					reportOnly: cspOptions.reportOnly
				})
			);
			this.logger.info('Content Security Policy applied successfully');
		} catch (configError) {
			this.handleHelmetError('applyContentSecurityPolicy', configError);
		}
	}
	async applyExpectCT(app) {
		try {
			app.use((req, res, next) => {
				res.setHeader('Expect-CT', 'enforce, max-age=86400');
				this.logger.info('Expect-CT header set successfully');
				next();
			});
		} catch (configError) {
			this.handleHelmetError('applyExpectCT', configError);
		}
	}
	async applyPermissionsPolicy(app) {
		if (
			permissionsPolicyOptions &&
			typeof permissionsPolicyOptions === 'object'
		) {
			app.use((req, res, next) => {
				try {
					const policies = Object.entries(permissionsPolicyOptions)
						.map(
							([feature, origins]) =>
								`${feature} ${origins.join(' ')}`
						)
						.join(', ');
					res.setHeader('Permissions-Policy', policies);
					this.logger.info(
						'Permissions-Policy header set successfully'
					);
					next();
				} catch (expressError) {
					this.handleHelmetExpressError(
						'Permissions-Policy Middleware',
						expressError,
						req,
						res,
						next
					);
				}
			});
		} else {
			this.logger.warn(
				'Permissions-Policy options are not provided or invalid'
			);
		}
	}
	async applyCrossOriginPolicies(app) {
		try {
			this.logger.info('Applying Cross-Origin policies');
			app.use(helmet.crossOriginOpenerPolicy({ policy: 'same-origin' }));
			app.use(
				helmet.crossOriginResourcePolicy({ policy: 'same-origin' })
			);
			app.use(
				helmet.crossOriginEmbedderPolicy({ policy: 'require-corp' })
			);
			this.logger.info('Cross-Origin policies applied successfully');
		} catch (configError) {
			this.handleHelmetError('applyCrossOriginPolicies', configError);
		}
	}
	async applyReferrerPolicy(app) {
		try {
			this.logger.info('Applying Referrer-Policy');
			app.use(helmet.referrerPolicy({ policy: 'same-origin' }));
			this.logger.info('Referrer-Policy applied successfully');
		} catch (configError) {
			this.handleHelmetError('applyReferrerPolicy', configError);
		}
	}
	async applyXssFilter(app) {
		try {
			this.logger.info('Applying XSS Filter');
			app.use(helmet.xssFilter());
			this.logger.info('XSS Filter applied successfully');
		} catch (configError) {
			this.handleHelmetError('applyXssFilter', configError);
		}
	}
	async shutdown() {
		try {
			this.logger.info('Shutting down Helmet middleware service...');
			HelmetMiddlewareService.instance = null;
			this.logger.info('Helmet middleware service has been shut down.');
		} catch (error) {
			this.errorLogger.logError(
				`Error shutting down Helmet middleware service: ${error instanceof Error ? error.message : error}`
			);
		}
	}
	handleHelmetError(method, error) {
		const configurationError =
			new this.errorHandler.ErrorClasses.ConfigurationError(
				`Failed to apply security headers in ${method}: ${error instanceof Error ? error.message : 'Unknown error'}`,
				{ exposeToClient: false }
			);
		this.errorLogger.logWarn(configurationError.message);
		this.errorHandler.handleError({ error: configurationError });
	}
	handleHelmetExpressError(middleware, error, req, res, next) {
		const expressMiddlewareError =
			new this.errorHandler.ErrorClasses.ExpressError(
				`Error occurred in ${middleware}: ${error instanceof Error ? error.message : String(error)}`,
				{ exposeToClient: false }
			);
		this.errorLogger.logError(expressMiddlewareError.message);
		this.errorHandler.expressErrorHandler()(
			expressMiddlewareError,
			req,
			res,
			next
		);
	}
}
//# sourceMappingURL=data:application/json;base64,
