import { inRange } from 'range_check';
import path from 'path';
let blacklist = [];
export function createIpBlacklist({
	logger,
	featureFlags,
	__dirname,
	fsModule
}) {
	const IP_BLACKLIST_ENABLED = featureFlags.enableIpBlacklistFlag;
	const loadBlacklist = async () => {
		const filePath = path.join(__dirname, '../../data/blacklist.json');
		try {
			if (fsModule.existsSync(filePath)) {
				const data = fsModule.readFileSync(filePath, 'utf8');
				blacklist = JSON.parse(data);
			}
		} catch (err) {
			logger.error(`Error loading blacklist: ${err}`);
		}
	};
	const saveBlacklist = async () => {
		if (IP_BLACKLIST_ENABLED) {
			const filePath = path.join(__dirname, '../../data/blacklist.json');
			try {
				fsModule.writeFileSync(filePath, JSON.stringify(blacklist));
			} catch (err) {
				logger.error(`Error saving blacklist: ${err}`);
			}
		}
	};
	const initializeBlacklist = async () => {
		if (IP_BLACKLIST_ENABLED) {
			logger.info(
				'IP blacklist middleware is enabled. Initializing blacklist'
			);
			try {
				await loadBlacklist();
				logger.info(
					'Blacklist and range_check module loaded successfully'
				);
			} catch (err) {
				logger.error(`Error during blacklist initialization: ${err}`);
				throw err;
			}
		} else {
			logger.info('IP blacklist middleware is disabled');
		}
	};
	const addToBlacklist = async ip => {
		if (IP_BLACKLIST_ENABLED) {
			logger.info('IP Blacklist is enabled. Adding IP to blacklist');
			if (!blacklist.includes(ip)) {
				blacklist.push(ip);
				await saveBlacklist();
			} else {
				logger.info('IP already in blacklist');
			}
		} else {
			logger.info('IP Blacklist is disabled');
		}
	};
	const ipBlacklistMiddleware = (req, res, next) => {
		if (IP_BLACKLIST_ENABLED) {
			logger.info('IP Blacklist middleware enabled');
			const clientIp = req.ip;
			if (!clientIp) {
				logger.error('Client IP not found');
				res.status(500).json({ error: 'Bad request' });
				return;
			}
			if (blacklist.some(range => inRange(clientIp, range))) {
				logger.warn(`Blocked request from blacklisted IP: ${clientIp}`);
				res.status(403).json({ error: 'Access denied' });
				return;
			}
		} else {
			logger.info('IP Blacklist middleware disabled');
		}
		next();
	};
	const removeFromBlacklist = ip => {
		if (IP_BLACKLIST_ENABLED) {
			blacklist = blacklist.filter(range => range !== ip);
			saveBlacklist();
		}
	};
	return {
		initializeBlacklist,
		loadBlacklist,
		addToBlacklist,
		ipBlacklistMiddleware,
		removeFromBlacklist
	};
}
export const initializeIpBlacklist = createIpBlacklist;
//# sourceMappingURL=data:application/json;base64,
