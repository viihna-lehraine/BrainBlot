import { inRange } from 'range_check';
import { processError } from '../utils/processError.mjs';
import { validateDependencies } from '../utils/validateDependencies.mjs';
let blacklist = [];
export const loadBlacklist = async ({
	logger,
	fsModule,
	environmentVariables
}) => {
	validateDependencies(
		[
			{ name: 'logger', instance: logger },
			{ name: 'fsModule', instance: fsModule },
			{ name: 'environmentVariables', instance: environmentVariables }
		],
		logger || console
	);
	const filePath = environmentVariables.serverDataFilePath2;
	try {
		if (await fsModule.stat(filePath)) {
			const data = await fsModule.readFile(filePath, 'utf8');
			blacklist = JSON.parse(data);
			logger.info('Blacklist loaded successfully');
		}
	} catch (err) {
		processError(err, logger || console);
	}
};
const saveBlacklist = async ({
	logger,
	featureFlags,
	fsModule,
	environmentVariables
}) => {
	validateDependencies(
		[
			{ name: 'logger', instance: logger },
			{ name: 'featureFlags', instance: featureFlags },
			{ name: 'fsModule', instance: fsModule },
			{ name: 'environmentVariables', instance: environmentVariables }
		],
		logger || console
	);
	if (featureFlags.enableIpBlacklistFlag) {
		const filePath = environmentVariables.serverDataFilePath2;
		try {
			await fsModule.writeFile(filePath, JSON.stringify(blacklist));
			logger.info('Blacklist saved successfully');
		} catch (err) {
			processError(err, logger || console);
		}
	}
};
export const initializeBlacklist = async deps => {
	validateDependencies(
		[
			{ name: 'logger', instance: deps.logger },
			{ name: 'featureFlags', instance: deps.featureFlags }
		],
		deps.logger
	);
	const { logger, featureFlags } = deps;
	if (featureFlags.enableIpBlacklistFlag) {
		logger.info(
			'IP blacklist middleware is enabled. Initializing blacklist'
		);
		try {
			await loadBlacklist(deps);
			logger.info('Blacklist and range_check module loaded successfully');
		} catch (err) {
			processError(err, logger);
			throw err;
		}
	} else {
		logger.info('IP blacklist middleware is disabled');
	}
};
export const addToBlacklist = async (ip, deps) => {
	const { logger, featureFlags } = deps;
	validateDependencies(
		[
			{ name: 'ip', instance: ip },
			{ name: 'logger', instance: deps.logger },
			{ name: 'featureFlags', instance: deps.featureFlags }
		],
		logger || console
	);
	try {
		if (featureFlags.enableIpBlacklistFlag) {
			logger.info('IP Blacklist is enabled. Adding IP to blacklist');
			if (!blacklist.includes(ip)) {
				blacklist.push(ip);
				await saveBlacklist(deps);
				logger.info(`IP ${ip} added to blacklist`);
			} else {
				logger.info('IP already in blacklist');
			}
		} else {
			logger.info('IP Blacklist is disabled');
		}
	} catch (err) {
		processError(err, logger);
	}
};
export const removeFromBlacklist = async (ip, deps) => {
	const { logger, featureFlags } = deps;
	validateDependencies(
		[
			{ name: 'ip', instance: ip },
			{ name: 'logger', instance: deps.logger },
			{ name: 'featureFlags', instance: deps.featureFlags }
		],
		logger || console
	);
	try {
		if (featureFlags.enableIpBlacklistFlag) {
			blacklist = blacklist.filter(range => range !== ip);
			await saveBlacklist(deps);
			logger.info(`IP ${ip} removed from blacklist`);
		}
	} catch (err) {
		processError(err, logger);
	}
};
export const ipBlacklistMiddleware = deps => (req, res, next) => {
	const { logger, featureFlags } = deps;
	validateDependencies([
		{ name: 'logger', instance: logger },
		{ name: 'featureFlags', instance: featureFlags }
	]);
	try {
		if (featureFlags.enableIpBlacklistFlag) {
			logger.info('IP Blacklist middleware enabled');
			const clientIp = req.ip;
			if (!clientIp) {
				logger.error('Client IP not found');
				res.status(500).json({ error: 'Bad request' });
				return;
			}
			if (blacklist.some(range => inRange(clientIp, range))) {
				logger.warn(`Blocked request from blacklisted IP: ${clientIp}`);
				res.status(403).json({ error: 'Access denied' });
				return;
			}
		} else {
			logger.info('IP Blacklist middleware disabled');
		}
	} catch (err) {
		processError(err, logger);
		res.status(500).json({ error: 'Internal server error' });
		return;
	}
	next();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXBCbGFja2xpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWlkZGxld2FyZS9pcEJsYWNrbGlzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBTXRDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQVNyRSxJQUFJLFNBQVMsR0FBYSxFQUFFLENBQUM7QUFFN0IsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLEtBQUssRUFBRSxFQUNuQyxNQUFNLEVBQ04sUUFBUSxFQUNSLG9CQUFvQixFQUNLLEVBQWlCLEVBQUU7SUFDNUMsb0JBQW9CLENBQ25CO1FBQ0MsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUU7UUFDcEMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUU7UUFDeEMsRUFBRSxJQUFJLEVBQUUsc0JBQXNCLEVBQUUsUUFBUSxFQUFFLG9CQUFvQixFQUFFO0tBQ2hFLEVBQ0QsTUFBTSxJQUFJLE9BQU8sQ0FDakIsQ0FBQztJQUVGLE1BQU0sUUFBUSxHQUFHLG9CQUFvQixDQUFDLG1CQUFtQixDQUFDO0lBQzFELElBQUksQ0FBQztRQUNKLElBQUksTUFBTSxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7WUFDbkMsTUFBTSxJQUFJLEdBQUcsTUFBTSxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN2RCxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLCtCQUErQixDQUFDLENBQUM7UUFDOUMsQ0FBQztJQUNGLENBQUM7SUFBQyxPQUFPLEdB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Q1IsQ0FBQztZQUVELElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUN2RCxNQUFNLENBQUMsSUFBSSxDQUNWLHdDQUF3QyxRQUFRLEVBQUUsQ0FDbEQsQ0FBQztnQkFDRixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDO2dCQUNqRCxPQUFPO1lBQ1IsQ0FBQztRQUNGLENBQUM7YUFBTSxDQUFDO1lBQ1AsTUFBTSxDQUFDLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1FBQ2pELENBQUM7SUFDRixDQUFDO0lBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNkLFlBQVksQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELE9BQU87SUFDUixDQUFDO0lBRUQsSUFBSSxFQUFFLENBQUM7QUFDUixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9uIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHsgaW5SYW5nZSB9IGZyb20gJ3JhbmdlX2NoZWNrJztcbmltcG9ydCB7XG5cdGVudmlyb25tZW50VmFyaWFibGVzLFxuXHRGZWF0dXJlRmxhZ3Ncbn0gZnJvbSAnLi4vY29uZmlnL2Vudmlyb25tZW50Q29uZmlnJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL2NvbmZpZy9sb2dnZXInO1xuaW1wb3J0IHsgcHJvY2Vzc0Vycm9yIH0gZnJvbSAnLi4vdXRpbHMvcHJvY2Vzc0Vycm9yJztcbmltcG9ydCB7IHZhbGlkYXRlRGVwZW5kZW5jaWVzIH0gZnJvbSAnLi4vdXRpbHMvdmFsaWRhdGVEZXBlbmRlbmNpZXMnO1xuXG5pbnRlcmZhY2UgSXBCbGFja2xpc3REZXBlbmRlbmNpZXMge1xuXHRsb2dnZXI6IExvZ2dlcjtcblx0ZmVhdHVyZUZsYWdzOiBGZWF0dXJlRmxhZ3M7XG5cdGVudmlyb25tZW50VmFyaWFibGVzOiB0eXBlb2YgZW52aXJvbm1lbnRWYXJpYWJsZXM7XG5cdGZzTW9kdWxlOiB0eXBlb2YgZnMucHJvbWlzZXM7XG59XG5cbmxldCBibGFja2xpc3Q6IHN0cmluZ1tdID0gW107XG5cbmV4cG9ydCBjb25zdCBsb2FkQmxhY2tsaXN0ID0gYXN5bmMgKHtcblx0bG9nZ2VyLFxuXHRmc01vZHVsZSxcblx0ZW52aXJvbm1lbnRWYXJpYWJsZXNcbn06IElwQmxhY2tsaXN0RGVwZW5kZW5jaWVzKTogUHJvbWlzZTx2b2lkPiA9PiB7XG5cdHZhbGlkYXRlRGVwZW5kZW5jaWVzKFxuXHRcdFtcblx0XHRcdHsgbmFtZTogJ2xvZ2dlcicsIGluc3RhbmNlOiBsb2dnZXIgfSxcblx0XHRcdHsgbmFtZTogJ2ZzTW9kdWxlJywgaW5zdGFuY2U6IGZzTW9kdWxlIH0sXG5cdFx0XHR7IG5hbWU6ICdlbnZpcm9ubWVudFZhcmlhYmxlcycsIGluc3RhbmNlOiBlbnZpcm9ubWVudFZhcmlhYmxlcyB9XG5cdFx0XSxcblx0XHRsb2dnZXIgfHwgY29uc29sZVxuXHQpO1xuXG5cdGNvbnN0IGZpbGVQYXRoID0gZW52aXJvbm1lbnRWYXJpYWJsZXMuc2VydmVyRGF0YUZpbGVQYXRoMjtcblx0dHJ5IHtcblx0XHRpZiAoYXdhaXQgZnNNb2R1bGUuc3RhdChmaWxlUGF0aCkpIHtcblx0XHRcdGNvbnN0IGRhdGEgPSBhd2FpdCBmc01vZHVsZS5yZWFkRmlsZShmaWxlUGF0aCwgJ3V0ZjgnKTtcblx0XHRcdGJsYWNrbGlzdCA9IEpTT04ucGFyc2UoZGF0YSk7XG5cdFx0XHRsb2dnZXIuaW5mbygnQmxhY2tsaXN0IGxvYWRlZCBzdWNjZXNzZnVsbHknKTtcblx0XHR9XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdHByb2Nlc3NFcnJvcihlcnIsIGxvZ2dlciB8fCBjb25zb2xlKTtcblx0fVxufTtcblxuY29uc3Qgc2F2ZUJsYWNrbGlzdCA9IGFzeW5jICh7XG5cdGxvZ2dlcixcblx0ZmVhdHVyZUZsYWdzLFxuXHRmc01vZHVsZSxcblx0ZW52aXJvbm1lbnRWYXJpYWJsZXNcbn06IElwQmxhY2tsaXN0RGVwZW5kZW5jaWVzKTogUHJvbWlzZTx2b2lkPiA9PiB7XG5cdHZhbGlkYXRlRGVwZW5kZW5jaWVzKFxuXHRcdFtcblx0XHRcdHsgbmFtZTogJ2xvZ2dlcicsIGluc3RhbmNlOiBsb2dnZXIgfSxcblx0XHRcdHsgbmFtZTogJ2ZlYXR1cmVGbGFncycsIGluc3RhbmNlOiBmZWF0dXJlRmxhZ3MgfSxcblx0XHRcdHsgbmFtZTogJ2ZzTW9kdWxlJywgaW5zdGFuY2U6IGZzTW9kdWxlIH0sXG5cdFx0XHR7IG5hbWU6ICdlbnZpcm9ubWVudFZhcmlhYmxlcycsIGluc3RhbmNlOiBlbnZpcm9ubWVudFZhcmlhYmxlcyB9XG5cdFx0XSxcblx0XHRsb2dnZXIgfHwgY29uc29sZVxuXHQpO1xuXG5cdGlmIChmZWF0dXJlRmxhZ3MuZW5hYmxlSXBCbGFja2xpc3RGbGFnKSB7XG5cdFx0Y29uc3QgZmlsZVBhdGggPSBlbnZpcm9ubWVudFZhcmlhYmxlcy5zZXJ2ZXJEYXRhRmlsZVBhdGgyO1xuXHRcdHRyeSB7XG5cdFx0XHRhd2FpdCBmc01vZHVsZS53cml0ZUZpbGUoZmlsZVBhdGgsIEpTT04uc3RyaW5naWZ5KGJsYWNrbGlzdCkpO1xuXHRcdFx0bG9nZ2VyLmluZm8oJ0JsYWNrbGlzdCBzYXZlZCBzdWNjZXNzZnVsbHknKTtcblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdHByb2Nlc3NFcnJvcihlcnIsIGxvZ2dlciB8fCBjb25zb2xlKTtcblx0XHR9XG5cdH1cbn07XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplQmxhY2tsaXN0ID0gYXN5bmMgKFxuXHRkZXBzOiBJcEJsYWNrbGlzdERlcGVuZGVuY2llc1xuKTogUHJvbWlzZTx2b2lkPiA9PiB7XG5cdHZhbGlkYXRlRGVwZW5kZW5jaWVzKFxuXHRcdFtcblx0XHRcdHsgbmFtZTogJ2xvZ2dlcicsIGluc3RhbmNlOiBkZXBzLmxvZ2dlciB9LFxuXHRcdFx0eyBuYW1lOiAnZmVhdHVyZUZsYWdzJywgaW5zdGFuY2U6IGRlcHMuZmVhdHVyZUZsYWdzIH1cblx0XHRdLFxuXHRcdGRlcHMubG9nZ2VyXG5cdCk7XG5cblx0Y29uc3QgeyBsb2dnZXIsIGZlYXR1cmVGbGFncyB9ID0gZGVwcztcblxuXHRpZiAoZmVhdHVyZUZsYWdzLmVuYWJsZUlwQmxhY2tsaXN0RmxhZykge1xuXHRcdGxvZ2dlci5pbmZvKFxuXHRcdFx0J0lQIGJsYWNrbGlzdCBtaWRkbGV3YXJlIGlzIGVuYWJsZWQuIEluaXRpYWxpemluZyBibGFja2xpc3QnXG5cdFx0KTtcblx0XHR0cnkge1xuXHRcdFx0YXdhaXQgbG9hZEJsYWNrbGlzdChkZXBzKTtcblx0XHRcdGxvZ2dlci5pbmZvKCdCbGFja2xpc3QgYW5kIHJhbmdlX2NoZWNrIG1vZHVsZSBsb2FkZWQgc3VjY2Vzc2Z1bGx5Jyk7XG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRwcm9jZXNzRXJyb3IoZXJyLCBsb2dnZXIpO1xuXHRcdFx0dGhyb3cgZXJyO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRsb2dnZXIuaW5mbygnSVAgYmxhY2tsaXN0IG1pZGRsZXdhcmUgaXMgZGlzYWJsZWQnKTtcblx0fVxufTtcblxuZXhwb3J0IGNvbnN0IGFkZFRvQmxhY2tsaXN0ID0gYXN5bmMgKFxuXHRpcDogc3RyaW5nLFxuXHRkZXBzOiBJcEJsYWNrbGlzdERlcGVuZGVuY2llc1xuKTogUHJvbWlzZTx2b2lkPiA9PiB7XG5cdGNvbnN0IHsgbG9nZ2VyLCBmZWF0dXJlRmxhZ3MgfSA9IGRlcHM7XG5cblx0dmFsaWRhdGVEZXBlbmRlbmNpZXMoXG5cdFx0W1xuXHRcdFx0eyBuYW1lOiAnaXAnLCBpbnN0YW5jZTogaXAgfSxcblx0XHRcdHsgbmFtZTogJ2xvZ2dlcicsIGluc3RhbmNlOiBkZXBzLmxvZ2dlciB9LFxuXHRcdFx0eyBuYW1lOiAnZmVhdHVyZUZsYWdzJywgaW5zdGFuY2U6IGRlcHMuZmVhdHVyZUZsYWdzIH1cblx0XHRdLFxuXHRcdGxvZ2dlciB8fCBjb25zb2xlXG5cdCk7XG5cblx0dHJ5IHtcblx0XHRpZiAoZmVhdHVyZUZsYWdzLmVuYWJsZUlwQmxhY2tsaXN0RmxhZykge1xuXHRcdFx0bG9nZ2VyLmluZm8oJ0lQIEJsYWNrbGlzdCBpcyBlbmFibGVkLiBBZGRpbmcgSVAgdG8gYmxhY2tsaXN0Jyk7XG5cdFx0XHRpZiAoIWJsYWNrbGlzdC5pbmNsdWRlcyhpcCkpIHtcblx0XHRcdFx0YmxhY2tsaXN0LnB1c2goaXApO1xuXHRcdFx0XHRhd2FpdCBzYXZlQmxhY2tsaXN0KGRlcHMpO1xuXHRcdFx0XHRsb2dnZXIuaW5mbyhgSVAgJHtpcH0gYWRkZWQgdG8gYmxhY2tsaXN0YCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRsb2dnZXIuaW5mbygnSVAgYWxyZWFkeSBpbiBibGFja2xpc3QnKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0bG9nZ2VyLmluZm8oJ0lQIEJsYWNrbGlzdCBpcyBkaXNhYmxlZCcpO1xuXHRcdH1cblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0cHJvY2Vzc0Vycm9yKGVyciwgbG9nZ2VyKTtcblx0fVxufTtcblxuZXhwb3J0IGNvbnN0IHJlbW92ZUZyb21CbGFja2xpc3QgPSBhc3luYyAoXG5cdGlwOiBzdHJpbmcsXG5cdGRlcHM6IElwQmxhY2tsaXN0RGVwZW5kZW5jaWVzXG4pOiBQcm9taXNlPHZvaWQ+ID0+IHtcblx0Y29uc3QgeyBsb2dnZXIsIGZlYXR1cmVGbGFncyB9ID0gZGVwcztcblxuXHR2YWxpZGF0ZURlcGVuZGVuY2llcyhcblx0XHRbXG5cdFx0XHR7IG5hbWU6ICdpcCcsIGluc3RhbmNlOiBpcCB9LFxuXHRcdFx0eyBuYW1lOiAnbG9nZ2VyJywgaW5zdGFuY2U6IGRlcHMubG9nZ2VyIH0sXG5cdFx0XHR7IG5hbWU6ICdmZWF0dXJlRmxhZ3MnLCBpbnN0YW5jZTogZGVwcy5mZWF0dXJlRmxhZ3MgfVxuXHRcdF0sXG5cdFx0bG9nZ2VyIHx8IGNvbnNvbGVcblx0KTtcblxuXHR0cnkge1xuXHRcdGlmIChmZWF0dXJlRmxhZ3MuZW5hYmxlSXBCbGFja2xpc3RGbGFnKSB7XG5cdFx0XHRibGFja2xpc3QgPSBibGFja2xpc3QuZmlsdGVyKHJhbmdlID0+IHJhbmdlICE9PSBpcCk7XG5cdFx0XHRhd2FpdCBzYXZlQmxhY2tsaXN0KGRlcHMpO1xuXHRcdFx0bG9nZ2VyLmluZm8oYElQICR7aXB9IHJlbW92ZWQgZnJvbSBibGFja2xpc3RgKTtcblx0XHR9XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdHByb2Nlc3NFcnJvcihlcnIsIGxvZ2dlcik7XG5cdH1cbn07XG5cbmV4cG9ydCBjb25zdCBpcEJsYWNrbGlzdE1pZGRsZXdhcmUgPVxuXHQoZGVwczogSXBCbGFja2xpc3REZXBlbmRlbmNpZXMpID0+XG5cdChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbik6IHZvaWQgPT4ge1xuXHRcdGNvbnN0IHsgbG9nZ2VyLCBmZWF0dXJlRmxhZ3MgfSA9IGRlcHM7XG5cblx0XHR2YWxpZGF0ZURlcGVuZGVuY2llcyhbXG5cdFx0XHR7IG5hbWU6ICdsb2dnZXInLCBpbnN0YW5jZTogbG9nZ2VyIH0sXG5cdFx0XHR7IG5hbWU6ICdmZWF0dXJlRmxhZ3MnLCBpbnN0YW5jZTogZmVhdHVyZUZsYWdzIH1cblx0XHRdKTtcblxuXHRcdHRyeSB7XG5cdFx0XHRpZiAoZmVhdHVyZUZsYWdzLmVuYWJsZUlwQmxhY2tsaXN0RmxhZykge1xuXHRcdFx0XHRsb2dnZXIuaW5mbygnSVAgQmxhY2tsaXN0IG1pZGRsZXdhcmUgZW5hYmxlZCcpO1xuXHRcdFx0XHRjb25zdCBjbGllbnRJcCA9IHJlcS5pcDtcblxuXHRcdFx0XHRpZiAoIWNsaWVudElwKSB7XG5cdFx0XHRcdFx0bG9nZ2VyLmVycm9yKCdDbGllbnQgSVAgbm90IGZvdW5kJyk7XG5cdFx0XHRcdFx0cmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0JhZCByZXF1ZXN0JyB9KTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoYmxhY2tsaXN0LnNvbWUocmFuZ2UgPT4gaW5SYW5nZShjbGllbnRJcCwgcmFuZ2UpKSkge1xuXHRcdFx0XHRcdGxvZ2dlci53YXJuKFxuXHRcdFx0XHRcdFx0YEJsb2NrZWQgcmVxdWVzdCBmcm9tIGJsYWNrbGlzdGVkIElQOiAke2NsaWVudElwfWBcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgZXJyb3I6ICdBY2Nlc3MgZGVuaWVkJyB9KTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxvZ2dlci5pbmZvKCdJUCBCbGFja2xpc3QgbWlkZGxld2FyZSBkaXNhYmxlZCcpO1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0cHJvY2Vzc0Vycm9yKGVyciwgbG9nZ2VyKTtcblx0XHRcdHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InIH0pO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdG5leHQoKTtcblx0fTtcbiJdfQ==
