import pkg from 'winston';
import DailyRotateFile from 'winston-daily-rotate-file';
import loadEnv from '../config/loadEnv.js';
const { createLogger, format, transports } = pkg;
const { combine, timestamp, printf, colorize, errors, json } = format;
let logFormat = printf(({ level, message, timestamp, stack }) => {
	return `${timestamp}, ${level}: ${stack || message}`;
});
async function setupLogger() {
	loadEnv();
	let logger = createLogger({
		level: process.env.NODE_ENV === 'production' ? 'info' : 'debug',
		format: combine(
			timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
			errors({ stack: true }),
			json()
		),
		defaultMeta: { service: 'guestbook-service' },
		transports: [
			new transports.Console({
				format: combine(colorize(), logFormat)
			}),
			new DailyRotateFile({
				filename: './logs/server/error-%DATE%.log',
				dirname: './logs/server',
				datePattern: 'YYYY-MM-DD',
				zippedArchive: true,
				maxSize: '20m',
				maxFiles: '14d',
				format: logFormat
			})
		]
	});
	return logger;
}
export default setupLogger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21pZGRsZXdhcmUvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sR0FBRyxNQUFNLFNBQVMsQ0FBQztBQUMxQixPQUFPLGVBQWUsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RCxPQUFPLE9BQU8sTUFBTSxtQkFBbUIsQ0FBQztBQUV4QyxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsR0FBRyxHQUFHLENBQUM7QUFDakQsTUFBTSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDO0FBRXRFLElBQUksU0FBUyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtJQUMvRCxPQUFPLEdBQUcsU0FBUyxLQUFLLEtBQUssS0FBSyxLQUFLLElBQUksT0FBTyxFQUFFLENBQUM7QUFDdEQsQ0FBQyxDQUFDLENBQUM7QUFFSCxLQUFLLFVBQVUsV0FBVztJQUN6QixPQUFPLEVBQUUsQ0FBQztJQUVWLElBQUksTUFBTSxHQUFHLFlBQVksQ0FBQztRQUN6QixLQUFLLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssWUFBWSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU87UUFDL0QsTUFBTSxFQUFFLE9BQU8sQ0FDZCxTQUFTLENBQUMsRUFBRSxNQUFNLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyxFQUM1QyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFDdkIsSUFBSSxFQUFFLENBQ047UUFDRCxXQUFXLEVBQUUsRUFBRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUU7UUFDN0MsVUFBVSxFQUFFO1lBQ1gsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDO2dCQUN0QixNQUFNLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLFNBQVMsQ0FBQzthQUN0QyxDQUFDO1lBQ0YsSUFBSSxlQUFlLENBQUM7Z0JBQ25CLFFBQVEsRUFBRSxnQ0FBZ0M7Z0JBQzFDLE9BQU8sRUFBRSxlQUFlO2dCQUN4QixXQUFXLEVBQUUsWUFBWTtnQkFDekIsYUFBYSxFQUFFLElBQUk7Z0JBQ25CLE9BQU8sRUFBRSxLQUFLO2dCQUNkLFFBQVEsRUFBRSxLQUFLO2dCQUNmLE1BQU0sRUFBRSxTQUFTO2FBQ2pCLENBQUM7U0FDRjtLQUNELENBQUMsQ0FBQztJQUVILE9BQU8sTUFBTSxDQUFDO0FBQ2YsQ0FBQztBQUVELGVBQWUsV0FBVyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBrZyBmcm9tICd3aW5zdG9uJztcbmltcG9ydCBEYWlseVJvdGF0ZUZpbGUgZnJvbSAnd2luc3Rvbi1kYWlseS1yb3RhdGUtZmlsZSc7XG5pbXBvcnQgbG9hZEVudiBmcm9tICcuLi9jb25maWcvbG9hZEVudic7XG5cbmNvbnN0IHsgY3JlYXRlTG9nZ2VyLCBmb3JtYXQsIHRyYW5zcG9ydHMgfSA9IHBrZztcbmNvbnN0IHsgY29tYmluZSwgdGltZXN0YW1wLCBwcmludGYsIGNvbG9yaXplLCBlcnJvcnMsIGpzb24gfSA9IGZvcm1hdDtcblxubGV0IGxvZ0Zvcm1hdCA9IHByaW50ZigoeyBsZXZlbCwgbWVzc2FnZSwgdGltZXN0YW1wLCBzdGFjayB9KSA9PiB7XG5cdHJldHVybiBgJHt0aW1lc3RhbXB9LCAke2xldmVsfTogJHtzdGFjayB8fCBtZXNzYWdlfWA7XG59KTtcblxuYXN5bmMgZnVuY3Rpb24gc2V0dXBMb2dnZXIoKSB7XG5cdGxvYWRFbnYoKTtcblxuXHRsZXQgbG9nZ2VyID0gY3JlYXRlTG9nZ2VyKHtcblx0XHRsZXZlbDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA/ICdpbmZvJyA6ICdkZWJ1ZycsXG5cdFx0Zm9ybWF0OiBjb21iaW5lKFxuXHRcdFx0dGltZXN0YW1wKHsgZm9ybWF0OiAnWVlZWS1NTS1ERCBISDptbTpzcycgfSksXG5cdFx0XHRlcnJvcnMoeyBzdGFjazogdHJ1ZSB9KSxcblx0XHRcdGpzb24oKVxuXHRcdCksXG5cdFx0ZGVmYXVsdE1ldGE6IHsgc2VydmljZTogJ2d1ZXN0Ym9vay1zZXJ2aWNlJyB9LFxuXHRcdHRyYW5zcG9ydHM6IFtcblx0XHRcdG5ldyB0cmFuc3BvcnRzLkNvbnNvbGUoe1xuXHRcdFx0XHRmb3JtYXQ6IGNvbWJpbmUoY29sb3JpemUoKSwgbG9nRm9ybWF0KVxuXHRcdFx0fSksXG5cdFx0XHRuZXcgRGFpbHlSb3RhdGVGaWxlKHtcblx0XHRcdFx0ZmlsZW5hbWU6ICcuL2xvZ3Mvc2VydmVyL2Vycm9yLSVEQVRFJS5sb2cnLFxuXHRcdFx0XHRkaXJuYW1lOiAnLi9sb2dzL3NlcnZlcicsXG5cdFx0XHRcdGRhdGVQYXR0ZXJuOiAnWVlZWS1NTS1ERCcsXG5cdFx0XHRcdHppcHBlZEFyY2hpdmU6IHRydWUsXG5cdFx0XHRcdG1heFNpemU6ICcyMG0nLFxuXHRcdFx0XHRtYXhGaWxlczogJzE0ZCcsXG5cdFx0XHRcdGZvcm1hdDogbG9nRm9ybWF0XG5cdFx0XHR9KVxuXHRcdF1cblx0fSk7XG5cblx0cmV0dXJuIGxvZ2dlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2V0dXBMb2dnZXI7XG4iXX0=
