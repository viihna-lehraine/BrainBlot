import { execSync } from 'child_process';
import http from 'http';
import https from 'https';
import path from 'path';
import gracefulShutdown from 'http-graceful-shutdown';
import { validateDependencies } from './utils/validateDependencies';
import { processError } from './utils/processError';
import { environmentVariables } from './config/environmentConfig';
import { getRedisClient } from './config/redis';
const port = environmentVariables.serverPort;
const ciphers = [
	'ECDHE-ECDSA-AES256-GCM-SHA384',
	'ECDHE-RSA-AES256-GCM-SHA384',
	'ECDHE-ECDSA-CHACHA20-POLY1305',
	'ECDHE-RSA-CHACHA20-POLY1305',
	'ECDHE-ECDSA-AES128-GCM-SHA256',
	'ECDHE-RSA-AES128-GCM-SHA256',
	'ECDHE-ECDSA-AES256-SHA384',
	'ECDHE-RSA-AES256-SHA384',
	'ECDHE-ECDSA-AES128-SHA256',
	'ECDHE-RSA-AES128-SHA256'
];
async function declareOptions({
	sops,
	fs,
	logger,
	constants,
	DECRYPT_KEYS,
	SSL_KEY,
	SSL_CERT,
	ciphers
}) {
	try {
		validateDependencies(
			[
				{ name: 'sops', instance: sops },
				{ name: 'fs', instance: fs },
				{ name: 'logger', instance: logger },
				{ name: 'constants', instance: constants },
				{ name: 'DECRYPT_KEYS', instance: DECRYPT_KEYS },
				{ name: 'SSL_KEY', instance: SSL_KEY },
				{ name: 'SSL_CERT', instance: SSL_CERT },
				{ name: 'ciphers', instance: ciphers }
			],
			logger || console
		);
		let sslKeys;
		if (DECRYPT_KEYS) {
			sslKeys = await sops.getSSLKeys({
				logger,
				execSync,
				getDirectoryPath: () => path.resolve(process.cwd())
			});
			logger.info('SSL Keys retrieved');
		} else {
			if (!SSL_KEY || !SSL_CERT) {
				throw new Error(
					'SSL_KEY or SSL_CERT environment variable is not set'
				);
			}
			const key = await fs.readFile(SSL_KEY, 'utf8');
			const cert = await fs.readFile(SSL_CERT, 'utf8');
			sslKeys = { key, cert };
			logger.info('Using unencrypted SSL Keys from environment files');
		}
		return {
			key: sslKeys.key,
			cert: sslKeys.cert,
			secureOptions:
				constants.SSL_OP_NO_TLSv1 | constants.SSL_OP_NO_TLSv1_1,
			ciphers: ciphers.join(':'),
			honorCipherOrder: true
		};
	} catch (error) {
		processError(error, logger || console);
		throw error;
	}
}
async function flushInMemoryCache(logger, featureFlags) {
	logger.info('Flushing in-memory cache');
	const redisClient = await getRedisClient();
	if (featureFlags.enableRedisFlag) {
		if (redisClient) {
			try {
				await redisClient.flushAll(); // Use the Redis client instance
				logger.info('In-memory cache flushed');
			} catch (error) {
				logger.error('Error flushing Redis cache', error);
			}
		} else {
			logger.warn('Redis client is not available for cache flush');
		}
	} else {
		logger.info('No cache to flush (Redis is disabled)');
	}
}
export async function setupHttpServer({
	app,
	sops,
	fs: fsPromises,
	logger,
	constants,
	featureFlags,
	getRedisClient,
	getSequelizeInstance
}) {
	try {
		logger.info('Setting up the HTTP/HTTPS server');
		validateDependencies(
			[
				{ name: 'app', instance: app },
				{ name: 'sops', instance: sops },
				{ name: 'fs', instance: fsPromises },
				{ name: 'logger', instance: logger },
				{ name: 'constants', instance: constants },
				{ name: 'featureFlags', instance: featureFlags },
				{ name: 'getRedisClient', instance: getRedisClient },
				{ name: 'getSequelizeInstance', instance: getSequelizeInstance }
			],
			logger || console
		);
		let options;
		if (featureFlags.enableSslFlag) {
			logger.info(
				`SSL_FLAG is set to true, setting up HTTPS server on port ${port}`
			);
			options = await declareOptions({
				sops,
				fs: fsPromises,
				logger,
				constants,
				DECRYPT_KEYS: featureFlags.decryptKeysFlag,
				SSL_KEY: environmentVariables.serverSslKeyPath || null,
				SSL_CERT: environmentVariables.serverSslCertPath || null,
				ciphers
			});
		} else {
			logger.info('SSL_FLAG is set to false, setting up HTTP server');
		}
		async function startServer() {
			let shuttingDown = false;
			const connections = new Set();
			const server = options
				? https.createServer(options, app)
				: http.createServer(app);
			server.on('connection', conn => {
				connections.add(conn);
				conn.on('close', () => {
					connections.delete(conn);
				});
			});
			server.listen(port, () => {
				logger.info(`Server running on port ${port}`);
			});
			app.use((req, res, next) => {
				if (shuttingDown) {
					res.setHeader('Connection', 'close');
					return res.status(503).send('Server is shutting down.');
				}
				return next();
			});
			gracefulShutdown(server, {
				signals: 'SIGINT SIGTERM',
				timeout: 30000,
				onShutdown: async () => {
					logger.info('Cleaning up resources before shutdown');
					shuttingDown = true;
					await flushInMemoryCache(logger, featureFlags);
					logger.info('Pre-shutdown tasks complete');
					server.keepAliveTimeout = 1;
					const sequelize = getSequelizeInstance();
					try {
						await sequelize.close();
						logger.info('Database connection closed');
					} catch (error) {
						processError(error, logger);
					}
					if (featureFlags.enableRedisFlag) {
						logger.info('Closing Redis connection');
						try {
							const redisClient = await getRedisClient();
							if (redisClient) {
								await redisClient.quit();
								logger.info('Redis connection closed');
							}
						} catch (error) {
							processError(error, logger);
						}
					}
					try {
						await new Promise(resolve => {
							logger.close();
							resolve();
						});
						logger.info('Logger closed');
					} catch (error) {
						processError(error, logger);
					}
				},
				finally: async () => {
					logger.info('Waiting for all connections to close...');
					const waitForConnectionsToClose = new Promise(resolve => {
						const timeout = setTimeout(() => {
							logger.warn(
								'Forcing shutdown: some connections did not close in time'
							);
							connections.forEach(con => con.destroy());
							resolve();
						}, 30000); // 30s timeout
						const checkConnections = setInterval(() => {
							if (connections.size === 0) {
								clearInterval(checkConnections);
								clearTimeout(timeout);
								resolve();
							}
						}, 100);
					});
					await waitForConnectionsToClose;
					logger.info(
						'All connections closed. Shutting down server.'
					);
				}
			});
		}
		return { startServer };
	} catch (error) {
		processError(error, logger || console);
		throw new Error(
			`Error occurred in setupHttpServer(): ${error instanceof Error ? error.message : error}`
		);
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3pDLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDMUIsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sZ0JBQWdCLE1BQU0sd0JBQXdCLENBQUM7QUFHdEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDcEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXBELE9BQU8sRUFBRSxvQkFBb0IsRUFBZ0IsTUFBTSw0QkFBNEIsQ0FBQztBQUloRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUF3QmhELE1BQU0sSUFBSSxHQUFHLG9CQUFvQixDQUFDLFVBQVUsQ0FBQztBQUU3QyxNQUFNLE9BQU8sR0FBRztJQUNmLCtCQUErQjtJQUMvQiw2QkFBNkI7SUFDN0IsK0JBQStCO0lBQy9CLDZCQUE2QjtJQUM3QiwrQkFBK0I7SUFDL0IsNkJBQTZCO0lBQzdCLDJCQUEyQjtJQUMzQix5QkFBeUI7SUFDekIsMkJBQTJCO0lBQzNCLHlCQUF5QjtDQUN6QixDQUFDO0FBRUYsS0FBSyxVQUFVLGNBQWMsQ0FBQyxFQUM3QixJQUFJLEVBQ0osRUFBRSxFQUNGLE1BQU0sRUFDTixTQUFTLEVBQ1QsWUFBWSxFQUNaLE9BQU8sRUFDUCxRQUFRLEVBQ1IsT0FBTyxFQVVQO0lBQ0EsSUFBSSxDQUFDO1FBQ0osb0JBQW9CLENBQ25CO1lBQ0MsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7WUFDaEMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUU7WUFD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QixDQUFDLENBQUM7Z0NBQ2hDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQ0FDdEIsT0FBTyxFQUFFLENBQUM7NEJBQ1gsQ0FBQzt3QkFDRixDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7b0JBQ1QsQ0FBQyxDQUNELENBQUM7b0JBRUYsTUFBTSx5QkFBeUIsQ0FBQztvQkFDaEMsTUFBTSxDQUFDLElBQUksQ0FDViwrQ0FBK0MsQ0FDL0MsQ0FBQztnQkFDSCxDQUFDO2FBQ0QsQ0FBQyxDQUFDO1FBQ0osQ0FBQztRQUVELE9BQU8sRUFBRSxXQUFXLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixZQUFZLENBQUMsS0FBSyxFQUFFLE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQztRQUN2QyxNQUFNLElBQUksS0FBSyxDQUNkLHdDQUF3QyxLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FDeEYsQ0FBQztJQUNILENBQUM7QUFDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhlY1N5bmMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCB7IGNvbnN0YW50cyBhcyBjcnlwdG9Db25zdGFudHMgfSBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IHsgQXBwbGljYXRpb24gfSBmcm9tICdleHByZXNzJztcbmltcG9ydCBodHRwIGZyb20gJ2h0dHAnO1xuaW1wb3J0IGh0dHBzIGZyb20gJ2h0dHBzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGdyYWNlZnVsU2h1dGRvd24gZnJvbSAnaHR0cC1ncmFjZWZ1bC1zaHV0ZG93bic7XG5pbXBvcnQgeyBTZXF1ZWxpemUgfSBmcm9tICdzZXF1ZWxpemUnO1xuaW1wb3J0IHsgU2VjdXJlQ29udGV4dE9wdGlvbnMgfSBmcm9tICd0bHMnO1xuaW1wb3J0IHsgdmFsaWRhdGVEZXBlbmRlbmNpZXMgfSBmcm9tICcuL3V0aWxzL3ZhbGlkYXRlRGVwZW5kZW5jaWVzJztcbmltcG9ydCB7IHByb2Nlc3NFcnJvciB9IGZyb20gJy4vdXRpbHMvcHJvY2Vzc0Vycm9yJztcbmltcG9ydCBTb3BzRGVwZW5kZW5jaWVzIGZyb20gJy4vdXRpbHMvc29wcyc7XG5pbXBvcnQgeyBlbnZpcm9ubWVudFZhcmlhYmxlcywgRmVhdHVyZUZsYWdzIH0gZnJvbSAnLi9jb25maWcvZW52aXJvbm1lbnRDb25maWcnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi9jb25maWcvbG9nZ2VyJztcbmltcG9ydCB7IFJlZGlzQ2xpZW50VHlwZSB9IGZyb20gJ3JlZGlzJztcbmltcG9ydCBuZXQgZnJvbSAnbmV0JztcbmltcG9ydCB7IGdldFJlZGlzQ2xpZW50IH0gZnJvbSAnLi9jb25maWcvcmVkaXMnO1xuXG5pbnRlcmZhY2UgU2V0dXBIdHRwU2VydmVyUGFyYW1zIHtcblx0YXBwOiBBcHBsaWNhdGlvbjtcblx0c29wczogdHlwZW9mIFNvcHNEZXBlbmRlbmNpZXM7XG5cdGZzOiB0eXBlb2YgaW1wb3J0KCdmcycpLnByb21pc2VzO1xuXHRsb2dnZXI6IExvZ2dlcjtcblx0Y29uc3RhbnRzOiB0eXBlb2YgY3J5cHRvQ29uc3RhbnRzO1xuXHRmZWF0dXJlRmxhZ3M6IEZlYXR1cmVGbGFncztcblx0Z2V0UmVkaXNDbGllbnQ6ICgpID0+IFJlZGlzQ2xpZW50VHlwZSB8IG51bGw7XG5cdGdldFNlcXVlbGl6ZUluc3RhbmNlOiAoKSA9PiBTZXF1ZWxpemU7XG59XG5cbmludGVyZmFjZSBTZXR1cEh0dHBTZXJ2ZXJSZXR1cm4ge1xuXHRzdGFydFNlcnZlcjogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbn1cblxuaW50ZXJmYWNlIFNTTEtleXMge1xuXHRrZXk6IHN0cmluZztcblx0Y2VydDogc3RyaW5nO1xufVxuXG50eXBlIE9wdGlvbnMgPSBTZWN1cmVDb250ZXh0T3B0aW9ucztcblxuY29uc3QgcG9ydCA9IGVudmlyb25tZW50VmFyaWFibGVzLnNlcnZlclBvcnQ7XG5cbmNvbnN0IGNpcGhlcnMgPSBbXG5cdCdFQ0RIRS1FQ0RTQS1BRVMyNTYtR0NNLVNIQTM4NCcsXG5cdCdFQ0RIRS1SU0EtQUVTMjU2LUdDTS1TSEEzODQnLFxuXHQnRUNESEUtRUNEU0EtQ0hBQ0hBMjAtUE9MWTEzMDUnLFxuXHQnRUNESEUtUlNBLUNIQUNIQTIwLVBPTFkxMzA1Jyxcblx0J0VDREhFLUVDRFNBLUFFUzEyOC1HQ00tU0hBMjU2Jyxcblx0J0VDREhFLVJTQS1BRVMxMjgtR0NNLVNIQTI1NicsXG5cdCdFQ0RIRS1FQ0RTQS1BRVMyNTYtU0hBMzg0Jyxcblx0J0VDREhFLVJTQS1BRVMyNTYtU0hBMzg0Jyxcblx0J0VDREhFLUVDRFNBLUFFUzEyOC1TSEEyNTYnLFxuXHQnRUNESEUtUlNBLUFFUzEyOC1TSEEyNTYnXG5dO1xuXG5hc3luYyBmdW5jdGlvbiBkZWNsYXJlT3B0aW9ucyh7XG5cdHNvcHMsXG5cdGZzLFxuXHRsb2dnZXIsXG5cdGNvbnN0YW50cyxcblx0REVDUllQVF9LRVlTLFxuXHRTU0xfS0VZLFxuXHRTU0xfQ0VSVCxcblx0Y2lwaGVyc1xufToge1xuXHRzb3BzOiB0eXBlb2YgU29wc0RlcGVuZGVuY2llcztcblx0ZnM6IHR5cGVvZiBpbXBvcnQoJ2ZzJykucHJvbWlzZXM7XG5cdGxvZ2dlcjogTG9nZ2VyO1xuXHRjb25zdGFudHM6IHR5cGVvZiBpbXBvcnQoJ2NyeXB0bycpLmNvbnN0YW50cztcblx0REVDUllQVF9LRVlTOiBib29sZWFuO1xuXHRTU0xfS0VZOiBzdHJpbmcgfCBudWxsO1xuXHRTU0xfQ0VSVDogc3RyaW5nIHwgbnVsbDtcblx0Y2lwaGVyczogc3RyaW5nW107XG59KTogUHJvbWlzZTxPcHRpb25zPiB7XG5cdHRyeSB7XG5cdFx0dmFsaWRhdGVEZXBlbmRlbmNpZXMoXG5cdFx0XHRbXG5cdFx0XHRcdHsgbmFtZTogJ3NvcHMnLCBpbnN0YW5jZTogc29wcyB9LFxuXHRcdFx0XHR7IG5hbWU6ICdmcycsIGluc3RhbmNlOiBmcyB9LFxuXHRcdFx0XHR7IG5hbWU6ICdsb2dnZXInLCBpbnN0YW5jZTogbG9nZ2VyIH0sXG5cdFx0XHRcdHsgbmFtZTogJ2NvbnN0YW50cycsIGluc3RhbmNlOiBjb25zdGFudHMgfSxcblx0XHRcdFx0eyBuYW1lOiAnREVDUllQVF9LRVlTJywgaW5zdGFuY2U6IERFQ1JZUFRfS0VZUyB9LFxuXHRcdFx0XHR7IG5hbWU6ICdTU0xfS0VZJywgaW5zdGFuY2U6IFNTTF9LRVkgfSxcblx0XHRcdFx0eyBuYW1lOiAnU1NMX0NFUlQnLCBpbnN0YW5jZTogU1NMX0NFUlQgfSxcblx0XHRcdFx0eyBuYW1lOiAnY2lwaGVycycsIGluc3RhbmNlOiBjaXBoZXJzIH1cblx0XHRcdF0sXG5cdFx0XHRsb2dnZXIgfHwgY29uc29sZVxuXHRcdCk7XG5cblx0XHRsZXQgc3NsS2V5czogU1NMS2V5cztcblxuXHRcdGlmIChERUNSWVBUX0tFWVMpIHtcblx0XHRcdHNzbEtleXMgPSBhd2FpdCBzb3BzLmdldFNTTEtleXMoe1xuXHRcdFx0XHRsb2dnZXIsXG5cdFx0XHRcdGV4ZWNTeW5jLFxuXHRcdFx0XHRnZXREaXJlY3RvcnlQYXRoOiAoKSA9PiBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSlcblx0XHRcdH0pO1xuXHRcdFx0bG9nZ2VyLmluZm8oJ1NTTCBLZXlzIHJldHJpZXZlZCcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIVNTTF9LRVkgfHwgIVNTTF9DRVJUKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0XHQnU1NMX0tFWSBvciBTU0xfQ0VSVCBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyBub3Qgc2V0J1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3Qga2V5ID0gYXdhaXQgZnMucmVhZEZpbGUoU1NMX0tFWSwgJ3V0ZjgnKTtcblx0XHRcdGNvbnN0IGNlcnQgPSBhd2FpdCBmcy5yZWFkRmlsZShTU0xfQ0VSVCwgJ3V0ZjgnKTtcblx0XHRcdHNzbEtleXMgPSB7IGtleSwgY2VydCB9O1xuXHRcdFx0bG9nZ2VyLmluZm8oJ1VzaW5nIHVuZW5jcnlwdGVkIFNTTCBLZXlzIGZyb20gZW52aXJvbm1lbnQgZmlsZXMnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0a2V5OiBzc2xLZXlzLmtleSxcblx0XHRcdGNlcnQ6IHNzbEtleXMuY2VydCxcblx0XHRcdHNlY3VyZU9wdGlvbnM6XG5cdFx0XHRcdGNvbnN0YW50cy5TU0xfT1BfTk9fVExTdjEgfCBjb25zdGFudHMuU1NMX09QX05PX1RMU3YxXzEsXG5cdFx0XHRjaXBoZXJzOiBjaXBoZXJzLmpvaW4oJzonKSxcblx0XHRcdGhvbm9yQ2lwaGVyT3JkZXI6IHRydWVcblx0XHR9O1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdHByb2Nlc3NFcnJvcihlcnJvciwgbG9nZ2VyIHx8IGNvbnNvbGUpO1xuXHRcdHRocm93IGVycm9yO1xuXHR9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGZsdXNoSW5NZW1vcnlDYWNoZShcblx0bG9nZ2VyOiBMb2dnZXIsXG5cdGZlYXR1cmVGbGFnczogRmVhdHVyZUZsYWdzXG4pOiBQcm9taXNlPHZvaWQ+IHtcblx0bG9nZ2VyLmluZm8oJ0ZsdXNoaW5nIGluLW1lbW9yeSBjYWNoZScpO1xuXHRjb25zdCByZWRpc0NsaWVudCA9IGF3YWl0IGdldFJlZGlzQ2xpZW50KCk7XG5cblx0aWYgKGZlYXR1cmVGbGFncy5lbmFibGVSZWRpc0ZsYWcpIHtcblx0XHRpZiAocmVkaXNDbGllbnQpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGF3YWl0IHJlZGlzQ2xpZW50LmZsdXNoQWxsKCk7IC8vIFVzZSB0aGUgUmVkaXMgY2xpZW50IGluc3RhbmNlXG5cdFx0XHRcdGxvZ2dlci5pbmZvKCdJbi1tZW1vcnkgY2FjaGUgZmx1c2hlZCcpO1xuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0bG9nZ2VyLmVycm9yKCdFcnJvciBmbHVzaGluZyBSZWRpcyBjYWNoZScsIGVycm9yKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0bG9nZ2VyLndhcm4oJ1JlZGlzIGNsaWVudCBpcyBub3QgYXZhaWxhYmxlIGZvciBjYWNoZSBmbHVzaCcpO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRsb2dnZXIuaW5mbygnTm8gY2FjaGUgdG8gZmx1c2ggKFJlZGlzIGlzIGRpc2FibGVkKScpO1xuXHR9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZXR1cEh0dHBTZXJ2ZXIoe1xuXHRhcHAsXG5cdHNvcHMsXG5cdGZzOiBmc1Byb21pc2VzLFxuXHRsb2dnZXIsXG5cdGNvbnN0YW50cyxcblx0ZmVhdHVyZUZsYWdzLFxuXHRnZXRSZWRpc0NsaWVudCxcblx0Z2V0U2VxdWVsaXplSW5zdGFuY2Vcbn06IFNldHVwSHR0cFNlcnZlclBhcmFtcyk6IFByb21pc2U8U2V0dXBIdHRwU2VydmVyUmV0dXJuIHwgdW5kZWZpbmVkPiB7XG5cdHRyeSB7XG5cdFx0bG9nZ2VyLmluZm8oJ1NldHRpbmcgdXAgdGhlIEhUVFAvSFRUUFMgc2VydmVyJyk7XG5cblx0XHR2YWxpZGF0ZURlcGVuZGVuY2llcyhcblx0XHRcdFtcblx0XHRcdFx0eyBuYW1lOiAnYXBwJywgaW5zdGFuY2U6IGFwcCB9LFxuXHRcdFx0XHR7IG5hbWU6ICdzb3BzJywgaW5zdGFuY2U6IHNvcHMgfSxcblx0XHRcdFx0eyBuYW1lOiAnZnMnLCBpbnN0YW5jZTogZnNQcm9taXNlcyB9LFxuXHRcdFx0XHR7IG5hbWU6ICdsb2dnZXInLCBpbnN0YW5jZTogbG9nZ2VyIH0sXG5cdFx0XHRcdHsgbmFtZTogJ2NvbnN0YW50cycsIGluc3RhbmNlOiBjb25zdGFudHMgfSxcblx0XHRcdFx0eyBuYW1lOiAnZmVhdHVyZUZsYWdzJywgaW5zdGFuY2U6IGZlYXR1cmVGbGFncyB9LFxuXHRcdFx0XHR7IG5hbWU6ICdnZXRSZWRpc0NsaWVudCcsIGluc3RhbmNlOiBnZXRSZWRpc0NsaWVudCB9LFxuXHRcdFx0XHR7IG5hbWU6ICdnZXRTZXF1ZWxpemVJbnN0YW5jZScsIGluc3RhbmNlOiBnZXRTZXF1ZWxpemVJbnN0YW5jZSB9XG5cdFx0XHRdLFxuXHRcdFx0bG9nZ2VyIHx8IGNvbnNvbGVcblx0XHQpO1xuXG5cdFx0bGV0IG9wdGlvbnM6IE9wdGlvbnMgfCB1bmRlZmluZWQ7XG5cblx0XHRpZiAoZmVhdHVyZUZsYWdzLmVuYWJsZVNzbEZsYWcpIHtcblx0XHRcdGxvZ2dlci5pbmZvKFxuXHRcdFx0XHRgU1NMX0ZMQUcgaXMgc2V0IHRvIHRydWUsIHNldHRpbmcgdXAgSFRUUFMgc2VydmVyIG9uIHBvcnQgJHtwb3J0fWBcblx0XHRcdCk7XG5cdFx0XHRvcHRpb25zID0gYXdhaXQgZGVjbGFyZU9wdGlvbnMoe1xuXHRcdFx0XHRzb3BzLFxuXHRcdFx0XHRmczogZnNQcm9taXNlcyxcblx0XHRcdFx0bG9nZ2VyLFxuXHRcdFx0XHRjb25zdGFudHMsXG5cdFx0XHRcdERFQ1JZUFRfS0VZUzogZmVhdHVyZUZsYWdzLmRlY3J5cHRLZXlzRmxhZyxcblx0XHRcdFx0U1NMX0tFWTogZW52aXJvbm1lbnRWYXJpYWJsZXMuc2VydmVyU3NsS2V5UGF0aCB8fCBudWxsLFxuXHRcdFx0XHRTU0xfQ0VSVDogZW52aXJvbm1lbnRWYXJpYWJsZXMuc2VydmVyU3NsQ2VydFBhdGggfHwgbnVsbCxcblx0XHRcdFx0Y2lwaGVyc1xuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxvZ2dlci5pbmZvKCdTU0xfRkxBRyBpcyBzZXQgdG8gZmFsc2UsIHNldHRpbmcgdXAgSFRUUCBzZXJ2ZXInKTtcblx0XHR9XG5cblx0XHRhc3luYyBmdW5jdGlvbiBzdGFydFNlcnZlcigpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRcdGxldCBzaHV0dGluZ0Rvd24gPSBmYWxzZTtcblx0XHRcdGNvbnN0IGNvbm5lY3Rpb25zOiBTZXQ8bmV0LlNvY2tldD4gPSBuZXcgU2V0KCk7XG5cblx0XHRcdGNvbnN0IHNlcnZlciA9IG9wdGlvbnNcblx0XHRcdFx0PyBodHRwcy5jcmVhdGVTZXJ2ZXIob3B0aW9ucywgYXBwKVxuXHRcdFx0XHQ6IGh0dHAuY3JlYXRlU2VydmVyKGFwcCk7XG5cblx0XHRcdHNlcnZlci5vbignY29ubmVjdGlvbicsIGNvbm4gPT4ge1xuXHRcdFx0XHRjb25uZWN0aW9ucy5hZGQoY29ubik7XG5cdFx0XHRcdGNvbm4ub24oJ2Nsb3NlJywgKCkgPT4ge1xuXHRcdFx0XHRcdGNvbm5lY3Rpb25zLmRlbGV0ZShjb25uKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0c2VydmVyLmxpc3Rlbihwb3J0LCAoKSA9PiB7XG5cdFx0XHRcdGxvZ2dlci5pbmZvKGBTZXJ2ZXIgcnVubmluZyBvbiBwb3J0ICR7cG9ydH1gKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRhcHAudXNlKChyZXEsIHJlcywgbmV4dCkgPT4ge1xuXHRcdFx0XHRpZiAoc2h1dHRpbmdEb3duKSB7XG5cdFx0XHRcdFx0cmVzLnNldEhlYWRlcignQ29ubmVjdGlvbicsICdjbG9zZScpO1xuXHRcdFx0XHRcdHJldHVybiByZXMuc3RhdHVzKDUwMykuc2VuZCgnU2VydmVyIGlzIHNodXR0aW5nIGRvd24uJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG5leHQoKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRncmFjZWZ1bFNodXRkb3duKHNlcnZlciwge1xuXHRcdFx0XHRzaWduYWxzOiAnU0lHSU5UIFNJR1RFUk0nLFxuXHRcdFx0XHR0aW1lb3V0OiAzMDAwMCxcblx0XHRcdFx0b25TaHV0ZG93bjogYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRcdGxvZ2dlci5pbmZvKCdDbGVhbmluZyB1cCByZXNvdXJjZXMgYmVmb3JlIHNodXRkb3duJyk7XG5cdFx0XHRcdFx0c2h1dHRpbmdEb3duID0gdHJ1ZTtcblxuXHRcdFx0XHRcdGF3YWl0IGZsdXNoSW5NZW1vcnlDYWNoZShsb2dnZXIsIGZlYXR1cmVGbGFncyk7XG5cblx0XHRcdFx0XHRsb2dnZXIuaW5mbygnUHJlLXNodXRkb3duIHRhc2tzIGNvbXBsZXRlJyk7XG5cdFx0XHRcdFx0c2VydmVyLmtlZXBBbGl2ZVRpbWVvdXQgPSAxO1xuXG5cdFx0XHRcdFx0Y29uc3Qgc2VxdWVsaXplOiBTZXF1ZWxpemUgPSBnZXRTZXF1ZWxpemVJbnN0YW5jZSgpO1xuXG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGF3YWl0IHNlcXVlbGl6ZS5jbG9zZSgpO1xuXHRcdFx0XHRcdFx0bG9nZ2VyLmluZm8oJ0RhdGFiYXNlIGNvbm5lY3Rpb24gY2xvc2VkJyk7XG5cdFx0XHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0XHRcdHByb2Nlc3NFcnJvcihlcnJvciwgbG9nZ2VyKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoZmVhdHVyZUZsYWdzLmVuYWJsZVJlZGlzRmxhZykge1xuXHRcdFx0XHRcdFx0bG9nZ2VyLmluZm8oJ0Nsb3NpbmcgUmVkaXMgY29ubmVjdGlvbicpO1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgcmVkaXNDbGllbnQgPSBhd2FpdCBnZXRSZWRpc0NsaWVudCgpO1xuXHRcdFx0XHRcdFx0XHRpZiAocmVkaXNDbGllbnQpIHtcblx0XHRcdFx0XHRcdFx0XHRhd2FpdCByZWRpc0NsaWVudC5xdWl0KCk7XG5cdFx0XHRcdFx0XHRcdFx0bG9nZ2VyLmluZm8oJ1JlZGlzIGNvbm5lY3Rpb24gY2xvc2VkJyk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRcdHByb2Nlc3NFcnJvcihlcnJvciwgbG9nZ2VyKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0YXdhaXQgbmV3IFByb21pc2U8dm9pZD4ocmVzb2x2ZSA9PiB7XG5cdFx0XHRcdFx0XHRcdGxvZ2dlci5jbG9zZSgpO1xuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdGxvZ2dlci5pbmZvKCdMb2dnZXIgY2xvc2VkJyk7XG5cdFx0XHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0XHRcdHByb2Nlc3NFcnJvcihlcnJvciwgbG9nZ2VyKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGZpbmFsbHk6IGFzeW5jICgpID0+IHtcblx0XHRcdFx0XHRsb2dnZXIuaW5mbygnV2FpdGluZyBmb3IgYWxsIGNvbm5lY3Rpb25zIHRvIGNsb3NlLi4uJyk7XG5cblx0XHRcdFx0XHRjb25zdCB3YWl0Rm9yQ29ubmVjdGlvbnNUb0Nsb3NlID0gbmV3IFByb21pc2U8dm9pZD4oXG5cdFx0XHRcdFx0XHRyZXNvbHZlID0+IHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdGxvZ2dlci53YXJuKFxuXHRcdFx0XHRcdFx0XHRcdFx0J0ZvcmNpbmcgc2h1dGRvd246IHNvbWUgY29ubmVjdGlvbnMgZGlkIG5vdCBjbG9zZSBpbiB0aW1lJ1xuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0Y29ubmVjdGlvbnMuZm9yRWFjaChjb24gPT4gY29uLmRlc3Ryb3koKSk7XG5cdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0XHRcdFx0XHR9LCAzMDAwMCk7IC8vIDMwcyB0aW1lb3V0XG5cblx0XHRcdFx0XHRcdFx0Y29uc3QgY2hlY2tDb25uZWN0aW9ucyA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoY29ubmVjdGlvbnMuc2l6ZSA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2xlYXJJbnRlcnZhbChjaGVja0Nvbm5lY3Rpb25zKTtcblx0XHRcdFx0XHRcdFx0XHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0sIDEwMCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdGF3YWl0IHdhaXRGb3JDb25uZWN0aW9uc1RvQ2xvc2U7XG5cdFx0XHRcdFx0bG9nZ2VyLmluZm8oXG5cdFx0XHRcdFx0XHQnQWxsIGNvbm5lY3Rpb25zIGNsb3NlZC4gU2h1dHRpbmcgZG93biBzZXJ2ZXIuJ1xuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiB7IHN0YXJ0U2VydmVyIH07XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cHJvY2Vzc0Vycm9yKGVycm9yLCBsb2dnZXIgfHwgY29uc29sZSk7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0YEVycm9yIG9jY3VycmVkIGluIHNldHVwSHR0cFNlcnZlcigpOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogZXJyb3J9YFxuXHRcdCk7XG5cdH1cbn1cbiJdfQ==
