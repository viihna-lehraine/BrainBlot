import setupLogger from '../config/logger.js';
const logger = await setupLogger();
// Retrieve all entries for any model
export const getEntries = Model => async (req, res) => {
	try {
		const entries = await Model.findAll();
		res.status(200).json(entries);
	} catch (error) {
		logger.error(error);
		res.status(500).json({
			error: `Failed to fetch entries from ${Model.name}`
		});
	}
};
// Create a new entry for any model
export const createEntry = Model => async (req, res) => {
	try {
		const newEntry = await Model.create(req.body);
		res.status(201).json(newEntry);
	} catch (error) {
		logger.error(error);
		res.status(400).json({
			error: `Failed to create entry in ${Model.name}`
		});
	}
};
// Update an existing entry for any model
export const updateEntry = Model => async (req, res) => {
	try {
		const { id } = req.params;
		const updatedEntry = await Model.update(req.body, {
			where: { id }
		});
		if (updatedEntry[0] === 0) {
			res.status(404).json({
				error: `${Model.name} entry not found`
			});
			return;
		}
		res.status(200).json({ message: `${Model.name} entry updated` });
	} catch (error) {
		logger.error(error);
		res.status(400).json({
			error: `Failed to update entry in ${Model.name}`
		});
	}
};
// Delete an entry for any model
export const deleteEntry = Model => async (req, res) => {
	try {
		const { id } = req.params;
		const deleted = await Model.destroy({
			where: { id }
		});
		if (!deleted) {
			res.status(404).json({
				error: `${Model.name} entry not found`
			});
			return;
		}
		res.status(200).json({ message: `${Model.name} entry deleted` });
	} catch (error) {
		logger.error(error);
		res.status(500).json({
			error: `Failed to delete entry from ${Model.name}`
		});
	}
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWxDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnRyb2xsZXJzL21vZGVsQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLFdBQVcsTUFBTSxrQkFBa0IsQ0FBQztBQU8zQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFdBQVcsRUFBRSxDQUFDO0FBRW5DLHFDQUFxQztBQUNyQyxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQ3RCLENBQXNCLEtBR3JCLEVBQW9ELEVBQUUsQ0FDdkQsS0FBSyxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQWlCLEVBQUU7SUFDcEQsSUFBSSxDQUFDO1FBQ0osTUFBTSxPQUFPLEdBQUcsTUFBTSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDdEMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNwQixLQUFLLEVBQUUsZ0NBQWdDLEtBQUssQ0FBQyxJQUFJLEVBQUU7U0FDbkQsQ0FBQyxDQUFDO0lBQ0osQ0FBQztBQUNGLENBQUMsQ0FBQztBQUVILG1DQUFtQztBQUNuQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQ3ZCLENBQXNCLEtBR3JCLEVBQW9ELEVBQUUsQ0FDdkQsS0FBSyxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQWlCLEVBQUU7SUFDcEQsSUFBSSxDQUFDO1FBQ0osTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5QyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3BCLEtBQUssRUFBRSw2QkFBNkIsS0FBSyxDQUFDLElBQUksRUFBRTtTQUNoRCxDQUFDLENBQUM7SUFDSixDQUFDO0FBQ0YsQ0FBQyxDQUFDO0FBRUgseUNBQXlDO0FBQ3pDLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FDdkIsQ0FBc0IsS0FNckIsRUFBb0QsRUFBRSxDQUN2RCxLQUFLLEVBQUUsR0FBWSxFQUFFLEdBQWEsRUFBaUIsRUFBRTtJQUNwRCxJQUFJLENBQUM7UUFDSixNQUFNLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztRQUMxQixNQUFNLFlBQVksR0FBRyxNQUFNLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRTtZQUNqRCxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQXFCO1NBQ2hDLENBQUMsQ0FBQztRQUNILElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQzNCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNwQixLQUFLLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxrQkFBa0I7YUFDdEMsQ0FBQyxDQUFDO1lBQ0gsT0FBTztRQUNSLENBQUM7UUFDRCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLGdCQUFnQixFQUFFLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3BCLEtBQUssRUFBRSw2QkFBNkIsS0FBSyxDQUFDLElBQUksRUFBRTtTQUNoRCxDQUFDLENBQUM7SUFDSixDQUFDO0FBQ0YsQ0FBQyxDQUFDO0FBRUgsZ0NBQWdDO0FBQ2hDLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FDdkIsQ0FBc0IsS0FHckIsRUFBb0QsRUFBRSxDQUN2RCxLQUFLLEVBQUUsR0FBWSxFQUFFLEdBQWEsRUFBaUIsRUFBRTtJQUNwRCxJQUFJLENBQUM7UUFDSixNQUFNLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztRQUMxQixNQUFNLE9BQU8sR0FBRyxNQUFNLEtBQUssQ0FBQyxPQUFPLENBQUM7WUFDbkMsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFxQjtTQUNoQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDZCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDcEIsS0FBSyxFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksa0JBQWtCO2FBQ3RDLENBQUMsQ0FBQztZQUNILE9BQU87UUFDUixDQUFDO1FBQ0QsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNwQixLQUFLLEVBQUUsK0JBQStCLEtBQUssQ0FBQyxJQUFJLEVBQUU7U0FDbEQsQ0FBQyxDQUFDO0lBQ0osQ0FBQztBQUNGLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBNb2RlbCwgV2hlcmVPcHRpb25zIH0gZnJvbSAnc2VxdWVsaXplJztcbmltcG9ydCBzZXR1cExvZ2dlciBmcm9tICcuLi9jb25maWcvbG9nZ2VyJztcblxuLy8gRGVmaW5lIGEgZ2VuZXJpYyB0eXBlIGZvciBtb2RlbHNcbmludGVyZmFjZSBNb2RlbFR5cGUgZXh0ZW5kcyBNb2RlbCB7XG5cdGlkPzogbnVtYmVyIHwgc3RyaW5nO1xufVxuXG5jb25zdCBsb2dnZXIgPSBhd2FpdCBzZXR1cExvZ2dlcigpO1xuXG4vLyBSZXRyaWV2ZSBhbGwgZW50cmllcyBmb3IgYW55IG1vZGVsXG5leHBvcnQgY29uc3QgZ2V0RW50cmllcyA9XG5cdDxUIGV4dGVuZHMgTW9kZWxUeXBlPihNb2RlbDoge1xuXHRcdG5ldyAoKTogVDtcblx0XHRmaW5kQWxsOiAoKSA9PiBQcm9taXNlPFRbXT47XG5cdH0pOiAoKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4gUHJvbWlzZTx2b2lkPikgPT5cblx0YXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSk6IFByb21pc2U8dm9pZD4gPT4ge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCBlbnRyaWVzID0gYXdhaXQgTW9kZWwuZmluZEFsbCgpO1xuXHRcdFx0cmVzLnN0YXR1cygyMDApLmpzb24oZW50cmllcyk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGxvZ2dlci5lcnJvcihlcnJvcik7XG5cdFx0XHRyZXMuc3RhdHVzKDUwMCkuanNvbih7XG5cdFx0XHRcdGVycm9yOiBgRmFpbGVkIHRvIGZldGNoIGVudHJpZXMgZnJvbSAke01vZGVsLm5hbWV9YFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9O1xuXG4vLyBDcmVhdGUgYSBuZXcgZW50cnkgZm9yIGFueSBtb2RlbFxuZXhwb3J0IGNvbnN0IGNyZWF0ZUVudHJ5ID1cblx0PFQgZXh0ZW5kcyBNb2RlbFR5cGU+KE1vZGVsOiB7XG5cdFx0bmV3ICgpOiBUO1xuXHRcdGNyZWF0ZTogKHZhbHVlczogb2JqZWN0KSA9PiBQcm9taXNlPFQ+O1xuXHR9KTogKChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IFByb21pc2U8dm9pZD4pID0+XG5cdGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpOiBQcm9taXNlPHZvaWQ+ID0+IHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgbmV3RW50cnkgPSBhd2FpdCBNb2RlbC5jcmVhdGUocmVxLmJvZHkpO1xuXHRcdFx0cmVzLnN0YXR1cygyMDEpLmpzb24obmV3RW50cnkpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRsb2dnZXIuZXJyb3IoZXJyb3IpO1xuXHRcdFx0cmVzLnN0YXR1cyg0MDApLmpzb24oe1xuXHRcdFx0XHRlcnJvcjogYEZhaWxlZCB0byBjcmVhdGUgZW50cnkgaW4gJHtNb2RlbC5uYW1lfWBcblx0XHRcdH0pO1xuXHRcdH1cblx0fTtcblxuLy8gVXBkYXRlIGFuIGV4aXN0aW5nIGVudHJ5IGZvciBhbnkgbW9kZWxcbmV4cG9ydCBjb25zdCB1cGRhdGVFbnRyeSA9XG5cdDxUIGV4dGVuZHMgTW9kZWxUeXBlPihNb2RlbDoge1xuXHRcdG5ldyAoKTogVDtcblx0XHR1cGRhdGU6IChcblx0XHRcdHZhbHVlczogb2JqZWN0LFxuXHRcdFx0b3B0aW9uczogeyB3aGVyZTogV2hlcmVPcHRpb25zPFQ+IH1cblx0XHQpID0+IFByb21pc2U8W251bWJlciwgVFtdXT47XG5cdH0pOiAoKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4gUHJvbWlzZTx2b2lkPikgPT5cblx0YXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSk6IFByb21pc2U8dm9pZD4gPT4ge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCB7IGlkIH0gPSByZXEucGFyYW1zO1xuXHRcdFx0Y29uc3QgdXBkYXRlZEVudHJ5ID0gYXdhaXQgTW9kZWwudXBkYXRlKHJlcS5ib2R5LCB7XG5cdFx0XHRcdHdoZXJlOiB7IGlkIH0gYXMgV2hlcmVPcHRpb25zPFQ+XG5cdFx0XHR9KTtcblx0XHRcdGlmICh1cGRhdGVkRW50cnlbMF0gPT09IDApIHtcblx0XHRcdFx0cmVzLnN0YXR1cyg0MDQpLmpzb24oe1xuXHRcdFx0XHRcdGVycm9yOiBgJHtNb2RlbC5uYW1lfSBlbnRyeSBub3QgZm91bmRgXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRyZXMuc3RhdHVzKDIwMCkuanNvbih7IG1lc3NhZ2U6IGAke01vZGVsLm5hbWV9IGVudHJ5IHVwZGF0ZWRgIH0pO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRsb2dnZXIuZXJyb3IoZXJyb3IpO1xuXHRcdFx0cmVzLnN0YXR1cyg0MDApLmpzb24oe1xuXHRcdFx0XHRlcnJvcjogYEZhaWxlZCB0byB1cGRhdGUgZW50cnkgaW4gJHtNb2RlbC5uYW1lfWBcblx0XHRcdH0pO1xuXHRcdH1cblx0fTtcblxuLy8gRGVsZXRlIGFuIGVudHJ5IGZvciBhbnkgbW9kZWxcbmV4cG9ydCBjb25zdCBkZWxldGVFbnRyeSA9XG5cdDxUIGV4dGVuZHMgTW9kZWxUeXBlPihNb2RlbDoge1xuXHRcdG5ldyAoKTogVDtcblx0XHRkZXN0cm95OiAob3B0aW9uczogeyB3aGVyZTogV2hlcmVPcHRpb25zPFQ+IH0pID0+IFByb21pc2U8bnVtYmVyPjtcblx0fSk6ICgocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiBQcm9taXNlPHZvaWQ+KSA9PlxuXHRhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKTogUHJvbWlzZTx2b2lkPiA9PiB7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IHsgaWQgfSA9IHJlcS5wYXJhbXM7XG5cdFx0XHRjb25zdCBkZWxldGVkID0gYXdhaXQgTW9kZWwuZGVzdHJveSh7XG5cdFx0XHRcdHdoZXJlOiB7IGlkIH0gYXMgV2hlcmVPcHRpb25zPFQ+XG5cdFx0XHR9KTtcblx0XHRcdGlmICghZGVsZXRlZCkge1xuXHRcdFx0XHRyZXMuc3RhdHVzKDQwNCkuanNvbih7XG5cdFx0XHRcdFx0ZXJyb3I6IGAke01vZGVsLm5hbWV9IGVudHJ5IG5vdCBmb3VuZGBcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgbWVzc2FnZTogYCR7TW9kZWwubmFtZX0gZW50cnkgZGVsZXRlZGAgfSk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGxvZ2dlci5lcnJvcihlcnJvcik7XG5cdFx0XHRyZXMuc3RhdHVzKDUwMCkuanNvbih7XG5cdFx0XHRcdGVycm9yOiBgRmFpbGVkIHRvIGRlbGV0ZSBlbnRyeSBmcm9tICR7TW9kZWwubmFtZX1gXG5cdFx0XHR9KTtcblx0XHR9XG5cdH07XG4iXX0=
