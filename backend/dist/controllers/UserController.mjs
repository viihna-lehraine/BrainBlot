import { User } from '../models/User.mjs';
import { validateDependencies } from '../utils/helpers.mjs';
import { ServiceFactory } from '../index/factory.mjs';
export class UserController {
	static instance = null;
	passwordService;
	logger;
	errorLogger;
	errorHandler;
	envConfig;
	secrets;
	mailer;
	userModel;
	constructor(
		passwordService,
		logger,
		errorLogger,
		errorHandler,
		envConfig,
		secrets,
		mailer,
		userModel = User
	) {
		this.passwordService = passwordService;
		this.logger = logger;
		this.errorLogger = errorLogger;
		this.errorHandler = errorHandler;
		this.envConfig = envConfig;
		this.secrets = secrets;
		this.mailer = mailer;
		this.userModel = userModel;
		validateDependencies(
			[{ name: 'userModel', instance: this.userModel }],
			this.logger
		);
	}
	static async getInstance() {
		if (!UserController.instance) {
			const passwordService = await ServiceFactory.getPasswordService();
			const logger = await ServiceFactory.getLoggerService();
			const errorLogger = await ServiceFactory.getErrorLoggerService();
			const errorHandler = await ServiceFactory.getErrorHandlerService();
			const envConfig = await ServiceFactory.getEnvConfigService();
			const secrets = await ServiceFactory.getVaultService();
			const mailer = await ServiceFactory.getMailerService();
			UserController.instance = new UserController(
				passwordService,
				logger,
				errorLogger,
				errorHandler,
				envConfig,
				secrets,
				mailer
			);
		}
		return UserController.instance;
	}
	mapToUserInstance(user) {
		return {
			id: user.id,
			userId: user.userId || undefined,
			username: user.username,
			password: user.password,
			email: user.email,
			isAccountVerified: user.isVerified,
			resetPasswordToken: user.resetPasswordToken,
			resetPasswordExpires: user.resetPasswordExpires,
			isMFAEnabled: user.isMFAEnabled,
			totpSecret: user.totpSecret,
			emailMFAToken: user.emailMFAToken,
			emailMFATokenExpires: user.emailMFATokenExpires,
			creationDate: user.creationDate,
			comparePassword: async (password, argon2) => {
				return await argon2.verify(
					user.password,
					password + process.env.PEPPER
				);
			},
			save: async () => {
				await user.save();
			}
		};
	}
	async findOne(criteria) {
		try {
			const user = await this.userModel.findOne({ where: criteria });
			if (!user) {
				this.logger.debug('User not found with provided criteria');
				return null;
			}
			return this.mapToUserInstance(user);
		} catch (error) {
			this.errorHandler.handleError({ error, action: 'findOne' });
			return null;
		}
	}
	async findUserById(userId) {
		try {
			const user = await this.userModel.findOne({
				where: { id: userId }
			});
			if (!user) {
				this.logger.warn(`User with ID ${userId} not found`);
				return null;
			}
			return this.mapToUserInstance(user);
		} catch (error) {
			this.logger.error(`Error finding user by ID ${userId}: ${error}`);
			this.errorHandler.handleError({ error, action: 'findUserById' });
			return null;
		}
	}
	async findUserByEmail(email) {
		const user = await this.userModel.findOne({ where: { email } });
		if (!user) {
			return null;
		}
		return this.mapToUserInstance(user);
	}
	async createUser(userDetails) {
		try {
			const isPasswordStrong = await this.checkPasswordStrength(
				userDetails.password
			);
			if (!isPasswordStrong) {
				this.logger.warn('Password strength validation failed');
				throw new this.errorHandler.ErrorClasses.PasswordValidationError(
					'Password does not meet strength requirements',
					{ exposeToClient: true }
				);
			}
			const pepper = this.secrets.retrieveSecret(
				'PEPPER',
				secret => secret
			);
			if (!pepper || typeof pepper !== 'string') {
				throw new this.errorHandler.ErrorClasses.ServiceUnavailableError(
					10,
					'Invalid pepper',
					{ exposeToClient: false }
				);
			}
			const hashedPassword = await this.passwordService.hashPassword(
				userDetails.password,
				pepper
			);
			const userUuid = await this.loadUuidv4();
			const newUser = await this.userModel.create({
				id: userUuid,
				...userDetails,
				password: hashedPassword,
				isVerified: false,
				resetPasswordToken: null,
				resetPasswordExpires: null,
				creationDate: new Date()
			});
			this.logger.info(`User ${newUser.username} created successfully`);
			await this.sendConfirmationEmail(newUser);
			return this.mapToUserInstance(newUser);
		} catch (err) {
			this.logger.error(`Error creating user: ${String(err)}`);
			this.errorHandler.handleError({
				error: err || 'User creation failed'
			});
			throw err;
		}
	}
	async checkPasswordStrength(password) {
		const zxcvbn = await this.loadZxcvbn();
		const { score } = zxcvbn(password);
		if (score < 3) {
			this.logger.warn('Password strength too weak');
			return false;
		}
		try {
			const axios = await this.loadAxios();
			const firstFiveChars = password.substring(0, 5);
			const remainingChars = password.substring(5).toUpperCase();
			const pwnedResponse = await axios.get(
				`https://api.pwnedpasswords.com/range/${firstFiveChars}`
			);
			const pwnedList = pwnedResponse.data
				.split('\n')
				.map(line => line.split(':')[0]);
			if (pwnedList.includes(remainingChars)) {
				this.logger.warn('Password found in breach');
				return false;
			}
		} catch (error) {
			this.logger.error(
				`Error checking password breach status: ${String(error)}`
			);
		}
		return true;
	}
	async verifyUserAccount(userId) {
		try {
			const user = await this.userModel.findOne({
				where: { id: userId }
			});
			if (!user) {
				this.logger.warn(`User with ID ${userId} not found`);
				return false;
			}
			user.isVerified = true;
			await user.save();
			this.logger.info(`User ${user.username} verified successfully`);
			return true;
		} catch (error) {
			this.errorHandler.handleError({
				error,
				action: 'verifyUserAccount',
				details: { userId }
			});
			return false;
		}
	}
	removeUndefinedFields(obj) {
		return Object.fromEntries(
			Object.entries(obj).filter(([, v]) => v !== undefined)
		);
	}
	async updateUser(user, updatedDetails) {
		try {
			const fullUser = await this.userModel.findOne({
				where: { id: user.id }
			});
			if (!fullUser) {
				this.logger.warn(`User with id ${user.id} not found`);
				return null;
			}
			const pepper = this.secrets.retrieveSecret(
				'PEPPER',
				secret => secret
			);
			if (!pepper || typeof pepper !== 'string') {
				throw new this.errorHandler.ErrorClasses.ServiceUnavailableError(
					10,
					'Invalid pepper',
					{ exposeToClient: false }
				);
			}
			if (updatedDetails.password) {
				const hashedPassword = await this.passwordService.hashPassword(
					updatedDetails.password,
					pepper
				);
				updatedDetails.password = hashedPassword;
			}
			const cleanUpdatedDetails =
				this.removeUndefinedFields(updatedDetails);
			const updateData = cleanUpdatedDetails;
			const updatedUser = await fullUser.update(updateData);
			this.logger.info(
				`User ${updatedUser.username} updated successfully`
			);
			return this.mapToUserInstance(updatedUser);
		} catch (error) {
			this.errorLogger.logError(`Error updating user: ${String(error)}`);
			this.errorHandler.handleError({ error });
			return null;
		}
	}
	async sendConfirmationEmail(user) {
		try {
			const jwtSecret = this.secrets.retrieveSecret(
				'JWT_SECRET',
				secret => secret
			);
			if (typeof jwtSecret !== 'string') {
				throw new this.errorHandler.ErrorClasses.ServiceUnavailableError(
					10,
					'Invalid JWT secret',
					{ exposeToClient: false }
				);
			}
			const jwt = await this.loadJwt();
			const confirmationToken = jwt.sign({ id: user.id }, jwtSecret, {
				expiresIn: '1d'
			});
			const baseUrl = this.envConfig.getEnvVariable('baseUrl');
			const port = this.envConfig.getEnvVariable('serverPort');
			const confirmationUrl = `${baseUrl}${port}/api/users/confirm/${confirmationToken}`;
			const mailOptions = {
				from: this.envConfig.getEnvVariable('emailUser'),
				to: user.email,
				subject: 'Please Confirm Your Account',
				html: `
					<p>Hi ${user.username},</p>
					<p>Please confirm your account by clicking the following link:</p>
					<a href="${confirmationUrl}">Confirm Account</a>
				`
			};
			const transporter = await this.mailer.getTransporter();
			await transporter.sendMail(mailOptions);
			this.logger.info(`Confirmation email sent to ${user.email}`);
		} catch (error) {
			this.logger.logError(
				`Error sending confirmation email to ${user.email}`
			);
			this.errorHandler.handleError({
				error,
				details: { userId: user.id }
			});
			throw error;
		}
	}
	async deleteUser(userId) {
		try {
			const user = await this.userModel.findOne({
				where: { id: userId }
			});
			if (!user) {
				this.logger.warn(`User with id ${userId} not found`);
				return false;
			}
			await user.destroy();
			this.logger.info(`User with id ${userId} deleted successfully`);
			return true;
		} catch (error) {
			this.errorLogger.logError(
				`Error deleting user with id ${userId}\n${String(error)}`
			);
			this.errorHandler.handleError({
				error,
				details: { userId }
			});
			return false;
		}
	}
	async shutdown() {
		try {
			this.logger.info('Shutting down UserController...');
			UserController.instance = null;
			this.logger.info('UserController shutdown completed.');
		} catch (error) {
			const utilityError =
				new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
					`Error during UserController shutdown: ${error instanceof Error ? error.message : error}`
				);
			this.errorLogger.logError(utilityError.message);
			this.errorHandler.handleError({ error: utilityError });
		}
	}
	async loadAxios() {
		return (await import('axios')).default;
	}
	async loadJwt() {
		return (await import('jsonwebtoken')).default;
	}
	async loadUuidv4() {
		const { v4: uuidv4 } = await import('uuid');
		return uuidv4();
	}
	async loadZxcvbn() {
		return (await import('zxcvbn')).default;
	}
}
//# sourceMappingURL=data:application/json;base64,
