import sops from '../utils/sops';
import { execSync } from 'child_process';
import { validateDependencies } from '../utils/validateDependencies';
import { processError } from '../utils/processError';
export function login({ logger, UserModel, jwtUtil, argon2 }) {
	return async (req, res) => {
		try {
			validateDependencies(
				[
					{ name: 'logger', instance: logger },
					{ name: 'UserModel', instance: UserModel },
					{ name: 'jwtUtil', instance: jwtUtil },
					{ name: 'argon2', instance: argon2 }
				],
				logger || console
			);
			const { username, password } = req.body;
			// find user by username
			const user = await UserModel.findOne({ where: { username } });
			if (!user) {
				logger.warn(
					`Login attempt failed - user not found: ${username}`
				);
				return res.status(401).json({ msg: 'Invalid credentials' });
			}
			// fetch secrets
			const secrets = await sops.getSecrets({
				logger,
				execSync,
				getDirectoryPath: () => process.cwd()
			});
			// validate password using argon2 and secrets
			const isPasswordValid = await user.comparePassword(
				password,
				argon2,
				secrets,
				logger
			);
			if (!isPasswordValid) {
				logger.warn(
					`Login attempt failed - invalid password for user: ${username}`
				);
				return res.status(401).json({ msg: 'Invalid credentials' });
			}
			// generate JWT token and use it to respond
			const token = await jwtUtil.generateJwt(user);
			logger.info(`User logged in successfully: ${username}`);
			return res.json({ token });
		} catch (err) {
			processError(err, logger || console);
			throw err;
		}
	};
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aENvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29udHJvbGxlcnMvYXV0aENvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsT0FBTyxJQUFJLE1BQU0sZUFBZSxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDckUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBU3JELE1BQU0sVUFBVSxLQUFLLENBQUMsRUFDckIsTUFBTSxFQUNOLFNBQVMsRUFDVCxPQUFPLEVBQ1AsTUFBTSxFQUNZO0lBQ2xCLE9BQU8sS0FBSyxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQTRCLEVBQUU7UUFDdEUsSUFBSSxDQUFDO1lBQ0osb0JBQW9CLENBQ25CO2dCQUNDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO2dCQUNwQyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRTtnQkFDMUMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUU7Z0JBQ3RDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO2FBQ3BDLEVBQ0QsTUFBTSxJQUFJLE9BQU8sQ0FDakIsQ0FBQztZQUNGLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztZQUV4Qyx3QkFBd0I7WUFDeEIsTUFBTSxJQUFJLEdBQUcsTUFBTSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzlELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDWCxNQUFNLENBQUMsSUFBSSxDQUNWLDBDQUEwQyxRQUFRLEVBQUUsQ0FDcEQsQ0FBQztnQkFDRixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLHFCQUFxQixFQUFFLENBQUMsQ0FBQztZQUM3RCxDQUFDO1lBRUQsZ0JBQWdCO1lBQ2hCLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQztnQkFDckMsTUFBTTtnQkFDTixRQUFRO2dCQUNSLGdCQUFnQixFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUU7YUFDckMsQ0FBQyxDQUFDO1lBRUgsNkNBQTZDO1lBQzdDLE1BQU0sZUFBZSxHQUFHLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FDakQsUUFBUSxFQUNSLE1BQU0sRUFDTixPQUFPLEVBQ1AsTUFBTSxDQUNOLENBQUM7WUFDRixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7Z0JBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQ1YscURBQXFELFFBQVEsRUFBRSxDQUMvRCxDQUFDO2dCQUNGLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyxDQUFDO1lBQzdELENBQUM7WUFFRCwyQ0FBMkM7WUFDM0MsTUFBTSxLQUFLLEdBQUcsTUFBTSxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFDeEQsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUM1QixDQUFDO1FBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztZQUNkLFlBQVksQ0FBQyxHQUFHLEVBQUUsTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDO1lBQ3JDLE1BQU0sR0FBRyxDQUFDO1FBQ1gsQ0FBQztJQUNGLENBQUMsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vY29uZmlnL2xvZ2dlcic7XG5pbXBvcnQgY3JlYXRlSnd0VXRpbCBmcm9tICcuLi9hdXRoL2p3dFV0aWwnO1xuaW1wb3J0IGNyZWF0ZVVzZXJNb2RlbCBmcm9tICcuLi9tb2RlbHMvVXNlcic7XG5pbXBvcnQgYXJnb24yIGZyb20gJ2FyZ29uMic7XG5pbXBvcnQgc29wcyBmcm9tICcuLi91dGlscy9zb3BzJztcbmltcG9ydCB7IGV4ZWNTeW5jIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgeyB2YWxpZGF0ZURlcGVuZGVuY2llcyB9IGZyb20gJy4uL3V0aWxzL3ZhbGlkYXRlRGVwZW5kZW5jaWVzJztcbmltcG9ydCB7IHByb2Nlc3NFcnJvciB9IGZyb20gJy4uL3V0aWxzL3Byb2Nlc3NFcnJvcic7XG5cbmludGVyZmFjZSBBdXRoRGVwZW5kZW5jaWVzIHtcblx0bG9nZ2VyOiBMb2dnZXI7XG5cdFVzZXJNb2RlbDogUmV0dXJuVHlwZTx0eXBlb2YgY3JlYXRlVXNlck1vZGVsPjtcblx0and0VXRpbDogUmV0dXJuVHlwZTx0eXBlb2YgY3JlYXRlSnd0VXRpbD47XG5cdGFyZ29uMjogdHlwZW9mIGFyZ29uMjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvZ2luKHtcblx0bG9nZ2VyLFxuXHRVc2VyTW9kZWwsXG5cdGp3dFV0aWwsXG5cdGFyZ29uMlxufTogQXV0aERlcGVuZGVuY2llcykge1xuXHRyZXR1cm4gYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSk6IFByb21pc2U8UmVzcG9uc2UgfCB2b2lkPiA9PiB7XG5cdFx0dHJ5IHtcblx0XHRcdHZhbGlkYXRlRGVwZW5kZW5jaWVzKFxuXHRcdFx0XHRbXG5cdFx0XHRcdFx0eyBuYW1lOiAnbG9nZ2VyJywgaW5zdGFuY2U6IGxvZ2dlciB9LFxuXHRcdFx0XHRcdHsgbmFtZTogJ1VzZXJNb2RlbCcsIGluc3RhbmNlOiBVc2VyTW9kZWwgfSxcblx0XHRcdFx0XHR7IG5hbWU6ICdqd3RVdGlsJywgaW5zdGFuY2U6IGp3dFV0aWwgfSxcblx0XHRcdFx0XHR7IG5hbWU6ICdhcmdvbjInLCBpbnN0YW5jZTogYXJnb24yIH1cblx0XHRcdFx0XSxcblx0XHRcdFx0bG9nZ2VyIHx8IGNvbnNvbGVcblx0XHRcdCk7XG5cdFx0XHRjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCB9ID0gcmVxLmJvZHk7XG5cblx0XHRcdC8vIGZpbmQgdXNlciBieSB1c2VybmFtZVxuXHRcdFx0Y29uc3QgdXNlciA9IGF3YWl0IFVzZXJNb2RlbC5maW5kT25lKHsgd2hlcmU6IHsgdXNlcm5hbWUgfSB9KTtcblx0XHRcdGlmICghdXNlcikge1xuXHRcdFx0XHRsb2dnZXIud2Fybihcblx0XHRcdFx0XHRgTG9naW4gYXR0ZW1wdCBmYWlsZWQgLSB1c2VyIG5vdCBmb3VuZDogJHt1c2VybmFtZX1gXG5cdFx0XHRcdCk7XG5cdFx0XHRcdHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IG1zZzogJ0ludmFsaWQgY3JlZGVudGlhbHMnIH0pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBmZXRjaCBzZWNyZXRzXG5cdFx0XHRjb25zdCBzZWNyZXRzID0gYXdhaXQgc29wcy5nZXRTZWNyZXRzKHtcblx0XHRcdFx0bG9nZ2VyLFxuXHRcdFx0XHRleGVjU3luYyxcblx0XHRcdFx0Z2V0RGlyZWN0b3J5UGF0aDogKCkgPT4gcHJvY2Vzcy5jd2QoKVxuXHRcdFx0fSk7XG5cblx0XHRcdC8vIHZhbGlkYXRlIHBhc3N3b3JkIHVzaW5nIGFyZ29uMiBhbmQgc2VjcmV0c1xuXHRcdFx0Y29uc3QgaXNQYXNzd29yZFZhbGlkID0gYXdhaXQgdXNlci5jb21wYXJlUGFzc3dvcmQoXG5cdFx0XHRcdHBhc3N3b3JkLFxuXHRcdFx0XHRhcmdvbjIsXG5cdFx0XHRcdHNlY3JldHMsXG5cdFx0XHRcdGxvZ2dlclxuXHRcdFx0KTtcblx0XHRcdGlmICghaXNQYXNzd29yZFZhbGlkKSB7XG5cdFx0XHRcdGxvZ2dlci53YXJuKFxuXHRcdFx0XHRcdGBMb2dpbiBhdHRlbXB0IGZhaWxlZCAtIGludmFsaWQgcGFzc3dvcmQgZm9yIHVzZXI6ICR7dXNlcm5hbWV9YFxuXHRcdFx0XHQpO1xuXHRcdFx0XHRyZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBtc2c6ICdJbnZhbGlkIGNyZWRlbnRpYWxzJyB9KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gZ2VuZXJhdGUgSldUIHRva2VuIGFuZCB1c2UgaXQgdG8gcmVzcG9uZFxuXHRcdFx0Y29uc3QgdG9rZW4gPSBhd2FpdCBqd3RVdGlsLmdlbmVyYXRlSnd0KHVzZXIpO1xuXHRcdFx0bG9nZ2VyLmluZm8oYFVzZXIgbG9nZ2VkIGluIHN1Y2Nlc3NmdWxseTogJHt1c2VybmFtZX1gKTtcblx0XHRcdHJldHVybiByZXMuanNvbih7IHRva2VuIH0pO1xuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0cHJvY2Vzc0Vycm9yKGVyciwgbG9nZ2VyIHx8IGNvbnNvbGUpO1xuXHRcdFx0dGhyb3cgZXJyO1xuXHRcdH1cblx0fTtcbn1cbiJdfQ==
