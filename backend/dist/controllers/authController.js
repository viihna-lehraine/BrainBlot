import { generateToken } from '../utils/auth/jwtUtil.js';
import setupLogger from '../config/logger.js';
import User from '../models/User.js';
const logger = setupLogger();
export const login = async (req, res) => {
	try {
		const { username, password } = req.body;
		const user = await User.findOne({ where: { username } });
		if (!user) {
			return res
				.status(401)
				.json({ message: 'Login failed - invalid credentials' });
		}
		const isPasswordValid = await user.comparePassword(password);
		if (!isPasswordValid) {
			return res.status(401).json({ message: 'Invalid credentials' });
		}
		// Generate JWT token and use it to respond
		const token = await generateToken(user);
		res.json({ token });
	} catch (err) {
		logger.error(err);
		res.status(500).json({ message: 'Server error' });
	}
	return null; // unreachable code, but it satisfies TypeScript *shrug*
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aENvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29udHJvbGxlcnMvYXV0aENvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sV0FBVyxNQUFNLGtCQUFrQixDQUFDO0FBQzNDLE9BQU8sSUFBSSxNQUFNLGdCQUFnQixDQUFDO0FBRWxDLE1BQU0sTUFBTSxHQUFHLFdBQVcsRUFBRSxDQUFDO0FBRTdCLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxLQUFLLEVBQ3pCLEdBQVksRUFDWixHQUFhLEVBQ2MsRUFBRTtJQUM3QixJQUFJLENBQUM7UUFDSixNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDeEMsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRXpELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNYLE9BQU8sR0FBRztpQkFDUixNQUFNLENBQUMsR0FBRyxDQUFDO2lCQUNYLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxDQUFDLENBQUM7UUFDM0QsQ0FBQztRQUVELE1BQU0sZUFBZSxHQUFHLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU3RCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDdEIsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxDQUFDLENBQUM7UUFDakUsQ0FBQztRQUVELDJDQUEyQztRQUMzQyxNQUFNLEtBQUssR0FBRyxNQUFNLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNkLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsT0FBTyxJQUFJLENBQUMsQ0FBQyx3REFBd0Q7QUFDdEUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IGdlbmVyYXRlVG9rZW4gfSBmcm9tICcuLi91dGlscy9hdXRoL2p3dFV0aWwnO1xuaW1wb3J0IHNldHVwTG9nZ2VyIGZyb20gJy4uL2NvbmZpZy9sb2dnZXInO1xuaW1wb3J0IFVzZXIgZnJvbSAnLi4vbW9kZWxzL1VzZXInO1xuXG5jb25zdCBsb2dnZXIgPSBzZXR1cExvZ2dlcigpO1xuXG5leHBvcnQgY29uc3QgbG9naW4gPSBhc3luYyAoXG5cdHJlcTogUmVxdWVzdCxcblx0cmVzOiBSZXNwb25zZVxuKTogUHJvbWlzZTxSZXNwb25zZSB8IG51bGw+ID0+IHtcblx0dHJ5IHtcblx0XHRjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCB9ID0gcmVxLmJvZHk7XG5cdFx0Y29uc3QgdXNlciA9IGF3YWl0IFVzZXIuZmluZE9uZSh7IHdoZXJlOiB7IHVzZXJuYW1lIH0gfSk7XG5cblx0XHRpZiAoIXVzZXIpIHtcblx0XHRcdHJldHVybiByZXNcblx0XHRcdFx0LnN0YXR1cyg0MDEpXG5cdFx0XHRcdC5qc29uKHsgbWVzc2FnZTogJ0xvZ2luIGZhaWxlZCAtIGludmFsaWQgY3JlZGVudGlhbHMnIH0pO1xuXHRcdH1cblxuXHRcdGNvbnN0IGlzUGFzc3dvcmRWYWxpZCA9IGF3YWl0IHVzZXIuY29tcGFyZVBhc3N3b3JkKHBhc3N3b3JkKTtcblxuXHRcdGlmICghaXNQYXNzd29yZFZhbGlkKSB7XG5cdFx0XHRyZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBtZXNzYWdlOiAnSW52YWxpZCBjcmVkZW50aWFscycgfSk7XG5cdFx0fVxuXG5cdFx0Ly8gR2VuZXJhdGUgSldUIHRva2VuIGFuZCB1c2UgaXQgdG8gcmVzcG9uZFxuXHRcdGNvbnN0IHRva2VuID0gYXdhaXQgZ2VuZXJhdGVUb2tlbih1c2VyKTtcblx0XHRyZXMuanNvbih7IHRva2VuIH0pO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRsb2dnZXIuZXJyb3IoZXJyKTtcblx0XHRyZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6ICdTZXJ2ZXIgZXJyb3InIH0pO1xuXHR9XG5cblx0cmV0dXJuIG51bGw7IC8vIHVucmVhY2hhYmxlIGNvZGUsIGJ1dCBpdCBzYXRpc2ZpZXMgVHlwZVNjcmlwdCAqc2hydWcqXG59O1xuIl19
