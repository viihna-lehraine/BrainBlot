import { validateDependencies } from '../utils/validateDependencies.mjs';
import { processError } from '../utils/processError.mjs';
// Retrieve all entries for any model
export const getEntries =
	(Model, { logger }) =>
	async (req, res) => {
		try {
			validateDependencies(
				[{ name: 'logger', instance: logger }],
				logger || console
			);
			const entries = await Model.findAll();
			res.status(200).json(entries);
			logger.info(`Fetched all entries from ${Model.name}`);
		} catch (error) {
			processError(error, logger || console);
			throw error;
		}
	};
// Create a new entry for any model
export const createEntry =
	(Model, { logger }) =>
	async (req, res) => {
		try {
			const newEntry = await Model.create(req.body);
			res.status(201).json(newEntry);
			logger.info(`Created a new entry in ${Model.name}`);
		} catch (error) {
			processError(error, logger || console);
			throw error;
		}
	};
// Delete an entry for any model
export const deleteEntry =
	(Model, { logger }) =>
	async (req, res) => {
		try {
			const { id } = req.params;
			const deleted = await Model.destroy({
				where: { id }
			});
			if (!deleted) {
				logger.warn(`${Model.name} entry with id ${id} not found`);
				res.status(404).json({
					error: `${Model.name} entry not found`
				});
				return;
			}
			res.status(200).json({ message: `${Model.name} entry deleted` });
			logger.info(`Deleted ${Model.name} entry with id ${id}`);
		} catch (error) {
			processError(error, logger || console);
		}
	};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWxDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnRyb2xsZXJzL21vZGVsQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNyRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFVckQscUNBQXFDO0FBQ3JDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FDdEIsQ0FDQyxLQUFpRCxFQUNqRCxFQUFFLE1BQU0sRUFBK0IsRUFDdEMsRUFBRSxDQUNKLEtBQUssRUFBRSxHQUFZLEVBQUUsR0FBYSxFQUFpQixFQUFFO0lBQ3BELElBQUksQ0FBQztRQUNKLG9CQUFvQixDQUNuQixDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFDdEMsTUFBTSxJQUFJLE9BQU8sQ0FDakIsQ0FBQztRQUNGLE1BQU0sT0FBTyxHQUFHLE1BQU0sS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3RDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlCLE1BQU0sQ0FBQyxJQUFJLENBQUMsNEJBQTRCLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sS0FBSyxDQUFDO0lBQ2IsQ0FBQztBQUNGLENBQUMsQ0FBQztBQUVILG1DQUFtQztBQUNuQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQ3ZCLENBQ0MsS0FBZ0UsRUFDaEUsRUFBRSxNQUFNLEVBQStCLEVBQ3RDLEVBQUUsQ0FDSixLQUFLLEVBQUUsR0FBWSxFQUFFLEdBQWEsRUFBaUIsRUFBRTtJQUNwRCxJQUFJLENBQUM7UUFDSixNQUFNLFFBQVEsR0FBRyxNQUFNLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sS0FBSyxDQUFDO0lBQ2IsQ0FBQztBQUNGLENBQUMsQ0FBQztBQUVILGdDQUFnQztBQUNoQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQ3ZCLENBQ0MsS0FHQyxFQUNELEVBQUUsTUFBTSxFQUErQixFQUN0QyxFQUFFLENBQ0osS0FBSyxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQWlCLEVBQUU7SUFDcEQsSUFBSSxDQUFDO1FBQ0osTUFBTSxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFDMUIsTUFBTSxPQUFPLEdBQUcsTUFBTSxLQUFLLENBQUMsT0FBTyxDQUFDO1lBQ25DLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBcUI7U0FDaEMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2QsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLGtCQUFrQixFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQzNELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNwQixLQUFLLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxrQkFBa0I7YUFDdEMsQ0FBQyxDQUFDO1lBQ0gsT0FBTztRQUNSLENBQUM7UUFDRCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLGdCQUFnQixFQUFFLENBQUMsQ0FBQztRQUNqRSxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsS0FBSyxDQUFDLElBQUksa0JBQWtCLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsWUFBWSxDQUFDLEtBQUssRUFBRSxNQUFNLElBQUksT0FBTyxDQUFDLENBQUM7SUFDeEMsQ0FBQztBQUNGLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBNb2RlbCwgV2hlcmVPcHRpb25zIH0gZnJvbSAnc2VxdWVsaXplJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL2NvbmZpZy9sb2dnZXInO1xuaW1wb3J0IHsgdmFsaWRhdGVEZXBlbmRlbmNpZXMgfSBmcm9tICcuLi91dGlscy92YWxpZGF0ZURlcGVuZGVuY2llcyc7XG5pbXBvcnQgeyBwcm9jZXNzRXJyb3IgfSBmcm9tICcuLi91dGlscy9wcm9jZXNzRXJyb3InO1xuXG5pbnRlcmZhY2UgTW9kZWxUeXBlIGV4dGVuZHMgTW9kZWwge1xuXHRpZD86IG51bWJlciB8IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIE1vZGVsQ29udHJvbGxlckRlcGVuZGVuY2llcyB7XG5cdGxvZ2dlcjogTG9nZ2VyO1xufVxuXG4vLyBSZXRyaWV2ZSBhbGwgZW50cmllcyBmb3IgYW55IG1vZGVsXG5leHBvcnQgY29uc3QgZ2V0RW50cmllcyA9XG5cdDxUIGV4dGVuZHMgTW9kZWxUeXBlPihcblx0XHRNb2RlbDogeyBuZXcgKCk6IFQ7IGZpbmRBbGw6ICgpID0+IFByb21pc2U8VFtdPiB9LFxuXHRcdHsgbG9nZ2VyIH06IE1vZGVsQ29udHJvbGxlckRlcGVuZGVuY2llc1xuXHQpID0+XG5cdGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpOiBQcm9taXNlPHZvaWQ+ID0+IHtcblx0XHR0cnkge1xuXHRcdFx0dmFsaWRhdGVEZXBlbmRlbmNpZXMoXG5cdFx0XHRcdFt7IG5hbWU6ICdsb2dnZXInLCBpbnN0YW5jZTogbG9nZ2VyIH1dLFxuXHRcdFx0XHRsb2dnZXIgfHwgY29uc29sZVxuXHRcdFx0KTtcblx0XHRcdGNvbnN0IGVudHJpZXMgPSBhd2FpdCBNb2RlbC5maW5kQWxsKCk7XG5cdFx0XHRyZXMuc3RhdHVzKDIwMCkuanNvbihlbnRyaWVzKTtcblx0XHRcdGxvZ2dlci5pbmZvKGBGZXRjaGVkIGFsbCBlbnRyaWVzIGZyb20gJHtNb2RlbC5uYW1lfWApO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRwcm9jZXNzRXJyb3IoZXJyb3IsIGxvZ2dlciB8fCBjb25zb2xlKTtcblx0XHRcdHRocm93IGVycm9yO1xuXHRcdH1cblx0fTtcblxuLy8gQ3JlYXRlIGEgbmV3IGVudHJ5IGZvciBhbnkgbW9kZWxcbmV4cG9ydCBjb25zdCBjcmVhdGVFbnRyeSA9XG5cdDxUIGV4dGVuZHMgTW9kZWxUeXBlPihcblx0XHRNb2RlbDogeyBuZXcgKCk6IFQ7IGNyZWF0ZTogKHZhbHVlczogUGFydGlhbDxUPikgPT4gUHJvbWlzZTxUPiB9LFxuXHRcdHsgbG9nZ2VyIH06IE1vZGVsQ29udHJvbGxlckRlcGVuZGVuY2llc1xuXHQpID0+XG5cdGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpOiBQcm9taXNlPHZvaWQ+ID0+IHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgbmV3RW50cnkgPSBhd2FpdCBNb2RlbC5jcmVhdGUocmVxLmJvZHkpO1xuXHRcdFx0cmVzLnN0YXR1cygyMDEpLmpzb24obmV3RW50cnkpO1xuXHRcdFx0bG9nZ2VyLmluZm8oYENyZWF0ZWQgYSBuZXcgZW50cnkgaW4gJHtNb2RlbC5uYW1lfWApO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRwcm9jZXNzRXJyb3IoZXJyb3IsIGxvZ2dlciB8fCBjb25zb2xlKTtcblx0XHRcdHRocm93IGVycm9yO1xuXHRcdH1cblx0fTtcblxuLy8gRGVsZXRlIGFuIGVudHJ5IGZvciBhbnkgbW9kZWxcbmV4cG9ydCBjb25zdCBkZWxldGVFbnRyeSA9XG5cdDxUIGV4dGVuZHMgTW9kZWxUeXBlPihcblx0XHRNb2RlbDoge1xuXHRcdFx0bmV3ICgpOiBUO1xuXHRcdFx0ZGVzdHJveTogKG9wdGlvbnM6IHsgd2hlcmU6IFdoZXJlT3B0aW9uczxUPiB9KSA9PiBQcm9taXNlPG51bWJlcj47XG5cdFx0fSxcblx0XHR7IGxvZ2dlciB9OiBNb2RlbENvbnRyb2xsZXJEZXBlbmRlbmNpZXNcblx0KSA9PlxuXHRhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKTogUHJvbWlzZTx2b2lkPiA9PiB7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IHsgaWQgfSA9IHJlcS5wYXJhbXM7XG5cdFx0XHRjb25zdCBkZWxldGVkID0gYXdhaXQgTW9kZWwuZGVzdHJveSh7XG5cdFx0XHRcdHdoZXJlOiB7IGlkIH0gYXMgV2hlcmVPcHRpb25zPFQ+XG5cdFx0XHR9KTtcblx0XHRcdGlmICghZGVsZXRlZCkge1xuXHRcdFx0XHRsb2dnZXIud2FybihgJHtNb2RlbC5uYW1lfSBlbnRyeSB3aXRoIGlkICR7aWR9IG5vdCBmb3VuZGApO1xuXHRcdFx0XHRyZXMuc3RhdHVzKDQwNCkuanNvbih7XG5cdFx0XHRcdFx0ZXJyb3I6IGAke01vZGVsLm5hbWV9IGVudHJ5IG5vdCBmb3VuZGBcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgbWVzc2FnZTogYCR7TW9kZWwubmFtZX0gZW50cnkgZGVsZXRlZGAgfSk7XG5cdFx0XHRsb2dnZXIuaW5mbyhgRGVsZXRlZCAke01vZGVsLm5hbWV9IGVudHJ5IHdpdGggaWQgJHtpZH1gKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0cHJvY2Vzc0Vycm9yKGVycm9yLCBsb2dnZXIgfHwgY29uc29sZSk7XG5cdFx0fVxuXHR9O1xuIl19
