// Retrieve all entries for any model
export const getEntries =
	(Model, { logger }) =>
	async (req, res) => {
		try {
			const entries = await Model.findAll();
			res.status(200).json(entries);
		} catch (error) {
			logger.error(
				`Failed to fetch entries from ${Model.name}: ${String(error)}`
			);
			res.status(500).json({
				error: `Failed to fetch entries from ${Model.name} model`
			});
		}
	};
// Create a new entry for any model
export const createEntry =
	(Model, { logger }) =>
	async (req, res) => {
		try {
			const newEntry = await Model.create(req.body);
			res.status(201).json(newEntry);
		} catch (error) {
			logger.error(
				`Failed to create a new entry in ${Model.name}: ${String(error)}`
			);
			res.status(400).json({
				error: `Failed to create a new entry in ${Model.name}`
			});
		}
	};
// Delete an entry for any model
export const deleteEntry =
	(Model, { logger }) =>
	async (req, res) => {
		try {
			const { id } = req.params;
			const deleted = await Model.destroy({
				where: { id }
			});
			if (!deleted) {
				res.status(404).json({
					error: `${Model.name} entry not found`
				});
				return;
			}
			res.status(200).json({ message: `${Model.name} entry deleted ` });
		} catch (error) {
			logger.error(
				`Failed to delete entry from ${Model.name}: ${String(error)}`
			);
			res.status(500).json({
				error: `Failed to delete entry from ${Model.name}`
			});
		}
	};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWxDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnRyb2xsZXJzL21vZGVsQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnQkEscUNBQXFDO0FBQ3JDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FDdEIsQ0FDQyxLQUFpRCxFQUNqRCxFQUFFLE1BQU0sRUFBK0IsRUFDdEMsRUFBRSxDQUNKLEtBQUssRUFBRSxHQUFZLEVBQUUsR0FBYSxFQUFpQixFQUFFO0lBQ3BELElBQUksQ0FBQztRQUNKLE1BQU0sT0FBTyxHQUFHLE1BQU0sS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3RDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE1BQU0sQ0FBQyxLQUFLLENBQ1gsZ0NBQWdDLEtBQUssQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQzlELENBQUM7UUFDRixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNwQixLQUFLLEVBQUUsZ0NBQWdDLEtBQUssQ0FBQyxJQUFJLFFBQVE7U0FDekQsQ0FBQyxDQUFDO0lBQ0osQ0FBQztBQUNGLENBQUMsQ0FBQztBQUVILG1DQUFtQztBQUNuQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQ3ZCLENBQ0MsS0FBZ0UsRUFDaEUsRUFBRSxNQUFNLEVBQStCLEVBQ3RDLEVBQUUsQ0FDSixLQUFLLEVBQUUsR0FBWSxFQUFFLEdBQWEsRUFBaUIsRUFBRTtJQUNwRCxJQUFJLENBQUM7UUFDSixNQUFNLFFBQVEsR0FBRyxNQUFNLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE1BQU0sQ0FBQyxLQUFLLENBQ1gsbUNBQW1DLEtBQUssQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQ2pFLENBQUM7UUFDRixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNwQixLQUFLLEVBQUUsbUNBQW1DLEtBQUssQ0FBQyxJQUFJLEVBQUU7U0FDdEQsQ0FBQyxDQUFDO0lBQ0osQ0FBQztBQUNGLENBQUMsQ0FBQztBQUVILGdDQUFnQztBQUNoQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQ3ZCLENBQ0MsS0FHQyxFQUNELEVBQUUsTUFBTSxFQUErQixFQUN0QyxFQUFFLENBQ0osS0FBSyxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQWlCLEVBQUU7SUFDcEQsSUFBSSxDQUFDO1FBQ0osTUFBTSxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFDMUIsTUFBTSxPQUFPLEdBQUcsTUFBTSxLQUFLLENBQUMsT0FBTyxDQUFDO1lBQ25DLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBcUI7U0FDaEMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2QsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ3BCLEtBQUssRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLGtCQUFrQjthQUN0QyxDQUFDLENBQUM7WUFDSCxPQUFPO1FBQ1IsQ0FBQztRQUNELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE1BQU0sQ0FBQyxLQUFLLENBQ1gsK0JBQStCLEtBQUssQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQzdELENBQUM7UUFDRixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNwQixLQUFLLEVBQUUsK0JBQStCLEtBQUssQ0FBQyxJQUFJLEVBQUU7U0FDbEQsQ0FBQyxDQUFDO0lBQ0osQ0FBQztBQUNGLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBNb2RlbCwgV2hlcmVPcHRpb25zIH0gZnJvbSAnc2VxdWVsaXplJztcblxuaW50ZXJmYWNlIE1vZGVsVHlwZSBleHRlbmRzIE1vZGVsIHtcblx0aWQ/OiBudW1iZXIgfCBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBMb2dnZXIge1xuXHRlcnJvcjogKG1zZzogc3RyaW5nLCBtZXRhPzogdW5rbm93bikgPT4gdm9pZDtcblx0aW5mbzogKG1zZzogc3RyaW5nLCBtZXRhPzogdW5rbm93bikgPT4gdm9pZDtcbn1cblxuaW50ZXJmYWNlIE1vZGVsQ29udHJvbGxlckRlcGVuZGVuY2llcyB7XG5cdGxvZ2dlcjogTG9nZ2VyO1xufVxuXG4vLyBSZXRyaWV2ZSBhbGwgZW50cmllcyBmb3IgYW55IG1vZGVsXG5leHBvcnQgY29uc3QgZ2V0RW50cmllcyA9XG5cdDxUIGV4dGVuZHMgTW9kZWxUeXBlPihcblx0XHRNb2RlbDogeyBuZXcgKCk6IFQ7IGZpbmRBbGw6ICgpID0+IFByb21pc2U8VFtdPiB9LFxuXHRcdHsgbG9nZ2VyIH06IE1vZGVsQ29udHJvbGxlckRlcGVuZGVuY2llc1xuXHQpID0+XG5cdGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpOiBQcm9taXNlPHZvaWQ+ID0+IHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgZW50cmllcyA9IGF3YWl0IE1vZGVsLmZpbmRBbGwoKTtcblx0XHRcdHJlcy5zdGF0dXMoMjAwKS5qc29uKGVudHJpZXMpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdGBGYWlsZWQgdG8gZmV0Y2ggZW50cmllcyBmcm9tICR7TW9kZWwubmFtZX06ICR7U3RyaW5nKGVycm9yKX1gXG5cdFx0XHQpO1xuXHRcdFx0cmVzLnN0YXR1cyg1MDApLmpzb24oe1xuXHRcdFx0XHRlcnJvcjogYEZhaWxlZCB0byBmZXRjaCBlbnRyaWVzIGZyb20gJHtNb2RlbC5uYW1lfSBtb2RlbGBcblx0XHRcdH0pO1xuXHRcdH1cblx0fTtcblxuLy8gQ3JlYXRlIGEgbmV3IGVudHJ5IGZvciBhbnkgbW9kZWxcbmV4cG9ydCBjb25zdCBjcmVhdGVFbnRyeSA9XG5cdDxUIGV4dGVuZHMgTW9kZWxUeXBlPihcblx0XHRNb2RlbDogeyBuZXcgKCk6IFQ7IGNyZWF0ZTogKHZhbHVlczogUGFydGlhbDxUPikgPT4gUHJvbWlzZTxUPiB9LFxuXHRcdHsgbG9nZ2VyIH06IE1vZGVsQ29udHJvbGxlckRlcGVuZGVuY2llc1xuXHQpID0+XG5cdGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpOiBQcm9taXNlPHZvaWQ+ID0+IHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgbmV3RW50cnkgPSBhd2FpdCBNb2RlbC5jcmVhdGUocmVxLmJvZHkpO1xuXHRcdFx0cmVzLnN0YXR1cygyMDEpLmpzb24obmV3RW50cnkpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdGBGYWlsZWQgdG8gY3JlYXRlIGEgbmV3IGVudHJ5IGluICR7TW9kZWwubmFtZX06ICR7U3RyaW5nKGVycm9yKX1gXG5cdFx0XHQpO1xuXHRcdFx0cmVzLnN0YXR1cyg0MDApLmpzb24oe1xuXHRcdFx0XHRlcnJvcjogYEZhaWxlZCB0byBjcmVhdGUgYSBuZXcgZW50cnkgaW4gJHtNb2RlbC5uYW1lfWBcblx0XHRcdH0pO1xuXHRcdH1cblx0fTtcblxuLy8gRGVsZXRlIGFuIGVudHJ5IGZvciBhbnkgbW9kZWxcbmV4cG9ydCBjb25zdCBkZWxldGVFbnRyeSA9XG5cdDxUIGV4dGVuZHMgTW9kZWxUeXBlPihcblx0XHRNb2RlbDoge1xuXHRcdFx0bmV3ICgpOiBUO1xuXHRcdFx0ZGVzdHJveTogKG9wdGlvbnM6IHsgd2hlcmU6IFdoZXJlT3B0aW9uczxUPiB9KSA9PiBQcm9taXNlPG51bWJlcj47XG5cdFx0fSxcblx0XHR7IGxvZ2dlciB9OiBNb2RlbENvbnRyb2xsZXJEZXBlbmRlbmNpZXNcblx0KSA9PlxuXHRhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKTogUHJvbWlzZTx2b2lkPiA9PiB7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IHsgaWQgfSA9IHJlcS5wYXJhbXM7XG5cdFx0XHRjb25zdCBkZWxldGVkID0gYXdhaXQgTW9kZWwuZGVzdHJveSh7XG5cdFx0XHRcdHdoZXJlOiB7IGlkIH0gYXMgV2hlcmVPcHRpb25zPFQ+XG5cdFx0XHR9KTtcblx0XHRcdGlmICghZGVsZXRlZCkge1xuXHRcdFx0XHRyZXMuc3RhdHVzKDQwNCkuanNvbih7XG5cdFx0XHRcdFx0ZXJyb3I6IGAke01vZGVsLm5hbWV9IGVudHJ5IG5vdCBmb3VuZGBcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgbWVzc2FnZTogYCR7TW9kZWwubmFtZX0gZW50cnkgZGVsZXRlZCBgIH0pO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdGBGYWlsZWQgdG8gZGVsZXRlIGVudHJ5IGZyb20gJHtNb2RlbC5uYW1lfTogJHtTdHJpbmcoZXJyb3IpfWBcblx0XHRcdCk7XG5cdFx0XHRyZXMuc3RhdHVzKDUwMCkuanNvbih7XG5cdFx0XHRcdGVycm9yOiBgRmFpbGVkIHRvIGRlbGV0ZSBlbnRyeSBmcm9tICR7TW9kZWwubmFtZX1gXG5cdFx0XHR9KTtcblx0XHR9XG5cdH07XG4iXX0=
