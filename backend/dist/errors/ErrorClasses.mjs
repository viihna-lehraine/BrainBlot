import { AppErrorClasses } from './AppErrorClasses.mjs';
import { ClientErrorClasses } from './ClientErrorClasses.mjs';
import { ERROR_CODES } from '../config/errorCodes.mjs';
export const ErrorSeverity = {
	FATAL: 'fatal',
	RECOVERABLE: 'recoverable',
	WARNING: 'warning',
	INFO: 'info'
};
export class RootError extends Error {
	statusCode;
	errorCode;
	details;
	severity;
	constructor(
		errorMessage,
		statusCode = 500,
		severity = ErrorSeverity.RECOVERABLE,
		errorCode,
		details = {}
	) {
		super(errorMessage);
		this.statusCode = statusCode;
		this.severity = severity;
		this.errorCode = errorCode;
		this.details = setDefaultDetails(details);
		Error.captureStackTrace(this, this.constructor);
	}
}
export class AppError extends RootError {
	constructor(
		errorMessage,
		statusCode = 500,
		severity = ErrorSeverity.FATAL,
		errorCode = ERROR_CODES.APP_ERROR,
		details = {}
	) {
		super(
			errorMessage,
			statusCode,
			severity,
			errorCode,
			setDefaultDetails(details)
		);
		this.name = 'AppError';
	}
}
export class ClientError extends RootError {
	constructor(
		errorMessage,
		statusCode = 400,
		severity = ErrorSeverity.RECOVERABLE,
		errorCode = ERROR_CODES.CLIENT_ERROR,
		details = {}
	) {
		super(
			errorMessage,
			statusCode,
			severity,
			errorCode,
			setDefaultDetails(details)
		);
		this.name = 'ClientError';
	}
}
export const ErrorClasses = {
	...AppErrorClasses,
	...ClientErrorClasses
};
export const defaultRetryAfter = 60;
export function setDefaultDetails(details) {
	return {
		...details,
		exposeToClient: details?.exposeToClient ?? false
	};
}
export function createRetryMessage(retryAfter) {
	return retryAfter
		? ` Please try again after ${retryAfter} seconds.`
		: 'Please try again later';
}
export function createQuotaExceededMessage(quotaName, limit, retryAfter) {
	const message = quotaName ? `${quotaName} limit` : 'Limit';
	const limitMessage = limit ? `of ${limit}` : '';
	const retryMessage = createRetryMessage(retryAfter);
	return `${message}${limitMessage}${retryMessage}`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXJyb3JDbGFzc2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Vycm9ycy9FcnJvckNsYXNzZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzFELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQVFuRCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUc7SUFDNUIsS0FBSyxFQUFFLE9BQU87SUFDZCxXQUFXLEVBQUUsYUFBYTtJQUMxQixPQUFPLEVBQUUsU0FBUztJQUNsQixJQUFJLEVBQUUsTUFBTTtDQUNILENBQUM7QUFLWCxNQUFNLE9BQU8sU0FBVSxTQUFRLEtBQUs7SUFDbkIsVUFBVSxDQUFTO0lBQ25CLFNBQVMsQ0FBc0I7SUFDL0IsT0FBTyxDQUE0QjtJQUNuQyxRQUFRLENBQW9CO0lBRTVDLFlBQ0MsWUFBb0IsRUFDcEIsYUFBcUIsR0FBRyxFQUN4QixXQUE4QixhQUFhLENBQUMsV0FBVyxFQUN2RCxTQUFrQixFQUNsQixVQUF3QixFQUFFO1FBRTFCLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVwQixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsT0FBTyxHQUFHLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2pELENBQUM7Q0FDRDtBQUVELE1BQU0sT0FBTyxRQUFTLFNBQVEsU0FBUztJQUN0QyxZQUNDLFlBQW9CLEVBQ3BCLGFBQXFCLEdBQUcsRUFDeEIsV0FBOEIsYUFBYSxDQUFDLEtBQUssRUFDakQsWUFBb0IsV0FBVyxDQUFDLFNBQVMsRUFDekMsVUFBd0IsRUFBRTtRQUUxQixLQUFLLENBQ0osWUFBWSxFQUNaLFVBQVUsRUFDVixRQUFRLEVBQ1IsU0FBUyxFQUNULGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUMxQixDQUFDO1FBQ0YsSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUM7SUFDeEIsQ0FBQztDQUNEO0FBRUQsTUFBTSxPQUFPLFdBQVksU0FBUSxTQUFTO0lBQ3pDLFlBQ0MsWUFBb0IsRUFDcEIsYUFBcUIsR0FBRyxFQUN4QixXQUE4QixhQUFhLENBQUMsV0FBVyxFQUN2RCxZQUFvQixXQUFXLENBQUMsWUFBWSxFQUM1QyxVQUF3QixFQUFFO1FBRTFCLEtBQUssQ0FDSixZQUFZLEVBQ1osVUFBVSxFQUNWLFFBQVEsRUFDUixTQUFTLEVBQ1QsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQzFCLENBQUM7UUFDRixJQUFJLENBQUMsSUFBSSxHQUFHLGFBQWEsQ0FBQztJQUMzQixDQUFDO0NBQ0Q7QUFFRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUc7SUFDM0IsR0FBRyxlQUFlO0lBQ2xCLEdBQUcsa0JBQWtCO0NBQ3JCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxFQUFFLENBQUM7QUFFcEMsTUFBTSxVQUFVLGlCQUFpQixDQUFDLE9BQXNCO0lBQ3ZELE9BQU87UUFDTixHQUFHLE9BQU87UUFDVixjQUFjLEVBQUUsT0FBTyxFQUFFLGNBQWMsSUFBSSxLQUFLO0tBQ2hELENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLGtCQUFrQixDQUFDLFVBQW1CO0lBQ3JELE9BQU8sVUFBVTtRQUNoQixDQUFDLENBQUMsMkJBQTJCLFVBQVUsV0FBVztRQUNsRCxDQUFDLENBQUMsd0JBQXdCLENBQUM7QUFDN0IsQ0FBQztBQUVELE1BQU0sVUFBVSwwQkFBMEIsQ0FDekMsU0FBa0IsRUFDbEIsS0FBYyxFQUNkLFVBQW1CO0lBRW5CLE1BQU0sT0FBTyxHQUFXLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO0lBQ25FLE1BQU0sWUFBWSxHQUFXLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3hELE1BQU0sWUFBWSxHQUFHLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRXBELE9BQU8sR0FBRyxPQUFPLEdBQUcsWUFBWSxHQUFHLFlBQVksRUFBRSxDQUFDO0FBQ25ELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBFcnJvckNsYXNzZXMgfSBmcm9tICcuL0FwcEVycm9yQ2xhc3Nlcyc7XG5pbXBvcnQgeyBDbGllbnRFcnJvckNsYXNzZXMgfSBmcm9tICcuL0NsaWVudEVycm9yQ2xhc3Nlcyc7XG5pbXBvcnQgeyBFUlJPUl9DT0RFUyB9IGZyb20gJy4uL2NvbmZpZy9lcnJvckNvZGVzJztcblxuZXhwb3J0IGludGVyZmFjZSBFcnJvckRldGFpbHMge1xuXHRyZXRyeUFmdGVyPzogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXHRleHBvc2VUb0NsaWVudD86IGJvb2xlYW47XG5cdFtrZXk6IHN0cmluZ106IHVua25vd247XG59XG5cbmV4cG9ydCBjb25zdCBFcnJvclNldmVyaXR5ID0ge1xuXHRGQVRBTDogJ2ZhdGFsJyxcblx0UkVDT1ZFUkFCTEU6ICdyZWNvdmVyYWJsZScsXG5cdFdBUk5JTkc6ICd3YXJuaW5nJyxcblx0SU5GTzogJ2luZm8nXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgdHlwZSBFcnJvclNldmVyaXR5VHlwZSA9XG5cdCh0eXBlb2YgRXJyb3JTZXZlcml0eSlba2V5b2YgdHlwZW9mIEVycm9yU2V2ZXJpdHldO1xuXG5leHBvcnQgY2xhc3MgUm9vdEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuXHRwdWJsaWMgcmVhZG9ubHkgc3RhdHVzQ29kZTogbnVtYmVyO1xuXHRwdWJsaWMgcmVhZG9ubHkgZXJyb3JDb2RlPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXHRwdWJsaWMgcmVhZG9ubHkgZGV0YWlscz86IEVycm9yRGV0YWlscyB8IHVuZGVmaW5lZDtcblx0cHVibGljIHJlYWRvbmx5IHNldmVyaXR5OiBFcnJvclNldmVyaXR5VHlwZTtcblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRlcnJvck1lc3NhZ2U6IHN0cmluZyxcblx0XHRzdGF0dXNDb2RlOiBudW1iZXIgPSA1MDAsXG5cdFx0c2V2ZXJpdHk6IEVycm9yU2V2ZXJpdHlUeXBlID0gRXJyb3JTZXZlcml0eS5SRUNPVkVSQUJMRSxcblx0XHRlcnJvckNvZGU/OiBzdHJpbmcsXG5cdFx0ZGV0YWlsczogRXJyb3JEZXRhaWxzID0ge31cblx0KSB7XG5cdFx0c3VwZXIoZXJyb3JNZXNzYWdlKTtcblxuXHRcdHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XG5cdFx0dGhpcy5zZXZlcml0eSA9IHNldmVyaXR5O1xuXHRcdHRoaXMuZXJyb3JDb2RlID0gZXJyb3JDb2RlO1xuXHRcdHRoaXMuZGV0YWlscyA9IHNldERlZmF1bHREZXRhaWxzKGRldGFpbHMpO1xuXG5cdFx0RXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIEFwcEVycm9yIGV4dGVuZHMgUm9vdEVycm9yIHtcblx0Y29uc3RydWN0b3IoXG5cdFx0ZXJyb3JNZXNzYWdlOiBzdHJpbmcsXG5cdFx0c3RhdHVzQ29kZTogbnVtYmVyID0gNTAwLFxuXHRcdHNldmVyaXR5OiBFcnJvclNldmVyaXR5VHlwZSA9IEVycm9yU2V2ZXJpdHkuRkFUQUwsXG5cdFx0ZXJyb3JDb2RlOiBzdHJpbmcgPSBFUlJPUl9DT0RFUy5BUFBfRVJST1IsXG5cdFx0ZGV0YWlsczogRXJyb3JEZXRhaWxzID0ge31cblx0KSB7XG5cdFx0c3VwZXIoXG5cdFx0XHRlcnJvck1lc3NhZ2UsXG5cdFx0XHRzdGF0dXNDb2RlLFxuXHRcdFx0c2V2ZXJpdHksXG5cdFx0XHRlcnJvckNvZGUsXG5cdFx0XHRzZXREZWZhdWx0RGV0YWlscyhkZXRhaWxzKVxuXHRcdCk7XG5cdFx0dGhpcy5uYW1lID0gJ0FwcEVycm9yJztcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgQ2xpZW50RXJyb3IgZXh0ZW5kcyBSb290RXJyb3Ige1xuXHRjb25zdHJ1Y3Rvcihcblx0XHRlcnJvck1lc3NhZ2U6IHN0cmluZyxcblx0XHRzdGF0dXNDb2RlOiBudW1iZXIgPSA0MDAsXG5cdFx0c2V2ZXJpdHk6IEVycm9yU2V2ZXJpdHlUeXBlID0gRXJyb3JTZXZlcml0eS5SRUNPVkVSQUJMRSxcblx0XHRlcnJvckNvZGU6IHN0cmluZyA9IEVSUk9SX0NPREVTLkNMSUVOVF9FUlJPUixcblx0XHRkZXRhaWxzOiBFcnJvckRldGFpbHMgPSB7fVxuXHQpIHtcblx0XHRzdXBlcihcblx0XHRcdGVycm9yTWVzc2FnZSxcblx0XHRcdHN0YXR1c0NvZGUsXG5cdFx0XHRzZXZlcml0eSxcblx0XHRcdGVycm9yQ29kZSxcblx0XHRcdHNldERlZmF1bHREZXRhaWxzKGRldGFpbHMpXG5cdFx0KTtcblx0XHR0aGlzLm5hbWUgPSAnQ2xpZW50RXJyb3InO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBFcnJvckNsYXNzZXMgPSB7XG5cdC4uLkFwcEVycm9yQ2xhc3Nlcyxcblx0Li4uQ2xpZW50RXJyb3JDbGFzc2VzXG59O1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdFJldHJ5QWZ0ZXIgPSA2MDtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldERlZmF1bHREZXRhaWxzKGRldGFpbHM/OiBFcnJvckRldGFpbHMpOiBFcnJvckRldGFpbHMge1xuXHRyZXR1cm4ge1xuXHRcdC4uLmRldGFpbHMsXG5cdFx0ZXhwb3NlVG9DbGllbnQ6IGRldGFpbHM/LmV4cG9zZVRvQ2xpZW50ID8/IGZhbHNlXG5cdH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZXRyeU1lc3NhZ2UocmV0cnlBZnRlcj86IG51bWJlcik6IHN0cmluZyB7XG5cdHJldHVybiByZXRyeUFmdGVyXG5cdFx0PyBgIFBsZWFzZSB0cnkgYWdhaW4gYWZ0ZXIgJHtyZXRyeUFmdGVyfSBzZWNvbmRzLmBcblx0XHQ6ICdQbGVhc2UgdHJ5IGFnYWluIGxhdGVyJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVF1b3RhRXhjZWVkZWRNZXNzYWdlKFxuXHRxdW90YU5hbWU/OiBzdHJpbmcsXG5cdGxpbWl0PzogbnVtYmVyLFxuXHRyZXRyeUFmdGVyPzogbnVtYmVyXG4pOiBzdHJpbmcge1xuXHRjb25zdCBtZXNzYWdlOiBzdHJpbmcgPSBxdW90YU5hbWUgPyBgJHtxdW90YU5hbWV9IGxpbWl0YCA6ICdMaW1pdCc7XG5cdGNvbnN0IGxpbWl0TWVzc2FnZTogc3RyaW5nID0gbGltaXQgPyBgb2YgJHtsaW1pdH1gIDogJyc7XG5cdGNvbnN0IHJldHJ5TWVzc2FnZSA9IGNyZWF0ZVJldHJ5TWVzc2FnZShyZXRyeUFmdGVyKTtcblxuXHRyZXR1cm4gYCR7bWVzc2FnZX0ke2xpbWl0TWVzc2FnZX0ke3JldHJ5TWVzc2FnZX1gO1xufVxuIl19
