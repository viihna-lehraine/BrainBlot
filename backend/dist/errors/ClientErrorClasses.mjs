import { FallbackSuccessInfo } from './AppErrorClasses.mjs';
import {
	ClientError,
	ErrorSeverity,
	createQuotaExceededMessage,
	createRetryMessage,
	defaultRetryAfter
} from './ErrorClasses.mjs';
import { ERROR_CODES } from '../config/errorCodes.mjs';
export class AutoCorrectedInputWarning extends ClientError {
	constructor(fieldName, details = {}) {
		const errorMessage = fieldName
			? `${fieldName} was auto-corrected`
			: 'Input was auto-corrected';
		const customDetails = fieldName ? { fieldName, ...details } : details;
		super(
			errorMessage,
			200,
			ErrorSeverity.WARNING,
			ERROR_CODES.AUTOCORRECT_INPUT_WARNING,
			customDetails
		);
		this.name = 'AutoCorrectedInputWarning';
	}
}
export class ClientAuthenticationError extends ClientError {
	constructor(errorMessage = 'Authentication failed', details = {}) {
		super(
			errorMessage,
			401,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.CLIENT_AUTH_ERROR,
			details
		);
		this.name = 'AuthenticationError';
	}
}
export class DeprecatedApiWarning extends ClientError {
	constructor(apiVersion, details = {}) {
		const errorMessage = apiVersion
			? `Deprecated API version ${apiVersion} used`
			: 'Deprecated API version used';
		const customDetails = apiVersion ? { apiVersion, ...details } : details;
		super(
			errorMessage,
			200,
			ErrorSeverity.WARNING,
			ERROR_CODES.DEPRECATED_API_WARNING,
			customDetails
		);
		this.name = 'DeprecatedApiWarning';
	}
}
export class ExternalServiceError extends ClientError {
	constructor(
		errorMessage = 'Service temporarily unavailable',
		details = {}
	) {
		super(
			errorMessage,
			503,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.EXTERNAL_SERVICE_ERROR,
			details
		);
		this.name = 'ExternalServiceError';
	}
}
export class FileProcessingError extends ClientError {
	constructor(retryAfter = defaultRetryAfter, details = {}) {
		const message = 'File processing failed.';
		const retryAfterMessage = createRetryMessage(retryAfter);
		const errorMessage = `${message} ${retryAfterMessage}`.trim();
		const customDetails = retryAfter ? { retryAfter, ...details } : details;
		super(
			errorMessage,
			500,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.FILE_PROCESSING_ERROR,
			customDetails
		);
		this.name = 'FileProcessingError';
	}
}
export class ForbiddenError extends ClientError {
	constructor(action, details = {}) {
		const errorMessage = action
			? `Forbidden: You are not allowed to ${action}`
			: 'Forbidden';
		const customDetails = action ? { action, ...details } : details;
		super(
			errorMessage,
			403,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.FORBIDDEN,
			customDetails
		);
		this.name = 'ForbiddenError';
	}
}
export class InvalidCredentialsError extends ClientError {
	constructor(errorMessage = 'Invalid credentials provided', details = {}) {
		super(
			errorMessage,
			401,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.INVALID_CREDENTIALS,
			details
		);
		this.name = 'InvalidCredentialsError';
	}
}
export class InvalidInputError extends ClientError {
	constructor(inputName, details = {}) {
		const errorMessage = inputName
			? `Invalid input: ${inputName}`
			: 'Invalid input provided';
		const customDetails = inputName ? { inputName, ...details } : details;
		super(
			errorMessage,
			400,
			ErrorSeverity.WARNING,
			ERROR_CODES.INVALID_INPUT,
			customDetails
		);
		this.name = 'InvalidInputError';
	}
}
export class InvalidTokenError extends ClientError {
	constructor(
		errorMessage = 'Invalid or expired token',
		token,
		details = {}
	) {
		const customDetails = token ? { token, ...details } : details;
		super(
			errorMessage,
			401,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.INVALID_TOKEN,
			customDetails
		);
		this.name = 'InvalidTokenError';
	}
}
export class PasswordValidationError extends ClientError {
	constructor(
		errorMessage = 'Password validation error. Please try again',
		details = {}
	) {
		super(
			errorMessage,
			400,
			ErrorSeverity.WARNING,
			ERROR_CODES.PASSWORD_VALIDATION_ERROR,
			details
		);
		this.name = 'PasswordValidationError';
	}
}
export class PermissionDeniedError extends ClientError {
	constructor(errorMessage = 'Permission denied', action, details = {}) {
		const customDetails = action ? { action, ...details } : details;
		super(
			errorMessage,
			403,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.PERMISSION_DENIED,
			customDetails
		);
		this.name = 'PermissionDeniedError';
	}
}
export class QuotaExceededErrorRecoverable extends ClientError {
	constructor(
		retryAfter = defaultRetryAfter,
		quotaName,
		limit,
		details = {}
	) {
		const errorMessage = createQuotaExceededMessage(
			quotaName,
			limit,
			retryAfter
		);
		const errorDetails = {
			...(quotaName ? { quotaName } : {}),
			...(limit !== undefined ? { limit } : {}),
			...(retryAfter ? { retryAfter } : {}),
			...details
		};
		super(
			errorMessage,
			429,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.QUOTA_EXCEEDED,
			errorDetails
		);
		this.name = 'QuotaExceededError';
	}
}
export class QuotaExceededErrorWarning extends ClientError {
	constructor(
		retryAfter = defaultRetryAfter,
		quotaName,
		limit,
		details = {}
	) {
		const errorMessage = createQuotaExceededMessage(
			quotaName,
			limit,
			retryAfter
		);
		const errorDetails = {
			...(quotaName ? { quotaName } : {}),
			...(limit !== undefined ? { limit } : {}),
			...(retryAfter ? { retryAfter } : {}),
			...details
		};
		super(
			errorMessage,
			429,
			ErrorSeverity.WARNING,
			ERROR_CODES.QUOTA_EXCEEDED_WARNING,
			errorDetails
		);
		this.name = 'QuotaExceededErrorWarning';
	}
}
export class RateLimitErrorRecoverable extends ClientError {
	constructor(retryAfter = defaultRetryAfter, details = {}) {
		const message = 'Rate limit exceeded.';
		const retryMessage = createRetryMessage(retryAfter);
		const errorMessage = `${message}${retryMessage}`.trim();
		const customDetails = retryAfter ? { retryAfter, ...details } : details;
		super(
			errorMessage,
			429,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.RATE_LIMIT_EXCEEDED,
			customDetails
		);
		this.name = 'RateLimitErrorRecoverable';
	}
}
export class RateLimitErrorWarning extends ClientError {
	constructor(retryAfter = defaultRetryAfter, details = {}) {
		const message = 'Rate limit exceeded.';
		const retryMessage = createRetryMessage(retryAfter);
		const errorMessage = `${message}${retryMessage}`.trim();
		const customDetails = retryAfter ? { retryAfter, ...details } : details;
		super(
			errorMessage,
			429,
			ErrorSeverity.WARNING,
			ERROR_CODES.RATE_LIMIT_EXCEEDED_WARNING,
			customDetails
		);
		this.name = 'RateLimitErrorWarning';
	}
}
export class SessionExpiredError extends ClientError {
	constructor(errorMessage = 'Your session has expired', details = {}) {
		super(
			errorMessage,
			401,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.SESSION_EXPIRED,
			details
		);
		this.name = 'SessionExpiredError';
	}
}
export class TimeoutError extends ClientError {
	constructor(
		errorMessage = 'Request timed out. Please try again',
		details = {}
	) {
		super(
			errorMessage,
			504,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.TIMEOUT_ERROR,
			details
		);
		this.name = 'TimeoutError';
	}
}
export class UserRegistrationError extends ClientError {
	constructor(
		errorMessage = 'Account registration failed. Please try again.',
		details = {}
	) {
		super(
			errorMessage,
			500,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.USER_REGISTRATION_ERROR,
			details
		);
		this.name = 'UserRegistrationError';
	}
}
export const ClientErrorClasses = {
	AutoCorrectedInputWarning,
	ClientAuthenticationError,
	DeprecatedApiWarning,
	ExternalServiceError,
	FallbackSuccessInfo,
	FileProcessingError,
	ForbiddenError,
	InvalidCredentialsError,
	InvalidInputError,
	InvalidTokenError,
	PasswordValidationError,
	PermissionDeniedError,
	QuotaExceededErrorRecoverable,
	QuotaExceededErrorWarning,
	RateLimitErrorRecoverable,
	RateLimitErrorWarning,
	SessionExpiredError,
	TimeoutError,
	UserRegistrationError
};
//# sourceMappingURL=data:application/json;base64,
