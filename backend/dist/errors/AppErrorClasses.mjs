import {
	AppError,
	ErrorSeverity,
	createQuotaExceededMessage,
	createRetryMessage,
	defaultRetryAfter
} from './ErrorClasses.mjs';
import { ERROR_CODES } from '../config/errorCodes.mjs';
export class AppAuthenticationError extends AppError {
	constructor(
		errorMessage = 'Server-side authentication error',
		details = {}
	) {
		super(
			errorMessage,
			401,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.APP_AUTH_ERROR,
			details
		);
		this.name = 'AppAuthenticationError';
	}
}
export class AuthControllerError extends AppError {
	constructor(
		errorMessage = 'Authentication controller error',
		details = {}
	) {
		super(
			errorMessage,
			500,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.AUTH_CONTROLLER_ERROR,
			details
		);
		this.name = 'AuthControllerError';
	}
}
export class CacheServiceError extends AppError {
	constructor(errorMessage = 'Cache service-level error', details = {}) {
		super(
			errorMessage,
			500,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.CACHE_SERVICE_ERROR,
			details
		);
		this.name = 'CacheServiceError';
	}
}
export class ConfigurationError extends AppError {
	constructor(errorMessage = 'Internal server error', details = {}) {
		super(
			errorMessage,
			500,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.CONFIG_ERROR,
			details
		);
		this.name = 'ConfigurationError';
	}
}
export class ConfigurationErrorFatal extends AppError {
	constructor(errorMessage = 'Internal server error', details = {}) {
		super(
			errorMessage,
			500,
			ErrorSeverity.FATAL,
			ERROR_CODES.CONFIG_ERROR_FATAL,
			details
		);
		this.name = 'ConfigurationErrorFatal';
	}
}
export class ConcurrencyError extends AppError {
	constructor(resource, details = {}) {
		const errorMessage = resource
			? `Concurrency error on resource: ${resource}`
			: 'Concurrency error';
		const customDetails = resource ? { resource, ...details } : details;
		super(
			errorMessage,
			409,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.CONCURRENCY_ERROR,
			customDetails
		);
		this.name = 'ConcurrencyError';
	}
}
export class ConflictError extends AppError {
	constructor(resource, details = {}) {
		const errorMessage = resource
			? `Conflict: ${resource} already exists`
			: 'Conflict: resource already exists';
		const customDetails = resource ? { resource, ...details } : details;
		super(
			errorMessage,
			409,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.CONFLICT_ERROR,
			customDetails
		);
		this.name = 'ConflictError';
	}
}
export class DatabaseErrorFatal extends AppError {
	constructor(errorMessage = 'Internal server error', details = {}) {
		super(
			errorMessage,
			500,
			ErrorSeverity.FATAL,
			ERROR_CODES.DB_ERROR_FATAL,
			details
		);
		this.name = 'DatabaseError';
	}
}
export class DatabaseErrorRecoverable extends AppError {
	constructor(
		errorMessage = 'Internal server error. Please try again later.',
		details = {}
	) {
		super(
			errorMessage,
			503,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.DB_ERROR_RECOVERABLE,
			details
		);
		this.name = 'DatabaseErrorRecoverable';
	}
}
export class DataIntegrityError extends AppError {
	constructor(errorMessage = 'Internal server error', details = {}) {
		super(
			errorMessage,
			500,
			ErrorSeverity.FATAL,
			ERROR_CODES.DATA_INTEGRITY_ERROR,
			details
		);
		this.name = 'DataIntegrityError';
	}
}
export class DependencyErrorFatal extends AppError {
	constructor(
		errorMessage = 'Internal server error',
		details = {},
		dependencyName
	) {
		const customDetails = dependencyName
			? { dependencyName, ...details }
			: details;
		super(
			errorMessage,
			500,
			ErrorSeverity.FATAL,
			ERROR_CODES.DEPENDENCY_ERROR_FATAL,
			customDetails
		);
		this.name = 'DependencyError';
	}
}
export class DependencyErrorRecoverable extends AppError {
	constructor(
		errorMessage = 'Internal server error',
		details = {},
		dependencyName
	) {
		const customDetails = dependencyName
			? { dependencyName, ...details }
			: details;
		super(
			errorMessage,
			500,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.DEPENDENCY_ERROR_RECOVERABLE,
			customDetails
		);
	}
}
export class ExpressError extends AppError {
	constructor(errorMessage = 'Internal server error', details = {}) {
		super(
			errorMessage,
			500,
			ErrorSeverity.RECOVERABLE ||
				ErrorSeverity.WARNING ||
				ErrorSeverity.FATAL,
			ERROR_CODES.EXPRESS_ERROR,
			details
		);
		this.name = 'ExpressError';
	}
}
export class ExpressRouteError extends AppError {
	constructor(errorMessage = 'Internal server error', details = {}) {
		super(
			errorMessage,
			500,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.EXPRESS_ROUTE_ERROR,
			details
		);
		this.name = 'ExpressRouteError';
	}
}
export class ExternalServiceErrorFatal extends AppError {
	constructor(errorMessage = 'Service unavailable', details = {}) {
		super(
			errorMessage,
			503,
			ErrorSeverity.FATAL,
			ERROR_CODES.EXTERNAL_SERVICE_ERROR_FATAL,
			details
		);
		this.name = 'ExternalServiceErrorFatal';
	}
}
export class FallbackSuccessInfo extends AppError {
	constructor(service, details = {}) {
		const errorMessage = service
			? `Successfully fell back to ${service}`
			: 'Successfully fell back to another service';
		const customDetails = service ? { service, ...details } : details;
		super(
			errorMessage,
			200,
			ErrorSeverity.INFO,
			ERROR_CODES.FALLBACK_SUCCESS,
			customDetails
		);
		this.name = 'FallbackSuccessInfo';
	}
}
export class HealthCheckError extends AppError {
	constructor(errorMessage = 'Health check error', details = {}) {
		super(
			errorMessage,
			500,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.HEALTH_CHECK_ERROR,
			details
		);
		this.name = 'HealthCheckError';
	}
}
export class HTTPSClientErrorFatal extends AppError {
	constructor(errorMessage = 'HTTPS Client Error (fatal)', details = {}) {
		super(
			errorMessage,
			500,
			ErrorSeverity.FATAL,
			ERROR_CODES.HTTPS_CLIENT_ERROR_FAL,
			details
		);
		this.name = 'HTTPSClientErrorFatal';
	}
}
export class HTTPSServerErrorRecoverable extends AppError {
	constructor(
		errorMessage = 'HTTPS Server Error (recoverable)',
		details = {}
	) {
		super(
			errorMessage,
			500,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.HTTPS_SERVER_ERROR_RECOVERABLE,
			details
		);
		this.name = 'HTTPSServerErrorRecoverable';
	}
}
export class InsufficientStorageError extends AppError {
	constructor(requiredSpace, availableSpace, details = {}) {
		const errorMessage = [
			'Insufficient storage.',
			requiredSpace ? `Required: ${requiredSpace}MB` : null,
			availableSpace ? `Available: ${availableSpace}MB` : null
		]
			.filter(Boolean)
			.join(', ');
		const errorDetails = {
			...(requiredSpace !== undefined ? { requiredSpace } : {}),
			...(availableSpace !== undefined ? { availableSpace } : {}),
			...details
		};
		super(
			errorMessage,
			507,
			ErrorSeverity.FATAL,
			ERROR_CODES.INSUFFICIENT_STORAGE,
			errorDetails
		);
		this.name = 'InsufficientStorageError';
	}
}
export class InvalidConfigurationError extends AppError {
	constructor(configKey, details = {}) {
		const errorMessage = configKey
			? `Invalid or missing configuration for ${configKey}`
			: 'Invalid or missing configuration';
		const customDetails = configKey ? { configKey, ...details } : details;
		super(
			errorMessage,
			500,
			ErrorSeverity.FATAL,
			ERROR_CODES.INVALID_CONFIG,
			customDetails
		);
		this.name = 'InvalidConfigurationError';
	}
}
export class MiddlewareServiceError extends AppError {
	constructor(errorMessage = 'Middleware Service error', details = {}) {
		super(
			errorMessage,
			500,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.MIDDLEWARE_SERVICE_ERROR,
			details
		);
		this.name = 'CacheServiceError';
	}
}
export class MissingResourceError extends AppError {
	constructor(resource, details = {}) {
		const errorMessage = resource
			? `${resource} not found`
			: 'Resource not found';
		const customDetails = resource ? { resource, ...details } : details;
		super(
			errorMessage,
			404,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.MISSING_RESOURCE,
			customDetails
		);
		this.name = 'MissingResourceError';
	}
}
export class PassportAuthServiceError extends AppError {
	constructor(errorMessage = 'Passport Auth Service error', details = {}) {
		super(
			errorMessage,
			500,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.PASSPORT_AUTH_SERVICE_ERROR,
			details
		);
		this.name = 'PassportAuthServiceError';
	}
}
export class PartialServiceFailureWarning extends AppError {
	constructor(serviceName, details = {}) {
		const errorMessage = serviceName
			? `${serviceName} is currently experiencing issues. Please try again later.`
			: 'Service is currently experiencing issues. Please try again later.';
		const customDetails = serviceName
			? { serviceName, ...details }
			: details;
		super(
			errorMessage,
			503,
			ErrorSeverity.WARNING,
			ERROR_CODES.PARTIAL_SERVICE_FAILURE,
			customDetails
		);
		this.name = 'PartialServiceFailureWarning';
	}
}
export class QuotaExceededErrorFatal extends AppError {
	constructor(
		retryAfter = defaultRetryAfter,
		quotaName,
		limit,
		details = {}
	) {
		const errorMessage = createQuotaExceededMessage(
			quotaName,
			limit,
			retryAfter
		);
		const errorDetails = {
			...(quotaName ? { quotaName } : {}),
			...(limit !== undefined ? { limit } : {}),
			...(retryAfter ? { retryAfter } : {}),
			...details
		};
		super(
			errorMessage,
			500,
			ErrorSeverity.FATAL,
			ERROR_CODES.QUOTA_EXCEEDED_FATAL,
			errorDetails
		);
		this.name = 'QuotaExceededError';
	}
}
export class RateLimitErrorFatal extends AppError {
	constructor(retryAfter = defaultRetryAfter, details = {}) {
		const message = 'Rate limit exceeded (fatal exception).';
		const retryMessage = createRetryMessage(retryAfter);
		const errorMessage = `${message}${retryMessage}`.trim();
		const customDetails = retryAfter ? { retryAfter, ...details } : details;
		super(
			errorMessage,
			429,
			ErrorSeverity.FATAL,
			ERROR_CODES.RATE_LIMIT_EXCEEDED_FATAL,
			customDetails
		);
		this.name = 'RateLimitErrorFatal';
	}
}
export class RedisServiceError extends AppError {
	constructor(errorMessage = 'Redis Service error', details = {}) {
		super(
			errorMessage,
			500,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.REDIS_SERVICE_ERROR,
			details
		);
		this.name = 'CacheServiceError';
	}
}
export class ResourceManagerError extends AppError {
	constructor(errorMessage = 'Resource Manager error', details = {}) {
		super(
			errorMessage,
			500,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.REDIS_SERVICE_ERROR,
			details
		);
		this.name = 'CacheServiceError';
	}
}
export class RootMiddlewareError extends AppError {
	constructor(errorMessage = 'Root middleware error', details = {}) {
		super(
			errorMessage,
			500,
			ErrorSeverity.WARNING || ErrorSeverity.FATAL,
			ERROR_CODES.ROOT_MIDDLEWARE_ERROR,
			details
		);
		this.name = 'RootMiddlewareError';
	}
}
export class ServerNotInitializedError extends AppError {
	constructor(
		errorMessage = 'HTTPS Server is not initialized',
		details = {}
	) {
		super(
			errorMessage,
			500,
			ErrorSeverity.WARNING,
			ERROR_CODES.SERVER_NOT_INITIALIZED_ERROR,
			details
		);
		this.name = 'RootMiddlewareError';
	}
}
export class ServiceDegradedError extends AppError {
	constructor(service, details = {}) {
		const errorMessage = service
			? `${service} is currently degraded`
			: 'Service is currently degraded';
		const customDetails = service ? { service, ...details } : details;
		super(
			errorMessage,
			200,
			ErrorSeverity.WARNING,
			ERROR_CODES.SERVICE_DEGRADED,
			customDetails
		);
		this.name = 'ServiceDegradedError';
	}
}
export class ServiceDegradedErrorMinor extends AppError {
	constructor(service, details = {}) {
		const errorMessage = service
			? `${service} is currently degraded (minor)`
			: 'Service is currently degraded (minor)';
		const customDetails = service ? { service, ...details } : details;
		super(
			errorMessage,
			200,
			ErrorSeverity.INFO,
			ERROR_CODES.SERVICE_DEGRADED_MINOR,
			customDetails
		);
		this.name = 'ServiceDegradedErrorMinor';
	}
}
export class ServiceUnavailableError extends AppError {
	constructor(retryAfter = defaultRetryAfter, service, details = {}) {
		const message = service
			? `${service} is currently unavailable`
			: 'Service is currently unavailable';
		const retryMessage = retryAfter
			? ` Please try again after ${retryAfter} seconds.`
			: ' Please try again later.';
		const errorMessage = `${message} ${retryMessage}`.trim();
		const errorDetails = {
			...(retryAfter !== undefined ? { retryAfter } : {}),
			...(service !== undefined ? { service } : {}),
			...details
		};
		super(
			errorMessage,
			503,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.SERVICE_UNAVAILABLE,
			errorDetails
		);
		this.name = 'ServiceUnavailableError';
	}
}
export class ServiceUnavailableErrorFatal extends AppError {
	constructor(service, details = {}) {
		const errorMessage = service
			? `${service} is currently unavailable (fatal exception)`
			: 'Service is currently unavailable (fatal exception)';
		const errorDetails = {
			...(service !== undefined ? { service } : {}),
			...details
		};
		super(
			errorMessage,
			503,
			ErrorSeverity.FATAL,
			ERROR_CODES.SERVICE_UNAVAILABLE,
			errorDetails
		);
		this.name = 'ServiceUnavailableErrorFatal';
	}
}
export class SlowApiWarning extends AppError {
	constructor(apiName, responseTime, details = {}) {
		const errorMessage = [
			apiName
				? `${apiName} is responding slowly`
				: 'API is responding slowly.',
			responseTime ? ` Response time: ${responseTime}ms` : null
		]
			.filter(Boolean)
			.join('');
		const errorDetails = {
			...(apiName !== undefined ? { apiName } : {}),
			...(responseTime !== undefined ? { responseTime } : {}),
			...details
		};
		super(
			errorMessage,
			200,
			ErrorSeverity.WARNING,
			ERROR_CODES.SLOW_API_WARNING,
			errorDetails
		);
		this.name = 'SlowApiWarning';
	}
}
export class UserActionInfo extends AppError {
	constructor(action, details = {}) {
		const errorMessage = action
			? `User performed action: ${action}`
			: 'User performed action';
		const customDetails = action ? { action, ...details } : details;
		super(
			errorMessage,
			200,
			ErrorSeverity.INFO,
			ERROR_CODES.USER_ACTION_INFO,
			customDetails
		);
		this.name = 'UserActionInfo';
	}
}
export class UtilityErrorFatal extends AppError {
	constructor(utility, details = {}) {
		const errorMessage = `Fatal error occured when calling ${utility}`;
		const customDetails = utility ? { utility, ...details } : details;
		super(
			errorMessage,
			500,
			ErrorSeverity.FATAL,
			ERROR_CODES.UTILITY_ERROR_FATAL,
			customDetails
		);
		this.name = 'UtilityErrorFatal';
	}
}
export class UtilityErrorRecoverable extends AppError {
	constructor(utility, details = {}) {
		const errorMessage = `Utility occurred in ${utility}`;
		const customDetails = utility ? { utility, ...details } : details;
		super(
			errorMessage,
			500,
			ErrorSeverity.RECOVERABLE,
			ERROR_CODES.UTILITY_ERROR_RECOVERABLE,
			customDetails
		);
		this.name = 'UtilityErrorRecoverable';
	}
}
export class ValidationError extends AppError {
	constructor(invalidFields, details = {}) {
		const errorMessage = invalidFields
			? `Validation error on fields: ${invalidFields.join(', ')}`
			: 'Validation error';
		const customDetails = invalidFields
			? { invalidFields, ...details }
			: details;
		super(
			errorMessage,
			400,
			ErrorSeverity.WARNING,
			ERROR_CODES.VALIDATION_ERROR,
			customDetails
		);
		this.name = 'ValidationError';
	}
}
export const AppErrorClasses = {
	AppAuthenticationError,
	AuthControllerError,
	CacheServiceError,
	ConfigurationError,
	ConfigurationErrorFatal,
	ConcurrencyError,
	ConflictError,
	DatabaseErrorFatal,
	DatabaseErrorRecoverable,
	DataIntegrityError,
	DependencyErrorFatal,
	DependencyErrorRecoverable,
	ExpressError,
	ExpressRouteError,
	ExternalServiceErrorFatal,
	HealthCheckError,
	HTTPSClientErrorFatal,
	HTTPSServerErrorRecoverable,
	InsufficientStorageError,
	MiddlewareServiceError,
	MissingResourceError,
	PassportAuthServiceError,
	PartialServiceFailureWarning,
	QuotaExceededErrorFatal,
	RateLimitErrorFatal,
	RedisServiceError,
	ResourceManagerError,
	RootMiddlewareError,
	ServerNotInitializedError,
	ServiceDegradedError,
	ServiceDegradedErrorMinor,
	ServiceUnavailableError,
	ServiceUnavailableErrorFatal,
	SlowApiWarning,
	UserActionInfo,
	UtilityErrorFatal,
	UtilityErrorRecoverable,
	ValidationError
};
//# sourceMappingURL=data:application/json;base64,
