import passport from 'passport';
import loadEnv from './config/loadEnv.js';
import {
	initializeDatabase,
	configurePassport,
	initializeIpBlacklist,
	setupHttp
} from './index.js';
import { app, initializeApp } from './config/app.js';
import featureFlags from './config/featureFlags.js';
import { getSequelizeInstance } from './config/db.js';
import setupLogger from './config/logger.js';
import { initializeModels } from './models/ModelsIndex.js';
await loadEnv();
const logger = await setupLogger();
// Initialize Database
logger.info('Initializing database');
await initializeDatabase();
// Initialize all models
logger.info('Initializing models');
initializeModels();
// Confuigure Passport for authentication
logger.info('Initializing passport');
await configurePassport(passport);
// Initialize IP blacklist
logger.info('Initializing IP blacklist');
await initializeIpBlacklist();
// Initialize the Express application with all middlewares and routes
logger.info('Initializing app');
await initializeApp();
// Sync Datababase Connection and Models, dependent on flag value
logger.info(
	'DB Sync Flag: ',
	featureFlags.dbSyncFlag,
	' Type: ',
	typeof featureFlags.dbSyncFlag
);
const dbSyncFlag = featureFlags?.dbSyncFlag ?? false;
if (dbSyncFlag) {
	// test the database connection and sync models
	logger.info(
		'Testing database connection and syncing models using getSequelizeInstance'
	);
	const sequelize = getSequelizeInstance();
	try {
		await sequelize.sync(); // if sync isn't working, try adding { force: true } for one round then removing again
		logger.info('Database and tables created!');
	} catch (err) {
		logger.error('Database Connection Test and Sync: Server error:', err);
		process.exit(1); // exit process with failure
	}
}
// Start Web Server
logger.info('Starting server');
try {
	const { startServer } = await setupHttp(app);
	startServer();
	logger.info('Server started successfully!');
} catch (err) {
	logger.error('Unhandled error during server initialization: ', err);
	process.exit(1);
}
export default app;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFFBQVEsTUFBTSxVQUFVLENBQUM7QUFDaEMsT0FBTyxPQUFPLE1BQU0sa0JBQWtCLENBQUM7QUFDdkMsT0FBTyxFQUNOLGtCQUFrQixFQUNsQixpQkFBaUIsRUFDakIscUJBQXFCLEVBQ3JCLFNBQVMsRUFDVCxNQUFNLFNBQVMsQ0FBQztBQUNqQixPQUFPLEVBQUUsR0FBRyxFQUFFLGFBQWEsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNsRCxPQUFPLFlBQVksTUFBTSx1QkFBdUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDbkQsT0FBTyxXQUFXLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFeEQsTUFBTSxPQUFPLEVBQUUsQ0FBQztBQUVoQixNQUFNLE1BQU0sR0FBRyxNQUFNLFdBQVcsRUFBRSxDQUFDO0FBRW5DLHNCQUFzQjtBQUN0QixNQUFNLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFDckMsTUFBTSxrQkFBa0IsRUFBRSxDQUFDO0FBRTNCLHdCQUF3QjtBQUN4QixNQUFNLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFDbkMsZ0JBQWdCLEVBQUUsQ0FBQztBQUVuQix5Q0FBeUM7QUFDekMsTUFBTSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQ3JDLE1BQU0saUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFbEMsMEJBQTBCO0FBQzFCLE1BQU0sQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUN6QyxNQUFNLHFCQUFxQixFQUFFLENBQUM7QUFFOUIscUVBQXFFO0FBQ3JFLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUNoQyxNQUFNLGFBQWEsRUFBRSxDQUFDO0FBRXRCLGlFQUFpRTtBQUNqRSxNQUFNLENBQUMsSUFBSSxDQUNWLGdCQUFnQixFQUNoQixZQUFZLENBQUMsVUFBVSxFQUN2QixTQUFTLEVBQ1QsT0FBTyxZQUFZLENBQUMsVUFBVSxDQUM5QixDQUFDO0FBRUYsTUFBTSxVQUFVLEdBQUcsWUFBWSxFQUFFLFVBQVUsSUFBSSxLQUFLLENBQUM7QUFDckQsSUFBSSxVQUFVLEVBQUUsQ0FBQztJQUNoQiwrQ0FBK0M7SUFDL0MsTUFBTSxDQUFDLElBQUksQ0FDViwyRUFBMkUsQ0FDM0UsQ0FBQztJQUNGLE1BQU0sU0FBUyxHQUFHLG9CQUFvQixFQUFFLENBQUM7SUFDekMsSUFBSSxDQUFDO1FBQ0osTUFBTSxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxzRkFBc0Y7UUFDOUcsTUFBTSxDQUFDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2QsTUFBTSxDQUFDLEtBQUssQ0FBQyxrREFBa0QsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN0RSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsNEJBQTRCO0lBQzlDLENBQUM7QUFDRixDQUFDO0FBRUQsbUJBQW1CO0FBQ25CLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUMvQixJQUFJLENBQUM7SUFDSixNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsTUFBTSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0MsV0FBVyxFQUFFLENBQUM7SUFDZCxNQUFNLENBQUMsSUFBSSxDQUFDLDhCQUE4QixDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDZCxNQUFNLENBQUMsS0FBSyxDQUFDLGdEQUFnRCxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3BFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakIsQ0FBQztBQUVELGVBQWUsR0FBRyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhc3Nwb3J0IGZyb20gJ3Bhc3Nwb3J0JztcbmltcG9ydCBsb2FkRW52IGZyb20gJy4vY29uZmlnL2xvYWRFbnYnO1xuaW1wb3J0IHtcblx0aW5pdGlhbGl6ZURhdGFiYXNlLFxuXHRjb25maWd1cmVQYXNzcG9ydCxcblx0aW5pdGlhbGl6ZUlwQmxhY2tsaXN0LFxuXHRzZXR1cEh0dHBcbn0gZnJvbSAnLi9pbmRleCc7XG5pbXBvcnQgeyBhcHAsIGluaXRpYWxpemVBcHAgfSBmcm9tICcuL2NvbmZpZy9hcHAnO1xuaW1wb3J0IGZlYXR1cmVGbGFncyBmcm9tICcuL2NvbmZpZy9mZWF0dXJlRmxhZ3MnO1xuaW1wb3J0IHsgZ2V0U2VxdWVsaXplSW5zdGFuY2UgfSBmcm9tICcuL2NvbmZpZy9kYic7XG5pbXBvcnQgc2V0dXBMb2dnZXIgZnJvbSAnLi9jb25maWcvbG9nZ2VyJztcbmltcG9ydCB7IGluaXRpYWxpemVNb2RlbHMgfSBmcm9tICcuL21vZGVscy9Nb2RlbHNJbmRleCc7XG5cbmF3YWl0IGxvYWRFbnYoKTtcblxuY29uc3QgbG9nZ2VyID0gYXdhaXQgc2V0dXBMb2dnZXIoKTtcblxuLy8gSW5pdGlhbGl6ZSBEYXRhYmFzZVxubG9nZ2VyLmluZm8oJ0luaXRpYWxpemluZyBkYXRhYmFzZScpO1xuYXdhaXQgaW5pdGlhbGl6ZURhdGFiYXNlKCk7XG5cbi8vIEluaXRpYWxpemUgYWxsIG1vZGVsc1xubG9nZ2VyLmluZm8oJ0luaXRpYWxpemluZyBtb2RlbHMnKTtcbmluaXRpYWxpemVNb2RlbHMoKTtcblxuLy8gQ29uZnVpZ3VyZSBQYXNzcG9ydCBmb3IgYXV0aGVudGljYXRpb25cbmxvZ2dlci5pbmZvKCdJbml0aWFsaXppbmcgcGFzc3BvcnQnKTtcbmF3YWl0IGNvbmZpZ3VyZVBhc3Nwb3J0KHBhc3Nwb3J0KTtcblxuLy8gSW5pdGlhbGl6ZSBJUCBibGFja2xpc3RcbmxvZ2dlci5pbmZvKCdJbml0aWFsaXppbmcgSVAgYmxhY2tsaXN0Jyk7XG5hd2FpdCBpbml0aWFsaXplSXBCbGFja2xpc3QoKTtcblxuLy8gSW5pdGlhbGl6ZSB0aGUgRXhwcmVzcyBhcHBsaWNhdGlvbiB3aXRoIGFsbCBtaWRkbGV3YXJlcyBhbmQgcm91dGVzXG5sb2dnZXIuaW5mbygnSW5pdGlhbGl6aW5nIGFwcCcpO1xuYXdhaXQgaW5pdGlhbGl6ZUFwcCgpO1xuXG4vLyBTeW5jIERhdGFiYWJhc2UgQ29ubmVjdGlvbiBhbmQgTW9kZWxzLCBkZXBlbmRlbnQgb24gZmxhZyB2YWx1ZVxubG9nZ2VyLmluZm8oXG5cdCdEQiBTeW5jIEZsYWc6ICcsXG5cdGZlYXR1cmVGbGFncy5kYlN5bmNGbGFnLFxuXHQnIFR5cGU6ICcsXG5cdHR5cGVvZiBmZWF0dXJlRmxhZ3MuZGJTeW5jRmxhZ1xuKTtcblxuY29uc3QgZGJTeW5jRmxhZyA9IGZlYXR1cmVGbGFncz8uZGJTeW5jRmxhZyA/PyBmYWxzZTtcbmlmIChkYlN5bmNGbGFnKSB7XG5cdC8vIHRlc3QgdGhlIGRhdGFiYXNlIGNvbm5lY3Rpb24gYW5kIHN5bmMgbW9kZWxzXG5cdGxvZ2dlci5pbmZvKFxuXHRcdCdUZXN0aW5nIGRhdGFiYXNlIGNvbm5lY3Rpb24gYW5kIHN5bmNpbmcgbW9kZWxzIHVzaW5nIGdldFNlcXVlbGl6ZUluc3RhbmNlJ1xuXHQpO1xuXHRjb25zdCBzZXF1ZWxpemUgPSBnZXRTZXF1ZWxpemVJbnN0YW5jZSgpO1xuXHR0cnkge1xuXHRcdGF3YWl0IHNlcXVlbGl6ZS5zeW5jKCk7IC8vIGlmIHN5bmMgaXNuJ3Qgd29ya2luZywgdHJ5IGFkZGluZyB7IGZvcmNlOiB0cnVlIH0gZm9yIG9uZSByb3VuZCB0aGVuIHJlbW92aW5nIGFnYWluXG5cdFx0bG9nZ2VyLmluZm8oJ0RhdGFiYXNlIGFuZCB0YWJsZXMgY3JlYXRlZCEnKTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0bG9nZ2VyLmVycm9yKCdEYXRhYmFzZSBDb25uZWN0aW9uIFRlc3QgYW5kIFN5bmM6IFNlcnZlciBlcnJvcjonLCBlcnIpO1xuXHRcdHByb2Nlc3MuZXhpdCgxKTsgLy8gZXhpdCBwcm9jZXNzIHdpdGggZmFpbHVyZVxuXHR9XG59XG5cbi8vIFN0YXJ0IFdlYiBTZXJ2ZXJcbmxvZ2dlci5pbmZvKCdTdGFydGluZyBzZXJ2ZXInKTtcbnRyeSB7XG5cdGNvbnN0IHsgc3RhcnRTZXJ2ZXIgfSA9IGF3YWl0IHNldHVwSHR0cChhcHApO1xuXHRzdGFydFNlcnZlcigpO1xuXHRsb2dnZXIuaW5mbygnU2VydmVyIHN0YXJ0ZWQgc3VjY2Vzc2Z1bGx5IScpO1xufSBjYXRjaCAoZXJyKSB7XG5cdGxvZ2dlci5lcnJvcignVW5oYW5kbGVkIGVycm9yIGR1cmluZyBzZXJ2ZXIgaW5pdGlhbGl6YXRpb246ICcsIGVycik7XG5cdHByb2Nlc3MuZXhpdCgxKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXBwO1xuIl19
