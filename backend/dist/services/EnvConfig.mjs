import { config } from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import { HandleErrorStaticParameters } from '../index/interfaces/main.mjs';
import { LoggerServiceFactory } from '../index/factory/subfactories/LoggerServiceFactory.mjs';
import { ErrorHandlerServiceFactory } from '../index/factory/subfactories/ErrorHandlerServiceFactory.mjs';
export const __filename = fileURLToPath(import.meta.url);
export const __dirname = dirname(__filename);
export class EnvConfigService {
	static instance = null;
	logger;
	errorLogger;
	errorHandler;
	constructor(logger, errorLogger, errorHandler) {
		this.logger = logger;
		this.errorLogger = errorLogger;
		this.errorHandler = errorHandler;
		this.loadEnv();
	}
	static async getInstance() {
		if (!EnvConfigService.instance) {
			const logger = await LoggerServiceFactory.getLoggerService();
			const errorLogger =
				await LoggerServiceFactory.getErrorLoggerService();
			const errorHandler =
				await ErrorHandlerServiceFactory.getErrorHandlerService();
			EnvConfigService.instance = new EnvConfigService(
				logger,
				errorLogger,
				errorHandler
			);
		}
		return EnvConfigService.instance;
	}
	loadEnv() {
		try {
			const masterEnvPath = path.join(
				__dirname,
				'../../config/env/backend.master.env'
			);
			config({ path: masterEnvPath });
			const envType = process.env.ENV_TYPE || 'dev';
			console.debug(`envType = ${envType}`);
			const envFile =
				envType === 'docker'
					? 'backend.docker-dev.env'
					: 'backend.dev.env';
			const envPath = path.join(process.cwd(), `./config/env/${envFile}`);
			console.debug(`Loading environment variables from ${envFile}`);
			config({ path: envPath });
		} catch (configError) {
			const configurationError =
				new this.errorHandler.ErrorClasses.ConfigurationError(
					`Failed to load environment variables from .env file\n${configError instanceof Error ? configError.message : configError}\nShutting down...`,
					{ originalError: configError }
				);
			this.errorLogger.logError(configurationError.message);
			const processErrorParams = {
				...HandleErrorStaticParameters,
				error: configurationError,
				details: {
					reason: 'Failed to load environment variables from .env file'
				}
			};
			this.errorHandler.handleError(processErrorParams);
			throw configurationError;
		}
	}
	getEnvVariable(key) {
		const value = process.env[key];
		if (value === undefined) {
			throw new Error(`Environment variable ${String(key)} not found`);
		}
		return this.parseEnvValue(value, key);
	}
	parseEnvValue(value, key) {
		switch (key) {
			// strings
			case 'baseUrl':
			case 'dbHost':
			case 'dbName':
			case 'dbUser':
			case 'diskPath':
			case 'emailHost':
			case 'emailUser':
			case 'frontendSecretsPath':
			case 'ipWhitelistPath':
			case 'logExportPath':
			case 'loggerServiceName':
			case 'logStashHost':
			case 'logStashNode':
			case 'npmLogPath':
			case 'primaryLogPath':
			case 'redisUrl':
			case 'requestTimeout':
			case 'revokedTokenRetentionPeriod':
			case 'rpName':
			case 'rpIcon':
			case 'rpId':
			case 'rpOrigin':
			case 'secretsFilePath1':
			case 'serverDataFilePath1':
			case 'serverDataFilePath2':
			case 'serverDataFilePath3':
			case 'serverDataFilePath4':
			case 'staticRootPath':
			case 'tempDir':
			case 'tokenExpiryListPath':
			case 'tokenRevokedListPath':
			case 'tlsCertPath1':
			case 'tlsKeyPath1':
			case 'yubicoApiUrl':
				return value;
			// number
			case 'batchReEncryptSecretsInterval':
			case 'blacklistSyncInterval':
			case 'clearExpiredSecretsInterval':
			case 'cpuLimit':
			case 'cpuThreshold':
			case 'cronLoggerSetting':
			case 'dbInitMaxRetries':
			case 'dbInitRetryAfter':
			case 'emailPort':
			case 'eventLoopLagThreshold':
			case 'fido2Timeout':
			case 'fidoChallengeSize':
			case 'gracefulShutdownTimeout':
			case 'logStashPort':
			case 'maxCacheSize':
			case 'maxRedisCacheSize':
			case 'memoryLimit':
			case 'memoryThreshold':
			case 'memoryMonitorInterval':
			case 'multerFileSizeLimit':
			case 'rateLimiterBaseDuration':
			case 'rateLimiterBasePoints':
			case 'rateLimiterGlobalReset':
			case 'secretsExpiryTimeout':
			case 'secretsRateLimitMaxAttempts':
			case 'secretsRateLimitWindow':
			case 'serverPort':
			case 'slowdownThreshold':
			case 'tokenCacheDuration':
				return Number(value);
			// boolean
			case 'emailSecure':
			case 'featureApiRoutesCsrf':
			case 'featureDbSync':
			case 'featureEnableIpBlacklist':
			case 'featureEnableJwtAuth':
			case 'featureEnableLogStash':
			case 'featureEnableRateLimit':
			case 'featureEnableResourceAutoScaling':
			case 'featureEnableSession':
			case 'featureEncryptSecretsStore':
			case 'featureHonorCipherOrder':
			case 'featureHttpsRedirect':
			case 'featureLoadTestRoutes':
			case 'featureSequelizeLogging':
			case 'fidoAuthRequireResidentKey':
				return value.toLowerCase() === 'true';
			// number[]
			case 'fidoCryptoParams':
				return value.split(',').map(Number);
			// enum-like
			case 'dbDialect':
			case 'nodeEnv':
			case 'fidoAuthUserVerification':
			case 'logLevel':
				return value;
			default:
				throw new Error(
					`Unsupported environment variable key: ${String(key)}`
				);
		}
	}
	getFeatureFlags() {
		return {
			apiRoutesCsrf: this.parseBoolean(
				process.env.FEATURE_API_ROUTES_CSRF
			),
			dbSync: this.parseBoolean(process.env.FEATURE_DB_SYNC),
			enableIpBlacklist: this.parseBoolean(
				process.env.FEATURE_ENABLE_IP_BLACKLIST
			),
			enableJwtAuth: this.parseBoolean(
				process.env.FEATURE_ENABLE_JWT_AUTH
			),
			enableRateLimit: this.parseBoolean(
				process.env.FEATURE_ENABLE_RATE_LIMIT
			),
			enableRedis: this.parseBoolean(process.env.FEATURE_ENABLE_REDIS),
			enableResourceAutoScaling: this.parseBoolean(
				process.env.FEATURE_ENABLE_RESOURCE_AUTO_SCALING
			),
			encryptSecretsStore: this.parseBoolean(
				process.env.FEATURE_ENCRYPT_STORE
			),
			honorCipherOrder: this.parseBoolean(
				process.env.FEATURE_HONOR_CIPHER_ORDER
			),
			httpsRedirect: this.parseBoolean(
				process.env.FEATURE_HTTPS_REDIRECT
			),
			loadTestRoutes: this.parseBoolean(
				process.env.FEATURE_LOAD_TEST_ROUTE
			),
			sequelizeLogging: this.parseBoolean(
				process.env.FEATURE_SEQUELIZE_LOGGING
			)
		};
	}
	parseBoolean(value) {
		return value?.toLowerCase() === 'true';
	}
	clearAllEnvVariables() {
		Object.keys(process.env).forEach(key => {
			delete process.env[key];
		});
		this.logger.info('All environment variables cleared from memory.');
	}
	async shutdown() {
		try {
			this.logger.info('Shutting down EnvConfigService...');
			this.clearAllEnvVariables();
			EnvConfigService.instance = null;
			this.logger.info('EnvConfigService instance nullified.');
		} catch (error) {
			this.errorLogger.logError(
				`Error during EnvConfigService shutdown: ${error instanceof Error ? error.message : String(error)}`
			);
			const shutdownError =
				new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
					`EnvConfigService shutdown failed: ${error instanceof Error ? error.message : String(error)}`,
					{ originalError: error }
				);
			this.errorHandler.handleError({ error: shutdownError });
			throw shutdownError;
		}
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW52Q29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NlcnZpY2VzL0VudkNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2hDLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFRL0IsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDdkUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFDMUYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sMERBQTBELENBQUM7QUFFdEcsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFFN0MsTUFBTSxPQUFPLGdCQUFnQjtJQUNwQixNQUFNLENBQUMsUUFBUSxHQUE0QixJQUFJLENBQUM7SUFDaEQsTUFBTSxDQUE0QjtJQUNsQyxXQUFXLENBQThCO0lBQ3pDLFlBQVksQ0FBK0I7SUFFbkQsWUFDQyxNQUFpQyxFQUNqQyxXQUF3QyxFQUN4QyxZQUEwQztRQUUxQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVztRQUM5QixJQUFJLENBQUMsZ0JBQWdCLENBQUMs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RyxDQUFDO1lBQ0YsTUFBTSxhQUFhLEdBQ2xCLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsdUJBQXVCLENBQ3pELHFDQUFxQyxLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFDN0YsRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLENBQ3hCLENBQUM7WUFDSCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDO1lBQ3hELE1BQU0sYUFBYSxDQUFDO1FBQ3JCLENBQUM7SUFDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnZG90ZW52JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ3VybCc7XG5pbXBvcnQgeyBkaXJuYW1lIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBFbnZWYXJpYWJsZVR5cGVzLCBGZWF0dXJlRmxhZ1R5cGVzIH0gZnJvbSAnLi4vaW5kZXgvaW50ZXJmYWNlcy9lbnYnO1xuaW1wb3J0IHtcblx0QXBwTG9nZ2VyU2VydmljZUludGVyZmFjZSxcblx0RW52Q29uZmlnU2VydmljZUludGVyZmFjZSxcblx0RXJyb3JIYW5kbGVyU2VydmljZUludGVyZmFjZSxcblx0RXJyb3JMb2dnZXJTZXJ2aWNlSW50ZXJmYWNlXG59IGZyb20gJy4uL2luZGV4L2ludGVyZmFjZXMvbWFpbic7XG5pbXBvcnQgeyBIYW5kbGVFcnJvclN0YXRpY1BhcmFtZXRlcnMgfSBmcm9tICcuLi9pbmRleC9pbnRlcmZhY2VzL21haW4nO1xuaW1wb3J0IHsgTG9nZ2VyU2VydmljZUZhY3RvcnkgfSBmcm9tICcuLi9pbmRleC9mYWN0b3J5L3N1YmZhY3Rvcmllcy9Mb2dnZXJTZXJ2aWNlRmFjdG9yeSc7XG5pbXBvcnQgeyBFcnJvckhhbmRsZXJTZXJ2aWNlRmFjdG9yeSB9IGZyb20gJy4uL2luZGV4L2ZhY3Rvcnkvc3ViZmFjdG9yaWVzL0Vycm9ySGFuZGxlclNlcnZpY2VGYWN0b3J5JztcblxuZXhwb3J0IGNvbnN0IF9fZmlsZW5hbWUgPSBmaWxlVVJMVG9QYXRoKGltcG9ydC5tZXRhLnVybCk7XG5leHBvcnQgY29uc3QgX19kaXJuYW1lID0gZGlybmFtZShfX2ZpbGVuYW1lKTtcblxuZXhwb3J0IGNsYXNzIEVudkNvbmZpZ1NlcnZpY2UgaW1wbGVtZW50cyBFbnZDb25maWdTZXJ2aWNlSW50ZXJmYWNlIHtcblx0cHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IEVudkNvbmZpZ1NlcnZpY2UgfCBudWxsID0gbnVsbDtcblx0cHJpdmF0ZSBsb2dnZXI6IEFwcExvZ2dlclNlcnZpY2VJbnRlcmZhY2U7XG5cdHByaXZhdGUgZXJyb3JMb2dnZXI6IEVycm9yTG9nZ2VyU2VydmljZUludGVyZmFjZTtcblx0cHJpdmF0ZSBlcnJvckhhbmRsZXI6IEVycm9ySGFuZGxlclNlcnZpY2VJbnRlcmZhY2U7XG5cblx0cHJpdmF0ZSBjb25zdHJ1Y3Rvcihcblx0XHRsb2dnZXI6IEFwcExvZ2dlclNlcnZpY2VJbnRlcmZhY2UsXG5cdFx0ZXJyb3JMb2dnZXI6IEVycm9yTG9nZ2VyU2VydmljZUludGVyZmFjZSxcblx0XHRlcnJvckhhbmRsZXI6IEVycm9ySGFuZGxlclNlcnZpY2VJbnRlcmZhY2Vcblx0KSB7XG5cdFx0dGhpcy5sb2dnZXIgPSBsb2dnZXI7XG5cdFx0dGhpcy5lcnJvckxvZ2dlciA9IGVycm9yTG9nZ2VyO1xuXHRcdHRoaXMuZXJyb3JIYW5kbGVyID0gZXJyb3JIYW5kbGVyO1xuXHRcdHRoaXMubG9hZEVudigpO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBhc3luYyBnZXRJbnN0YW5jZSgpOiBQcm9taXNlPEVudkNvbmZpZ1NlcnZpY2U+IHtcblx0XHRpZiAoIUVudkNvbmZpZ1NlcnZpY2UuaW5zdGFuY2UpIHtcblx0XHRcdGNvbnN0IGxvZ2dlciA9IGF3YWl0IExvZ2dlclNlcnZpY2VGYWN0b3J5LmdldExvZ2dlclNlcnZpY2UoKTtcblx0XHRcdGNvbnN0IGVycm9yTG9nZ2VyID1cblx0XHRcdFx0YXdhaXQgTG9nZ2VyU2VydmljZUZhY3RvcnkuZ2V0RXJyb3JMb2dnZXJTZXJ2aWNlKCk7XG5cdFx0XHRjb25zdCBlcnJvckhhbmRsZXIgPVxuXHRcdFx0XHRhd2FpdCBFcnJvckhhbmRsZXJTZXJ2aWNlRmFjdG9yeS5nZXRFcnJvckhhbmRsZXJTZXJ2aWNlKCk7XG5cblx0XHRcdEVudkNvbmZpZ1NlcnZpY2UuaW5zdGFuY2UgPSBuZXcgRW52Q29uZmlnU2VydmljZShcblx0XHRcdFx0bG9nZ2VyLFxuXHRcdFx0XHRlcnJvckxvZ2dlcixcblx0XHRcdFx0ZXJyb3JIYW5kbGVyXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdHJldHVybiBFbnZDb25maWdTZXJ2aWNlLmluc3RhbmNlO1xuXHR9XG5cblx0cHJpdmF0ZSBsb2FkRW52KCk6IHZvaWQge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCBtYXN0ZXJFbnZQYXRoOiBzdHJpbmcgPSBwYXRoLmpvaW4oXG5cdFx0XHRcdF9fZGlybmFtZSxcblx0XHRcdFx0Jy4uLy4uL2NvbmZpZy9lbnYvYmFja2VuZC5tYXN0ZXIuZW52J1xuXHRcdFx0KTtcblx0XHRcdGNvbmZpZyh7IHBhdGg6IG1hc3RlckVudlBhdGggfSk7XG5cblx0XHRcdGNvbnN0IGVudlR5cGUgPSBwcm9jZXNzLmVudi5FTlZfVFlQRSB8fCAnZGV2Jztcblx0XHRcdGNvbnNvbGUuZGVidWcoYGVudlR5cGUgPSAke2VudlR5cGV9YCk7XG5cdFx0XHRjb25zdCBlbnZGaWxlID1cblx0XHRcdFx0ZW52VHlwZSA9PT0gJ2RvY2tlcidcblx0XHRcdFx0XHQ/ICdiYWNrZW5kLmRvY2tlci1kZXYuZW52J1xuXHRcdFx0XHRcdDogJ2JhY2tlbmQuZGV2LmVudic7XG5cdFx0XHRjb25zdCBlbnZQYXRoID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksIGAuL2NvbmZpZy9lbnYvJHtlbnZGaWxlfWApO1xuXHRcdFx0Y29uc29sZS5kZWJ1ZyhgTG9hZGluZyBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZnJvbSAke2VudkZpbGV9YCk7XG5cblx0XHRcdGNvbmZpZyh7IHBhdGg6IGVudlBhdGggfSk7XG5cdFx0fSBjYXRjaCAoY29uZmlnRXJyb3IpIHtcblx0XHRcdGNvbnN0IGNvbmZpZ3VyYXRpb25FcnJvciA9XG5cdFx0XHRcdG5ldyB0aGlzLmVycm9ySGFuZGxlci5FcnJvckNsYXNzZXMuQ29uZmlndXJhdGlvbkVycm9yKFxuXHRcdFx0XHRcdGBGYWlsZWQgdG8gbG9hZCBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZnJvbSAuZW52IGZpbGVcXG4ke2NvbmZpZ0Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBjb25maWdFcnJvci5tZXNzYWdlIDogY29uZmlnRXJyb3J9XFxuU2h1dHRpbmcgZG93bi4uLmAsXG5cdFx0XHRcdFx0eyBvcmlnaW5hbEVycm9yOiBjb25maWdFcnJvciB9XG5cdFx0XHRcdCk7XG5cdFx0XHR0aGlzLmVycm9yTG9nZ2VyLmxvZ0Vycm9yKGNvbmZpZ3VyYXRpb25FcnJvci5tZXNzYWdlKTtcblx0XHRcdGNvbnN0IHByb2Nlc3NFcnJvclBhcmFtcyA9IHtcblx0XHRcdFx0Li4uSGFuZGxlRXJyb3JTdGF0aWNQYXJhbWV0ZXJzLFxuXHRcdFx0XHRlcnJvcjogY29uZmlndXJhdGlvbkVycm9yLFxuXHRcdFx0XHRkZXRhaWxzOiB7XG5cdFx0XHRcdFx0cmVhc29uOiAnRmFpbGVkIHRvIGxvYWQgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZyb20gLmVudiBmaWxlJ1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0dGhpcy5lcnJvckhhbmRsZXIuaGFuZGxlRXJyb3IocHJvY2Vzc0Vycm9yUGFyYW1zKTtcblx0XHRcdHRocm93IGNvbmZpZ3VyYXRpb25FcnJvcjtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgZ2V0RW52VmFyaWFibGU8SyBleHRlbmRzIGtleW9mIEVudlZhcmlhYmxlVHlwZXM+KFxuXHRcdGtleTogS1xuXHQpOiBFbnZWYXJpYWJsZVR5cGVzW0tdIHtcblx0XHRjb25zdCB2YWx1ZSA9IHByb2Nlc3MuZW52W2tleSBhcyBzdHJpbmddO1xuXG5cdFx0aWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgRW52aXJvbm1lbnQgdmFyaWFibGUgJHtTdHJpbmcoa2V5KX0gbm90IGZvdW5kYCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucGFyc2VFbnZWYWx1ZSh2YWx1ZSwga2V5KTtcblx0fVxuXG5cdHByaXZhdGUgcGFyc2VFbnZWYWx1ZTxLIGV4dGVuZHMga2V5b2YgRW52VmFyaWFibGVUeXBlcz4oXG5cdFx0dmFsdWU6IHN0cmluZyxcblx0XHRrZXk6IEtcblx0KTogRW52VmFyaWFibGVUeXBlc1tLXSB7XG5cdFx0c3dpdGNoIChrZXkpIHtcblx0XHRcdC8vIHN0cmluZ3Ncblx0XHRcdGNhc2UgJ2Jhc2VVcmwnOlxuXHRcdFx0Y2FzZSAnZGJIb3N0Jzpcblx0XHRcdGNhc2UgJ2RiTmFtZSc6XG5cdFx0XHRjYXNlICdkYlVzZXInOlxuXHRcdFx0Y2FzZSAnZGlza1BhdGgnOlxuXHRcdFx0Y2FzZSAnZW1haWxIb3N0Jzpcblx0XHRcdGNhc2UgJ2VtYWlsVXNlcic6XG5cdFx0XHRjYXNlICdmcm9udGVuZFNlY3JldHNQYXRoJzpcblx0XHRcdGNhc2UgJ2lwV2hpdGVsaXN0UGF0aCc6XG5cdFx0XHRjYXNlICdsb2dFeHBvcnRQYXRoJzpcblx0XHRcdGNhc2UgJ2xvZ2dlclNlcnZpY2VOYW1lJzpcblx0XHRcdGNhc2UgJ2xvZ1N0YXNoSG9zdCc6XG5cdFx0XHRjYXNlICdsb2dTdGFzaE5vZGUnOlxuXHRcdFx0Y2FzZSAnbnBtTG9nUGF0aCc6XG5cdFx0XHRjYXNlICdwcmltYXJ5TG9nUGF0aCc6XG5cdFx0XHRjYXNlICdyZWRpc1VybCc6XG5cdFx0XHRjYXNlICdyZXF1ZXN0VGltZW91dCc6XG5cdFx0XHRjYXNlICdyZXZva2VkVG9rZW5SZXRlbnRpb25QZXJpb2QnOlxuXHRcdFx0Y2FzZSAncnBOYW1lJzpcblx0XHRcdGNhc2UgJ3JwSWNvbic6XG5cdFx0XHRjYXNlICdycElkJzpcblx0XHRcdGNhc2UgJ3JwT3JpZ2luJzpcblx0XHRcdGNhc2UgJ3NlY3JldHNGaWxlUGF0aDEnOlxuXHRcdFx0Y2FzZSAnc2VydmVyRGF0YUZpbGVQYXRoMSc6XG5cdFx0XHRjYXNlICdzZXJ2ZXJEYXRhRmlsZVBhdGgyJzpcblx0XHRcdGNhc2UgJ3NlcnZlckRhdGFGaWxlUGF0aDMnOlxuXHRcdFx0Y2FzZSAnc2VydmVyRGF0YUZpbGVQYXRoNCc6XG5cdFx0XHRjYXNlICdzdGF0aWNSb290UGF0aCc6XG5cdFx0XHRjYXNlICd0ZW1wRGlyJzpcblx0XHRcdGNhc2UgJ3Rva2VuRXhwaXJ5TGlzdFBhdGgnOlxuXHRcdFx0Y2FzZSAndG9rZW5SZXZva2VkTGlzdFBhdGgnOlxuXHRcdFx0Y2FzZSAndGxzQ2VydFBhdGgxJzpcblx0XHRcdGNhc2UgJ3Rsc0tleVBhdGgxJzpcblx0XHRcdGNhc2UgJ3l1Ymljb0FwaVVybCc6XG5cdFx0XHRcdHJldHVybiB2YWx1ZSBhcyBFbnZWYXJpYWJsZVR5cGVzW0tdO1xuXG5cdFx0XHQvLyBudW1iZXJcblx0XHRcdGNhc2UgJ2JhdGNoUmVFbmNyeXB0U2VjcmV0c0ludGVydmFsJzpcblx0XHRcdGNhc2UgJ2JsYWNrbGlzdFN5bmNJbnRlcnZhbCc6XG5cdFx0XHRjYXNlICdjbGVhckV4cGlyZWRTZWNyZXRzSW50ZXJ2YWwnOlxuXHRcdFx0Y2FzZSAnY3B1TGltaXQnOlxuXHRcdFx0Y2FzZSAnY3B1VGhyZXNob2xkJzpcblx0XHRcdGNhc2UgJ2Nyb25Mb2dnZXJTZXR0aW5nJzpcblx0XHRcdGNhc2UgJ2RiSW5pdE1heFJldHJpZXMnOlxuXHRcdFx0Y2FzZSAnZGJJbml0UmV0cnlBZnRlcic6XG5cdFx0XHRjYXNlICdlbWFpbFBvcnQnOlxuXHRcdFx0Y2FzZSAnZXZlbnRMb29wTGFnVGhyZXNob2xkJzpcblx0XHRcdGNhc2UgJ2ZpZG8yVGltZW91dCc6XG5cdFx0XHRjYXNlICdmaWRvQ2hhbGxlbmdlU2l6ZSc6XG5cdFx0XHRjYXNlICdncmFjZWZ1bFNodXRkb3duVGltZW91dCc6XG5cdFx0XHRjYXNlICdsb2dTdGFzaFBvcnQnOlxuXHRcdFx0Y2FzZSAnbWF4Q2FjaGVTaXplJzpcblx0XHRcdGNhc2UgJ21heFJlZGlzQ2FjaGVTaXplJzpcblx0XHRcdGNhc2UgJ21lbW9yeUxpbWl0Jzpcblx0XHRcdGNhc2UgJ21lbW9yeVRocmVzaG9sZCc6XG5cdFx0XHRjYXNlICdtZW1vcnlNb25pdG9ySW50ZXJ2YWwnOlxuXHRcdFx0Y2FzZSAnbXVsdGVyRmlsZVNpemVMaW1pdCc6XG5cdFx0XHRjYXNlICdyYXRlTGltaXRlckJhc2VEdXJhdGlvbic6XG5cdFx0XHRjYXNlICdyYXRlTGltaXRlckJhc2VQb2ludHMnOlxuXHRcdFx0Y2FzZSAncmF0ZUxpbWl0ZXJHbG9iYWxSZXNldCc6XG5cdFx0XHRjYXNlICdzZWNyZXRzRXhwaXJ5VGltZW91dCc6XG5cdFx0XHRjYXNlICdzZWNyZXRzUmF0ZUxpbWl0TWF4QXR0ZW1wdHMnOlxuXHRcdFx0Y2FzZSAnc2VjcmV0c1JhdGVMaW1pdFdpbmRvdyc6XG5cdFx0XHRjYXNlICdzZXJ2ZXJQb3J0Jzpcblx0XHRcdGNhc2UgJ3Nsb3dkb3duVGhyZXNob2xkJzpcblx0XHRcdGNhc2UgJ3Rva2VuQ2FjaGVEdXJhdGlvbic6XG5cdFx0XHRcdHJldHVybiBOdW1iZXIodmFsdWUpIGFzIEVudlZhcmlhYmxlVHlwZXNbS107XG5cblx0XHRcdC8vIGJvb2xlYW5cblx0XHRcdGNhc2UgJ2VtYWlsU2VjdXJlJzpcblx0XHRcdGNhc2UgJ2ZlYXR1cmVBcGlSb3V0ZXNDc3JmJzpcblx0XHRcdGNhc2UgJ2ZlYXR1cmVEYlN5bmMnOlxuXHRcdFx0Y2FzZSAnZmVhdHVyZUVuYWJsZUlwQmxhY2tsaXN0Jzpcblx0XHRcdGNhc2UgJ2ZlYXR1cmVFbmFibGVKd3RBdXRoJzpcblx0XHRcdGNhc2UgJ2ZlYXR1cmVFbmFibGVMb2dTdGFzaCc6XG5cdFx0XHRjYXNlICdmZWF0dXJlRW5hYmxlUmF0ZUxpbWl0Jzpcblx0XHRcdGNhc2UgJ2ZlYXR1cmVFbmFibGVSZXNvdXJjZUF1dG9TY2FsaW5nJzpcblx0XHRcdGNhc2UgJ2ZlYXR1cmVFbmFibGVTZXNzaW9uJzpcblx0XHRcdGNhc2UgJ2ZlYXR1cmVFbmNyeXB0U2VjcmV0c1N0b3JlJzpcblx0XHRcdGNhc2UgJ2ZlYXR1cmVIb25vckNpcGhlck9yZGVyJzpcblx0XHRcdGNhc2UgJ2ZlYXR1cmVIdHRwc1JlZGlyZWN0Jzpcblx0XHRcdGNhc2UgJ2ZlYXR1cmVMb2FkVGVzdFJvdXRlcyc6XG5cdFx0XHRjYXNlICdmZWF0dXJlU2VxdWVsaXplTG9nZ2luZyc6XG5cdFx0XHRjYXNlICdmaWRvQXV0aFJlcXVpcmVSZXNpZGVudEtleSc6XG5cdFx0XHRcdHJldHVybiAodmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnKSBhcyBFbnZWYXJpYWJsZVR5cGVzW0tdO1xuXG5cdFx0XHQvLyBudW1iZXJbXVxuXHRcdFx0Y2FzZSAnZmlkb0NyeXB0b1BhcmFtcyc6XG5cdFx0XHRcdHJldHVybiB2YWx1ZS5zcGxpdCgnLCcpLm1hcChOdW1iZXIpIGFzIEVudlZhcmlhYmxlVHlwZXNbS107XG5cblx0XHRcdC8vIGVudW0tbGlrZVxuXHRcdFx0Y2FzZSAnZGJEaWFsZWN0Jzpcblx0XHRcdGNhc2UgJ25vZGVFbnYnOlxuXHRcdFx0Y2FzZSAnZmlkb0F1dGhVc2VyVmVyaWZpY2F0aW9uJzpcblx0XHRcdGNhc2UgJ2xvZ0xldmVsJzpcblx0XHRcdFx0cmV0dXJuIHZhbHVlIGFzIEVudlZhcmlhYmxlVHlwZXNbS107XG5cblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0XHRgVW5zdXBwb3J0ZWQgZW52aXJvbm1lbnQgdmFyaWFibGUga2V5OiAke1N0cmluZyhrZXkpfWBcblx0XHRcdFx0KTtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgZ2V0RmVhdHVyZUZsYWdzKCk6IEZlYXR1cmVGbGFnVHlwZXMge1xuXHRcdHJldHVybiB7XG5cdFx0XHRhcGlSb3V0ZXNDc3JmOiB0aGlzLnBhcnNlQm9vbGVhbihcblx0XHRcdFx0cHJvY2Vzcy5lbnYuRkVBVFVSRV9BUElfUk9VVEVTX0NTUkZcblx0XHRcdCksXG5cdFx0XHRkYlN5bmM6IHRoaXMucGFyc2VCb29sZWFuKHByb2Nlc3MuZW52LkZFQVRVUkVfREJfU1lOQyksXG5cdFx0XHRlbmFibGVJcEJsYWNrbGlzdDogdGhpcy5wYXJzZUJvb2xlYW4oXG5cdFx0XHRcdHByb2Nlc3MuZW52LkZFQVRVUkVfRU5BQkxFX0lQX0JMQUNLTElTVFxuXHRcdFx0KSEsXG5cdFx0XHRlbmFibGVKd3RBdXRoOiB0aGlzLnBhcnNlQm9vbGVhbihcblx0XHRcdFx0cHJvY2Vzcy5lbnYuRkVBVFVSRV9FTkFCTEVfSldUX0FVVEhcblx0XHRcdCkhLFxuXHRcdFx0ZW5hYmxlUmF0ZUxpbWl0OiB0aGlzLnBhcnNlQm9vbGVhbihcblx0XHRcdFx0cHJvY2Vzcy5lbnYuRkVBVFVSRV9FTkFCTEVfUkFURV9MSU1JVFxuXHRcdFx0KSEsXG5cdFx0XHRlbmFibGVSZWRpczogdGhpcy5wYXJzZUJvb2xlYW4ocHJvY2Vzcy5lbnYuRkVBVFVSRV9FTkFCTEVfUkVESVMpLFxuXHRcdFx0ZW5hYmxlUmVzb3VyY2VBdXRvU2NhbGluZzogdGhpcy5wYXJzZUJvb2xlYW4oXG5cdFx0XHRcdHByb2Nlc3MuZW52LkZFQVRVUkVfRU5BQkxFX1JFU09VUkNFX0FVVE9fU0NBTElOR1xuXHRcdFx0KSxcblx0XHRcdGVuY3J5cHRTZWNyZXRzU3RvcmU6IHRoaXMucGFyc2VCb29sZWFuKFxuXHRcdFx0XHRwcm9jZXNzLmVudi5GRUFUVVJFX0VOQ1JZUFRfU1RPUkVcblx0XHRcdCksXG5cdFx0XHRob25vckNpcGhlck9yZGVyOiB0aGlzLnBhcnNlQm9vbGVhbihcblx0XHRcdFx0cHJvY2Vzcy5lbnYuRkVBVFVSRV9IT05PUl9DSVBIRVJfT1JERVJcblx0XHRcdCksXG5cdFx0XHRodHRwc1JlZGlyZWN0OiB0aGlzLnBhcnNlQm9vbGVhbihcblx0XHRcdFx0cHJvY2Vzcy5lbnYuRkVBVFVSRV9IVFRQU19SRURJUkVDVFxuXHRcdFx0KSxcblx0XHRcdGxvYWRUZXN0Um91dGVzOiB0aGlzLnBhcnNlQm9vbGVhbihcblx0XHRcdFx0cHJvY2Vzcy5lbnYuRkVBVFVSRV9MT0FEX1RFU1RfUk9VVEUhXG5cdFx0XHQpLFxuXHRcdFx0c2VxdWVsaXplTG9nZ2luZzogdGhpcy5wYXJzZUJvb2xlYW4oXG5cdFx0XHRcdHByb2Nlc3MuZW52LkZFQVRVUkVfU0VRVUVMSVpFX0xPR0dJTkdcblx0XHRcdClcblx0XHR9O1xuXHR9XG5cblx0cHJpdmF0ZSBwYXJzZUJvb2xlYW4odmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB2YWx1ZT8udG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xuXHR9XG5cblx0cHJpdmF0ZSBjbGVhckFsbEVudlZhcmlhYmxlcygpOiB2b2lkIHtcblx0XHRPYmplY3Qua2V5cyhwcm9jZXNzLmVudikuZm9yRWFjaChrZXkgPT4ge1xuXHRcdFx0ZGVsZXRlIHByb2Nlc3MuZW52W2tleV07XG5cdFx0fSk7XG5cdFx0dGhpcy5sb2dnZXIuaW5mbygnQWxsIGVudmlyb25tZW50IHZhcmlhYmxlcyBjbGVhcmVkIGZyb20gbWVtb3J5LicpO1xuXHR9XG5cblx0cHVibGljIGFzeW5jIHNodXRkb3duKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdHRyeSB7XG5cdFx0XHR0aGlzLmxvZ2dlci5pbmZvKCdTaHV0dGluZyBkb3duIEVudkNvbmZpZ1NlcnZpY2UuLi4nKTtcblxuXHRcdFx0dGhpcy5jbGVhckFsbEVudlZhcmlhYmxlcygpO1xuXHRcdFx0RW52Q29uZmlnU2VydmljZS5pbnN0YW5jZSA9IG51bGw7XG5cblx0XHRcdHRoaXMubG9nZ2VyLmluZm8oJ0VudkNvbmZpZ1NlcnZpY2UgaW5zdGFuY2UgbnVsbGlmaWVkLicpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHR0aGlzLmVycm9yTG9nZ2VyLmxvZ0Vycm9yKFxuXHRcdFx0XHRgRXJyb3IgZHVyaW5nIEVudkNvbmZpZ1NlcnZpY2Ugc2h1dGRvd246ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpfWBcblx0XHRcdCk7XG5cdFx0XHRjb25zdCBzaHV0ZG93bkVycm9yID1cblx0XHRcdFx0bmV3IHRoaXMuZXJyb3JIYW5kbGVyLkVycm9yQ2xhc3Nlcy5VdGlsaXR5RXJyb3JSZWNvdmVyYWJsZShcblx0XHRcdFx0XHRgRW52Q29uZmlnU2VydmljZSBzaHV0ZG93biBmYWlsZWQ6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpfWAsXG5cdFx0XHRcdFx0eyBvcmlnaW5hbEVycm9yOiBlcnJvciB9XG5cdFx0XHRcdCk7XG5cdFx0XHR0aGlzLmVycm9ySGFuZGxlci5oYW5kbGVFcnJvcih7IGVycm9yOiBzaHV0ZG93bkVycm9yIH0pO1xuXHRcdFx0dGhyb3cgc2h1dGRvd25FcnJvcjtcblx0XHR9XG5cdH1cbn1cbiJdfQ==
