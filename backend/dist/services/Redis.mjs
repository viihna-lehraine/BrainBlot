import { ServiceFactory } from '../index/factory.mjs';
export class RedisService {
	createRedisClient;
	static instance = null;
	logger;
	errorLogger;
	errorHandler;
	envConfig;
	redisClient = null;
	constructor(
		createRedisClient,
		logger,
		errorLogger,
		errorHandler,
		envConfig
	) {
		this.createRedisClient = createRedisClient;
		this.logger = logger;
		this.errorLogger = errorLogger;
		this.errorHandler = errorHandler;
		this.envConfig = envConfig;
	}
	static async getInstance(deps) {
		if (!RedisService.instance) {
			RedisService.instance = new RedisService(
				deps.createRedisClient,
				await ServiceFactory.getLoggerService(),
				await ServiceFactory.getErrorLoggerService(),
				await ServiceFactory.getErrorHandlerService(),
				await ServiceFactory.getEnvConfigService()
			);
		}
		return RedisService.instance;
	}
	async connectRedisClient() {
		if (this.redisClient) return;
		try {
			this.redisClient = this.createRedisClient({
				url: this.envConfig.getEnvVariable('redisUrl'),
				socket: {
					reconnectStrategy: retries => {
						const retryAfter = Math.min(retries * 100, 3000);
						this.errorLogger.logWarn(
							`Error connecting to Redis, retrying in ${retryAfter}ms. Retries: ${retries}`
						);
						if (retries >= 10) {
							this.handleRedisFailure(retries);
						}
						return retryAfter;
					}
				}
			});
			this.redisClient.on('error', error => {
				this.errorLogger.logError(`Redis error: ${error}`);
			});
			await this.redisClient.connect();
			this.logger.info('Connected to Redis');
		} catch (error) {
			this.handleRedisError(
				error,
				'REDIS_CONNECTION_ERROR',
				{ reason: 'Failed to connect to Redis' },
				'Error connecting to Redis'
			);
		}
	}
	async getRedisClient() {
		try {
			await this.connectRedisClient();
			return this.redisClient;
		} catch (error) {
			this.handleRedisError(
				error,
				'REDIS_CLIENT_ERROR',
				{ reason: 'Failed to get Redis client' },
				'Error getting Redis client'
			);
			return null;
		}
	}
	async get(key) {
		await this.connectRedisClient();
		if (!this.redisClient) throw new Error('Redis client is not connected');
		try {
			const result = await this.redisClient.get(key);
			if (!result) {
				this.logger.info(`Key ${key} not found or expired in Redis`);
				return null;
			}
			return result ? JSON.parse(result) : null;
		} catch (error) {
			this.handleRedisError(
				error,
				'REDIS_GET_ERROR',
				{ reason: `Failed to get key` },
				`Error fetching key ${key} from Redis`
			);
			return null;
		}
	}
	async set(key, value, expiration) {
		await this.connectRedisClient();
		if (!this.redisClient) throw new Error('Redis client is not connected');
		try {
			const valueString = JSON.stringify(value);
			if (expiration) {
				await this.redisClient.set(key, valueString, {
					EX: expiration
				});
			} else {
				await this.redisClient.set(key, valueString);
			}
			this.logger.info(
				`Key ${key} set in Redis with expiration ${expiration ?? 'no expiration'}`
			);
		} catch (error) {
			this.handleRedisError(
				error,
				'REDIS_SET_ERROR',
				{ reason: `Failed to set key ${key}` },
				`Error setting key ${key} in Redis`
			);
		}
	}
	async del(key) {
		if (!this.redisClient) {
			throw new Error('Redis client is not connected');
		}
		try {
			await this.redisClient.del(key);
			this.logger.info(`Key ${key} deleted from Redis`);
		} catch (error) {
			this.handleRedisError(
				error,
				'REDIS_DEL_ERROR',
				{ reason: `Failed to delete key ${key}` },
				`Error deleting key ${key} from Redis`
			);
		}
	}
	async exists(key) {
		if (!this.redisClient) {
			throw new Error('Redis client is not connected');
		}
		try {
			const result = await this.redisClient.exists(key);
			return result > 0;
		} catch (error) {
			this.handleRedisError(
				error,
				'REDIS_EXISTS_ERROR',
				{ reason: `Failed to check existence of key ${key}` },
				`Error checking existence of key ${key} in Redis`
			);
			return false;
		}
	}
	async increment(key, expiration) {
		if (!this.redisClient) {
			throw new Error('Redis client is not connected');
		}
		try {
			const newValue = await this.redisClient.incr(key);
			if (expiration) {
				await this.redisClient.expire(key, expiration);
			}
			return newValue;
		} catch (error) {
			this.handleRedisError(
				error,
				'REDIS_INCREMENT_ERROR',
				{ reason: `Failed to increment key ${key}` },
				`Error incrementing key ${key} in Redis`
			);
			return null;
		}
	}
	async getKeysByPattern(pattern) {
		try {
			await this.connectRedisClient();
			if (!this.redisClient) {
				throw new Error('Redis client is not connected');
			}
			const keys = await this.redisClient.keys(pattern);
			this.logger.info(
				`Found ${keys.length} keys matching pattern: ${pattern}`
			);
			return keys;
		} catch (error) {
			this.handleRedisError(
				error,
				'REDIS_KEY_PATTERN_ERROR',
				{ reason: `Failed to get keys by pattern ${pattern}` },
				`Error fetching keys by pattern ${pattern} from Redis`
			);
			return [];
		}
	}
	async delMultiple(service, keys) {
		try {
			await this.connectRedisClient();
			if (!this.redisClient) {
				throw new Error('Redis client is not connected');
			}
			if (keys.length > 0) {
				const namespacedKeys = keys.map(key => `${service}:${key}`);
				await this.redisClient.del(namespacedKeys);
				this.logger.info(
					`Deleted ${keys.length} keys from Redis for service ${service}`
				);
			} else {
				this.logger.info(`No keys to delete for service ${service}`);
			}
		} catch (error) {
			this.handleRedisError(
				error,
				'REDIS_DEL_MULTIPLE_ERROR',
				{
					reason: `Failed to delete multiple keys for service ${service}`
				},
				`Error deleting multiple keys from Redis for service ${service}`
			);
		}
	}
	async flushCacheByService(service) {
		try {
			const servicePattern = `${service}:*`;
			const serviceKeys = await this.getKeysByPattern(servicePattern);
			if (serviceKeys.length > 0) {
				await this.delMultiple(service, serviceKeys);
				this.logger.info(`Flushed Redis cache for service ${service}`);
			} else {
				this.logger.info(
					`No keys found to flush for service ${service}`
				);
			}
		} catch (error) {
			this.handleRedisError(
				error,
				'REDIS_FLUSH_CACHE_BY_SERVICE_ERROR',
				{ service },
				`Error flushing Redis cache for service ${service}`
			);
		}
	}
	async flushRedisMemoryCache() {
		try {
			await this.connectRedisClient();
			if (this.redisClient) {
				try {
					await this.redisClient.flushAll();
					this.logger.info('Redis cache flushed successfully');
				} catch (error) {
					this.handleRedisError(
						error,
						'REDIS_FLUSH_ERROR',
						{ reason: 'Redis not connected' },
						'Error flushing Redis cache'
					);
				}
			} else {
				this.errorLogger.logWarn(
					'Redis client is not available for cache flush'
				);
			}
		} catch (error) {
			this.handleRedisError(
				error,
				'REDIS_FLUSH_ERROR',
				{ reason: 'Failed to flush Redis cache' },
				'Error flushing Redis cache'
			);
		}
	}
	async cleanUpRedisClient() {
		try {
			if (this.redisClient) {
				try {
					await this.redisClient.quit();
					this.logger.info('Redis client disconnected successfully');
					this.redisClient = null;
				} catch (error) {
					this.errorLogger.logError(
						`Error disconnecting Redis client: ${error}`
					);
				}
			}
		} catch (error) {
			this.handleRedisError(
				error,
				'REDIS_DISCONNECT_ERROR',
				{ reason: 'Failed to disconnect Redis client' },
				'Error disconnecting Redis client'
			);
		}
	}
	async getRedisInfo() {
		try {
			await this.connectRedisClient();
			if (!this.redisClient) {
				throw new Error('Redis client is not connected');
			}
			const info = await this.redisClient.info();
			const parsedInfo = this.parseRedisInfo(info);
			this.logger.info(`Redis metrics: ${JSON.stringify(parsedInfo)}`);
			return parsedInfo;
		} catch (error) {
			this.handleRedisError(
				error,
				'REDIS_METRICS_RETRIEVAL_ERROR',
				{ reason: 'Failed to retrieve Redis metrics' },
				`Error retrieving Redis metrics`
			);
			throw new Error('Error retrieving Redis metrics');
		}
	}
	parseRedisInfo(info) {
		const result = {};
		const lines = info.split('\n');
		lines.forEach(line => {
			const [key, value] = line.split(':');
			if (key && value) {
				switch (key.trim()) {
					case 'uptime_in_seconds':
						result.uptime_in_seconds =
							parseInt(value.trim(), 10) || 0;
						break;
					case 'used_memory':
						result.used_memory = parseInt(value.trim(), 10) || 0;
						break;
					case 'connected_clients':
						result.connected_clients =
							parseInt(value.trim(), 10) || 0;
						break;
					case 'db0':
						const sizeMatch = value.match(/keys=(\d+)/);
						if (sizeMatch) {
							result.db0_size = parseInt(sizeMatch[1], 10);
						}
						break;
				}
			}
		});
		return result;
	}
	async shutdown() {
		try {
			this.logger.info('Shutting down Redis client...');
			await this.cleanUpRedisClient();
			this.logger.info('Redis client shutdown completed.');
		} catch (error) {
			this.logger.error(
				`Failed to shut down Redis: ${error instanceof Error ? error.message : error}`
			);
		} finally {
			RedisService.instance = null;
			this.logger.info('RedisService instance has been nullified.');
		}
	}
	handleRedisFailure(retries) {
		this.errorLogger.logError(
			`Max retries (${retries}) reached for Redis connection`
		);
		this.errorHandler.handleError({
			error: new Error('Redis connection failed after max retries'),
			details: { reason: 'Failed to connect to Redis' }
		});
	}
	handleRedisError(error, errorHeader, errorDetails, customMessage) {
		const errorMessage = `${customMessage}: ${error}\n${error instanceof Error ? error.stack : ''}`;
		this.errorLogger.logError(errorMessage);
		const redisError = new this.errorHandler.ErrorClasses.RedisServiceError(
			errorHeader,
			{
				details: errorDetails,
				exposeToClient: false
			}
		);
		this.errorHandler.handleError({
			error: redisError
		});
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVkaXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2VydmljZXMvUmVkaXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBVUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWxELE1BQU0sT0FBTyxZQUFZO0lBV047SUFWVixNQUFNLENBQUMsUUFBUSxHQUF3QixJQUFJLENBQUM7SUFFNUMsTUFBTSxDQUE0QjtJQUNsQyxXQUFXLENBQThCO0lBQ3pDLFlBQVksQ0FBK0I7SUFDM0MsU0FBUyxDQUE0QjtJQUVyQyxXQUFXLEdBQTJCLElBQUksQ0FBQztJQUVuRCxZQUNrQixpQkFBc0QsRUFDdkUsTUFBaUMsRUFDakMsV0FBd0MsRUFDeEMsWUFBMEMsRUFDMUMsU0FBb0M7UUFKbkIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFxQztRQU12RSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztRQUNqQyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUM1QixDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQzlCLElBQXNCO1FBRXRCLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDNUIsWUFBWSxDQUFDLFFBQVEsR0FBRyxJQUFJLFlBQVksQ0FDdkMsSUFBSSxDQUFDLGlCQUFpQixFQUN0QixNQUFNLGNBQWMsQ0FBQyxnQkFBZ0IsRUFBRSxFQUN2QyxNQUFNLGNBQWMsQ0FBQyxxQkFBcUIsRUFBRSxFQUM1QyxNQUFNLGNBQWMsQ0FBQyxzQkFBc0IsRUFBRSxFQUM3QyxNQUFNLGNBQWMsQ0FBQyxtQkFBbUIsRUFBRSxDQUMxQyxDQUFDO1FBQ0gsQ0FBQztRQUNELE9BQU8sWUFBWSxDQUFDLFFBQVEsQ0FBQztJQUM5QixDQUFD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LE9BQWU7UUFDekMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQ3hCLGdCQUFnQixPQUFPLGdDQUFnQyxDQUN2RCxDQUFDO1FBQ0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7WUFDN0IsS0FBSyxFQUFFLElBQUksS0FBSyxDQUFDLDJDQUEyQyxDQUFDO1lBQzdELE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSw0QkFBNEIsRUFBRTtTQUNqRCxDQUFDLENBQUM7SUFDSixDQUFDO0lBRU8sZ0JBQWdCLENBQ3ZCLEtBQWMsRUFDZCxXQUFtQixFQUNuQixZQUFvQixFQUNwQixhQUFxQjtRQUVyQixNQUFNLFlBQVksR0FBRyxHQUFHLGFBQWEsS0FBSyxLQUFLLEtBQUssS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDaEcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFeEMsTUFBTSxVQUFVLEdBQUcsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FDdEUsV0FBVyxFQUNYO1lBQ0MsT0FBTyxFQUFFLFlBQVk7WUFDckIsY0FBYyxFQUFFLEtBQUs7U0FDckIsQ0FDRCxDQUFDO1FBRUYsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7WUFDN0IsS0FBSyxFQUFFLFVBQVU7U0FDakIsQ0FBQyxDQUFDO0lBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlZGlzQ2xpZW50VHlwZSB9IGZyb20gJ3JlZGlzJztcbmltcG9ydCB7XG5cdEFwcExvZ2dlclNlcnZpY2VJbnRlcmZhY2UsXG5cdEVudkNvbmZpZ1NlcnZpY2VJbnRlcmZhY2UsXG5cdEVycm9yTG9nZ2VyU2VydmljZUludGVyZmFjZSxcblx0RXJyb3JIYW5kbGVyU2VydmljZUludGVyZmFjZSxcblx0UmVkaXNTZXJ2aWNlSW50ZXJmYWNlXG59IGZyb20gJy4uL2luZGV4L2ludGVyZmFjZXMvc2VydmljZXMnO1xuaW1wb3J0IHsgUmVkaXNNZXRyaWNzIH0gZnJvbSAnLi4vaW5kZXgvaW50ZXJmYWNlcy9zZXJ2aWNlQ29tcG9uZW50cyc7XG5pbXBvcnQgeyBSZWRpc1NlcnZpY2VEZXBzIH0gZnJvbSAnLi4vaW5kZXgvaW50ZXJmYWNlcy9zZXJ2aWNlRGVwcyc7XG5pbXBvcnQgeyBTZXJ2aWNlRmFjdG9yeSB9IGZyb20gJy4uL2luZGV4L2ZhY3RvcnknO1xuXG5leHBvcnQgY2xhc3MgUmVkaXNTZXJ2aWNlIGltcGxlbWVudHMgUmVkaXNTZXJ2aWNlSW50ZXJmYWNlIHtcblx0cHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IFJlZGlzU2VydmljZSB8IG51bGwgPSBudWxsO1xuXG5cdHByaXZhdGUgbG9nZ2VyOiBBcHBMb2dnZXJTZXJ2aWNlSW50ZXJmYWNlO1xuXHRwcml2YXRlIGVycm9yTG9nZ2VyOiBFcnJvckxvZ2dlclNlcnZpY2VJbnRlcmZhY2U7XG5cdHByaXZhdGUgZXJyb3JIYW5kbGVyOiBFcnJvckhhbmRsZXJTZXJ2aWNlSW50ZXJmYWNlO1xuXHRwcml2YXRlIGVudkNvbmZpZzogRW52Q29uZmlnU2VydmljZUludGVyZmFjZTtcblxuXHRwcml2YXRlIHJlZGlzQ2xpZW50OiBSZWRpc0NsaWVudFR5cGUgfCBudWxsID0gbnVsbDtcblxuXHRwcml2YXRlIGNvbnN0cnVjdG9yKFxuXHRcdHByaXZhdGUgcmVhZG9ubHkgY3JlYXRlUmVkaXNDbGllbnQ6IHR5cGVvZiBpbXBvcnQoJ3JlZGlzJykuY3JlYXRlQ2xpZW50LFxuXHRcdGxvZ2dlcjogQXBwTG9nZ2VyU2VydmljZUludGVyZmFjZSxcblx0XHRlcnJvckxvZ2dlcjogRXJyb3JMb2dnZXJTZXJ2aWNlSW50ZXJmYWNlLFxuXHRcdGVycm9ySGFuZGxlcjogRXJyb3JIYW5kbGVyU2VydmljZUludGVyZmFjZSxcblx0XHRlbnZDb25maWc6IEVudkNvbmZpZ1NlcnZpY2VJbnRlcmZhY2Vcblx0KSB7XG5cdFx0dGhpcy5sb2dnZXIgPSBsb2dnZXI7XG5cdFx0dGhpcy5lcnJvckxvZ2dlciA9IGVycm9yTG9nZ2VyO1xuXHRcdHRoaXMuZXJyb3JIYW5kbGVyID0gZXJyb3JIYW5kbGVyO1xuXHRcdHRoaXMuZW52Q29uZmlnID0gZW52Q29uZmlnO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBhc3luYyBnZXRJbnN0YW5jZShcblx0XHRkZXBzOiBSZWRpc1NlcnZpY2VEZXBzXG5cdCk6IFByb21pc2U8UmVkaXNTZXJ2aWNlPiB7XG5cdFx0aWYgKCFSZWRpc1NlcnZpY2UuaW5zdGFuY2UpIHtcblx0XHRcdFJlZGlzU2VydmljZS5pbnN0YW5jZSA9IG5ldyBSZWRpc1NlcnZpY2UoXG5cdFx0XHRcdGRlcHMuY3JlYXRlUmVkaXNDbGllbnQsXG5cdFx0XHRcdGF3YWl0IFNlcnZpY2VGYWN0b3J5LmdldExvZ2dlclNlcnZpY2UoKSxcblx0XHRcdFx0YXdhaXQgU2VydmljZUZhY3RvcnkuZ2V0RXJyb3JMb2dnZXJTZXJ2aWNlKCksXG5cdFx0XHRcdGF3YWl0IFNlcnZpY2VGYWN0b3J5LmdldEVycm9ySGFuZGxlclNlcnZpY2UoKSxcblx0XHRcdFx0YXdhaXQgU2VydmljZUZhY3RvcnkuZ2V0RW52Q29uZmlnU2VydmljZSgpXG5cdFx0XHQpO1xuXHRcdH1cblx0XHRyZXR1cm4gUmVkaXNTZXJ2aWNlLmluc3RhbmNlO1xuXHR9XG5cblx0cHJpdmF0ZSBhc3luYyBjb25uZWN0UmVkaXNDbGllbnQoKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0aWYgKHRoaXMucmVkaXNDbGllbnQpIHJldHVybjtcblxuXHRcdHRyeSB7XG5cdFx0XHR0aGlzLnJlZGlzQ2xpZW50ID0gdGhpcy5jcmVhdGVSZWRpc0NsaWVudCh7XG5cdFx0XHRcdHVybDogdGhpcy5lbnZDb25maWcuZ2V0RW52VmFyaWFibGUoJ3JlZGlzVXJsJyksXG5cdFx0XHRcdHNvY2tldDoge1xuXHRcdFx0XHRcdHJlY29ubmVjdFN0cmF0ZWd5OiByZXRyaWVzID0+IHtcblx0XHRcdFx0XHRcdGNvbnN0IHJldHJ5QWZ0ZXIgPSBNYXRoLm1pbihyZXRyaWVzICogMTAwLCAzMDAwKTtcblx0XHRcdFx0XHRcdHRoaXMuZXJyb3JMb2dnZXIubG9nV2Fybihcblx0XHRcdFx0XHRcdFx0YEVycm9yIGNvbm5lY3RpbmcgdG8gUmVkaXMsIHJldHJ5aW5nIGluICR7cmV0cnlBZnRlcn1tcy4gUmV0cmllczogJHtyZXRyaWVzfWBcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRpZiAocmV0cmllcyA+PSAxMCkge1xuXHRcdFx0XHRcdFx0XHR0aGlzLmhhbmRsZVJlZGlzRmFpbHVyZShyZXRyaWVzKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiByZXRyeUFmdGVyO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMucmVkaXNDbGllbnQub24oJ2Vycm9yJywgZXJyb3IgPT4ge1xuXHRcdFx0XHR0aGlzLmVycm9yTG9nZ2VyLmxvZ0Vycm9yKGBSZWRpcyBlcnJvcjogJHtlcnJvcn1gKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRhd2FpdCB0aGlzLnJlZGlzQ2xpZW50LmNvbm5lY3QoKTtcblx0XHRcdHRoaXMubG9nZ2VyLmluZm8oJ0Nvbm5lY3RlZCB0byBSZWRpcycpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHR0aGlzLmhhbmRsZVJlZGlzRXJyb3IoXG5cdFx0XHRcdGVycm9yLFxuXHRcdFx0XHQnUkVESVNfQ09OTkVDVElPTl9FUlJPUicsXG5cdFx0XHRcdHsgcmVhc29uOiAnRmFpbGVkIHRvIGNvbm5lY3QgdG8gUmVkaXMnIH0sXG5cdFx0XHRcdCdFcnJvciBjb25uZWN0aW5nIHRvIFJlZGlzJ1xuXHRcdFx0KTtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgZ2V0UmVkaXNDbGllbnQoKTogUHJvbWlzZTxSZWRpc0NsaWVudFR5cGUgfCBudWxsPiB7XG5cdFx0dHJ5IHtcblx0XHRcdGF3YWl0IHRoaXMuY29ubmVjdFJlZGlzQ2xpZW50KCk7XG5cdFx0XHRyZXR1cm4gdGhpcy5yZWRpc0NsaWVudDtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0dGhpcy5oYW5kbGVSZWRpc0Vycm9yKFxuXHRcdFx0XHRlcnJvcixcblx0XHRcdFx0J1JFRElTX0NMSUVOVF9FUlJPUicsXG5cdFx0XHRcdHsgcmVhc29uOiAnRmFpbGVkIHRvIGdldCBSZWRpcyBjbGllbnQnIH0sXG5cdFx0XHRcdCdFcnJvciBnZXR0aW5nIFJlZGlzIGNsaWVudCdcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgZ2V0PFQ+KGtleTogc3RyaW5nKTogUHJvbWlzZTxUIHwgbnVsbD4ge1xuXHRcdGF3YWl0IHRoaXMuY29ubmVjdFJlZGlzQ2xpZW50KCk7XG5cdFx0aWYgKCF0aGlzLnJlZGlzQ2xpZW50KSB0aHJvdyBuZXcgRXJyb3IoJ1JlZGlzIGNsaWVudCBpcyBub3QgY29ubmVjdGVkJyk7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMucmVkaXNDbGllbnQuZ2V0KGtleSk7XG5cblx0XHRcdGlmICghcmVzdWx0KSB7XG5cdFx0XHRcdHRoaXMubG9nZ2VyLmluZm8oYEtleSAke2tleX0gbm90IGZvdW5kIG9yIGV4cGlyZWQgaW4gUmVkaXNgKTtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXN1bHQgPyBKU09OLnBhcnNlKHJlc3VsdCkgOiBudWxsO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHR0aGlzLmhhbmRsZVJlZGlzRXJyb3IoXG5cdFx0XHRcdGVycm9yLFxuXHRcdFx0XHQnUkVESVNfR0VUX0VSUk9SJyxcblx0XHRcdFx0eyByZWFzb246IGBGYWlsZWQgdG8gZ2V0IGtleWAgfSxcblx0XHRcdFx0YEVycm9yIGZldGNoaW5nIGtleSAke2tleX0gZnJvbSBSZWRpc2Bcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgc2V0PFQ+KFxuXHRcdGtleTogc3RyaW5nLFxuXHRcdHZhbHVlOiBULFxuXHRcdGV4cGlyYXRpb24/OiBudW1iZXJcblx0KTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0YXdhaXQgdGhpcy5jb25uZWN0UmVkaXNDbGllbnQoKTtcblx0XHRpZiAoIXRoaXMucmVkaXNDbGllbnQpIHRocm93IG5ldyBFcnJvcignUmVkaXMgY2xpZW50IGlzIG5vdCBjb25uZWN0ZWQnKTtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgdmFsdWVTdHJpbmcgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG5cdFx0XHRpZiAoZXhwaXJhdGlvbikge1xuXHRcdFx0XHRhd2FpdCB0aGlzLnJlZGlzQ2xpZW50LnNldChrZXksIHZhbHVlU3RyaW5nLCB7XG5cdFx0XHRcdFx0RVg6IGV4cGlyYXRpb25cblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRhd2FpdCB0aGlzLnJlZGlzQ2xpZW50LnNldChrZXksIHZhbHVlU3RyaW5nKTtcblx0XHRcdH1cblx0XHRcdHRoaXMubG9nZ2VyLmluZm8oXG5cdFx0XHRcdGBLZXkgJHtrZXl9IHNldCBpbiBSZWRpcyB3aXRoIGV4cGlyYXRpb24gJHtleHBpcmF0aW9uID8/ICdubyBleHBpcmF0aW9uJ31gXG5cdFx0XHQpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHR0aGlzLmhhbmRsZVJlZGlzRXJyb3IoXG5cdFx0XHRcdGVycm9yLFxuXHRcdFx0XHQnUkVESVNfU0VUX0VSUk9SJyxcblx0XHRcdFx0eyByZWFzb246IGBGYWlsZWQgdG8gc2V0IGtleSAke2tleX1gIH0sXG5cdFx0XHRcdGBFcnJvciBzZXR0aW5nIGtleSAke2tleX0gaW4gUmVkaXNgXG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBhc3luYyBkZWwoa2V5OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRpZiAoIXRoaXMucmVkaXNDbGllbnQpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignUmVkaXMgY2xpZW50IGlzIG5vdCBjb25uZWN0ZWQnKTtcblx0XHR9XG5cdFx0dHJ5IHtcblx0XHRcdGF3YWl0IHRoaXMucmVkaXNDbGllbnQuZGVsKGtleSk7XG5cdFx0XHR0aGlzLmxvZ2dlci5pbmZvKGBLZXkgJHtrZXl9IGRlbGV0ZWQgZnJvbSBSZWRpc2ApO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHR0aGlzLmhhbmRsZVJlZGlzRXJyb3IoXG5cdFx0XHRcdGVycm9yLFxuXHRcdFx0XHQnUkVESVNfREVMX0VSUk9SJyxcblx0XHRcdFx0eyByZWFzb246IGBGYWlsZWQgdG8gZGVsZXRlIGtleSAke2tleX1gIH0sXG5cdFx0XHRcdGBFcnJvciBkZWxldGluZyBrZXkgJHtrZXl9IGZyb20gUmVkaXNgXG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBhc3luYyBleGlzdHMoa2V5OiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcblx0XHRpZiAoIXRoaXMucmVkaXNDbGllbnQpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignUmVkaXMgY2xpZW50IGlzIG5vdCBjb25uZWN0ZWQnKTtcblx0XHR9XG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMucmVkaXNDbGllbnQuZXhpc3RzKGtleSk7XG5cdFx0XHRyZXR1cm4gcmVzdWx0ID4gMDtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0dGhpcy5oYW5kbGVSZWRpc0Vycm9yKFxuXHRcdFx0XHRlcnJvcixcblx0XHRcdFx0J1JFRElTX0VYSVNUU19FUlJPUicsXG5cdFx0XHRcdHsgcmVhc29uOiBgRmFpbGVkIHRvIGNoZWNrIGV4aXN0ZW5jZSBvZiBrZXkgJHtrZXl9YCB9LFxuXHRcdFx0XHRgRXJyb3IgY2hlY2tpbmcgZXhpc3RlbmNlIG9mIGtleSAke2tleX0gaW4gUmVkaXNgXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBhc3luYyBpbmNyZW1lbnQoXG5cdFx0a2V5OiBzdHJpbmcsXG5cdFx0ZXhwaXJhdGlvbj86IG51bWJlclxuXHQpOiBQcm9taXNlPG51bWJlciB8IG51bGw+IHtcblx0XHRpZiAoIXRoaXMucmVkaXNDbGllbnQpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignUmVkaXMgY2xpZW50IGlzIG5vdCBjb25uZWN0ZWQnKTtcblx0XHR9XG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IG5ld1ZhbHVlID0gYXdhaXQgdGhpcy5yZWRpc0NsaWVudC5pbmNyKGtleSk7XG5cdFx0XHRpZiAoZXhwaXJhdGlvbikge1xuXHRcdFx0XHRhd2FpdCB0aGlzLnJlZGlzQ2xpZW50LmV4cGlyZShrZXksIGV4cGlyYXRpb24pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG5ld1ZhbHVlO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHR0aGlzLmhhbmRsZVJlZGlzRXJyb3IoXG5cdFx0XHRcdGVycm9yLFxuXHRcdFx0XHQnUkVESVNfSU5DUkVNRU5UX0VSUk9SJyxcblx0XHRcdFx0eyByZWFzb246IGBGYWlsZWQgdG8gaW5jcmVtZW50IGtleSAke2tleX1gIH0sXG5cdFx0XHRcdGBFcnJvciBpbmNyZW1lbnRpbmcga2V5ICR7a2V5fSBpbiBSZWRpc2Bcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgZ2V0S2V5c0J5UGF0dGVybihwYXR0ZXJuOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG5cdFx0dHJ5IHtcblx0XHRcdGF3YWl0IHRoaXMuY29ubmVjdFJlZGlzQ2xpZW50KCk7XG5cblx0XHRcdGlmICghdGhpcy5yZWRpc0NsaWVudCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1JlZGlzIGNsaWVudCBpcyBub3QgY29ubmVjdGVkJyk7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGtleXMgPSBhd2FpdCB0aGlzLnJlZGlzQ2xpZW50LmtleXMocGF0dGVybik7XG5cdFx0XHR0aGlzLmxvZ2dlci5pbmZvKFxuXHRcdFx0XHRgRm91bmQgJHtrZXlzLmxlbmd0aH0ga2V5cyBtYXRjaGluZyBwYXR0ZXJuOiAke3BhdHRlcm59YFxuXHRcdFx0KTtcblx0XHRcdHJldHVybiBrZXlzO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHR0aGlzLmhhbmRsZVJlZGlzRXJyb3IoXG5cdFx0XHRcdGVycm9yLFxuXHRcdFx0XHQnUkVESVNfS0VZX1BBVFRFUk5fRVJST1InLFxuXHRcdFx0XHR7IHJlYXNvbjogYEZhaWxlZCB0byBnZXQga2V5cyBieSBwYXR0ZXJuICR7cGF0dGVybn1gIH0sXG5cdFx0XHRcdGBFcnJvciBmZXRjaGluZyBrZXlzIGJ5IHBhdHRlcm4gJHtwYXR0ZXJufSBmcm9tIFJlZGlzYFxuXHRcdFx0KTtcblx0XHRcdHJldHVybiBbXTtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgZGVsTXVsdGlwbGUoc2VydmljZTogc3RyaW5nLCBrZXlzOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4ge1xuXHRcdHRyeSB7XG5cdFx0XHRhd2FpdCB0aGlzLmNvbm5lY3RSZWRpc0NsaWVudCgpO1xuXG5cdFx0XHRpZiAoIXRoaXMucmVkaXNDbGllbnQpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdSZWRpcyBjbGllbnQgaXMgbm90IGNvbm5lY3RlZCcpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoa2V5cy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdGNvbnN0IG5hbWVzcGFjZWRLZXlzID0ga2V5cy5tYXAoa2V5ID0+IGAke3NlcnZpY2V9OiR7a2V5fWApO1xuXG5cdFx0XHRcdGF3YWl0IHRoaXMucmVkaXNDbGllbnQuZGVsKG5hbWVzcGFjZWRLZXlzKTtcblx0XHRcdFx0dGhpcy5sb2dnZXIuaW5mbyhcblx0XHRcdFx0XHRgRGVsZXRlZCAke2tleXMubGVuZ3RofSBrZXlzIGZyb20gUmVkaXMgZm9yIHNlcnZpY2UgJHtzZXJ2aWNlfWBcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMubG9nZ2VyLmluZm8oYE5vIGtleXMgdG8gZGVsZXRlIGZvciBzZXJ2aWNlICR7c2VydmljZX1gKTtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0dGhpcy5oYW5kbGVSZWRpc0Vycm9yKFxuXHRcdFx0XHRlcnJvcixcblx0XHRcdFx0J1JFRElTX0RFTF9NVUxUSVBMRV9FUlJPUicsXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRyZWFzb246IGBGYWlsZWQgdG8gZGVsZXRlIG11bHRpcGxlIGtleXMgZm9yIHNlcnZpY2UgJHtzZXJ2aWNlfWBcblx0XHRcdFx0fSxcblx0XHRcdFx0YEVycm9yIGRlbGV0aW5nIG11bHRpcGxlIGtleXMgZnJvbSBSZWRpcyBmb3Igc2VydmljZSAke3NlcnZpY2V9YFxuXHRcdFx0KTtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgZmx1c2hDYWNoZUJ5U2VydmljZShzZXJ2aWNlOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3Qgc2VydmljZVBhdHRlcm4gPSBgJHtzZXJ2aWNlfToqYDtcblx0XHRcdGNvbnN0IHNlcnZpY2VLZXlzID0gYXdhaXQgdGhpcy5nZXRLZXlzQnlQYXR0ZXJuKHNlcnZpY2VQYXR0ZXJuKTtcblx0XHRcdGlmIChzZXJ2aWNlS2V5cy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdGF3YWl0IHRoaXMuZGVsTXVsdGlwbGUoc2VydmljZSwgc2VydmljZUtleXMpO1xuXHRcdFx0XHR0aGlzLmxvZ2dlci5pbmZvKGBGbHVzaGVkIFJlZGlzIGNhY2hlIGZvciBzZXJ2aWNlICR7c2VydmljZX1gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMubG9nZ2VyLmluZm8oXG5cdFx0XHRcdFx0YE5vIGtleXMgZm91bmQgdG8gZmx1c2ggZm9yIHNlcnZpY2UgJHtzZXJ2aWNlfWBcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0dGhpcy5oYW5kbGVSZWRpc0Vycm9yKFxuXHRcdFx0XHRlcnJvcixcblx0XHRcdFx0J1JFRElTX0ZMVVNIX0NBQ0hFX0JZX1NFUlZJQ0VfRVJST1InLFxuXHRcdFx0XHR7IHNlcnZpY2UgfSxcblx0XHRcdFx0YEVycm9yIGZsdXNoaW5nIFJlZGlzIGNhY2hlIGZvciBzZXJ2aWNlICR7c2VydmljZX1gXG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBhc3luYyBmbHVzaFJlZGlzTWVtb3J5Q2FjaGUoKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0dHJ5IHtcblx0XHRcdGF3YWl0IHRoaXMuY29ubmVjdFJlZGlzQ2xpZW50KCk7XG5cblx0XHRcdGlmICh0aGlzLnJlZGlzQ2xpZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5yZWRpc0NsaWVudC5mbHVzaEFsbCgpO1xuXHRcdFx0XHRcdHRoaXMubG9nZ2VyLmluZm8oJ1JlZGlzIGNhY2hlIGZsdXNoZWQgc3VjY2Vzc2Z1bGx5Jyk7XG5cdFx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdFx0dGhpcy5oYW5kbGVSZWRpc0Vycm9yKFxuXHRcdFx0XHRcdFx0ZXJyb3IsXG5cdFx0XHRcdFx0XHQnUkVESVNfRkxVU0hfRVJST1InLFxuXHRcdFx0XHRcdFx0eyByZWFzb246ICdSZWRpcyBub3QgY29ubmVjdGVkJyB9LFxuXHRcdFx0XHRcdFx0J0Vycm9yIGZsdXNoaW5nIFJlZGlzIGNhY2hlJ1xuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuZXJyb3JMb2dnZXIubG9nV2Fybihcblx0XHRcdFx0XHQnUmVkaXMgY2xpZW50IGlzIG5vdCBhdmFpbGFibGUgZm9yIGNhY2hlIGZsdXNoJ1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHR0aGlzLmhhbmRsZVJlZGlzRXJyb3IoXG5cdFx0XHRcdGVycm9yLFxuXHRcdFx0XHQnUkVESVNfRkxVU0hfRVJST1InLFxuXHRcdFx0XHR7IHJlYXNvbjogJ0ZhaWxlZCB0byBmbHVzaCBSZWRpcyBjYWNoZScgfSxcblx0XHRcdFx0J0Vycm9yIGZsdXNoaW5nIFJlZGlzIGNhY2hlJ1xuXHRcdFx0KTtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgY2xlYW5VcFJlZGlzQ2xpZW50KCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdHRyeSB7XG5cdFx0XHRpZiAodGhpcy5yZWRpc0NsaWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucmVkaXNDbGllbnQucXVpdCgpO1xuXHRcdFx0XHRcdHRoaXMubG9nZ2VyLmluZm8oJ1JlZGlzIGNsaWVudCBkaXNjb25uZWN0ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG5cdFx0XHRcdFx0dGhpcy5yZWRpc0NsaWVudCA9IG51bGw7XG5cdFx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdFx0dGhpcy5lcnJvckxvZ2dlci5sb2dFcnJvcihcblx0XHRcdFx0XHRcdGBFcnJvciBkaXNjb25uZWN0aW5nIFJlZGlzIGNsaWVudDogJHtlcnJvcn1gXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHR0aGlzLmhhbmRsZVJlZGlzRXJyb3IoXG5cdFx0XHRcdGVycm9yLFxuXHRcdFx0XHQnUkVESVNfRElTQ09OTkVDVF9FUlJPUicsXG5cdFx0XHRcdHsgcmVhc29uOiAnRmFpbGVkIHRvIGRpc2Nvbm5lY3QgUmVkaXMgY2xpZW50JyB9LFxuXHRcdFx0XHQnRXJyb3IgZGlzY29ubmVjdGluZyBSZWRpcyBjbGllbnQnXG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBhc3luYyBnZXRSZWRpc0luZm8oKTogUHJvbWlzZTxSZWRpc01ldHJpY3M+IHtcblx0XHR0cnkge1xuXHRcdFx0YXdhaXQgdGhpcy5jb25uZWN0UmVkaXNDbGllbnQoKTtcblx0XHRcdGlmICghdGhpcy5yZWRpc0NsaWVudCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1JlZGlzIGNsaWVudCBpcyBub3QgY29ubmVjdGVkJyk7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGluZm8gPSBhd2FpdCB0aGlzLnJlZGlzQ2xpZW50LmluZm8oKTtcblx0XHRcdGNvbnN0IHBhcnNlZEluZm8gPSB0aGlzLnBhcnNlUmVkaXNJbmZvKGluZm8pO1xuXG5cdFx0XHR0aGlzLmxvZ2dlci5pbmZvKGBSZWRpcyBtZXRyaWNzOiAke0pTT04uc3RyaW5naWZ5KHBhcnNlZEluZm8pfWApO1xuXHRcdFx0cmV0dXJuIHBhcnNlZEluZm87XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdHRoaXMuaGFuZGxlUmVkaXNFcnJvcihcblx0XHRcdFx0ZXJyb3IsXG5cdFx0XHRcdCdSRURJU19NRVRSSUNTX1JFVFJJRVZBTF9FUlJPUicsXG5cdFx0XHRcdHsgcmVhc29uOiAnRmFpbGVkIHRvIHJldHJpZXZlIFJlZGlzIG1ldHJpY3MnIH0sXG5cdFx0XHRcdGBFcnJvciByZXRyaWV2aW5nIFJlZGlzIG1ldHJpY3NgXG5cdFx0XHQpO1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdFcnJvciByZXRyaWV2aW5nIFJlZGlzIG1ldHJpY3MnKTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIHBhcnNlUmVkaXNJbmZvKGluZm86IHN0cmluZyk6IFJlZGlzTWV0cmljcyB7XG5cdFx0Y29uc3QgcmVzdWx0OiBQYXJ0aWFsPFJlZGlzTWV0cmljcz4gPSB7fTtcblx0XHRjb25zdCBsaW5lcyA9IGluZm8uc3BsaXQoJ1xcbicpO1xuXG5cdFx0bGluZXMuZm9yRWFjaChsaW5lID0+IHtcblx0XHRcdGNvbnN0IFtrZXksIHZhbHVlXSA9IGxpbmUuc3BsaXQoJzonKTtcblx0XHRcdGlmIChrZXkgJiYgdmFsdWUpIHtcblx0XHRcdFx0c3dpdGNoIChrZXkudHJpbSgpKSB7XG5cdFx0XHRcdFx0Y2FzZSAndXB0aW1lX2luX3NlY29uZHMnOlxuXHRcdFx0XHRcdFx0cmVzdWx0LnVwdGltZV9pbl9zZWNvbmRzID1cblx0XHRcdFx0XHRcdFx0cGFyc2VJbnQodmFsdWUudHJpbSgpLCAxMCkgfHwgMDtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ3VzZWRfbWVtb3J5Jzpcblx0XHRcdFx0XHRcdHJlc3VsdC51c2VkX21lbW9yeSA9IHBhcnNlSW50KHZhbHVlLnRyaW0oKSwgMTApIHx8IDA7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdjb25uZWN0ZWRfY2xpZW50cyc6XG5cdFx0XHRcdFx0XHRyZXN1bHQuY29ubmVjdGVkX2NsaWVudHMgPVxuXHRcdFx0XHRcdFx0XHRwYXJzZUludCh2YWx1ZS50cmltKCksIDEwKSB8fCAwO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnZGIwJzpcblx0XHRcdFx0XHRcdGNvbnN0IHNpemVNYXRjaCA9IHZhbHVlLm1hdGNoKC9rZXlzPShcXGQrKS8pO1xuXHRcdFx0XHRcdFx0aWYgKHNpemVNYXRjaCkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHQuZGIwX3NpemUgPSBwYXJzZUludChzaXplTWF0Y2hbMV0sIDEwKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gcmVzdWx0IGFzIFJlZGlzTWV0cmljcztcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBzaHV0ZG93bigpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHR0cnkge1xuXHRcdFx0dGhpcy5sb2dnZXIuaW5mbygnU2h1dHRpbmcgZG93biBSZWRpcyBjbGllbnQuLi4nKTtcblx0XHRcdGF3YWl0IHRoaXMuY2xlYW5VcFJlZGlzQ2xpZW50KCk7XG5cdFx0XHR0aGlzLmxvZ2dlci5pbmZvKCdSZWRpcyBjbGllbnQgc2h1dGRvd24gY29tcGxldGVkLicpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHR0aGlzLmxvZ2dlci5lcnJvcihcblx0XHRcdFx0YEZhaWxlZCB0byBzaHV0IGRvd24gUmVkaXM6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBlcnJvcn1gXG5cdFx0XHQpO1xuXHRcdH0gZmluYWxseSB7XG5cdFx0XHRSZWRpc1NlcnZpY2UuaW5zdGFuY2UgPSBudWxsO1xuXHRcdFx0dGhpcy5sb2dnZXIuaW5mbygnUmVkaXNTZXJ2aWNlIGluc3RhbmNlIGhhcyBiZWVuIG51bGxpZmllZC4nKTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGhhbmRsZVJlZGlzRmFpbHVyZShyZXRyaWVzOiBudW1iZXIpOiB2b2lkIHtcblx0XHR0aGlzLmVycm9yTG9nZ2VyLmxvZ0Vycm9yKFxuXHRcdFx0YE1heCByZXRyaWVzICgke3JldHJpZXN9KSByZWFjaGVkIGZvciBSZWRpcyBjb25uZWN0aW9uYFxuXHRcdCk7XG5cdFx0dGhpcy5lcnJvckhhbmRsZXIuaGFuZGxlRXJyb3Ioe1xuXHRcdFx0ZXJyb3I6IG5ldyBFcnJvcignUmVkaXMgY29ubmVjdGlvbiBmYWlsZWQgYWZ0ZXIgbWF4IHJldHJpZXMnKSxcblx0XHRcdGRldGFpbHM6IHsgcmVhc29uOiAnRmFpbGVkIHRvIGNvbm5lY3QgdG8gUmVkaXMnIH1cblx0XHR9KTtcblx0fVxuXG5cdHByaXZhdGUgaGFuZGxlUmVkaXNFcnJvcihcblx0XHRlcnJvcjogdW5rbm93bixcblx0XHRlcnJvckhlYWRlcjogc3RyaW5nLFxuXHRcdGVycm9yRGV0YWlsczogb2JqZWN0LFxuXHRcdGN1c3RvbU1lc3NhZ2U6IHN0cmluZ1xuXHQpOiB2b2lkIHtcblx0XHRjb25zdCBlcnJvck1lc3NhZ2UgPSBgJHtjdXN0b21NZXNzYWdlfTogJHtlcnJvcn1cXG4ke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5zdGFjayA6ICcnfWA7XG5cdFx0dGhpcy5lcnJvckxvZ2dlci5sb2dFcnJvcihlcnJvck1lc3NhZ2UpO1xuXG5cdFx0Y29uc3QgcmVkaXNFcnJvciA9IG5ldyB0aGlzLmVycm9ySGFuZGxlci5FcnJvckNsYXNzZXMuUmVkaXNTZXJ2aWNlRXJyb3IoXG5cdFx0XHRlcnJvckhlYWRlcixcblx0XHRcdHtcblx0XHRcdFx0ZGV0YWlsczogZXJyb3JEZXRhaWxzLFxuXHRcdFx0XHRleHBvc2VUb0NsaWVudDogZmFsc2Vcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0dGhpcy5lcnJvckhhbmRsZXIuaGFuZGxlRXJyb3Ioe1xuXHRcdFx0ZXJyb3I6IHJlZGlzRXJyb3Jcblx0XHR9KTtcblx0fVxufVxuIl19
