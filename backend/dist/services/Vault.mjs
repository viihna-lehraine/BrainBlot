import argon2 from 'argon2';
import { execSync } from 'child_process';
import {
	createCipheriv,
	createDecipheriv,
	createHash,
	randomBytes
} from 'crypto';
import path from 'path';
import { hashConfig } from '../config/security.mjs';
import { HandleErrorStaticParameters } from '../index/parameters.mjs';
import { withRetry } from '../utils/helpers.mjs';
import { ServiceFactory } from '../index/factory.mjs';
const algorithm = 'aes-256-ctr';
const ivLength = 16;
const PLACEHOLDER = '[REDACTED]';
export class VaultService {
	static instance = null;
	envConfig;
	logger;
	errorLogger;
	errorHandler;
	secrets = new Map();
	encryptedGpgPassphrase = null;
	encryptionKey = null;
	maxAttempts;
	rateLimitWindow;
	secretAccessAttempts = new Map();
	constructor(
		encryptionKey,
		gpgPassphrase,
		logger,
		errorLogger,
		errorHandler,
		envConfig
	) {
		this.logger = logger;
		this.errorLogger = errorLogger;
		this.errorHandler = errorHandler;
		this.envConfig = envConfig;
		this.maxAttempts = Number(
			this.envConfig.getEnvVariable('secretsRateLimitMaxAttempts')
		);
		this.rateLimitWindow = Number(
			this.envConfig.getEnvVariable('secretsRateLimitWindow')
		);
		this.initializeEncryptionKey(encryptionKey);
		this.loadAndSecureSecrets(gpgPassphrase);
		this.encryptGPGPassphraseInMemory(gpgPassphrase);
	}
	static async getInstance() {
		if (!VaultService.instance) {
			throw new Error(
				'SecretsStore not initialized. Ensure it is initialized after login.'
			);
		}
		return VaultService.instance;
	}
	static async initialize(encryptionKey, gpgPassphrase) {
		try {
			if (!VaultService.instance) {
				const logger = await ServiceFactory.getLoggerService();
				const errorLogger =
					await ServiceFactory.getErrorLoggerService();
				const errorHandler =
					await ServiceFactory.getErrorHandlerService();
				const envConfig = await ServiceFactory.getEnvConfigService();
				VaultService.instance = new VaultService(
					encryptionKey,
					gpgPassphrase,
					logger,
					errorLogger,
					errorHandler,
					envConfig
				);
			}
			return VaultService.instance;
		} catch (error) {
			const initializationError = new Error(
				`Failed to initialize VaultService: ${error instanceof Error ? error.message : String(error)}`
			);
			// Log the error here
			throw initializationError;
		}
	}
	async loadAndSecureSecrets(gpgPassphrase) {
		try {
			await withRetry(
				async () => {
					const secretsFilePath =
						this.envConfig.getEnvVariable('secretsFilePath1');
					const decryptedSecrets = execSync(
						`sops -d --output-type json --passphrase ${gpgPassphrase} ${secretsFilePath}`
					).toString();
					const secrets = JSON.parse(decryptedSecrets);
					for (const key in secrets) {
						const { encryptedValue } = await this.encryptSecret(
							secrets[key]
						);
						this.secrets.set(key, {
							encryptedValue,
							hash: await argon2.hash(secrets[key], hashConfig),
							isDecrypted: false,
							lastAccessed: Date.now()
						});
						this.clearMemory(secrets[key]);
					}
					this.logger.info(
						'Secrets loaded, encrypted, and secured successfully.'
					);
				},
				5,
				1000,
				true
			);
		} catch (error) {
			this.handleLoadSecretsError(error);
		}
	}
	initializeEncryptionKey(encryptionKey) {
		if (!encryptionKey) {
			throw new Error('Encryption key not provided or invalid');
		}
		this.encryptionKey = encryptionKey;
		this.logger.info('Encryption key initialized.');
	}
	async loadSecrets(dependencies) {
		const { execSync, getDirectoryPath, gpgPassphrase } = dependencies;
		const secretsPath = path.join(
			getDirectoryPath(),
			this.envConfig.getEnvVariable('secretsFilePath1')
		);
		try {
			const decryptedSecrets = execSync(
				`sops -d --output-type json --passphrase ${gpgPassphrase} ${secretsPath}`
			).toString();
			const secrets = JSON.parse(decryptedSecrets);
			for (const key in secrets) {
				const { encryptedValue } = await this.encryptSecret(
					secrets[key]
				);
				this.secrets.set(key, {
					encryptedValue,
					hash: await argon2.hash(secrets[key], hashConfig),
					isDecrypted: false,
					lastAccessed: Date.now()
				});
				this.clearMemory(secrets[key]);
			}
			this.logger.debug(
				'Secrets loaded and cleared from memory successfully'
			);
			this.clearMemory(gpgPassphrase);
		} catch (error) {
			this.handleLoadSecretsError(error);
		}
	}
	async storeSecret(key, secret) {
		const { encryptedValue, hash } = await this.encryptSecret(secret);
		this.secrets.set(key, {
			encryptedValue,
			hash,
			isDecrypted: false,
			lastAccessed: Date.now()
		});
		this.logger.info(`Secret ${key} stored successfully.`);
	}
	async retrieveSecret(key, usageCallback) {
		return withRetry(
			async () => {
				if (this.isRateLimited(key)) {
					this.logger.warn(`Rate limit exceeded for secret: ${key}`);
					return null;
				}
				const secretData = this.secrets.get(key);
				if (!secretData) {
					this.logger.error(`Secret ${key} not found.`);
					return null;
				}
				const decryptedSecret = this.decryptSecret(
					secretData.encryptedValue
				);
				try {
					usageCallback(decryptedSecret);
				} finally {
					this.clearMemory(decryptedSecret);
					this.logger.debug(
						`Decrypted secret ${key} wiped from memory.`
					);
				}
				return decryptedSecret;
			},
			5,
			1000
		);
	}
	async retrieveSecrets(secretKeys, usageCallback) {
		const result = {};
		await withRetry(
			async () => {
				for (const key of secretKeys) {
					if (this.isRateLimited(key)) {
						this.logger.warn(
							`Rate limit exceeded for secret: ${key}`
						);
						continue;
					}
					const secretData = this.secrets.get(key);
					if (!secretData) {
						this.logger.error(`Secret ${key} not found.`);
					} else {
						const decryptedSecret = this.decryptSecret(
							secretData.encryptedValue
						);
						if (key === 'YUBICO_CLIENT_ID') {
							result[key] = Number(decryptedSecret);
						} else {
							result[key] = decryptedSecret;
						}
						try {
							this.clearMemory(decryptedSecret);
						} finally {
							this.logger.debug(
								`Decrypted secret ${key} wiped from memory.`
							);
						}
					}
				}
				usageCallback(result);
			},
			3,
			1000
		);
		return Object.keys(result).length > 0 ? result : null;
	}
	clearMemory(secret) {
		if (typeof secret === 'string') {
			const buffer = Buffer.from(secret, 'utf-8');
			buffer.fill(0);
		} else if (Buffer.isBuffer(secret)) {
			secret.fill(0);
		}
		secret = null;
		this.logger.debug('Sensitive data cleared from memory.');
	}
	async redactSecrets(logData) {
		const secretHashes = this.getSecretsHashes();
		if (typeof logData === 'string') {
			return this.redactInString(logData, secretHashes);
		}
		return this.traverseAndRedact(logData, secretHashes);
	}
	async encryptSecret(secret) {
		const iv = randomBytes(ivLength);
		const cipher = createCipheriv(
			algorithm,
			this.getEncryptionKeyHash(),
			iv
		);
		const encrypted = Buffer.concat([
			cipher.update(secret, 'utf-8'),
			cipher.final()
		]);
		const encryptedValue = `${iv.toString('hex')}:${encrypted.toString('hex')}`;
		const hash = await argon2.hash(secret, hashConfig);
		return { encryptedValue, hash };
	}
	decryptSecret(encryptedSecret) {
		const [ivHex, encryptedHex] = encryptedSecret.split(':');
		const iv = Buffer.from(ivHex, 'hex');
		const encryptedText = Buffer.from(encryptedHex, 'hex');
		const decipher = createDecipheriv(
			algorithm,
			this.getEncryptionKeyHash(),
			iv
		);
		const decrypted = Buffer.concat([
			decipher.update(encryptedText),
			decipher.final()
		]);
		return decrypted.toString();
	}
	async traverseAndRedact(data, secretsHashes) {
		if (Array.isArray(data)) {
			return Promise.all(
				data.map(async item =>
					typeof item === 'object'
						? this.traverseAndRedact(item, secretsHashes)
						: item
				)
			);
		} else if (typeof data === 'object' && data !== null) {
			const result = {};
			for (const [key, value] of Object.entries(data)) {
				if (typeof value === 'object' && value !== null) {
					result[key] = await this.traverseAndRedact(
						value,
						secretsHashes
					);
				} else if (typeof value === 'string') {
					for (const hash of secretsHashes) {
						const isMatch = await argon2.verify(hash, value);
						if (isMatch) {
							result[key] = PLACEHOLDER;
							break;
						}
					}
					result[key] = value;
				} else {
					result[key] = value;
				}
			}
			return result;
		}
		return data;
	}
	async redactInString(logData, secretHashes) {
		for (const hash of secretHashes) {
			const isMatch = await argon2.verify(hash, logData);
			if (isMatch) {
				return logData.replace(new RegExp(logData, 'g'), PLACEHOLDER);
			}
		}
		return logData;
	}
	getSecretsHashes() {
		return [...this.secrets.values()].map(secretData => secretData.hash);
	}
	isRateLimited(key) {
		const currentTime = Date.now();
		let rateData = this.secretAccessAttempts.get(key);
		if (!rateData) {
			rateData = { attempts: 0, lastAttempt: currentTime };
			this.secretAccessAttempts.set(key, rateData);
		}
		const timeElapsed = currentTime - rateData.lastAttempt;
		if (timeElapsed > this.rateLimitWindow) {
			rateData.attempts = 1;
			rateData.lastAttempt = currentTime;
			this.secretAccessAttempts.set(key, rateData);
			return false;
		}
		if (rateData.attempts >= this.maxAttempts) {
			this.logger.warn(`Rate limit exceeded for key: ${key}`);
			return true;
		}
		rateData.attempts += 1;
		rateData.lastAttempt = currentTime;
		this.secretAccessAttempts.set(key, rateData);
		return false;
	}
	refreshSecrets(dependencies) {
		try {
			const gpgPassphrase = this.decryptGPGPassphraseInMemory();
			withRetry(
				async () => {
					this.loadSecrets({
						...dependencies,
						gpgPassphrase
					})
						.then(() => {
							this.logger.info('Secrets refreshed successfully');
						})
						.catch(error => {
							throw new Error(
								`Failed to refresh secrets: ${error.message}`
							);
						});
					this.clearMemory(gpgPassphrase);
				},
				5,
				1000,
				true
			);
		} catch (error) {
			this.handleRefreshSecretsError(error);
		}
	}
	getEncryptionKeyHash() {
		if (!this.encryptionKey) {
			throw new Error('Encryption key is not initialized');
		}
		return createHash('sha256').update(this.encryptionKey).digest();
	}
	encryptGPGPassphraseInMemory(gpgPassphrase) {
		const iv = randomBytes(ivLength);
		const cipher = createCipheriv(
			algorithm,
			this.getEncryptionKeyHash(),
			iv
		);
		const encrypted = Buffer.concat([
			cipher.update(gpgPassphrase, 'utf-8'),
			cipher.final()
		]);
		this.encryptedGpgPassphrase = `${iv.toString('hex')}:${encrypted.toString('hex')}`;
		return this.encryptedGpgPassphrase;
	}
	decryptGPGPassphraseInMemory() {
		if (!this.encryptedGpgPassphrase) {
			throw new Error('No GPG passphrase found in memory');
		}
		const decryptedPassphrase = this.decryptSecret(
			this.encryptedGpgPassphrase
		);
		try {
			return decryptedPassphrase;
		} finally {
			this.clearMemory(decryptedPassphrase);
		}
	}
	clearExpiredSecretsFromMemory() {
		const currentTime = Date.now();
		this.secrets.forEach((secretData, key) => {
			const isTimeElapsed = currentTime - secretData.lastAccessed;
			if (
				isTimeElapsed >=
					this.envConfig.getEnvVariable('secretsExpiryTimeout') &&
				secretData.isDecrypted
			) {
				this.clearMemory(secretData.encryptedValue);
				this.secrets.set(key, {
					...secretData,
					isDecrypted: false
				});
				this.logger.debug(`Expired secret ${key} cleared from memory`);
			}
		});
	}
	clearSecretsFromMemory(secretKeys) {
		const keysToClear = Array.isArray(secretKeys)
			? secretKeys
			: [secretKeys];
		keysToClear.forEach(key => {
			const secretData = this.secrets.get(key);
			if (!secretData) {
				this.logger.error(`Secret ${key} not found.`);
				return;
			}
			if (!secretData.isDecrypted) {
				this.logger.debug(
					`Secret ${key} is already cleared from memory.`
				);
			}
			this.secrets.set(key, {
				...secretData,
				isDecrypted: false
			});
			this.logger.debug(`Secret ${key} has been cleared from memory.`);
		});
	}
	async batchClearSecrets() {
		try {
			this.logger.info('Starting batch clearing of decrypted secrets...');
			const currentTime = Date.now();
			for (const [key, secretData] of this.secrets.entries()) {
				if (secretData.isDecrypted) {
					this.clearMemory(secretData.encryptedValue);
					this.secrets.set(key, {
						...secretData,
						isDecrypted: false,
						lastAccessed: currentTime
					});
					this.logger.info(
						`Secret ${key} cleared from memory successfully.`
					);
				} else {
					this.logger.debug(`Secret ${key} is already encrypted.`);
				}
			}
			this.logger.info(
				'Batch clearing of decrypted secrets completed successfully.'
			);
		} catch (error) {
			const clearError =
				new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
					`Failed to batch clear decrypted secrets: ${error instanceof Error ? error.message : String(error)}`,
					{ originalError: error }
				);
			this.logger.error(clearError.message);
			this.errorHandler.handleError({ error: clearError });
			throw clearError;
		}
	}
	async shutdown() {
		try {
			this.logger.info('Shutting down VaultService...');
			await this.batchClearSecrets();
			if (this.encryptedGpgPassphrase) {
				this.clearMemory(this.encryptedGpgPassphrase);
				this.encryptedGpgPassphrase = null;
				this.logger.info('GPG passphrase cleared from memory.');
			}
			if (this.encryptionKey) {
				this.clearMemory(this.encryptionKey);
				this.encryptionKey = null;
				this.logger.info('Encryption key cleared from memory.');
			}
			VaultService.instance = null;
			this.logger.info('VaultService instance nullified.');
		} catch (error) {
			this.errorLogger.logError(
				`Error during VaultService shutdown: ${error instanceof Error ? error.message : String(error)}`
			);
			const shutdownError =
				new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
					`VaultService shutdown failed: ${error instanceof Error ? error.message : String(error)}`,
					{ originalError: error }
				);
			this.errorHandler.handleError({ error: shutdownError });
			throw shutdownError;
		}
	}
	handleLoadSecretsError(error) {
		const secretsLoadError =
			new this.errorHandler.ErrorClasses.ConfigurationError(
				`Failed to load secrets: ${error instanceof Error ? error.message : String(error)}`,
				{ originalError: error }
			);
		this.errorLogger.logError(
			`{ ${secretsLoadError.message}\n${secretsLoadError.message} }`
		);
		this.errorHandler.handleError({
			...HandleErrorStaticParameters,
			error: secretsLoadError
		});
		throw secretsLoadError;
	}
	handleRefreshSecretsError(error) {
		const secretsRefreshError =
			new this.errorHandler.ErrorClasses.ConfigurationError(
				`Failed to refresh secrets: ${error instanceof Error ? error.message : String(error)}`,
				{ originalError: error }
			);
		this.errorLogger.logError(secretsRefreshError.message);
		this.errorHandler.handleError({
			error: secretsRefreshError
		});
		throw secretsRefreshError;
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmF1bHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2VydmljZXMvVmF1bHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBQzVCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUNOLGNBQWMsRUFDZCxnQkFBZ0IsRUFDaEIsVUFBVSxFQUNWLFdBQVcsRUFDWCxNQUFNLFFBQVEsQ0FBQztBQUNoQixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBSWhELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQU83QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFbEQsTUFBTSxTQUFTLEdBQUcsYUFBYSxDQUFDO0FBQ2hDLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUNwQixNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUM7QUFFakMsTUFBTSxPQUFPLFlBQVk7SUFDaEIsTUFBTSxDQUFDLFFBQVEsR0FBd0IsSUFBSSxDQUFDO0lBQzVDLFNBQVMsQ0FBNEI7SUFDckMsTUFBTSxDQUE0QjtJQUNsQyxXQUFXLENBQThCO0lBQ3pDLFlBQVksQ0FBK0I7SUFDM0MsT0FBTyxHQVFYLElBQUksR0FBRyxFQUFFLENBQUM7SUFDTixzQkFBc0IsR0FBa0IsSUFBSSxDQUFDO0lBQzdDLGFBQWEsR0FBa0IsSUFBSSxDQUFDO0lBQ3BDLFdBQVcsQ0FBUztJQUNwQixlQUFlLENBQVM7SUFDeEIsb0JBQW9CLEdBR3hCLElBQUksR0FBRyxFQUFFLENBQUM7SUFFZCxZQUNDLGFBQXFCLEVBQ3JCLGFBQXFCLEVBQ3JCLE1BQWlDLEVBQ2pDLFdBQXdDLEVBQ3hD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QUFFLG1CQUFtQjtTQUMxQixDQUFDLENBQUM7UUFDSCxNQUFNLG1CQUFtQixDQUFDO0lBQzNCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXJnb24yIGZyb20gJ2FyZ29uMic7XG5pbXBvcnQgeyBleGVjU3luYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHtcblx0Y3JlYXRlQ2lwaGVyaXYsXG5cdGNyZWF0ZURlY2lwaGVyaXYsXG5cdGNyZWF0ZUhhc2gsXG5cdHJhbmRvbUJ5dGVzXG59IGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGhhc2hDb25maWcgfSBmcm9tICcuLi9jb25maWcvc2VjdXJpdHknO1xuaW1wb3J0IHsgU2VjcmV0c01hcCB9IGZyb20gJy4uL2luZGV4L2ludGVyZmFjZXMvZW52JztcbmltcG9ydCB7IFZhdWx0U2VydmljZUludGVyZmFjZSB9IGZyb20gJy4uL2luZGV4L2ludGVyZmFjZXMvc2VydmljZXMnO1xuaW1wb3J0IHsgQ29uZmlnU2VjcmV0c0ludGVyZmFjZSB9IGZyb20gJy4uL2luZGV4L2ludGVyZmFjZXMvc2VydmljZUNvbXBvbmVudHMnO1xuaW1wb3J0IHsgSGFuZGxlRXJyb3JTdGF0aWNQYXJhbWV0ZXJzIH0gZnJvbSAnLi4vaW5kZXgvcGFyYW1ldGVycyc7XG5pbXBvcnQgeyB3aXRoUmV0cnkgfSBmcm9tICcuLi91dGlscy9oZWxwZXJzJztcbmltcG9ydCB7XG5cdEFwcExvZ2dlclNlcnZpY2VJbnRlcmZhY2UsXG5cdEVudkNvbmZpZ1NlcnZpY2VJbnRlcmZhY2UsXG5cdEVycm9ySGFuZGxlclNlcnZpY2VJbnRlcmZhY2UsXG5cdEVycm9yTG9nZ2VyU2VydmljZUludGVyZmFjZVxufSBmcm9tICcuLi9pbmRleC9pbnRlcmZhY2VzL3NlcnZpY2VzJztcbmltcG9ydCB7IFNlcnZpY2VGYWN0b3J5IH0gZnJvbSAnLi4vaW5kZXgvZmFjdG9yeSc7XG5cbmNvbnN0IGFsZ29yaXRobSA9ICdhZXMtMjU2LWN0cic7XG5jb25zdCBpdkxlbmd0aCA9IDE2O1xuY29uc3QgUExBQ0VIT0xERVIgPSAnW1JFREFDVEVEXSc7XG5cbmV4cG9ydCBjbGFzcyBWYXVsdFNlcnZpY2UgaW1wbGVtZW50cyBWYXVsdFNlcnZpY2VJbnRlcmZhY2Uge1xuXHRwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogVmF1bHRTZXJ2aWNlIHwgbnVsbCA9IG51bGw7XG5cdHByaXZhdGUgZW52Q29uZmlnOiBFbnZDb25maWdTZXJ2aWNlSW50ZXJmYWNlO1xuXHRwcml2YXRlIGxvZ2dlcjogQXBwTG9nZ2VyU2VydmljZUludGVyZmFjZTtcblx0cHJpdmF0ZSBlcnJvckxvZ2dlcjogRXJyb3JMb2dnZXJTZXJ2aWNlSW50ZXJmYWNlO1xuXHRwcml2YXRlIGVycm9ySGFuZGxlcjogRXJyb3JIYW5kbGVyU2VydmljZUludGVyZmFjZTtcblx0cHJpdmF0ZSBzZWNyZXRzOiBNYXA8XG5cdFx0c3RyaW5nLFxuXHRcdHtcblx0XHRcdGVuY3J5cHRlZFZhbHVlOiBzdHJpbmc7XG5cdFx0XHRoYXNoOiBzdHJpbmc7XG5cdFx0XHRpc0RlY3J5cHRlZDogYm9vbGVhbjtcblx0XHRcdGxhc3RBY2Nlc3NlZDogbnVtYmVyO1xuXHRcdH1cblx0PiA9IG5ldyBNYXAoKTtcblx0cHJpdmF0ZSBlbmNyeXB0ZWRHcGdQYXNzcGhyYXNlOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblx0cHJpdmF0ZSBlbmNyeXB0aW9uS2V5OiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblx0cHJpdmF0ZSBtYXhBdHRlbXB0czogbnVtYmVyO1xuXHRwcml2YXRlIHJhdGVMaW1pdFdpbmRvdzogbnVtYmVyO1xuXHRwcml2YXRlIHNlY3JldEFjY2Vzc0F0dGVtcHRzOiBNYXA8XG5cdFx0c3RyaW5nLFxuXHRcdHsgYXR0ZW1wdHM6IG51bWJlcjsgbGFzdEF0dGVtcHQ6IG51bWJlciB9XG5cdD4gPSBuZXcgTWFwKCk7XG5cblx0cHJpdmF0ZSBjb25zdHJ1Y3Rvcihcblx0XHRlbmNyeXB0aW9uS2V5OiBzdHJpbmcsXG5cdFx0Z3BnUGFzc3BocmFzZTogc3RyaW5nLFxuXHRcdGxvZ2dlcjogQXBwTG9nZ2VyU2VydmljZUludGVyZmFjZSxcblx0XHRlcnJvckxvZ2dlcjogRXJyb3JMb2dnZXJTZXJ2aWNlSW50ZXJmYWNlLFxuXHRcdGVycm9ySGFuZGxlcjogRXJyb3JIYW5kbGVyU2VydmljZUludGVyZmFjZSxcblx0XHRlbnZDb25maWc6IEVudkNvbmZpZ1NlcnZpY2VJbnRlcmZhY2Vcblx0KSB7XG5cdFx0dGhpcy5sb2dnZXIgPSBsb2dnZXI7XG5cdFx0dGhpcy5lcnJvckxvZ2dlciA9IGVycm9yTG9nZ2VyO1xuXHRcdHRoaXMuZXJyb3JIYW5kbGVyID0gZXJyb3JIYW5kbGVyO1xuXHRcdHRoaXMuZW52Q29uZmlnID0gZW52Q29uZmlnO1xuXHRcdHRoaXMubWF4QXR0ZW1wdHMgPSBOdW1iZXIoXG5cdFx0XHR0aGlzLmVudkNvbmZpZy5nZXRFbnZWYXJpYWJsZSgnc2VjcmV0c1JhdGVMaW1pdE1heEF0dGVtcHRzJylcblx0XHQpO1xuXHRcdHRoaXMucmF0ZUxpbWl0V2luZG93ID0gTnVtYmVyKFxuXHRcdFx0dGhpcy5lbnZDb25maWcuZ2V0RW52VmFyaWFibGUoJ3NlY3JldHNSYXRlTGltaXRXaW5kb3cnKVxuXHRcdCk7XG5cdFx0dGhpcy5pbml0aWFsaXplRW5jcnlwdGlvbktleShlbmNyeXB0aW9uS2V5KTtcblx0XHR0aGlzLmxvYWRBbmRTZWN1cmVTZWNyZXRzKGdwZ1Bhc3NwaHJhc2UpO1xuXHRcdHRoaXMuZW5jcnlwdEdQR1Bhc3NwaHJhc2VJbk1lbW9yeShncGdQYXNzcGhyYXNlKTtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0SW5zdGFuY2UoKTogUHJvbWlzZTxWYXVsdFNlcnZpY2U+IHtcblx0XHRpZiAoIVZhdWx0U2VydmljZS5pbnN0YW5jZSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHQnU2VjcmV0c1N0b3JlIG5vdCBpbml0aWFsaXplZC4gRW5zdXJlIGl0IGlzIGluaXRpYWxpemVkIGFmdGVyIGxvZ2luLidcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFZhdWx0U2VydmljZS5pbnN0YW5jZTtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgYXN5bmMgaW5pdGlhbGl6ZShcblx0XHRlbmNyeXB0aW9uS2V5OiBzdHJpbmcsXG5cdFx0Z3BnUGFzc3BocmFzZTogc3RyaW5nXG5cdCk6IFByb21pc2U8VmF1bHRTZXJ2aWNlPiB7XG5cdFx0dHJ5IHtcblx0XHRcdGlmICghVmF1bHRTZXJ2aWNlLmluc3RhbmNlKSB7XG5cdFx0XHRcdGNvbnN0IGxvZ2dlciA9IGF3YWl0IFNlcnZpY2VGYWN0b3J5LmdldExvZ2dlclNlcnZpY2UoKTtcblx0XHRcdFx0Y29uc3QgZXJyb3JMb2dnZXIgPVxuXHRcdFx0XHRcdGF3YWl0IFNlcnZpY2VGYWN0b3J5LmdldEVycm9yTG9nZ2VyU2VydmljZSgpO1xuXHRcdFx0XHRjb25zdCBlcnJvckhhbmRsZXIgPVxuXHRcdFx0XHRcdGF3YWl0IFNlcnZpY2VGYWN0b3J5LmdldEVycm9ySGFuZGxlclNlcnZpY2UoKTtcblx0XHRcdFx0Y29uc3QgZW52Q29uZmlnID0gYXdhaXQgU2VydmljZUZhY3RvcnkuZ2V0RW52Q29uZmlnU2VydmljZSgpO1xuXG5cdFx0XHRcdFZhdWx0U2VydmljZS5pbnN0YW5jZSA9IG5ldyBWYXVsdFNlcnZpY2UoXG5cdFx0XHRcdFx0ZW5jcnlwdGlvbktleSxcblx0XHRcdFx0XHRncGdQYXNzcGhyYXNlLFxuXHRcdFx0XHRcdGxvZ2dlcixcblx0XHRcdFx0XHRlcnJvckxvZ2dlcixcblx0XHRcdFx0XHRlcnJvckhhbmRsZXIsXG5cdFx0XHRcdFx0ZW52Q29uZmlnXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gVmF1bHRTZXJ2aWNlLmluc3RhbmNlO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRjb25zdCBpbml0aWFsaXphdGlvbkVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRgRmFpbGVkIHRvIGluaXRpYWxpemUgVmF1bHRTZXJ2aWNlOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKX1gXG5cdFx0XHQpO1xuXHRcdFx0Ly8gTG9nIHRoZSBlcnJvciBoZXJlXG5cdFx0XHR0aHJvdyBpbml0aWFsaXphdGlvbkVycm9yO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgYXN5bmMgbG9hZEFuZFNlY3VyZVNlY3JldHMoZ3BnUGFzc3BocmFzZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0dHJ5IHtcblx0XHRcdGF3YWl0IHdpdGhSZXRyeShcblx0XHRcdFx0YXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IHNlY3JldHNGaWxlUGF0aCA9XG5cdFx0XHRcdFx0XHR0aGlzLmVudkNvbmZpZy5nZXRFbnZWYXJpYWJsZSgnc2VjcmV0c0ZpbGVQYXRoMScpO1xuXHRcdFx0XHRcdGNvbnN0IGRlY3J5cHRlZFNlY3JldHMgPSBleGVjU3luYyhcblx0XHRcdFx0XHRcdGBzb3BzIC1kIC0tb3V0cHV0LXR5cGUganNvbiAtLXBhc3NwaHJhc2UgJHtncGdQYXNzcGhyYXNlfSAke3NlY3JldHNGaWxlUGF0aH1gXG5cdFx0XHRcdFx0KS50b1N0cmluZygpO1xuXHRcdFx0XHRcdGNvbnN0IHNlY3JldHMgPSBKU09OLnBhcnNlKGRlY3J5cHRlZFNlY3JldHMpO1xuXG5cdFx0XHRcdFx0Zm9yIChjb25zdCBrZXkgaW4gc2VjcmV0cykge1xuXHRcdFx0XHRcdFx0Y29uc3QgeyBlbmNyeXB0ZWRWYWx1ZSB9ID0gYXdhaXQgdGhpcy5lbmNyeXB0U2VjcmV0KFxuXHRcdFx0XHRcdFx0XHRzZWNyZXRzW2tleV1cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHR0aGlzLnNlY3JldHMuc2V0KGtleSwge1xuXHRcdFx0XHRcdFx0XHRlbmNyeXB0ZWRWYWx1ZSxcblx0XHRcdFx0XHRcdFx0aGFzaDogYXdhaXQgYXJnb24yLmhhc2goc2VjcmV0c1trZXldLCBoYXNoQ29uZmlnKSxcblx0XHRcdFx0XHRcdFx0aXNEZWNyeXB0ZWQ6IGZhbHNlLFxuXHRcdFx0XHRcdFx0XHRsYXN0QWNjZXNzZWQ6IERhdGUubm93KClcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0dGhpcy5jbGVhck1lbW9yeShzZWNyZXRzW2tleV0pO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRoaXMubG9nZ2VyLmluZm8oXG5cdFx0XHRcdFx0XHQnU2VjcmV0cyBsb2FkZWQsIGVuY3J5cHRlZCwgYW5kIHNlY3VyZWQgc3VjY2Vzc2Z1bGx5Lidcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHQ1LFxuXHRcdFx0XHQxMDAwLFxuXHRcdFx0XHR0cnVlXG5cdFx0XHQpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHR0aGlzLmhhbmRsZUxvYWRTZWNyZXRzRXJyb3IoZXJyb3IpO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgaW5pdGlhbGl6ZUVuY3J5cHRpb25LZXkoZW5jcnlwdGlvbktleTogc3RyaW5nKTogdm9pZCB7XG5cdFx0aWYgKCFlbmNyeXB0aW9uS2V5KSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0VuY3J5cHRpb24ga2V5IG5vdCBwcm92aWRlZCBvciBpbnZhbGlkJyk7XG5cdFx0fVxuXHRcdHRoaXMuZW5jcnlwdGlvbktleSA9IGVuY3J5cHRpb25LZXk7XG5cdFx0dGhpcy5sb2dnZXIuaW5mbygnRW5jcnlwdGlvbiBrZXkgaW5pdGlhbGl6ZWQuJyk7XG5cdH1cblxuXHRwcml2YXRlIGFzeW5jIGxvYWRTZWNyZXRzKFxuXHRcdGRlcGVuZGVuY2llczogQ29uZmlnU2VjcmV0c0ludGVyZmFjZVxuXHQpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRjb25zdCB7IGV4ZWNTeW5jLCBnZXREaXJlY3RvcnlQYXRoLCBncGdQYXNzcGhyYXNlIH0gPSBkZXBlbmRlbmNpZXM7XG5cdFx0Y29uc3Qgc2VjcmV0c1BhdGggPSBwYXRoLmpvaW4oXG5cdFx0XHRnZXREaXJlY3RvcnlQYXRoKCksXG5cdFx0XHR0aGlzLmVudkNvbmZpZy5nZXRFbnZWYXJpYWJsZSgnc2VjcmV0c0ZpbGVQYXRoMScpXG5cdFx0KTtcblxuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCBkZWNyeXB0ZWRTZWNyZXRzID0gZXhlY1N5bmMoXG5cdFx0XHRcdGBzb3BzIC1kIC0tb3V0cHV0LXR5cGUganNvbiAtLXBhc3NwaHJhc2UgJHtncGdQYXNzcGhyYXNlfSAke3NlY3JldHNQYXRofWBcblx0XHRcdCkudG9TdHJpbmcoKTtcblx0XHRcdGNvbnN0IHNlY3JldHMgPSBKU09OLnBhcnNlKGRlY3J5cHRlZFNlY3JldHMpO1xuXG5cdFx0XHRmb3IgKGNvbnN0IGtleSBpbiBzZWNyZXRzKSB7XG5cdFx0XHRcdGNvbnN0IHsgZW5jcnlwdGVkVmFsdWUgfSA9IGF3YWl0IHRoaXMuZW5jcnlwdFNlY3JldChcblx0XHRcdFx0XHRzZWNyZXRzW2tleV1cblx0XHRcdFx0KTtcblx0XHRcdFx0dGhpcy5zZWNyZXRzLnNldChrZXksIHtcblx0XHRcdFx0XHRlbmNyeXB0ZWRWYWx1ZSxcblx0XHRcdFx0XHRoYXNoOiBhd2FpdCBhcmdvbjIuaGFzaChzZWNyZXRzW2tleV0sIGhhc2hDb25maWcpLFxuXHRcdFx0XHRcdGlzRGVjcnlwdGVkOiBmYWxzZSxcblx0XHRcdFx0XHRsYXN0QWNjZXNzZWQ6IERhdGUubm93KClcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0dGhpcy5jbGVhck1lbW9yeShzZWNyZXRzW2tleV0pO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmxvZ2dlci5kZWJ1Zyhcblx0XHRcdFx0J1NlY3JldHMgbG9hZGVkIGFuZCBjbGVhcmVkIGZyb20gbWVtb3J5IHN1Y2Nlc3NmdWxseSdcblx0XHRcdCk7XG5cblx0XHRcdHRoaXMuY2xlYXJNZW1vcnkoZ3BnUGFzc3BocmFzZSk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdHRoaXMuaGFuZGxlTG9hZFNlY3JldHNFcnJvcihlcnJvcik7XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIGFzeW5jIHN0b3JlU2VjcmV0KGtleTogc3RyaW5nLCBzZWNyZXQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGNvbnN0IHsgZW5jcnlwdGVkVmFsdWUsIGhhc2ggfSA9IGF3YWl0IHRoaXMuZW5jcnlwdFNlY3JldChzZWNyZXQpO1xuXG5cdFx0dGhpcy5zZWNyZXRzLnNldChrZXksIHtcblx0XHRcdGVuY3J5cHRlZFZhbHVlLFxuXHRcdFx0aGFzaCxcblx0XHRcdGlzRGVjcnlwdGVkOiBmYWxzZSxcblx0XHRcdGxhc3RBY2Nlc3NlZDogRGF0ZS5ub3coKVxuXHRcdH0pO1xuXHRcdHRoaXMubG9nZ2VyLmluZm8oYFNlY3JldCAke2tleX0gc3RvcmVkIHN1Y2Nlc3NmdWxseS5gKTtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyByZXRyaWV2ZVNlY3JldChcblx0XHRrZXk6IGtleW9mIFNlY3JldHNNYXAsXG5cdFx0dXNhZ2VDYWxsYmFjazogKHNlY3JldDogc3RyaW5nKSA9PiB2b2lkXG5cdCk6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xuXHRcdHJldHVybiB3aXRoUmV0cnkoXG5cdFx0XHRhc3luYyAoKSA9PiB7XG5cdFx0XHRcdGlmICh0aGlzLmlzUmF0ZUxpbWl0ZWQoa2V5KSkge1xuXHRcdFx0XHRcdHRoaXMubG9nZ2VyLndhcm4oYFJhdGUgbGltaXQgZXhjZWVkZWQgZm9yIHNlY3JldDogJHtrZXl9YCk7XG5cdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBzZWNyZXREYXRhID0gdGhpcy5zZWNyZXRzLmdldChrZXkpO1xuXHRcdFx0XHRpZiAoIXNlY3JldERhdGEpIHtcblx0XHRcdFx0XHR0aGlzLmxvZ2dlci5lcnJvcihgU2VjcmV0ICR7a2V5fSBub3QgZm91bmQuYCk7XG5cdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBkZWNyeXB0ZWRTZWNyZXQgPSB0aGlzLmRlY3J5cHRTZWNyZXQoXG5cdFx0XHRcdFx0c2VjcmV0RGF0YS5lbmNyeXB0ZWRWYWx1ZVxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0dXNhZ2VDYWxsYmFjayhkZWNyeXB0ZWRTZWNyZXQpO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdHRoaXMuY2xlYXJNZW1vcnkoZGVjcnlwdGVkU2VjcmV0KTtcblx0XHRcdFx0XHR0aGlzLmxvZ2dlci5kZWJ1Zyhcblx0XHRcdFx0XHRcdGBEZWNyeXB0ZWQgc2VjcmV0ICR7a2V5fSB3aXBlZCBmcm9tIG1lbW9yeS5gXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBkZWNyeXB0ZWRTZWNyZXQ7XG5cdFx0XHR9LFxuXHRcdFx0NSxcblx0XHRcdDEwMDBcblx0XHQpO1xuXHR9XG5cblx0cHVibGljIGFzeW5jIHJldHJpZXZlU2VjcmV0cyhcblx0XHRzZWNyZXRLZXlzOiAoa2V5b2YgU2VjcmV0c01hcClbXSxcblx0XHR1c2FnZUNhbGxiYWNrOiAoc2VjcmV0czogUGFydGlhbDxTZWNyZXRzTWFwPikgPT4gdm9pZFxuXHQpOiBQcm9taXNlPFBhcnRpYWw8U2VjcmV0c01hcD4gfCBudWxsPiB7XG5cdFx0Y29uc3QgcmVzdWx0OiBQYXJ0aWFsPFNlY3JldHNNYXA+ID0ge307XG5cblx0XHRhd2FpdCB3aXRoUmV0cnkoXG5cdFx0XHRhc3luYyAoKSA9PiB7XG5cdFx0XHRcdGZvciAoY29uc3Qga2V5IG9mIHNlY3JldEtleXMpIHtcblx0XHRcdFx0XHRpZiAodGhpcy5pc1JhdGVMaW1pdGVkKGtleSkpIHtcblx0XHRcdFx0XHRcdHRoaXMubG9nZ2VyLndhcm4oXG5cdFx0XHRcdFx0XHRcdGBSYXRlIGxpbWl0IGV4Y2VlZGVkIGZvciBzZWNyZXQ6ICR7a2V5fWBcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb25zdCBzZWNyZXREYXRhID0gdGhpcy5zZWNyZXRzLmdldChrZXkpO1xuXG5cdFx0XHRcdFx0aWYgKCFzZWNyZXREYXRhKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmxvZ2dlci5lcnJvcihgU2VjcmV0ICR7a2V5fSBub3QgZm91bmQuYCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnN0IGRlY3J5cHRlZFNlY3JldCA9IHRoaXMuZGVjcnlwdFNlY3JldChcblx0XHRcdFx0XHRcdFx0c2VjcmV0RGF0YS5lbmNyeXB0ZWRWYWx1ZVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0aWYgKGtleSA9PT0gJ1lVQklDT19DTElFTlRfSUQnKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdFtrZXldID0gTnVtYmVyKFxuXHRcdFx0XHRcdFx0XHRcdGRlY3J5cHRlZFNlY3JldFxuXHRcdFx0XHRcdFx0XHQpIGFzIFNlY3JldHNNYXBbdHlwZW9mIGtleV07XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRba2V5XSA9XG5cdFx0XHRcdFx0XHRcdFx0ZGVjcnlwdGVkU2VjcmV0IGFzIFNlY3JldHNNYXBbdHlwZW9mIGtleV07XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuY2xlYXJNZW1vcnkoZGVjcnlwdGVkU2VjcmV0KTtcblx0XHRcdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMubG9nZ2VyLmRlYnVnKFxuXHRcdFx0XHRcdFx0XHRcdGBEZWNyeXB0ZWQgc2VjcmV0ICR7a2V5fSB3aXBlZCBmcm9tIG1lbW9yeS5gXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dXNhZ2VDYWxsYmFjayhyZXN1bHQpO1xuXHRcdFx0fSxcblx0XHRcdDMsXG5cdFx0XHQxMDAwXG5cdFx0KTtcblxuXHRcdHJldHVybiBPYmplY3Qua2V5cyhyZXN1bHQpLmxlbmd0aCA+IDAgPyByZXN1bHQgOiBudWxsO1xuXHR9XG5cblx0cHJpdmF0ZSBjbGVhck1lbW9yeShzZWNyZXQ6IHN0cmluZyB8IEJ1ZmZlcik6IHZvaWQge1xuXHRcdGlmICh0eXBlb2Ygc2VjcmV0ID09PSAnc3RyaW5nJykge1xuXHRcdFx0Y29uc3QgYnVmZmVyID0gQnVmZmVyLmZyb20oc2VjcmV0LCAndXRmLTgnKTtcblx0XHRcdGJ1ZmZlci5maWxsKDApO1xuXHRcdH0gZWxzZSBpZiAoQnVmZmVyLmlzQnVmZmVyKHNlY3JldCkpIHtcblx0XHRcdHNlY3JldC5maWxsKDApO1xuXHRcdH1cblxuXHRcdHNlY3JldCA9IG51bGwgYXMgdW5rbm93biBhcyBzdHJpbmcgfCBCdWZmZXI7XG5cdFx0dGhpcy5sb2dnZXIuZGVidWcoJ1NlbnNpdGl2ZSBkYXRhIGNsZWFyZWQgZnJvbSBtZW1vcnkuJyk7XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgcmVkYWN0U2VjcmV0cyhcblx0XHRsb2dEYXRhOiBzdHJpbmcgfCBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB8IHVua25vd25bXVxuXHQpOiBQcm9taXNlPHN0cmluZyB8IFJlY29yZDxzdHJpbmcsIHVua25vd24+IHwgdW5rbm93bltdPiB7XG5cdFx0Y29uc3Qgc2VjcmV0SGFzaGVzID0gdGhpcy5nZXRTZWNyZXRzSGFzaGVzKCk7XG5cblx0XHRpZiAodHlwZW9mIGxvZ0RhdGEgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5yZWRhY3RJblN0cmluZyhsb2dEYXRhLCBzZWNyZXRIYXNoZXMpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnRyYXZlcnNlQW5kUmVkYWN0KGxvZ0RhdGEsIHNlY3JldEhhc2hlcyk7XG5cdH1cblxuXHRwcml2YXRlIGFzeW5jIGVuY3J5cHRTZWNyZXQoXG5cdFx0c2VjcmV0OiBzdHJpbmdcblx0KTogUHJvbWlzZTx7IGVuY3J5cHRlZFZhbHVlOiBzdHJpbmc7IGhhc2g6IHN0cmluZyB9PiB7XG5cdFx0Y29uc3QgaXYgPSByYW5kb21CeXRlcyhpdkxlbmd0aCk7XG5cdFx0Y29uc3QgY2lwaGVyID0gY3JlYXRlQ2lwaGVyaXYoXG5cdFx0XHRhbGdvcml0aG0sXG5cdFx0XHR0aGlzLmdldEVuY3J5cHRpb25LZXlIYXNoKCksXG5cdFx0XHRpdlxuXHRcdCk7XG5cdFx0Y29uc3QgZW5jcnlwdGVkID0gQnVmZmVyLmNvbmNhdChbXG5cdFx0XHRjaXBoZXIudXBkYXRlKHNlY3JldCwgJ3V0Zi04JyksXG5cdFx0XHRjaXBoZXIuZmluYWwoKVxuXHRcdF0pO1xuXG5cdFx0Y29uc3QgZW5jcnlwdGVkVmFsdWUgPSBgJHtpdi50b1N0cmluZygnaGV4Jyl9OiR7ZW5jcnlwdGVkLnRvU3RyaW5nKCdoZXgnKX1gO1xuXHRcdGNvbnN0IGhhc2ggPSBhd2FpdCBhcmdvbjIuaGFzaChzZWNyZXQsIGhhc2hDb25maWcpO1xuXG5cdFx0cmV0dXJuIHsgZW5jcnlwdGVkVmFsdWUsIGhhc2ggfTtcblx0fVxuXG5cdHByaXZhdGUgZGVjcnlwdFNlY3JldChlbmNyeXB0ZWRTZWNyZXQ6IHN0cmluZyk6IHN0cmluZyB7XG5cdFx0Y29uc3QgW2l2SGV4LCBlbmNyeXB0ZWRIZXhdID0gZW5jcnlwdGVkU2VjcmV0LnNwbGl0KCc6Jyk7XG5cdFx0Y29uc3QgaXYgPSBCdWZmZXIuZnJvbShpdkhleCwgJ2hleCcpO1xuXHRcdGNvbnN0IGVuY3J5cHRlZFRleHQgPSBCdWZmZXIuZnJvbShlbmNyeXB0ZWRIZXgsICdoZXgnKTtcblx0XHRjb25zdCBkZWNpcGhlciA9IGNyZWF0ZURlY2lwaGVyaXYoXG5cdFx0XHRhbGdvcml0aG0sXG5cdFx0XHR0aGlzLmdldEVuY3J5cHRpb25LZXlIYXNoKCksXG5cdFx0XHRpdlxuXHRcdCk7XG5cdFx0Y29uc3QgZGVjcnlwdGVkID0gQnVmZmVyLmNvbmNhdChbXG5cdFx0XHRkZWNpcGhlci51cGRhdGUoZW5jcnlwdGVkVGV4dCksXG5cdFx0XHRkZWNpcGhlci5maW5hbCgpXG5cdFx0XSk7XG5cblx0XHRyZXR1cm4gZGVjcnlwdGVkLnRvU3RyaW5nKCk7XG5cdH1cblxuXHRwcml2YXRlIGFzeW5jIHRyYXZlcnNlQW5kUmVkYWN0KFxuXHRcdGRhdGE6IFJlY29yZDxzdHJpbmcsIHVua25vd24+IHwgdW5rbm93bltdLFxuXHRcdHNlY3JldHNIYXNoZXM6IHN0cmluZ1tdXG5cdCk6IFByb21pc2U8UmVjb3JkPHN0cmluZywgdW5rbm93bj4gfCB1bmtub3duW10+IHtcblx0XHRpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuXHRcdFx0cmV0dXJuIFByb21pc2UuYWxsKFxuXHRcdFx0XHRkYXRhLm1hcChhc3luYyBpdGVtID0+XG5cdFx0XHRcdFx0dHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnXG5cdFx0XHRcdFx0XHQ/IHRoaXMudHJhdmVyc2VBbmRSZWRhY3QoXG5cdFx0XHRcdFx0XHRcdFx0aXRlbSBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcblx0XHRcdFx0XHRcdFx0XHRzZWNyZXRzSGFzaGVzXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdDogaXRlbVxuXHRcdFx0XHQpXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICYmIGRhdGEgIT09IG51bGwpIHtcblx0XHRcdGNvbnN0IHJlc3VsdDogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gPSB7fTtcblx0XHRcdGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGEpKSB7XG5cdFx0XHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0cmVzdWx0W2tleV0gPSBhd2FpdCB0aGlzLnRyYXZlcnNlQW5kUmVkYWN0KFxuXHRcdFx0XHRcdFx0dmFsdWUgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG5cdFx0XHRcdFx0XHRzZWNyZXRzSGFzaGVzXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdFx0Zm9yIChjb25zdCBoYXNoIG9mIHNlY3JldHNIYXNoZXMpIHtcblx0XHRcdFx0XHRcdGNvbnN0IGlzTWF0Y2ggPSBhd2FpdCBhcmdvbjIudmVyaWZ5KGhhc2gsIHZhbHVlKTtcblx0XHRcdFx0XHRcdGlmIChpc01hdGNoKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdFtrZXldID0gUExBQ0VIT0xERVI7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXN1bHRba2V5XSA9IHZhbHVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJlc3VsdFtrZXldID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHRcdHJldHVybiBkYXRhO1xuXHR9XG5cblx0cHJpdmF0ZSBhc3luYyByZWRhY3RJblN0cmluZyhcblx0XHRsb2dEYXRhOiBzdHJpbmcsXG5cdFx0c2VjcmV0SGFzaGVzOiBzdHJpbmdbXVxuXHQpOiBQcm9taXNlPHN0cmluZz4ge1xuXHRcdGZvciAoY29uc3QgaGFzaCBvZiBzZWNyZXRIYXNoZXMpIHtcblx0XHRcdGNvbnN0IGlzTWF0Y2ggPSBhd2FpdCBhcmdvbjIudmVyaWZ5KGhhc2gsIGxvZ0RhdGEpO1xuXHRcdFx0aWYgKGlzTWF0Y2gpIHtcblx0XHRcdFx0cmV0dXJuIGxvZ0RhdGEucmVwbGFjZShuZXcgUmVnRXhwKGxvZ0RhdGEsICdnJyksIFBMQUNFSE9MREVSKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbG9nRGF0YTtcblx0fVxuXG5cdHByaXZhdGUgZ2V0U2VjcmV0c0hhc2hlcygpOiBzdHJpbmdbXSB7XG5cdFx0cmV0dXJuIFsuLi50aGlzLnNlY3JldHMudmFsdWVzKCldLm1hcChzZWNyZXREYXRhID0+IHNlY3JldERhdGEuaGFzaCk7XG5cdH1cblxuXHRwcml2YXRlIGlzUmF0ZUxpbWl0ZWQoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcblx0XHRjb25zdCBjdXJyZW50VGltZSA9IERhdGUubm93KCk7XG5cdFx0bGV0IHJhdGVEYXRhID0gdGhpcy5zZWNyZXRBY2Nlc3NBdHRlbXB0cy5nZXQoa2V5KTtcblxuXHRcdGlmICghcmF0ZURhdGEpIHtcblx0XHRcdHJhdGVEYXRhID0geyBhdHRlbXB0czogMCwgbGFzdEF0dGVtcHQ6IGN1cnJlbnRUaW1lIH07XG5cdFx0XHR0aGlzLnNlY3JldEFjY2Vzc0F0dGVtcHRzLnNldChrZXksIHJhdGVEYXRhKTtcblx0XHR9XG5cblx0XHRjb25zdCB0aW1lRWxhcHNlZCA9IGN1cnJlbnRUaW1lIC0gcmF0ZURhdGEubGFzdEF0dGVtcHQ7XG5cblx0XHRpZiAodGltZUVsYXBzZWQgPiB0aGlzLnJhdGVMaW1pdFdpbmRvdykge1xuXHRcdFx0cmF0ZURhdGEuYXR0ZW1wdHMgPSAxO1xuXHRcdFx0cmF0ZURhdGEubGFzdEF0dGVtcHQgPSBjdXJyZW50VGltZTtcblx0XHRcdHRoaXMuc2VjcmV0QWNjZXNzQXR0ZW1wdHMuc2V0KGtleSwgcmF0ZURhdGEpO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmIChyYXRlRGF0YS5hdHRlbXB0cyA+PSB0aGlzLm1heEF0dGVtcHRzKSB7XG5cdFx0XHR0aGlzLmxvZ2dlci53YXJuKGBSYXRlIGxpbWl0IGV4Y2VlZGVkIGZvciBrZXk6ICR7a2V5fWApO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0cmF0ZURhdGEuYXR0ZW1wdHMgKz0gMTtcblx0XHRyYXRlRGF0YS5sYXN0QXR0ZW1wdCA9IGN1cnJlbnRUaW1lO1xuXHRcdHRoaXMuc2VjcmV0QWNjZXNzQXR0ZW1wdHMuc2V0KGtleSwgcmF0ZURhdGEpO1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cHVibGljIHJlZnJlc2hTZWNyZXRzKGRlcGVuZGVuY2llczogQ29uZmlnU2VjcmV0c0ludGVyZmFjZSk6IHZvaWQge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCBncGdQYXNzcGhyYXNlID0gdGhpcy5kZWNyeXB0R1BHUGFzc3BocmFzZUluTWVtb3J5KCk7XG5cblx0XHRcdHdpdGhSZXRyeShcblx0XHRcdFx0YXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMubG9hZFNlY3JldHMoe1xuXHRcdFx0XHRcdFx0Li4uZGVwZW5kZW5jaWVzLFxuXHRcdFx0XHRcdFx0Z3BnUGFzc3BocmFzZVxuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHQudGhlbigoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdHRoaXMubG9nZ2VyLmluZm8oJ1NlY3JldHMgcmVmcmVzaGVkIHN1Y2Nlc3NmdWxseScpO1xuXHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcdC5jYXRjaChlcnJvciA9PiB7XG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XHRgRmFpbGVkIHRvIHJlZnJlc2ggc2VjcmV0czogJHtlcnJvci5tZXNzYWdlfWBcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0dGhpcy5jbGVhck1lbW9yeShncGdQYXNzcGhyYXNlKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0NSxcblx0XHRcdFx0MTAwMCxcblx0XHRcdFx0dHJ1ZVxuXHRcdFx0KTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0dGhpcy5oYW5kbGVSZWZyZXNoU2VjcmV0c0Vycm9yKGVycm9yKTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGdldEVuY3J5cHRpb25LZXlIYXNoKCk6IEJ1ZmZlciB7XG5cdFx0aWYgKCF0aGlzLmVuY3J5cHRpb25LZXkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignRW5jcnlwdGlvbiBrZXkgaXMgbm90IGluaXRpYWxpemVkJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZSh0aGlzLmVuY3J5cHRpb25LZXkhKS5kaWdlc3QoKTtcblx0fVxuXG5cdHByaXZhdGUgZW5jcnlwdEdQR1Bhc3NwaHJhc2VJbk1lbW9yeShncGdQYXNzcGhyYXNlOiBzdHJpbmcpOiBzdHJpbmcge1xuXHRcdGNvbnN0IGl2ID0gcmFuZG9tQnl0ZXMoaXZMZW5ndGgpO1xuXHRcdGNvbnN0IGNpcGhlciA9IGNyZWF0ZUNpcGhlcml2KFxuXHRcdFx0YWxnb3JpdGhtLFxuXHRcdFx0dGhpcy5nZXRFbmNyeXB0aW9uS2V5SGFzaCgpLFxuXHRcdFx0aXZcblx0XHQpO1xuXHRcdGNvbnN0IGVuY3J5cHRlZCA9IEJ1ZmZlci5jb25jYXQoW1xuXHRcdFx0Y2lwaGVyLnVwZGF0ZShncGdQYXNzcGhyYXNlLCAndXRmLTgnKSxcblx0XHRcdGNpcGhlci5maW5hbCgpXG5cdFx0XSk7XG5cblx0XHR0aGlzLmVuY3J5cHRlZEdwZ1Bhc3NwaHJhc2UgPSBgJHtpdi50b1N0cmluZygnaGV4Jyl9OiR7ZW5jcnlwdGVkLnRvU3RyaW5nKCdoZXgnKX1gO1xuXHRcdHJldHVybiB0aGlzLmVuY3J5cHRlZEdwZ1Bhc3NwaHJhc2U7XG5cdH1cblxuXHRwcml2YXRlIGRlY3J5cHRHUEdQYXNzcGhyYXNlSW5NZW1vcnkoKTogc3RyaW5nIHtcblx0XHRpZiAoIXRoaXMuZW5jcnlwdGVkR3BnUGFzc3BocmFzZSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdObyBHUEcgcGFzc3BocmFzZSBmb3VuZCBpbiBtZW1vcnknKTtcblx0XHR9XG5cblx0XHRjb25zdCBkZWNyeXB0ZWRQYXNzcGhyYXNlID0gdGhpcy5kZWNyeXB0U2VjcmV0KFxuXHRcdFx0dGhpcy5lbmNyeXB0ZWRHcGdQYXNzcGhyYXNlXG5cdFx0KTtcblxuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gZGVjcnlwdGVkUGFzc3BocmFzZTtcblx0XHR9IGZpbmFsbHkge1xuXHRcdFx0dGhpcy5jbGVhck1lbW9yeShkZWNyeXB0ZWRQYXNzcGhyYXNlKTtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgY2xlYXJFeHBpcmVkU2VjcmV0c0Zyb21NZW1vcnkoKTogdm9pZCB7XG5cdFx0Y29uc3QgY3VycmVudFRpbWUgPSBEYXRlLm5vdygpO1xuXHRcdHRoaXMuc2VjcmV0cy5mb3JFYWNoKChzZWNyZXREYXRhLCBrZXkpID0+IHtcblx0XHRcdGNvbnN0IGlzVGltZUVsYXBzZWQgPSBjdXJyZW50VGltZSAtIHNlY3JldERhdGEubGFzdEFjY2Vzc2VkO1xuXG5cdFx0XHRpZiAoXG5cdFx0XHRcdGlzVGltZUVsYXBzZWQgPj1cblx0XHRcdFx0XHR0aGlzLmVudkNvbmZpZy5nZXRFbnZWYXJpYWJsZSgnc2VjcmV0c0V4cGlyeVRpbWVvdXQnKSAmJlxuXHRcdFx0XHRzZWNyZXREYXRhLmlzRGVjcnlwdGVkXG5cdFx0XHQpIHtcblx0XHRcdFx0dGhpcy5jbGVhck1lbW9yeShzZWNyZXREYXRhLmVuY3J5cHRlZFZhbHVlKTtcblx0XHRcdFx0dGhpcy5zZWNyZXRzLnNldChrZXksIHtcblx0XHRcdFx0XHQuLi5zZWNyZXREYXRhLFxuXHRcdFx0XHRcdGlzRGVjcnlwdGVkOiBmYWxzZVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0dGhpcy5sb2dnZXIuZGVidWcoYEV4cGlyZWQgc2VjcmV0ICR7a2V5fSBjbGVhcmVkIGZyb20gbWVtb3J5YCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRwdWJsaWMgY2xlYXJTZWNyZXRzRnJvbU1lbW9yeShzZWNyZXRLZXlzOiBzdHJpbmcgfCBzdHJpbmdbXSk6IHZvaWQge1xuXHRcdGNvbnN0IGtleXNUb0NsZWFyID0gQXJyYXkuaXNBcnJheShzZWNyZXRLZXlzKVxuXHRcdFx0PyBzZWNyZXRLZXlzXG5cdFx0XHQ6IFtzZWNyZXRLZXlzXTtcblxuXHRcdGtleXNUb0NsZWFyLmZvckVhY2goa2V5ID0+IHtcblx0XHRcdGNvbnN0IHNlY3JldERhdGEgPSB0aGlzLnNlY3JldHMuZ2V0KGtleSk7XG5cblx0XHRcdGlmICghc2VjcmV0RGF0YSkge1xuXHRcdFx0XHR0aGlzLmxvZ2dlci5lcnJvcihgU2VjcmV0ICR7a2V5fSBub3QgZm91bmQuYCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFzZWNyZXREYXRhLmlzRGVjcnlwdGVkKSB7XG5cdFx0XHRcdHRoaXMubG9nZ2VyLmRlYnVnKFxuXHRcdFx0XHRcdGBTZWNyZXQgJHtrZXl9IGlzIGFscmVhZHkgY2xlYXJlZCBmcm9tIG1lbW9yeS5gXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuc2VjcmV0cy5zZXQoa2V5LCB7XG5cdFx0XHRcdC4uLnNlY3JldERhdGEsXG5cdFx0XHRcdGlzRGVjcnlwdGVkOiBmYWxzZVxuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMubG9nZ2VyLmRlYnVnKGBTZWNyZXQgJHtrZXl9IGhhcyBiZWVuIGNsZWFyZWQgZnJvbSBtZW1vcnkuYCk7XG5cdFx0fSk7XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgYmF0Y2hDbGVhclNlY3JldHMoKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0dHJ5IHtcblx0XHRcdHRoaXMubG9nZ2VyLmluZm8oJ1N0YXJ0aW5nIGJhdGNoIGNsZWFyaW5nIG9mIGRlY3J5cHRlZCBzZWNyZXRzLi4uJyk7XG5cdFx0XHRjb25zdCBjdXJyZW50VGltZSA9IERhdGUubm93KCk7XG5cblx0XHRcdGZvciAoY29uc3QgW2tleSwgc2VjcmV0RGF0YV0gb2YgdGhpcy5zZWNyZXRzLmVudHJpZXMoKSkge1xuXHRcdFx0XHRpZiAoc2VjcmV0RGF0YS5pc0RlY3J5cHRlZCkge1xuXHRcdFx0XHRcdHRoaXMuY2xlYXJNZW1vcnkoc2VjcmV0RGF0YS5lbmNyeXB0ZWRWYWx1ZSk7XG5cdFx0XHRcdFx0dGhpcy5zZWNyZXRzLnNldChrZXksIHtcblx0XHRcdFx0XHRcdC4uLnNlY3JldERhdGEsXG5cdFx0XHRcdFx0XHRpc0RlY3J5cHRlZDogZmFsc2UsXG5cdFx0XHRcdFx0XHRsYXN0QWNjZXNzZWQ6IGN1cnJlbnRUaW1lXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0dGhpcy5sb2dnZXIuaW5mbyhcblx0XHRcdFx0XHRcdGBTZWNyZXQgJHtrZXl9IGNsZWFyZWQgZnJvbSBtZW1vcnkgc3VjY2Vzc2Z1bGx5LmBcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMubG9nZ2VyLmRlYnVnKGBTZWNyZXQgJHtrZXl9IGlzIGFscmVhZHkgZW5jcnlwdGVkLmApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMubG9nZ2VyLmluZm8oXG5cdFx0XHRcdCdCYXRjaCBjbGVhcmluZyBvZiBkZWNyeXB0ZWQgc2VjcmV0cyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5Lidcblx0XHRcdCk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGNvbnN0IGNsZWFyRXJyb3IgPVxuXHRcdFx0XHRuZXcgdGhpcy5lcnJvckhhbmRsZXIuRXJyb3JDbGFzc2VzLlV0aWxpdHlFcnJvclJlY292ZXJhYmxlKFxuXHRcdFx0XHRcdGBGYWlsZWQgdG8gYmF0Y2ggY2xlYXIgZGVjcnlwdGVkIHNlY3JldHM6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpfWAsXG5cdFx0XHRcdFx0eyBvcmlnaW5hbEVycm9yOiBlcnJvciB9XG5cdFx0XHRcdCk7XG5cdFx0XHR0aGlzLmxvZ2dlci5lcnJvcihjbGVhckVycm9yLm1lc3NhZ2UpO1xuXHRcdFx0dGhpcy5lcnJvckhhbmRsZXIuaGFuZGxlRXJyb3IoeyBlcnJvcjogY2xlYXJFcnJvciB9KTtcblx0XHRcdHRocm93IGNsZWFyRXJyb3I7XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIGFzeW5jIHNodXRkb3duKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdHRyeSB7XG5cdFx0XHR0aGlzLmxvZ2dlci5pbmZvKCdTaHV0dGluZyBkb3duIFZhdWx0U2VydmljZS4uLicpO1xuXG5cdFx0XHRhd2FpdCB0aGlzLmJhdGNoQ2xlYXJTZWNyZXRzKCk7XG5cblx0XHRcdGlmICh0aGlzLmVuY3J5cHRlZEdwZ1Bhc3NwaHJhc2UpIHtcblx0XHRcdFx0dGhpcy5jbGVhck1lbW9yeSh0aGlzLmVuY3J5cHRlZEdwZ1Bhc3NwaHJhc2UpO1xuXHRcdFx0XHR0aGlzLmVuY3J5cHRlZEdwZ1Bhc3NwaHJhc2UgPSBudWxsO1xuXHRcdFx0XHR0aGlzLmxvZ2dlci5pbmZvKCdHUEcgcGFzc3BocmFzZSBjbGVhcmVkIGZyb20gbWVtb3J5LicpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy5lbmNyeXB0aW9uS2V5KSB7XG5cdFx0XHRcdHRoaXMuY2xlYXJNZW1vcnkodGhpcy5lbmNyeXB0aW9uS2V5KTtcblx0XHRcdFx0dGhpcy5lbmNyeXB0aW9uS2V5ID0gbnVsbDtcblx0XHRcdFx0dGhpcy5sb2dnZXIuaW5mbygnRW5jcnlwdGlvbiBrZXkgY2xlYXJlZCBmcm9tIG1lbW9yeS4nKTtcblx0XHRcdH1cblxuXHRcdFx0VmF1bHRTZXJ2aWNlLmluc3RhbmNlID0gbnVsbDtcblx0XHRcdHRoaXMubG9nZ2VyLmluZm8oJ1ZhdWx0U2VydmljZSBpbnN0YW5jZSBudWxsaWZpZWQuJyk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdHRoaXMuZXJyb3JMb2dnZXIubG9nRXJyb3IoXG5cdFx0XHRcdGBFcnJvciBkdXJpbmcgVmF1bHRTZXJ2aWNlIHNodXRkb3duOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKX1gXG5cdFx0XHQpO1xuXHRcdFx0Y29uc3Qgc2h1dGRvd25FcnJvciA9XG5cdFx0XHRcdG5ldyB0aGlzLmVycm9ySGFuZGxlci5FcnJvckNsYXNzZXMuVXRpbGl0eUVycm9yUmVjb3ZlcmFibGUoXG5cdFx0XHRcdFx0YFZhdWx0U2VydmljZSBzaHV0ZG93biBmYWlsZWQ6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpfWAsXG5cdFx0XHRcdFx0eyBvcmlnaW5hbEVycm9yOiBlcnJvciB9XG5cdFx0XHRcdCk7XG5cdFx0XHR0aGlzLmVycm9ySGFuZGxlci5oYW5kbGVFcnJvcih7IGVycm9yOiBzaHV0ZG93bkVycm9yIH0pO1xuXHRcdFx0dGhyb3cgc2h1dGRvd25FcnJvcjtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGhhbmRsZUxvYWRTZWNyZXRzRXJyb3IoZXJyb3I6IHVua25vd24pOiB2b2lkIHtcblx0XHRjb25zdCBzZWNyZXRzTG9hZEVycm9yID1cblx0XHRcdG5ldyB0aGlzLmVycm9ySGFuZGxlci5FcnJvckNsYXNzZXMuQ29uZmlndXJhdGlvbkVycm9yKFxuXHRcdFx0XHRgRmFpbGVkIHRvIGxvYWQgc2VjcmV0czogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcil9YCxcblx0XHRcdFx0eyBvcmlnaW5hbEVycm9yOiBlcnJvciB9XG5cdFx0XHQpO1xuXHRcdHRoaXMuZXJyb3JMb2dnZXIubG9nRXJyb3IoXG5cdFx0XHRgeyAke3NlY3JldHNMb2FkRXJyb3IubWVzc2FnZX1cXG4ke3NlY3JldHNMb2FkRXJyb3IubWVzc2FnZX0gfWBcblx0XHQpO1xuXHRcdHRoaXMuZXJyb3JIYW5kbGVyLmhhbmRsZUVycm9yKHtcblx0XHRcdC4uLkhhbmRsZUVycm9yU3RhdGljUGFyYW1ldGVycyxcblx0XHRcdGVycm9yOiBzZWNyZXRzTG9hZEVycm9yXG5cdFx0fSk7XG5cdFx0dGhyb3cgc2VjcmV0c0xvYWRFcnJvcjtcblx0fVxuXG5cdHByaXZhdGUgaGFuZGxlUmVmcmVzaFNlY3JldHNFcnJvcihlcnJvcjogdW5rbm93bik6IHZvaWQge1xuXHRcdGNvbnN0IHNlY3JldHNSZWZyZXNoRXJyb3IgPVxuXHRcdFx0bmV3IHRoaXMuZXJyb3JIYW5kbGVyLkVycm9yQ2xhc3Nlcy5Db25maWd1cmF0aW9uRXJyb3IoXG5cdFx0XHRcdGBGYWlsZWQgdG8gcmVmcmVzaCBzZWNyZXRzOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKX1gLFxuXHRcdFx0XHR7IG9yaWdpbmFsRXJyb3I6IGVycm9yIH1cblx0XHRcdCk7XG5cdFx0dGhpcy5lcnJvckxvZ2dlci5sb2dFcnJvcihzZWNyZXRzUmVmcmVzaEVycm9yLm1lc3NhZ2UpO1xuXHRcdHRoaXMuZXJyb3JIYW5kbGVyLmhhbmRsZUVycm9yKHtcblx0XHRcdGVycm9yOiBzZWNyZXRzUmVmcmVzaEVycm9yXG5cdFx0fSk7XG5cdFx0dGhyb3cgc2VjcmV0c1JlZnJlc2hFcnJvcjtcblx0fVxufVxuIl19
