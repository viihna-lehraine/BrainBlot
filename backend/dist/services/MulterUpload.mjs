import { readFile } from 'fs/promises';
import EventEmitter from 'events';
import { EnvConfigServiceFactory } from '../index/factory/subfactories/EnvConfigServiceFactory.mjs';
export class MulterUploadService extends EventEmitter {
	static instance = null;
	envConfig;
	_deps;
	fileSizeLimit;
	storageDir;
	uploadDir;
	allowedMimeTypes;
	allowedExtensions;
	constructor(
		envConfig,
		deps,
		allowedMimeTypes = [],
		allowedExtensions = []
	) {
		super();
		this.envConfig = envConfig;
		this._deps = deps;
		this.setMaxListeners(5);
		this.fileSizeLimit = this.envConfig.getEnvVariable(
			'multerFileSizeLimit'
		);
		this.storageDir = this.envConfig.getEnvVariable('multerStorageDir');
		this.uploadDir = this.envConfig.getEnvVariable('multerUploadDir');
		this.allowedMimeTypes =
			allowedMimeTypes.length > 0
				? allowedMimeTypes
				: this.getDefaultMimeTypes();
		this.allowedExtensions =
			allowedExtensions.length > 0
				? allowedExtensions
				: this.getDefaultExtensions();
		deps.validateDependencies(
			[
				{ name: 'multer', instance: deps.multer },
				{
					name: 'fileTypeFromBuffer',
					instance: deps.fileTypeFromBuffer
				},
				{ name: 'fs', instance: deps.fs },
				{ name: 'path', instance: deps.path }
			],
			deps.logger
		);
		this._deps.logger.info('Multer Upload Service initialized');
	}
	static async getInstance(
		deps,
		allowedMimeTypes = [],
		allowedExtensions = []
	) {
		if (!MulterUploadService.instance) {
			const envConfig =
				await EnvConfigServiceFactory.getEnvConfigService();
			MulterUploadService.instance = new MulterUploadService(
				envConfig,
				deps,
				allowedMimeTypes,
				allowedExtensions
			);
		}
		return MulterUploadService.instance;
	}
	setFileSizeLimit(limit) {
		if (limit <= 0) {
			throw new Error('File size limit must be greater than zero');
		}
		this.fileSizeLimit = limit;
		this._deps.logger.info(`File size limit set to ${limit} bytes`);
	}
	setAllowedMimeTypes(mimeTypes) {
		if (!mimeTypes.every(mimeType => typeof mimeType === 'string')) {
			throw new Error('Invalid MIME types provided');
		}
		this.allowedMimeTypes = mimeTypes;
		this._deps.logger.info(`Allowed MIME types updated\n${mimeTypes}`);
	}
	setAllowedExtensions(extensions) {
		if (!extensions.every(ext => typeof ext === 'string')) {
			throw new Error('Invalid file extensions provided');
		}
		this.allowedExtensions = extensions;
		this._deps.logger.info(`Allowed extensions updated\n${extensions}`);
	}
	createMulterUpload(validationCallback) {
		try {
			const storage = this._deps.multer.diskStorage({
				destination: (req, file, cb) => {
					this._deps.logger.info(
						`Storing file in: ${this.storageDir}`
					);
					cb(null, this.storageDir);
				},
				filename: (req, file, cb) => {
					const uniqueSuffix = `${Date.now()}-${Math.round(Math.random() * 1e9)}`;
					this._deps.logger.info(
						`File ${file.originalname} will be saved as: ${uniqueSuffix}-${file.originalname}`
					);
					cb(null, `${uniqueSuffix}-${file.originalname}`);
				}
			});
			const fileFilter = async (req, file, cb) => {
				const ext = this._deps.path
					.extname(file.originalname)
					.toLowerCase();
				const isValid = await this.isValidFile(file, ext);
				const isValidationPassed = validationCallback
					? validationCallback(file)
					: true;
				if (isValid && isValidationPassed) {
					this.emit('uploadAccepted', file);
					this._deps.logger.info(
						`File accepted: ${file.originalname}`
					);
					cb(null, true);
				} else {
					this.emit('uploadRejected', file);
					this._deps.logger.warn(
						`File rejected: ${file.originalname}`
					);
					cb(null, false);
				}
			};
			return this._deps.multer({
				storage,
				fileFilter,
				limits: { fileSize: this.fileSizeLimit }
			});
		} catch (depError) {
			this.handleError(
				'Unable to create Multer Upload instance',
				depError || Error || 'Unknown error'
			);
			return undefined;
		}
	}
	onUploadSuccess(callback) {
		this.once('uploadAccepted', callback);
	}
	async isValidFile(file, ext) {
		const isMimeValid = this.allowedMimeTypes.includes(file.mimetype);
		const isExtensionValid = this.allowedExtensions.includes(ext);
		const buffer = await readFile(file.path);
		const fileType = await this._deps.fileTypeFromBuffer(buffer);
		const isContentValid = fileType
			? this.allowedMimeTypes.includes(fileType.mime)
			: false;
		const result = isMimeValid && isExtensionValid && isContentValid;
		this._deps.logger.info(
			`File validation result for ${file.originalname}: ${result}`
		);
		return isMimeValid && isExtensionValid && isContentValid;
	}
	getDefaultMimeTypes() {
		return [
			'image/jpeg',
			'image/png',
			'image/gif',
			'video/mp4',
			'application/pdf',
			'text/plain'
		];
	}
	getDefaultExtensions() {
		return [
			'.bmp',
			'.gif',
			'.jpeg',
			'.jpg',
			'.mp4',
			'.pdf',
			'.png',
			'.txt',
			'.wav'
		];
	}
	shutdown() {
		try {
			this.removeAllListeners();
			MulterUploadService.instance = null;
			this._deps.logger.info(
				'Multer Upload Service shutdown successfully.'
			);
		} catch (error) {
			this._deps.errorLogger.logError(
				`Error shutting down Multer Upload service: ${error instanceof Error ? error.message : error}`
			);
		}
	}
	handleError(message, error) {
		const errorMessage =
			error instanceof Error ? error.message : String(error);
		const dependencyError =
			new this._deps.errorHandler.ErrorClasses.DependencyErrorFatal(
				`${message}: ${errorMessage}`,
				{ exposeToClient: false }
			);
		this._deps.errorLogger.logError(dependencyError.message);
		this._deps.errorHandler.handleError({ error: dependencyError });
		throw dependencyError;
	}
}
//# sourceMappingURL=data:application/json;base64,
