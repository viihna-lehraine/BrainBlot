import { readFile } from 'fs/promises';
import EventEmitter from 'events';
import { ServiceFactory } from '../index/factory.mjs';
export class MulterUploadService extends EventEmitter {
	static instance = null;
	envConfig;
	_deps;
	fileSizeLimit;
	storageDir;
	uploadDir;
	allowedMimeTypes;
	allowedExtensions;
	constructor(
		envConfig,
		deps,
		allowedMimeTypes = [],
		allowedExtensions = []
	) {
		super();
		this.envConfig = envConfig;
		this._deps = deps;
		this.setMaxListeners(5);
		this.fileSizeLimit = this.envConfig.getEnvVariable(
			'multerFileSizeLimit'
		);
		this.storageDir = this.envConfig.getEnvVariable('multerStorageDir');
		this.uploadDir = this.envConfig.getEnvVariable('multerUploadDir');
		this.allowedMimeTypes =
			allowedMimeTypes.length > 0
				? allowedMimeTypes
				: this.getDefaultMimeTypes();
		this.allowedExtensions =
			allowedExtensions.length > 0
				? allowedExtensions
				: this.getDefaultExtensions();
		deps.validateDependencies(
			[
				{ name: 'multer', instance: deps.multer },
				{
					name: 'fileTypeFromBuffer',
					instance: deps.fileTypeFromBuffer
				},
				{ name: 'fs', instance: deps.fs },
				{ name: 'path', instance: deps.path }
			],
			deps.logger
		);
		this._deps.logger.info('Multer Upload Service initialized');
	}
	static async getInstance(
		deps,
		allowedMimeTypes = [],
		allowedExtensions = []
	) {
		if (!MulterUploadService.instance) {
			const envConfig = await ServiceFactory.getEnvConfigService();
			MulterUploadService.instance = new MulterUploadService(
				envConfig,
				deps,
				allowedMimeTypes,
				allowedExtensions
			);
		}
		return MulterUploadService.instance;
	}
	setFileSizeLimit(limit) {
		if (limit <= 0) {
			throw new Error('File size limit must be greater than zero');
		}
		this.fileSizeLimit = limit;
		this._deps.logger.info(`File size limit set to ${limit} bytes`);
	}
	setAllowedMimeTypes(mimeTypes) {
		if (!mimeTypes.every(mimeType => typeof mimeType === 'string')) {
			throw new Error('Invalid MIME types provided');
		}
		this.allowedMimeTypes = mimeTypes;
		this._deps.logger.info(`Allowed MIME types updated\n${mimeTypes}`);
	}
	setAllowedExtensions(extensions) {
		if (!extensions.every(ext => typeof ext === 'string')) {
			throw new Error('Invalid file extensions provided');
		}
		this.allowedExtensions = extensions;
		this._deps.logger.info(`Allowed extensions updated\n${extensions}`);
	}
	createMulterUpload(validationCallback) {
		try {
			const storage = this._deps.multer.diskStorage({
				destination: (req, file, cb) => {
					this._deps.logger.info(
						`Storing file in: ${this.storageDir}`
					);
					cb(null, this.storageDir);
				},
				filename: (req, file, cb) => {
					const uniqueSuffix = `${Date.now()}-${Math.round(Math.random() * 1e9)}`;
					this._deps.logger.info(
						`File ${file.originalname} will be saved as: ${uniqueSuffix}-${file.originalname}`
					);
					cb(null, `${uniqueSuffix}-${file.originalname}`);
				}
			});
			const fileFilter = async (req, file, cb) => {
				const ext = this._deps.path
					.extname(file.originalname)
					.toLowerCase();
				const isValid = await this.isValidFile(file, ext);
				const isValidationPassed = validationCallback
					? validationCallback(file)
					: true;
				if (isValid && isValidationPassed) {
					this.emit('uploadAccepted', file);
					this._deps.logger.info(
						`File accepted: ${file.originalname}`
					);
					cb(null, true);
				} else {
					this.emit('uploadRejected', file);
					this._deps.logger.warn(
						`File rejected: ${file.originalname}`
					);
					cb(null, false);
				}
			};
			return this._deps.multer({
				storage,
				fileFilter,
				limits: { fileSize: this.fileSizeLimit }
			});
		} catch (depError) {
			this.handleError(
				'Unable to create Multer Upload instance',
				depError || Error || 'Unknown error'
			);
			return undefined;
		}
	}
	onUploadSuccess(callback) {
		this.once('uploadAccepted', callback);
	}
	async isValidFile(file, ext) {
		const isMimeValid = this.allowedMimeTypes.includes(file.mimetype);
		const isExtensionValid = this.allowedExtensions.includes(ext);
		const buffer = await readFile(file.path);
		const fileType = await this._deps.fileTypeFromBuffer(buffer);
		const isContentValid = fileType
			? this.allowedMimeTypes.includes(fileType.mime)
			: false;
		const result = isMimeValid && isExtensionValid && isContentValid;
		this._deps.logger.info(
			`File validation result for ${file.originalname}: ${result}`
		);
		return isMimeValid && isExtensionValid && isContentValid;
	}
	getDefaultMimeTypes() {
		return [
			'image/jpeg',
			'image/png',
			'image/gif',
			'video/mp4',
			'application/pdf',
			'text/plain'
		];
	}
	getDefaultExtensions() {
		return [
			'.bmp',
			'.gif',
			'.jpeg',
			'.jpg',
			'.mp4',
			'.pdf',
			'.png',
			'.txt',
			'.wav'
		];
	}
	shutdown() {
		try {
			this.removeAllListeners();
			MulterUploadService.instance = null;
			this._deps.logger.info(
				'Multer Upload Service shutdown successfully.'
			);
		} catch (error) {
			this._deps.errorLogger.logError(
				`Error shutting down Multer Upload service: ${error instanceof Error ? error.message : error}`
			);
		}
	}
	handleError(message, error) {
		const errorMessage =
			error instanceof Error ? error.message : String(error);
		const dependencyError =
			new this._deps.errorHandler.ErrorClasses.DependencyErrorFatal(
				`${message}: ${errorMessage}`,
				{ exposeToClient: false }
			);
		this._deps.errorLogger.logError(dependencyError.message);
		this._deps.errorHandler.handleError({ error: dependencyError });
		throw dependencyError;
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTXVsdGVyVXBsb2FkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NlcnZpY2VzL011bHRlclVwbG9hZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sWUFBWSxNQUFNLFFBQVEsQ0FBQztBQU1sQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHbEQsTUFBTSxPQUFPLG1CQUNaLFNBQVEsWUFBWTtJQUdaLE1BQU0sQ0FBQyxRQUFRLEdBQStCLElBQUksQ0FBQztJQUVuRCxTQUFTLENBQTRCO0lBRTVCLEtBQUssQ0FBMEI7SUFDekMsYUFBYSxDQUFTO0lBQ3RCLFVBQVUsQ0FBUztJQUNuQixTQUFTLENBQVM7SUFDbEIsZ0JBQWdCLENBQVc7SUFDM0IsaUJBQWlCLENBQVc7SUFFbkMsWUFDQyxTQUFvQyxFQUNwQyxJQUE2QixFQUM3QixtQkFBNkIsRUFBRSxFQUMvQixvQkFBOEIsRUFBRTtRQUVoQyxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FDakQscUJBQXFCLENBQ3JCLENBQUM7UUFDRixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxnQkFBZ0I7WUFDcEIsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLENBQUM7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RSxDQUFDO1lBQzFCLG1CQUFtQixDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDcEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQiw4Q0FBOEMsQ0FDOUMsQ0FBQztRQUNILENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2hCLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FDOUIsOENBQ0MsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FDMUMsRUFBRSxDQUNGLENBQUM7UUFDSCxDQUFDO0lBQ0YsQ0FBQztJQUVPLFdBQVcsQ0FBQyxPQUFlLEVBQUUsS0FBYztRQUNsRCxNQUFNLFlBQVksR0FDakIsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hELE1BQU0sZUFBZSxHQUNwQixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FDNUQsR0FBRyxPQUFPLEtBQUssWUFBWSxFQUFFLEVBQzdCLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxDQUN6QixDQUFDO1FBRUgsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQztRQUVoRSxNQUFNLGVBQWUsQ0FBQztJQUN2QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgcmVhZEZpbGUgfSBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgeyBGaWxlRmlsdGVyQ2FsbGJhY2ssIE11bHRlciB9IGZyb20gJ211bHRlcic7XG5pbXBvcnQge1xuXHRFbnZDb25maWdTZXJ2aWNlSW50ZXJmYWNlLFxuXHRNdWx0ZXJVcGxvYWRTZXJ2aWNlSW50ZXJmYWNlXG59IGZyb20gJy4uL2luZGV4L2ludGVyZmFjZXMvc2VydmljZXMnO1xuaW1wb3J0IHsgU2VydmljZUZhY3RvcnkgfSBmcm9tICcuLi9pbmRleC9mYWN0b3J5JztcbmltcG9ydCB7IE11bHRlclVwbG9hZFNlcnZpY2VEZXBzIH0gZnJvbSAnLi4vaW5kZXgvaW50ZXJmYWNlcy9zZXJ2aWNlRGVwcyc7XG5cbmV4cG9ydCBjbGFzcyBNdWx0ZXJVcGxvYWRTZXJ2aWNlXG5cdGV4dGVuZHMgRXZlbnRFbWl0dGVyXG5cdGltcGxlbWVudHMgTXVsdGVyVXBsb2FkU2VydmljZUludGVyZmFjZVxue1xuXHRwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogTXVsdGVyVXBsb2FkU2VydmljZSB8IG51bGwgPSBudWxsO1xuXG5cdHByaXZhdGUgZW52Q29uZmlnOiBFbnZDb25maWdTZXJ2aWNlSW50ZXJmYWNlO1xuXG5cdHByaXZhdGUgcmVhZG9ubHkgX2RlcHM6IE11bHRlclVwbG9hZFNlcnZpY2VEZXBzO1xuXHRwdWJsaWMgZmlsZVNpemVMaW1pdDogbnVtYmVyO1xuXHRwdWJsaWMgc3RvcmFnZURpcjogc3RyaW5nO1xuXHRwdWJsaWMgdXBsb2FkRGlyOiBzdHJpbmc7XG5cdHB1YmxpYyBhbGxvd2VkTWltZVR5cGVzOiBzdHJpbmdbXTtcblx0cHVibGljIGFsbG93ZWRFeHRlbnNpb25zOiBzdHJpbmdbXTtcblxuXHRwcml2YXRlIGNvbnN0cnVjdG9yKFxuXHRcdGVudkNvbmZpZzogRW52Q29uZmlnU2VydmljZUludGVyZmFjZSxcblx0XHRkZXBzOiBNdWx0ZXJVcGxvYWRTZXJ2aWNlRGVwcyxcblx0XHRhbGxvd2VkTWltZVR5cGVzOiBzdHJpbmdbXSA9IFtdLFxuXHRcdGFsbG93ZWRFeHRlbnNpb25zOiBzdHJpbmdbXSA9IFtdXG5cdCkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5lbnZDb25maWcgPSBlbnZDb25maWc7XG5cdFx0dGhpcy5fZGVwcyA9IGRlcHM7XG5cdFx0dGhpcy5zZXRNYXhMaXN0ZW5lcnMoNSk7XG5cdFx0dGhpcy5maWxlU2l6ZUxpbWl0ID0gdGhpcy5lbnZDb25maWcuZ2V0RW52VmFyaWFibGUoXG5cdFx0XHQnbXVsdGVyRmlsZVNpemVMaW1pdCdcblx0XHQpO1xuXHRcdHRoaXMuc3RvcmFnZURpciA9IHRoaXMuZW52Q29uZmlnLmdldEVudlZhcmlhYmxlKCdtdWx0ZXJTdG9yYWdlRGlyJyk7XG5cdFx0dGhpcy51cGxvYWREaXIgPSB0aGlzLmVudkNvbmZpZy5nZXRFbnZWYXJpYWJsZSgnbXVsdGVyVXBsb2FkRGlyJyk7XG5cdFx0dGhpcy5hbGxvd2VkTWltZVR5cGVzID1cblx0XHRcdGFsbG93ZWRNaW1lVHlwZXMubGVuZ3RoID4gMFxuXHRcdFx0XHQ/IGFsbG93ZWRNaW1lVHlwZXNcblx0XHRcdFx0OiB0aGlzLmdldERlZmF1bHRNaW1lVHlwZXMoKTtcblx0XHR0aGlzLmFsbG93ZWRFeHRlbnNpb25zID1cblx0XHRcdGFsbG93ZWRFeHRlbnNpb25zLmxlbmd0aCA+IDBcblx0XHRcdFx0PyBhbGxvd2VkRXh0ZW5zaW9uc1xuXHRcdFx0XHQ6IHRoaXMuZ2V0RGVmYXVsdEV4dGVuc2lvbnMoKTtcblxuXHRcdGRlcHMudmFsaWRhdGVEZXBlbmRlbmNpZXMoXG5cdFx0XHRbXG5cdFx0XHRcdHsgbmFtZTogJ211bHRlcicsIGluc3RhbmNlOiBkZXBzLm11bHRlciB9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bmFtZTogJ2ZpbGVUeXBlRnJvbUJ1ZmZlcicsXG5cdFx0XHRcdFx0aW5zdGFuY2U6IGRlcHMuZmlsZVR5cGVGcm9tQnVmZmVyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHsgbmFtZTogJ2ZzJywgaW5zdGFuY2U6IGRlcHMuZnMgfSxcblx0XHRcdFx0eyBuYW1lOiAncGF0aCcsIGluc3RhbmNlOiBkZXBzLnBhdGggfVxuXHRcdFx0XSxcblx0XHRcdGRlcHMubG9nZ2VyXG5cdFx0KTtcblx0XHR0aGlzLl9kZXBzLmxvZ2dlci5pbmZvKCdNdWx0ZXIgVXBsb2FkIFNlcnZpY2UgaW5pdGlhbGl6ZWQnKTtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0SW5zdGFuY2UoXG5cdFx0ZGVwczogTXVsdGVyVXBsb2FkU2VydmljZURlcHMsXG5cdFx0YWxsb3dlZE1pbWVUeXBlczogc3RyaW5nW10gPSBbXSxcblx0XHRhbGxvd2VkRXh0ZW5zaW9uczogc3RyaW5nW10gPSBbXVxuXHQpOiBQcm9taXNlPE11bHRlclVwbG9hZFNlcnZpY2U+IHtcblx0XHRpZiAoIU11bHRlclVwbG9hZFNlcnZpY2UuaW5zdGFuY2UpIHtcblx0XHRcdGNvbnN0IGVudkNvbmZpZyA9IGF3YWl0IFNlcnZpY2VGYWN0b3J5LmdldEVudkNvbmZpZ1NlcnZpY2UoKTtcblx0XHRcdE11bHRlclVwbG9hZFNlcnZpY2UuaW5zdGFuY2UgPSBuZXcgTXVsdGVyVXBsb2FkU2VydmljZShcblx0XHRcdFx0ZW52Q29uZmlnLFxuXHRcdFx0XHRkZXBzLFxuXHRcdFx0XHRhbGxvd2VkTWltZVR5cGVzLFxuXHRcdFx0XHRhbGxvd2VkRXh0ZW5zaW9uc1xuXHRcdFx0KTtcblx0XHR9XG5cdFx0cmV0dXJuIE11bHRlclVwbG9hZFNlcnZpY2UuaW5zdGFuY2U7XG5cdH1cblxuXHRwdWJsaWMgc2V0RmlsZVNpemVMaW1pdChsaW1pdDogbnVtYmVyKTogdm9pZCB7XG5cdFx0aWYgKGxpbWl0IDw9IDApIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignRmlsZSBzaXplIGxpbWl0IG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8nKTtcblx0XHR9XG5cdFx0dGhpcy5maWxlU2l6ZUxpbWl0ID0gbGltaXQ7XG5cdFx0dGhpcy5fZGVwcy5sb2dnZXIuaW5mbyhgRmlsZSBzaXplIGxpbWl0IHNldCB0byAke2xpbWl0fSBieXRlc2ApO1xuXHR9XG5cblx0cHVibGljIHNldEFsbG93ZWRNaW1lVHlwZXMobWltZVR5cGVzOiBzdHJpbmdbXSk6IHZvaWQge1xuXHRcdGlmICghbWltZVR5cGVzLmV2ZXJ5KG1pbWVUeXBlID0+IHR5cGVvZiBtaW1lVHlwZSA9PT0gJ3N0cmluZycpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgTUlNRSB0eXBlcyBwcm92aWRlZCcpO1xuXHRcdH1cblx0XHR0aGlzLmFsbG93ZWRNaW1lVHlwZXMgPSBtaW1lVHlwZXM7XG5cdFx0dGhpcy5fZGVwcy5sb2dnZXIuaW5mbyhgQWxsb3dlZCBNSU1FIHR5cGVzIHVwZGF0ZWRcXG4ke21pbWVUeXBlc31gKTtcblx0fVxuXG5cdHB1YmxpYyBzZXRBbGxvd2VkRXh0ZW5zaW9ucyhleHRlbnNpb25zOiBzdHJpbmdbXSk6IHZvaWQge1xuXHRcdGlmICghZXh0ZW5zaW9ucy5ldmVyeShleHQgPT4gdHlwZW9mIGV4dCA9PT0gJ3N0cmluZycpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZmlsZSBleHRlbnNpb25zIHByb3ZpZGVkJyk7XG5cdFx0fVxuXHRcdHRoaXMuYWxsb3dlZEV4dGVuc2lvbnMgPSBleHRlbnNpb25zO1xuXHRcdHRoaXMuX2RlcHMubG9nZ2VyLmluZm8oYEFsbG93ZWQgZXh0ZW5zaW9ucyB1cGRhdGVkXFxuJHtleHRlbnNpb25zfWApO1xuXHR9XG5cblx0cHVibGljIGNyZWF0ZU11bHRlclVwbG9hZChcblx0XHR2YWxpZGF0aW9uQ2FsbGJhY2s/OiAoZmlsZTogRXhwcmVzcy5NdWx0ZXIuRmlsZSkgPT4gYm9vbGVhblxuXHQpOiBNdWx0ZXIgfCB1bmRlZmluZWQge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCBzdG9yYWdlID0gdGhpcy5fZGVwcy5tdWx0ZXIuZGlza1N0b3JhZ2Uoe1xuXHRcdFx0XHRkZXN0aW5hdGlvbjogKHJlcSwgZmlsZSwgY2IpID0+IHtcblx0XHRcdFx0XHR0aGlzLl9kZXBzLmxvZ2dlci5pbmZvKFxuXHRcdFx0XHRcdFx0YFN0b3JpbmcgZmlsZSBpbjogJHt0aGlzLnN0b3JhZ2VEaXJ9YFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0Y2IobnVsbCwgdGhpcy5zdG9yYWdlRGlyKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0ZmlsZW5hbWU6IChyZXEsIGZpbGUsIGNiKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgdW5pcXVlU3VmZml4ID0gYCR7RGF0ZS5ub3coKX0tJHtNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxZTkpfWA7XG5cdFx0XHRcdFx0dGhpcy5fZGVwcy5sb2dnZXIuaW5mbyhcblx0XHRcdFx0XHRcdGBGaWxlICR7ZmlsZS5vcmlnaW5hbG5hbWV9IHdpbGwgYmUgc2F2ZWQgYXM6ICR7dW5pcXVlU3VmZml4fS0ke2ZpbGUub3JpZ2luYWxuYW1lfWBcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGNiKG51bGwsIGAke3VuaXF1ZVN1ZmZpeH0tJHtmaWxlLm9yaWdpbmFsbmFtZX1gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdGNvbnN0IGZpbGVGaWx0ZXIgPSBhc3luYyAoXG5cdFx0XHRcdHJlcTogUmVxdWVzdCxcblx0XHRcdFx0ZmlsZTogRXhwcmVzcy5NdWx0ZXIuRmlsZSxcblx0XHRcdFx0Y2I6IEZpbGVGaWx0ZXJDYWxsYmFja1xuXHRcdFx0KTogUHJvbWlzZTx2b2lkPiA9PiB7XG5cdFx0XHRcdGNvbnN0IGV4dCA9IHRoaXMuX2RlcHMucGF0aFxuXHRcdFx0XHRcdC5leHRuYW1lKGZpbGUub3JpZ2luYWxuYW1lKVxuXHRcdFx0XHRcdC50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRjb25zdCBpc1ZhbGlkID0gYXdhaXQgdGhpcy5pc1ZhbGlkRmlsZShmaWxlLCBleHQpO1xuXG5cdFx0XHRcdGNvbnN0IGlzVmFsaWRhdGlvblBhc3NlZCA9IHZhbGlkYXRpb25DYWxsYmFja1xuXHRcdFx0XHRcdD8gdmFsaWRhdGlvbkNhbGxiYWNrKGZpbGUpXG5cdFx0XHRcdFx0OiB0cnVlO1xuXG5cdFx0XHRcdGlmIChpc1ZhbGlkICYmIGlzVmFsaWRhdGlvblBhc3NlZCkge1xuXHRcdFx0XHRcdHRoaXMuZW1pdCgndXBsb2FkQWNjZXB0ZWQnLCBmaWxlKTtcblx0XHRcdFx0XHR0aGlzLl9kZXBzLmxvZ2dlci5pbmZvKFxuXHRcdFx0XHRcdFx0YEZpbGUgYWNjZXB0ZWQ6ICR7ZmlsZS5vcmlnaW5hbG5hbWV9YFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0Y2IobnVsbCwgdHJ1ZSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5lbWl0KCd1cGxvYWRSZWplY3RlZCcsIGZpbGUpO1xuXHRcdFx0XHRcdHRoaXMuX2RlcHMubG9nZ2VyLndhcm4oXG5cdFx0XHRcdFx0XHRgRmlsZSByZWplY3RlZDogJHtmaWxlLm9yaWdpbmFsbmFtZX1gXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRjYihudWxsLCBmYWxzZSk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdHJldHVybiB0aGlzLl9kZXBzLm11bHRlcih7XG5cdFx0XHRcdHN0b3JhZ2UsXG5cdFx0XHRcdGZpbGVGaWx0ZXIsXG5cdFx0XHRcdGxpbWl0czogeyBmaWxlU2l6ZTogdGhpcy5maWxlU2l6ZUxpbWl0IH1cblx0XHRcdH0pO1xuXHRcdH0gY2F0Y2ggKGRlcEVycm9yKSB7XG5cdFx0XHR0aGlzLmhhbmRsZUVycm9yKFxuXHRcdFx0XHQnVW5hYmxlIHRvIGNyZWF0ZSBNdWx0ZXIgVXBsb2FkIGluc3RhbmNlJyxcblx0XHRcdFx0ZGVwRXJyb3IgfHwgRXJyb3IgfHwgJ1Vua25vd24gZXJyb3InXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgb25VcGxvYWRTdWNjZXNzKFxuXHRcdGNhbGxiYWNrOiAoZmlsZTogRXhwcmVzcy5NdWx0ZXIuRmlsZSkgPT4gdm9pZFxuXHQpOiB2b2lkIHtcblx0XHR0aGlzLm9uY2UoJ3VwbG9hZEFjY2VwdGVkJywgY2FsbGJhY2spO1xuXHR9XG5cblx0cHJpdmF0ZSBhc3luYyBpc1ZhbGlkRmlsZShcblx0XHRmaWxlOiBFeHByZXNzLk11bHRlci5GaWxlLFxuXHRcdGV4dDogc3RyaW5nXG5cdCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuXHRcdGNvbnN0IGlzTWltZVZhbGlkID0gdGhpcy5hbGxvd2VkTWltZVR5cGVzLmluY2x1ZGVzKGZpbGUubWltZXR5cGUpO1xuXHRcdGNvbnN0IGlzRXh0ZW5zaW9uVmFsaWQgPSB0aGlzLmFsbG93ZWRFeHRlbnNpb25zLmluY2x1ZGVzKGV4dCk7XG5cblx0XHRjb25zdCBidWZmZXIgPSBhd2FpdCByZWFkRmlsZShmaWxlLnBhdGgpO1xuXHRcdGNvbnN0IGZpbGVUeXBlID0gYXdhaXQgdGhpcy5fZGVwcy5maWxlVHlwZUZyb21CdWZmZXIoYnVmZmVyKTtcblxuXHRcdGNvbnN0IGlzQ29udGVudFZhbGlkID0gZmlsZVR5cGVcblx0XHRcdD8gdGhpcy5hbGxvd2VkTWltZVR5cGVzLmluY2x1ZGVzKGZpbGVUeXBlLm1pbWUpXG5cdFx0XHQ6IGZhbHNlO1xuXG5cdFx0Y29uc3QgcmVzdWx0ID0gaXNNaW1lVmFsaWQgJiYgaXNFeHRlbnNpb25WYWxpZCAmJiBpc0NvbnRlbnRWYWxpZDtcblxuXHRcdHRoaXMuX2RlcHMubG9nZ2VyLmluZm8oXG5cdFx0XHRgRmlsZSB2YWxpZGF0aW9uIHJlc3VsdCBmb3IgJHtmaWxlLm9yaWdpbmFsbmFtZX06ICR7cmVzdWx0fWBcblx0XHQpO1xuXHRcdHJldHVybiBpc01pbWVWYWxpZCAmJiBpc0V4dGVuc2lvblZhbGlkICYmIGlzQ29udGVudFZhbGlkO1xuXHR9XG5cblx0cHJpdmF0ZSBnZXREZWZhdWx0TWltZVR5cGVzKCk6IHN0cmluZ1tdIHtcblx0XHRyZXR1cm4gW1xuXHRcdFx0J2ltYWdlL2pwZWcnLFxuXHRcdFx0J2ltYWdlL3BuZycsXG5cdFx0XHQnaW1hZ2UvZ2lmJyxcblx0XHRcdCd2aWRlby9tcDQnLFxuXHRcdFx0J2FwcGxpY2F0aW9uL3BkZicsXG5cdFx0XHQndGV4dC9wbGFpbidcblx0XHRdO1xuXHR9XG5cblx0cHJpdmF0ZSBnZXREZWZhdWx0RXh0ZW5zaW9ucygpOiBzdHJpbmdbXSB7XG5cdFx0cmV0dXJuIFtcblx0XHRcdCcuYm1wJyxcblx0XHRcdCcuZ2lmJyxcblx0XHRcdCcuanBlZycsXG5cdFx0XHQnLmpwZycsXG5cdFx0XHQnLm1wNCcsXG5cdFx0XHQnLnBkZicsXG5cdFx0XHQnLnBuZycsXG5cdFx0XHQnLnR4dCcsXG5cdFx0XHQnLndhdidcblx0XHRdO1xuXHR9XG5cblx0cHVibGljIHNodXRkb3duKCk6IHZvaWQge1xuXHRcdHRyeSB7XG5cdFx0XHR0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuXHRcdFx0TXVsdGVyVXBsb2FkU2VydmljZS5pbnN0YW5jZSA9IG51bGw7XG5cdFx0XHR0aGlzLl9kZXBzLmxvZ2dlci5pbmZvKFxuXHRcdFx0XHQnTXVsdGVyIFVwbG9hZCBTZXJ2aWNlIHNodXRkb3duIHN1Y2Nlc3NmdWxseS4nXG5cdFx0XHQpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHR0aGlzLl9kZXBzLmVycm9yTG9nZ2VyLmxvZ0Vycm9yKFxuXHRcdFx0XHRgRXJyb3Igc2h1dHRpbmcgZG93biBNdWx0ZXIgVXBsb2FkIHNlcnZpY2U6ICR7XG5cdFx0XHRcdFx0ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBlcnJvclxuXHRcdFx0XHR9YFxuXHRcdFx0KTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGhhbmRsZUVycm9yKG1lc3NhZ2U6IHN0cmluZywgZXJyb3I6IHVua25vd24pOiB2b2lkIHtcblx0XHRjb25zdCBlcnJvck1lc3NhZ2UgPVxuXHRcdFx0ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpO1xuXHRcdGNvbnN0IGRlcGVuZGVuY3lFcnJvciA9XG5cdFx0XHRuZXcgdGhpcy5fZGVwcy5lcnJvckhhbmRsZXIuRXJyb3JDbGFzc2VzLkRlcGVuZGVuY3lFcnJvckZhdGFsKFxuXHRcdFx0XHRgJHttZXNzYWdlfTogJHtlcnJvck1lc3NhZ2V9YCxcblx0XHRcdFx0eyBleHBvc2VUb0NsaWVudDogZmFsc2UgfVxuXHRcdFx0KTtcblxuXHRcdHRoaXMuX2RlcHMuZXJyb3JMb2dnZXIubG9nRXJyb3IoZGVwZW5kZW5jeUVycm9yLm1lc3NhZ2UpO1xuXHRcdHRoaXMuX2RlcHMuZXJyb3JIYW5kbGVyLmhhbmRsZUVycm9yKHsgZXJyb3I6IGRlcGVuZGVuY3lFcnJvciB9KTtcblxuXHRcdHRocm93IGRlcGVuZGVuY3lFcnJvcjtcblx0fVxufVxuIl19
