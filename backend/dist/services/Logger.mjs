import { Op } from 'sequelize';
import { Logger as WinstonLogger } from 'winston';
export class AppLoggerService extends WinstonLogger {
	static instance = null;
	_deps;
	adminId = null;
	redactedLogger = null;
	errorHandler = null;
	secrets = null;
	constructor(deps, logLevel, serviceName) {
		const { format, transports, addColors } = deps.winston;
		const { colorize, combine, errors, json, printf, timestamp } = format;
		const resolvedLogLevel = logLevel || process.env.LOG_LEVEL || 'info';
		const resolvedServiceName =
			serviceName || process.env.LOGGER_SERVICE_NAME || 'Log Service';
		const isProduction = process.env.NODE_ENV === 'production';
		const logDirectory = './data/logs/server/main/';
		const logFormat = printf(({ level, message, timestamp, stack }) => {
			return `${timestamp} ${level}: ${stack || message}`;
		});
		if (!deps.fs.existsSync(logDirectory)) {
			deps.fs.mkdirSync(logDirectory, { recursive: true });
		}
		const loggerTransports = [
			new transports.Console({
				format: combine(colorize(), logFormat),
				level: isProduction ? 'info' : resolvedLogLevel
			}),
			new deps.DailyRotateFile({
				filename: 'server-%DATE%.log',
				dirname: logDirectory,
				datePattern: 'YYYY-MM-DD',
				zippedArchive: true,
				maxSize: '20m',
				maxFiles: '30d',
				format: combine(
					timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
					logFormat
				),
				level: resolvedLogLevel
			})
		];
		super({
			levels: AppLoggerService.getCustomLogLevels().levels,
			level: resolvedLogLevel,
			format: combine(errors({ stack: true }), json()),
			defaultMeta: { service: resolvedServiceName },
			transports: loggerTransports
		});
		this.addLogstashTransport(loggerTransports);
		this._deps = deps;
		addColors(AppLoggerService.getCustomLogLevels().colors);
	}
	static async getInstance(deps, logLevel, serviceName) {
		if (!AppLoggerService.instance) {
			AppLoggerService.instance = new AppLoggerService(
				deps,
				logLevel,
				serviceName
			);
			await AppLoggerService.instance.initializeAsyncParts();
		}
		return AppLoggerService.instance;
	}
	async initializeAsyncParts() {
		try {
			await this.addLogstashTransport(this.transports); // Await Logstash setup if it's async
		} catch (error) {
			this.logError(
				`Failed to initialize async parts of logger ${error instanceof Error ? error.message : error}`
			);
			throw error;
		}
	}
	static getCustomLogLevels() {
		return {
			levels: {
				critical: 0,
				error: 1,
				warn: 2,
				info: 3,
				debug: 4,
				notice: 5
			},
			colors: {
				critical: 'red',
				error: 'orange',
				warn: 'yellow',
				info: 'green',
				debug: 'blue',
				notice: 'magenta'
			}
		};
	}
	setErrorHandler(errorHandler) {
		this.errorHandler = errorHandler;
	}
	setUpSecrets(secrets) {
		this.secrets = secrets;
		this.setupRedactedLogger();
		console.info('Vault Service injected and redacted logger setup.');
	}
	setupRedactedLogger() {
		if (this.redactedLogger || !this.secrets)
			this.redactedLogger = this.createRedactedLogger();
		this.logInfo('Redacted logger initialized.');
	}
	createRedactedLogger() {
		const redactedLogger = Object.create(this);
		const levels = ['debug', 'info', 'notice', 'warn', 'error', 'crit'];
		levels.forEach(level => {
			const originalMethod = this[level].bind(this);
			redactedLogger[level] = (message, meta) => {
				const redactedMeta =
					typeof meta === 'object'
						? this.secrets?.redactSecrets(meta)
						: meta;
				originalMethod(message, redactedMeta);
			};
		});
		return Object.assign(redactedLogger, {
			getRedactedLogger: this.getRedactedLogger.bind(this)
		});
	}
	getLogger() {
		return this.redactedLogger ? this.redactedLogger : this;
	}
	getRedactedLogger() {
		return this.createRedactedLogger();
	}
	async addLogstashTransport(transportsArray) {
		try {
			const logStashTransport = await this.createLogstashTransport();
			if (logStashTransport) {
				transportsArray.push(logStashTransport);
			}
		} catch (error) {
			this.logError(
				`Error adding Logstash transport ${error instanceof Error ? error.message : error}`
			);
		}
	}
	async createLogstashTransport() {
		try {
			return new this._deps.LogStashTransport({
				port: parseInt(process.env.LOGSTASH_PORT, 10),
				node_name: process.env.LOGSTASH_NODE,
				host: process.env.LOGSTASH_HOST
			});
		} catch (error) {
			const logstashError =
				new this._deps.ErrorClasses.ServiceUnavailableError(
					60,
					'Application Logger Service',
					{
						message:
							'Logger Service Error: Failed to create Logstash transport'
					}
				);
			this.logError(
				`Logstash error: ${error instanceof Error ? error.message : error}`
			);
			if (this.errorHandler) {
				this.errorHandler.handleError({
					...this._deps.HandleErrorStaticParameters,
					error: logstashError,
					details: { reason: 'Failed to create Logstash transport' }
				});
			}
			return null;
		}
	}
	logDebug(message, details) {
		this.debug(message, details);
	}
	logInfo(message, details) {
		this.info(message, details);
	}
	logNotice(message, details) {
		this.notice(message, details);
	}
	logWarn(message, details) {
		this.warn(message, details);
	}
	logError(message, details) {
		this.error(message, details);
	}
	logCritical(message, details) {
		this.crit(message, details);
	}
	async cleanUpOldLogs(sequelize, retentionPeriodDays = 30) {
		const retentionDate = new Date();
		retentionDate.setDate(retentionDate.getDate() - retentionPeriodDays);
		try {
			const ErrorLog = sequelize.model('ErrorLog');
			await ErrorLog.destroy({
				where: {
					timestamp: {
						[Op.lt]: retentionDate
					}
				}
			});
			this.info(
				`Old logs older than ${retentionPeriodDays} days have been deleted.`
			);
		} catch (cleanupError) {
			this.error('Failed to clean up old logs', cleanupError);
		}
	}
	setAdminId(adminId) {
		this.adminId = adminId;
	}
	getErrorDetails(
		getCallerInfo,
		action = 'unknown',
		req,
		userId,
		additionalData
	) {
		const details = {
			requestId: req?.headers['x-request-id'] || this._deps.uuidv4(),
			adminId: this.adminId || 'Unknown Admin',
			userId: userId || null,
			action: action || 'unknown',
			caller: String(getCallerInfo()),
			timestamp: Date.now(),
			requestInfo: {
				method: req?.method || null,
				url: req?.originalUrl || req?.url || null,
				ip:
					req?.ip ||
					req?.headers['x-forwarded-for'] ||
					req?.socket.remoteAddress ||
					null,
				userAgent: req?.headers['user-agent'] || null,
				referrer:
					req?.headers['referer'] || req?.headers['referrer'] || null,
				query: req?.query || null,
				params: req?.params || null,
				body: req?.body ? this.sanitizeRequestBody(req?.body) : null
			},
			...additionalData
		};
		return details;
	}
	get __deps() {
		return this._deps;
	}
	sanitizeRequestBody(body) {
		const sanitizedBody = new Map(Object.entries(body));
		const sensitiveFields = [
			'email',
			'key',
			'newPassword',
			'oldPassword',
			'passphrase',
			'password',
			'secret',
			'token',
			'username'
		];
		sensitiveFields.forEach(field => {
			if (sanitizedBody.has(field)) {
				sanitizedBody.set(field, '[REDACTED]');
			}
		});
		return Object.fromEntries(sanitizedBody);
	}
	async shutdown() {
		this.info('Shutting down logger services...');
		await new Promise((resolve, reject) => {
			this.on('finish', () => {
				this.info('All logs have been flushed.');
				resolve();
			});
			this.on('error', error => {
				this.error(
					`Error while shutting down logger: ${error.message}`
				);
				reject(error);
			});
			this.end();
		});
	}
	handleError(message, error) {
		if (this.errorHandler) {
			this.errorHandler.handleError({
				error,
				details: { message }
			});
		} else {
			this.logError(`Error Handler not set. Error: ${message}`);
		}
	}
}
export class ErrorLoggerService extends AppLoggerService {
	static instance;
	errorCounts;
	constructor(deps, logLevel, serviceName) {
		super(deps, logLevel, serviceName);
		this.errorCounts = new Map();
	}
	static async getInstance(deps, logLevel, serviceName) {
		if (!ErrorLoggerService.instance) {
			ErrorLoggerService.instance = new ErrorLoggerService(
				deps,
				logLevel,
				serviceName
			);
		}
		return Object.assign(ErrorLoggerService.instance, {
			logAppError: ErrorLoggerService.instance.logAppError.bind(
				ErrorLoggerService.instance
			),
			getErrorCount: ErrorLoggerService.instance.getErrorCount.bind(
				ErrorLoggerService.instance
			),
			getRedactedLogger:
				ErrorLoggerService.instance.getRedactedLogger.bind(
					ErrorLoggerService.instance
				),
			logDebug: ErrorLoggerService.instance.logDebug.bind(
				ErrorLoggerService.instance
			),
			logInfo: ErrorLoggerService.instance.logInfo.bind(
				ErrorLoggerService.instance
			),
			logNotice: ErrorLoggerService.instance.logNotice.bind(
				ErrorLoggerService.instance
			),
			logWarn: ErrorLoggerService.instance.logWarn.bind(
				ErrorLoggerService.instance
			),
			logError: ErrorLoggerService.instance.logError.bind(
				ErrorLoggerService.instance
			),
			logCritical: ErrorLoggerService.instance.logCritical.bind(
				ErrorLoggerService.instance
			),
			cleanUpOldLogs: ErrorLoggerService.instance.cleanUpOldLogs.bind(
				ErrorLoggerService.instance
			),
			getErrorDetails: ErrorLoggerService.instance.getErrorDetails.bind(
				ErrorLoggerService.instance
			)
		});
	}
	logAppError(error, sequelize, details = {}) {
		if (sequelize) {
			this.logToDatabase(error, sequelize).catch(databaseError => {
				this.warn(
					`Could not log error to database: ${databaseError.message || databaseError}`
				);
			});
		} else {
			this.logWarn(
				'Sequelize instance not provided for logging error to database'
			);
		}
		const errorCount = this.errorCounts.get(error.name) || 0;
		this.errorCounts.set(error.name, errorCount + 1);
		if (this.errorHandler) {
			if (error.severity === this.errorHandler.ErrorSeverity.FATAL) {
				this.logError(`FATAL: ${error.message}`, {
					...details,
					severity: error.severity
				});
			} else if (
				error.severity === this.errorHandler.ErrorSeverity.RECOVERABLE
			) {
				this.logWarn(`RECOVERABLE: ${error.message}`, { ...details });
			}
		} else {
			this.handleError('Error Handler not set', error);
		}
	}
	async logToDatabase(error, sequelize, retryCount = 3) {
		try {
			const ErrorLog = sequelize.model('ErrorLog');
			await ErrorLog.create({
				name: error.name,
				message: error.message,
				statusCode: error.statusCode,
				severity: error.severity,
				timestamp: new Date(),
				count: this.errorCounts.get(error.name) || 1
			});
			this.info('Error logged to database');
		} catch (databaseError) {
			this.error(`Failed to log error to the database: ${databaseError}`);
			if (retryCount > 0) {
				setTimeout(
					() => {
						this.logToDatabase(error, sequelize, retryCount - 1);
					},
					1000 * (4 - retryCount)
				);
			}
		}
	}
	getErrorCount(errorName) {
		return this.errorCounts.get(errorName) || 0;
	}
}
//# sourceMappingURL=data:application/json;base64,
