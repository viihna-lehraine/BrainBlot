import express from 'express';
import path from 'path';
import setupLogger from '../config/logger';
const router = express.Router();
// Setup static routes
export function setupStaticRoutes({
	staticRootPath,
	appMjsPath,
	appJsPath,
	secretsPath,
	browserConfigXmlPath,
	humansMdPath,
	robotsTxtPath,
	logLevel = 'info',
	logDirectory = './logs',
	serviceName = 'StaticRouter',
	isProduction = process.env.NODE_ENV === 'development' // *DEV-NOTE* change default value to production before deployment
}) {
	const logger = setupLogger({
		logLevel,
		logDirectory,
		serviceName,
		isProduction
	});
	// middleware to log static asset access
	router.use((req, res, next) => {
		const assetTypes = ['css', '/mjs', 'js', '/fonts', '/icons', '/images'];
		if (assetTypes.some(type => req.url.startsWith(type))) {
			logger.info(`GET request received at ${req.url}`);
		}
		next();
	});
	// serve root HTML files
	router.get('/:page', (req, res) => {
		const page = req.params.page;
		const filePath = path.join(staticRootPath, `${page}.html`);
		res.sendFile(filePath, err => {
			if (err) {
				logger.error(`Failed to send ${page}.html: ${err}`);
				res.status(404).send('Page not found');
			} else {
				logger.info(`${page}.html was accessed`);
			}
		});
	});
	// serve static directories using Optional Chaining
	const staticDirectories = {
		css: path.join(staticRootPath, 'assets/css'),
		mjs: path.join(staticRootPath, 'assets/mjs'),
		js: path.join(staticRootPath, 'assets/js'),
		fonts: path.join(staticRootPath, 'assets/fonts'),
		icons: path.join(staticRootPath, 'assets/icons'),
		images: path.join(staticRootPath, 'assets/images')
	};
	Object.entries(staticDirectories).forEach(([route, dirPath]) => {
		router.use(`/${route}`, express.static(dirPath ?? './fallback'));
	});
	// serve nested HTML files
	router.get('/*', (req, res) => {
		const filePath = path.join(staticRootPath, `${req.path}.html`);
		res.sendFile(filePath, err => {
			if (err) {
				logger.error(`Failed to send ${req.path}.html: ${err}`);
				res.status(404).send('Page not found');
			} else {
				logger.info(`${req.path}.html was accessed`);
			}
		});
	});
	// serve specific static files
	const staticFiles = [
		{ route: '/app.mjs', filePath: appMjsPath },
		{ route: '/app.js', filePath: appJsPath },
		{ route: '/secrets.json.gpg', filePath: secretsPath },
		{ route: '/browserconfig.xml', filePath: browserConfigXmlPath },
		{ route: '/humans.md', filePath: humansMdPath },
		{ route: '/robots.txt', filePath: robotsTxtPath }
	];
	staticFiles.forEach(file => {
		router.get(file.route, (req, res) => {
			logger.info(`GET request received at ${file.route}`);
			res.sendFile(file.filePath ?? './fallback', err => {
				if (err) {
					logger.error(`Failed to send ${file.route}: ${err}`);
					res.status(404).send('File not found');
				} else {
					logger.info(`${file.route} was accessed`);
				}
			});
		});
	});
	// 404 handler for unmatched routes
	router.use((req, res) => {
		logger.info(`404 - ${req.url} was not found`);
		res.status(404).sendFile(
			path.join(staticRootPath, 'not-found.html'),
			err => {
				if (err) {
					logger.error(`Failed to send not-found.html: ${err}`);
					res.status(500).send('Internal server error');
				}
			}
		);
	});
	return router;
}
// Initialize the static routes
export function initializeStaticRoutes(app, staticRootPath) {
	const router = setupStaticRoutes({
		// *DEV-NOTE* refactor to use environmentVariables
		staticRootPath,
		appMjsPath: process.env.FRONTEND_APP_MJS_PATH,
		appJsPath: process.env.FRONTEND_APP_JS_PATH,
		secretsPath: process.env.FRONTEND_SECRETS_PATH,
		browserConfigXmlPath: process.env.FRONTEND_BROWSER_CONFIG_XML_PATH,
		humansMdPath: process.env.FRONTEND_HUMANS_MD_PATH,
		robotsTxtPath: process.env.FRONTEND_ROBOTS_TXT_PATH,
		logLevel: process.env.LOG_LEVEL,
		logDirectory: process.env.LOG_DIRECTORY,
		serviceName: process.env.SERVICE_NAME,
		isProduction: process.env.NODE_ENV === 'developpment' // *DEV-NOTE* change default value to production before deployment
	});
	app.use('/', router);
}
//# sourceMappingURL=data:application/json;base64,
