import express from 'express';
import path from 'path';
import { environmentVariables } from '../config/environmentConfig.mjs';
import { processError } from '../utils/processError.mjs';
import { validateDependencies } from '../utils/validateDependencies.mjs';
const router = express.Router();
// Helper function to serve static files and handle errors
function serveStaticFile(filePath, route, res, next, logger) {
	try {
		validateDependencies(
			[
				{ name: 'filePath', instance: filePath },
				{ name: 'route', instance: route },
				{ name: 'res', instance: res },
				{ name: 'next', instance: next },
				{ name: 'logger', instance: logger }
			],
			logger || console
		);
		res.sendFile(filePath, err => {
			if (err) {
				processError(err, logger || console, undefined, console);
				return next(new Error(`File ${route} not found`));
			}
			logger.debug(`${route} was accessed`);
		});
	} catch (error) {
		processError(error, logger || console);
		next(error);
	}
}
export function setupStaticRoutes({
	logger,
	staticRootPath = environmentVariables.staticRootPath,
	secretsPath = environmentVariables.frontendSecretsPath
}) {
	try {
		validateDependencies(
			[
				{ name: 'logger', instance: logger },
				{ name: 'staticRootPath', instance: staticRootPath },
				{ name: 'secretsPath', instance: secretsPath }
			],
			logger || console
		);
		// serve files that exist outside of public/ via Express
		router.get('/secrets.json.gpg', (_req, res, next) => {
			serveStaticFile(
				secretsPath,
				'/secrets.json.gpg',
				res,
				next,
				logger
			);
		});
		// serve HTML files
		router.get('/:page', (req, res, next) => {
			const page = req.params.page;
			const filePath = path.join(staticRootPath, `${page}.html`);
			serveStaticFile(filePath, `/${page}.html`, res, next, logger);
		});
		return router;
	} catch (error) {
		processError(error, logger);
		throw error;
	}
}
export function initializeStaticRoutes(app, staticRootPath, logger) {
	try {
		validateDependencies(
			[
				{ name: 'app', instance: app },
				{ name: 'staticRootPath', instance: staticRootPath },
				{ name: 'logger', instance: logger }
			],
			logger
		);
		const router = setupStaticRoutes({
			logger,
			staticRootPath,
			secretsPath: environmentVariables.frontendSecretsPath
		});
		app.use('/', router);
	} catch (error) {
		processError(error, logger);
		throw error;
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGljUm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JvdXRlcy9zdGF0aWNSb3V0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxPQUE0QyxNQUFNLFNBQVMsQ0FBQztBQUNuRSxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFbkUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3JELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRXJFLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQVFoQywwREFBMEQ7QUFDMUQsU0FBUyxlQUFlLENBQ3ZCLFFBQWdCLEVBQ2hCLEtBQWEsRUFDYixHQUFhLEVBQ2IsSUFBa0IsRUFDbEIsTUFBYztJQUVkLElBQUksQ0FBQztRQUNKLG9CQUFvQixDQUNuQjtZQUNDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFO1lBQ3hDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFO1lBQ2xDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFO1lBQzlCLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO1lBQ2hDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO1NBQ3BDLEVBQ0QsTUFBTSxJQUFJLE9BQU8sQ0FDakIsQ0FBQztRQUVGLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQzVCLElBQUksR0FBRyxFQUFFLENBQUM7Z0JBQ1QsWUFBWSxDQUFDLEdBQUcsRUFBRSxNQUFNLElBQUksT0FBTyxFQUFFLFNBQVMs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QUFDO0lBQ2IsQ0FBQztBQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcywgeyBOZXh0RnVuY3Rpb24sIFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGVudmlyb25tZW50VmFyaWFibGVzIH0gZnJvbSAnLi4vY29uZmlnL2Vudmlyb25tZW50Q29uZmlnJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL2NvbmZpZy9sb2dnZXInO1xuaW1wb3J0IHsgcHJvY2Vzc0Vycm9yIH0gZnJvbSAnLi4vdXRpbHMvcHJvY2Vzc0Vycm9yJztcbmltcG9ydCB7IHZhbGlkYXRlRGVwZW5kZW5jaWVzIH0gZnJvbSAnLi4vdXRpbHMvdmFsaWRhdGVEZXBlbmRlbmNpZXMnO1xuXG5jb25zdCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xuXG5pbnRlcmZhY2UgU3RhdGljUm91dGVzRGVwZW5kZW5jaWVzIHtcblx0bG9nZ2VyOiBMb2dnZXI7XG5cdHN0YXRpY1Jvb3RQYXRoOiBzdHJpbmc7XG5cdHNlY3JldHNQYXRoOiBzdHJpbmc7XG59XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBzZXJ2ZSBzdGF0aWMgZmlsZXMgYW5kIGhhbmRsZSBlcnJvcnNcbmZ1bmN0aW9uIHNlcnZlU3RhdGljRmlsZShcblx0ZmlsZVBhdGg6IHN0cmluZyxcblx0cm91dGU6IHN0cmluZyxcblx0cmVzOiBSZXNwb25zZSxcblx0bmV4dDogTmV4dEZ1bmN0aW9uLFxuXHRsb2dnZXI6IExvZ2dlclxuKTogdm9pZCB7XG5cdHRyeSB7XG5cdFx0dmFsaWRhdGVEZXBlbmRlbmNpZXMoXG5cdFx0XHRbXG5cdFx0XHRcdHsgbmFtZTogJ2ZpbGVQYXRoJywgaW5zdGFuY2U6IGZpbGVQYXRoIH0sXG5cdFx0XHRcdHsgbmFtZTogJ3JvdXRlJywgaW5zdGFuY2U6IHJvdXRlIH0sXG5cdFx0XHRcdHsgbmFtZTogJ3JlcycsIGluc3RhbmNlOiByZXMgfSxcblx0XHRcdFx0eyBuYW1lOiAnbmV4dCcsIGluc3RhbmNlOiBuZXh0IH0sXG5cdFx0XHRcdHsgbmFtZTogJ2xvZ2dlcicsIGluc3RhbmNlOiBsb2dnZXIgfVxuXHRcdFx0XSxcblx0XHRcdGxvZ2dlciB8fCBjb25zb2xlXG5cdFx0KTtcblxuXHRcdHJlcy5zZW5kRmlsZShmaWxlUGF0aCwgZXJyID0+IHtcblx0XHRcdGlmIChlcnIpIHtcblx0XHRcdFx0cHJvY2Vzc0Vycm9yKGVyciwgbG9nZ2VyIHx8IGNvbnNvbGUsIHVuZGVmaW5lZCwgY29uc29sZSk7XG5cdFx0XHRcdHJldHVybiBuZXh0KG5ldyBFcnJvcihgRmlsZSAke3JvdXRlfSBub3QgZm91bmRgKSk7XG5cdFx0XHR9XG5cdFx0XHRsb2dnZXIuZGVidWcoYCR7cm91dGV9IHdhcyBhY2Nlc3NlZGApO1xuXHRcdH0pO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdHByb2Nlc3NFcnJvcihlcnJvciBhcyBFcnJvciwgbG9nZ2VyIHx8IGNvbnNvbGUpO1xuXHRcdG5leHQoZXJyb3IpO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cFN0YXRpY1JvdXRlcyh7XG5cdGxvZ2dlcixcblx0c3RhdGljUm9vdFBhdGggPSBlbnZpcm9ubWVudFZhcmlhYmxlcy5zdGF0aWNSb290UGF0aCxcblx0c2VjcmV0c1BhdGggPSBlbnZpcm9ubWVudFZhcmlhYmxlcy5mcm9udGVuZFNlY3JldHNQYXRoXG59OiBTdGF0aWNSb3V0ZXNEZXBlbmRlbmNpZXMpOiBleHByZXNzLlJvdXRlciB7XG5cdHRyeSB7XG5cdFx0dmFsaWRhdGVEZXBlbmRlbmNpZXMoXG5cdFx0XHRbXG5cdFx0XHRcdHsgbmFtZTogJ2xvZ2dlcicsIGluc3RhbmNlOiBsb2dnZXIgfSxcblx0XHRcdFx0eyBuYW1lOiAnc3RhdGljUm9vdFBhdGgnLCBpbnN0YW5jZTogc3RhdGljUm9vdFBhdGggfSxcblx0XHRcdFx0eyBuYW1lOiAnc2VjcmV0c1BhdGgnLCBpbnN0YW5jZTogc2VjcmV0c1BhdGggfVxuXHRcdFx0XSxcblx0XHRcdGxvZ2dlciB8fCBjb25zb2xlXG5cdFx0KTtcblxuXHRcdC8vIHNlcnZlIGZpbGVzIHRoYXQgZXhpc3Qgb3V0c2lkZSBvZiBwdWJsaWMvIHZpYSBFeHByZXNzXG5cdFx0cm91dGVyLmdldChcblx0XHRcdCcvc2VjcmV0cy5qc29uLmdwZycsXG5cdFx0XHQoX3JlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XG5cdFx0XHRcdHNlcnZlU3RhdGljRmlsZShcblx0XHRcdFx0XHRzZWNyZXRzUGF0aCxcblx0XHRcdFx0XHQnL3NlY3JldHMuanNvbi5ncGcnLFxuXHRcdFx0XHRcdHJlcyxcblx0XHRcdFx0XHRuZXh0LFxuXHRcdFx0XHRcdGxvZ2dlclxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHQvLyBzZXJ2ZSBIVE1MIGZpbGVzXG5cdFx0cm91dGVyLmdldChcblx0XHRcdCcvOnBhZ2UnLFxuXHRcdFx0KHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XG5cdFx0XHRcdGNvbnN0IHBhZ2UgPSByZXEucGFyYW1zLnBhZ2U7XG5cdFx0XHRcdGNvbnN0IGZpbGVQYXRoID0gcGF0aC5qb2luKHN0YXRpY1Jvb3RQYXRoLCBgJHtwYWdlfS5odG1sYCk7XG5cdFx0XHRcdHNlcnZlU3RhdGljRmlsZShmaWxlUGF0aCwgYC8ke3BhZ2V9Lmh0bWxgLCByZXMsIG5leHQsIGxvZ2dlcik7XG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdHJldHVybiByb3V0ZXI7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cHJvY2Vzc0Vycm9yKGVycm9yIGFzIEVycm9yLCBsb2dnZXIpO1xuXHRcdHRocm93IGVycm9yO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplU3RhdGljUm91dGVzKFxuXHRhcHA6IGV4cHJlc3MuQXBwbGljYXRpb24sXG5cdHN0YXRpY1Jvb3RQYXRoOiBzdHJpbmcsXG5cdGxvZ2dlcjogTG9nZ2VyXG4pOiB2b2lkIHtcblx0dHJ5IHtcblx0XHR2YWxpZGF0ZURlcGVuZGVuY2llcyhcblx0XHRcdFtcblx0XHRcdFx0eyBuYW1lOiAnYXBwJywgaW5zdGFuY2U6IGFwcCB9LFxuXHRcdFx0XHR7IG5hbWU6ICdzdGF0aWNSb290UGF0aCcsIGluc3RhbmNlOiBzdGF0aWNSb290UGF0aCB9LFxuXHRcdFx0XHR7IG5hbWU6ICdsb2dnZXInLCBpbnN0YW5jZTogbG9nZ2VyIH1cblx0XHRcdF0sXG5cdFx0XHRsb2dnZXJcblx0XHQpO1xuXG5cdFx0Y29uc3Qgcm91dGVyID0gc2V0dXBTdGF0aWNSb3V0ZXMoe1xuXHRcdFx0bG9nZ2VyLFxuXHRcdFx0c3RhdGljUm9vdFBhdGgsXG5cdFx0XHRzZWNyZXRzUGF0aDogZW52aXJvbm1lbnRWYXJpYWJsZXMuZnJvbnRlbmRTZWNyZXRzUGF0aCFcblx0XHR9KTtcblxuXHRcdGFwcC51c2UoJy8nLCByb3V0ZXIpO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdHByb2Nlc3NFcnJvcihlcnJvciBhcyBFcnJvciwgbG9nZ2VyKTtcblx0XHR0aHJvdyBlcnJvcjtcblx0fVxufVxuIl19
