import { Router } from 'express';
import { validateDependencies } from '../utils/validateDependencies';
import { processError } from '../utils/processError';
export function initializeTestRoutes({
	app,
	logger,
	featureFlags,
	environmentVariables
}) {
	const router = Router();
	try {
		validateDependencies(
			[
				{ name: 'app', instance: app },
				{ name: 'logger', instance: logger },
				{ name: 'featureFlags', instance: featureFlags },
				{ name: 'environmentVariables', instance: environmentVariables }
			],
			logger
		);
		if (!featureFlags.loadTestRoutesFlag) {
			logger.info('Test routes not loaded; feature flag is disabled.');
		}
		if (environmentVariables.nodeEnv === 'production') {
			router.use((_req, res) => {
				res.status(404).json({
					message: 'Test routes are not available in production.'
				});
			});
		} else {
			router.get('/test', (req, res, next) => {
				try {
					logger.info('Test route accessed.');
					res.send('Test route is working!');
				} catch (error) {
					processError(error, logger, req);
					next(new Error('Internal server error on test route'));
				}
			});
		}
		router.use((error, req, res) => {
			if (error instanceof Error) {
				logger.error(`Unexpected error on test route: ${error.stack}`);
				processError(error, logger, req);
			} else {
				logger.error(
					'Unexpected non-error thrown on test route',
					error
				);
				processError(
					new Error('Unexpected test route error'),
					logger,
					req
				);
			}
			res.status(500).json({
				error: 'Internal server error on test route'
			});
			processError(new Error('Unexpected test route error'), logger, req);
		});
		app.use('/test', router);
		logger.info('Test routes loaded successfully.');
		return router;
	} catch (error) {
		processError(error, logger);
		throw new Error(
			`Failed to initialize test routes: ${error instanceof Error ? error.message : String(error)}`
		);
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdFJvdXRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXMvdGVzdFJvdXRlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWdELE1BQU0sRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUcvRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNyRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFTckQsTUFBTSxVQUFVLG9CQUFvQixDQUFDLEVBQ3BDLEdBQUcsRUFDSCxNQUFNLEVBQ04sWUFBWSxFQUNaLG9CQUFvQixFQUNHO0lBQ3ZCLE1BQU0sTUFBTSxHQUFHLE1BQU0sRUFBRSxDQUFDO0lBRXhCLElBQUksQ0FBQztRQUNKLG9CQUFvQixDQUNuQjtZQUNDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFO1lBQzlCLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO1lBQ3BDLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFO1lBQ2hELEVBQUUsSUFBSSxFQUFFLHNCQUFzQixFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRTtTQUNoRSxFQUNELE1BQU0sQ0FDTixDQUFDO1FBRUYsSUFBSSxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxJQUFJLENBQUMsbURBQW1ELENBQUMsQ0FBQztRQUNsRSxDQUFDO1FBRUQsSUFBSSxvQkFBb0IsQ0FBQyxPQUFPLEtBQUssWUFBWSxFQUFFLENBQUM7WUFDbkQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQWEsRUFBRSxHQUFhLEVBQUUsRUFBRTtnQkFDM0MsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7b0JBQ3BCLE9BQU8sRUFBRSw4Q0FBOEM7aUJBQ3ZELENBQUMsQ0FBQztZQUNKLENBQUMsQ0FBQyxDQUFDO1FBQ0osQ0FBQzthQUFNLENBQUM7WUFDUCxNQUFNLENBQUMsR0FBRyxDQUNULE9BQU8sRUFDUCxDQUFDLEdBQVksRUFBRSxHQUFhLEVBQUUsSUFBa0IsRUFBRSxFQUFFO2dCQUNuRCxJQUFJLENBQUM7b0JBQ0osTUFBTSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO29CQUNwQyxHQUFHLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7Z0JBQ3BDLENBQUM7Z0JBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztvQkFDaEIsWUFBWSxDQUFDLEtBQWMsRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7b0JBQzFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hELENBQUM7WUFDRixDQUFDLENBQ0QsQ0FBQztRQUNILENBQUM7UUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBYyxFQUFFLEdBQVksRUFBRSxHQUFhLEVBQUUsRUFBRTtZQUMxRCxJQUFJLEtBQUssWUFBWSxLQUFLLEVBQUUsQ0FBQztnQkFDNUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxtQ0FBbUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7Z0JBQy9ELFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ2xDLENBQUM7aUJBQU0sQ0FBQztnQkFDUCxNQUFNLENBQUMsS0FBSyxDQUNYLDJDQUEyQyxFQUMzQyxLQUFLLENBQ0wsQ0FBQztnQkFDRixZQUFZLENBQ1gsSUFBSSxLQUFLLENBQUMsNkJBQTZCLENBQUMsRUFDeEMsTUFBTSxFQUNOLEdBQUcsQ0FDSCxDQUFDO1lBQ0gsQ0FBQztZQUNELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNwQixLQUFLLEVBQUUscUNBQXFDO2FBQzVDLENBQUMsQ0FBQztZQUNILFlBQVksQ0FBQyxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNyRSxDQUFDLENBQUMsQ0FBQztRQUVILEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0NBQWtDLENBQUMsQ0FBQztRQUNoRCxPQUFPLE1BQU0sQ0FBQztJQUNmLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLFlBQVksQ0FBQyxLQUFjLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDckMsTUFBTSxJQUFJLEtBQUssQ0FDZCxxQ0FBcUMsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQzdGLENBQUM7SUFDSCxDQUFDO0FBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcGxpY2F0aW9uLCBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9uLCBSb3V0ZXIgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL2NvbmZpZy9sb2dnZXInO1xuaW1wb3J0IHsgRmVhdHVyZUZsYWdzIH0gZnJvbSAnLi4vY29uZmlnL2Vudmlyb25tZW50Q29uZmlnJztcbmltcG9ydCB7IHZhbGlkYXRlRGVwZW5kZW5jaWVzIH0gZnJvbSAnLi4vdXRpbHMvdmFsaWRhdGVEZXBlbmRlbmNpZXMnO1xuaW1wb3J0IHsgcHJvY2Vzc0Vycm9yIH0gZnJvbSAnLi4vdXRpbHMvcHJvY2Vzc0Vycm9yJztcblxuaW50ZXJmYWNlIFRlc3RSb3V0ZURlcGVuZGVuY2llcyB7XG5cdGFwcDogQXBwbGljYXRpb247XG5cdGxvZ2dlcjogTG9nZ2VyO1xuXHRmZWF0dXJlRmxhZ3M6IEZlYXR1cmVGbGFncztcblx0ZW52aXJvbm1lbnRWYXJpYWJsZXM6IHR5cGVvZiBpbXBvcnQoJy4uL2NvbmZpZy9lbnZpcm9ubWVudENvbmZpZycpLmVudmlyb25tZW50VmFyaWFibGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZVRlc3RSb3V0ZXMoe1xuXHRhcHAsXG5cdGxvZ2dlcixcblx0ZmVhdHVyZUZsYWdzLFxuXHRlbnZpcm9ubWVudFZhcmlhYmxlc1xufTogVGVzdFJvdXRlRGVwZW5kZW5jaWVzKTogUm91dGVyIHtcblx0Y29uc3Qgcm91dGVyID0gUm91dGVyKCk7XG5cblx0dHJ5IHtcblx0XHR2YWxpZGF0ZURlcGVuZGVuY2llcyhcblx0XHRcdFtcblx0XHRcdFx0eyBuYW1lOiAnYXBwJywgaW5zdGFuY2U6IGFwcCB9LFxuXHRcdFx0XHR7IG5hbWU6ICdsb2dnZXInLCBpbnN0YW5jZTogbG9nZ2VyIH0sXG5cdFx0XHRcdHsgbmFtZTogJ2ZlYXR1cmVGbGFncycsIGluc3RhbmNlOiBmZWF0dXJlRmxhZ3MgfSxcblx0XHRcdFx0eyBuYW1lOiAnZW52aXJvbm1lbnRWYXJpYWJsZXMnLCBpbnN0YW5jZTogZW52aXJvbm1lbnRWYXJpYWJsZXMgfVxuXHRcdFx0XSxcblx0XHRcdGxvZ2dlclxuXHRcdCk7XG5cblx0XHRpZiAoIWZlYXR1cmVGbGFncy5sb2FkVGVzdFJvdXRlc0ZsYWcpIHtcblx0XHRcdGxvZ2dlci5pbmZvKCdUZXN0IHJvdXRlcyBub3QgbG9hZGVkOyBmZWF0dXJlIGZsYWcgaXMgZGlzYWJsZWQuJyk7XG5cdFx0fVxuXG5cdFx0aWYgKGVudmlyb25tZW50VmFyaWFibGVzLm5vZGVFbnYgPT09ICdwcm9kdWN0aW9uJykge1xuXHRcdFx0cm91dGVyLnVzZSgoX3JlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuXHRcdFx0XHRyZXMuc3RhdHVzKDQwNCkuanNvbih7XG5cdFx0XHRcdFx0bWVzc2FnZTogJ1Rlc3Qgcm91dGVzIGFyZSBub3QgYXZhaWxhYmxlIGluIHByb2R1Y3Rpb24uJ1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyb3V0ZXIuZ2V0KFxuXHRcdFx0XHQnL3Rlc3QnLFxuXHRcdFx0XHQocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pID0+IHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0bG9nZ2VyLmluZm8oJ1Rlc3Qgcm91dGUgYWNjZXNzZWQuJyk7XG5cdFx0XHRcdFx0XHRyZXMuc2VuZCgnVGVzdCByb3V0ZSBpcyB3b3JraW5nIScpO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRwcm9jZXNzRXJyb3IoZXJyb3IgYXMgRXJyb3IsIGxvZ2dlciwgcmVxKTtcblx0XHRcdFx0XHRcdG5leHQobmV3IEVycm9yKCdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3Igb24gdGVzdCByb3V0ZScpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0cm91dGVyLnVzZSgoZXJyb3I6IHVua25vd24sIHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuXHRcdFx0aWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcblx0XHRcdFx0bG9nZ2VyLmVycm9yKGBVbmV4cGVjdGVkIGVycm9yIG9uIHRlc3Qgcm91dGU6ICR7ZXJyb3Iuc3RhY2t9YCk7XG5cdFx0XHRcdHByb2Nlc3NFcnJvcihlcnJvciwgbG9nZ2VyLCByZXEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bG9nZ2VyLmVycm9yKFxuXHRcdFx0XHRcdCdVbmV4cGVjdGVkIG5vbi1lcnJvciB0aHJvd24gb24gdGVzdCByb3V0ZScsXG5cdFx0XHRcdFx0ZXJyb3Jcblx0XHRcdFx0KTtcblx0XHRcdFx0cHJvY2Vzc0Vycm9yKFxuXHRcdFx0XHRcdG5ldyBFcnJvcignVW5leHBlY3RlZCB0ZXN0IHJvdXRlIGVycm9yJyksXG5cdFx0XHRcdFx0bG9nZ2VyLFxuXHRcdFx0XHRcdHJlcVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0cmVzLnN0YXR1cyg1MDApLmpzb24oe1xuXHRcdFx0XHRlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvciBvbiB0ZXN0IHJvdXRlJ1xuXHRcdFx0fSk7XG5cdFx0XHRwcm9jZXNzRXJyb3IobmV3IEVycm9yKCdVbmV4cGVjdGVkIHRlc3Qgcm91dGUgZXJyb3InKSwgbG9nZ2VyLCByZXEpO1xuXHRcdH0pO1xuXG5cdFx0YXBwLnVzZSgnL3Rlc3QnLCByb3V0ZXIpO1xuXHRcdGxvZ2dlci5pbmZvKCdUZXN0IHJvdXRlcyBsb2FkZWQgc3VjY2Vzc2Z1bGx5LicpO1xuXHRcdHJldHVybiByb3V0ZXI7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cHJvY2Vzc0Vycm9yKGVycm9yIGFzIEVycm9yLCBsb2dnZXIpO1xuXHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdGBGYWlsZWQgdG8gaW5pdGlhbGl6ZSB0ZXN0IHJvdXRlczogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcil9YFxuXHRcdCk7XG5cdH1cbn1cbiJdfQ==
