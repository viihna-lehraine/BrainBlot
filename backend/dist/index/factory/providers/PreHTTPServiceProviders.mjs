import { MailerService } from '../../../services/Mailer.mjs';
import { EnvConfigServiceFactory } from '../subfactories/EnvConfigServiceFactory.mjs';
import { validateDependencies } from '../../../utils/helpers.mjs';
import nodemailer from 'nodemailer';
import { MulterUploadService } from '../../../services/MulterUpload.mjs';
import { ErrorHandlerServiceFactory } from '../subfactories/ErrorHandlerServiceFactory.mjs';
import { LoggerServiceFactory } from '../subfactories/LoggerServiceFactory.mjs';
import multer from 'multer';
import { fileTypeFromBuffer } from 'file-type';
import fs from 'fs';
import path from 'path';
export class MailerServiceProvider {
	static instance = null;
	static async getMailerService() {
		const envConfig = await EnvConfigServiceFactory.getEnvConfigService();
		if (!this.instance) {
			this.instance = await MailerService.getInstance({
				nodemailer,
				emailUser: envConfig.getEnvVariable('emailUser'),
				validateDependencies
			});
		}
		return this.instance;
	}
}
export class MulterUploadServiceProvider {
	static instance = null;
	static async getMulterUploadService() {
		const logger = await LoggerServiceFactory.getLoggerService();
		const errorLogger = await LoggerServiceFactory.getErrorLoggerService();
		const errorHandler =
			await ErrorHandlerServiceFactory.getErrorHandlerService();
		if (!this.instance) {
			this.instance = await MulterUploadService.getInstance({
				multer,
				fileTypeFromBuffer,
				fs,
				path,
				logger,
				errorLogger,
				errorHandler,
				validateDependencies
			});
		}
		return this.instance;
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJlSFRUUFNlcnZpY2VQcm92aWRlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvaW5kZXgvZmFjdG9yeS9wcm92aWRlcnMvUHJlSFRUUFNlcnZpY2VQcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBS3pELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzlELE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQztBQUNwQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNyRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUN4RixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUM1RSxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQy9DLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQztBQUNwQixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFFeEIsTUFBTSxPQUFPLHFCQUFxQjtJQUN6QixNQUFNLENBQUMsUUFBUSxHQUFrQyxJQUFJLENBQUM7SUFFdkQsTUFBTSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0I7UUFDbkMsTUFBTSxTQUFTLEdBQUcsTUFBTSx1QkFBdUIsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBRXRFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLGFBQWEsQ0FBQyxXQUFXLENBQUM7Z0JBQy9DLFVBQVU7Z0JBQ1YsU0FBUyxFQUFFLFNBQVMsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDO2dCQUNoRCxvQkFBb0I7YUFDcEIsQ0FBQyxDQUFDO1FBQ0osQ0FBQztRQUVELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN0QixDQUFDOztBQUdGLE1BQU0sT0FBTywyQkFBMkI7SUFDL0IsTUFBTSxDQUFDLFFBQVEsR0FBd0MsSUFBSSxDQUFDO0lBRTdELE1BQU0sQ0FBQyxLQUFLLENBQUMsc0JBQXNCO1FBQ3pDLE1BQU0sTUFBTSxHQUFHLE1BQU0sb0JBQW9CLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUM3RCxNQUFNLFdBQVcsR0FBRyxNQUFNLG9CQUFvQixDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDdkUsTUFBTSxZQUFZLEdBQ2pCLE1BQU0sMEJBQTBCLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztRQUUzRCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxtQkFBbUIsQ0FBQyxXQUFXLENBQUM7Z0JBQ3JELE1BQU07Z0JBQ04sa0JBQWtCO2dCQUNsQixFQUFFO2dCQUNGLElBQUk7Z0JBQ0osTUFBTTtnQkFDTixXQUFXO2dCQUNYLFlBQVk7Z0JBQ1osb0JBQW9CO2FBQ3BCLENBQUMsQ0FBQztRQUNKLENBQUM7UUFFRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1haWxlclNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9NYWlsZXInO1xuaW1wb3J0IHtcblx0TWFpbGVyU2VydmljZUludGVyZmFjZSxcblx0TXVsdGVyVXBsb2FkU2VydmljZUludGVyZmFjZVxufSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL21haW4nO1xuaW1wb3J0IHsgRW52Q29uZmlnU2VydmljZUZhY3RvcnkgfSBmcm9tICcuLi9zdWJmYWN0b3JpZXMvRW52Q29uZmlnU2VydmljZUZhY3RvcnknO1xuaW1wb3J0IHsgdmFsaWRhdGVEZXBlbmRlbmNpZXMgfSBmcm9tICcuLi8uLi8uLi91dGlscy9oZWxwZXJzJztcbmltcG9ydCBub2RlbWFpbGVyIGZyb20gJ25vZGVtYWlsZXInO1xuaW1wb3J0IHsgTXVsdGVyVXBsb2FkU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL011bHRlclVwbG9hZCc7XG5pbXBvcnQgeyBFcnJvckhhbmRsZXJTZXJ2aWNlRmFjdG9yeSB9IGZyb20gJy4uL3N1YmZhY3Rvcmllcy9FcnJvckhhbmRsZXJTZXJ2aWNlRmFjdG9yeSc7XG5pbXBvcnQgeyBMb2dnZXJTZXJ2aWNlRmFjdG9yeSB9IGZyb20gJy4uL3N1YmZhY3Rvcmllcy9Mb2dnZXJTZXJ2aWNlRmFjdG9yeSc7XG5pbXBvcnQgbXVsdGVyIGZyb20gJ211bHRlcic7XG5pbXBvcnQgeyBmaWxlVHlwZUZyb21CdWZmZXIgfSBmcm9tICdmaWxlLXR5cGUnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5leHBvcnQgY2xhc3MgTWFpbGVyU2VydmljZVByb3ZpZGVyIHtcblx0cHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IE1haWxlclNlcnZpY2VJbnRlcmZhY2UgfCBudWxsID0gbnVsbDtcblxuXHRwdWJsaWMgc3RhdGljIGFzeW5jIGdldE1haWxlclNlcnZpY2UoKTogUHJvbWlzZTxNYWlsZXJTZXJ2aWNlSW50ZXJmYWNlPiB7XG5cdFx0Y29uc3QgZW52Q29uZmlnID0gYXdhaXQgRW52Q29uZmlnU2VydmljZUZhY3RvcnkuZ2V0RW52Q29uZmlnU2VydmljZSgpO1xuXG5cdFx0aWYgKCF0aGlzLmluc3RhbmNlKSB7XG5cdFx0XHR0aGlzLmluc3RhbmNlID0gYXdhaXQgTWFpbGVyU2VydmljZS5nZXRJbnN0YW5jZSh7XG5cdFx0XHRcdG5vZGVtYWlsZXIsXG5cdFx0XHRcdGVtYWlsVXNlcjogZW52Q29uZmlnLmdldEVudlZhcmlhYmxlKCdlbWFpbFVzZXInKSxcblx0XHRcdFx0dmFsaWRhdGVEZXBlbmRlbmNpZXNcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmluc3RhbmNlO1xuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBNdWx0ZXJVcGxvYWRTZXJ2aWNlUHJvdmlkZXIge1xuXHRwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogTXVsdGVyVXBsb2FkU2VydmljZUludGVyZmFjZSB8IG51bGwgPSBudWxsO1xuXG5cdHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0TXVsdGVyVXBsb2FkU2VydmljZSgpOiBQcm9taXNlPE11bHRlclVwbG9hZFNlcnZpY2VJbnRlcmZhY2U+IHtcblx0XHRjb25zdCBsb2dnZXIgPSBhd2FpdCBMb2dnZXJTZXJ2aWNlRmFjdG9yeS5nZXRMb2dnZXJTZXJ2aWNlKCk7XG5cdFx0Y29uc3QgZXJyb3JMb2dnZXIgPSBhd2FpdCBMb2dnZXJTZXJ2aWNlRmFjdG9yeS5nZXRFcnJvckxvZ2dlclNlcnZpY2UoKTtcblx0XHRjb25zdCBlcnJvckhhbmRsZXIgPVxuXHRcdFx0YXdhaXQgRXJyb3JIYW5kbGVyU2VydmljZUZhY3RvcnkuZ2V0RXJyb3JIYW5kbGVyU2VydmljZSgpO1xuXG5cdFx0aWYgKCF0aGlzLmluc3RhbmNlKSB7XG5cdFx0XHR0aGlzLmluc3RhbmNlID0gYXdhaXQgTXVsdGVyVXBsb2FkU2VydmljZS5nZXRJbnN0YW5jZSh7XG5cdFx0XHRcdG11bHRlcixcblx0XHRcdFx0ZmlsZVR5cGVGcm9tQnVmZmVyLFxuXHRcdFx0XHRmcyxcblx0XHRcdFx0cGF0aCxcblx0XHRcdFx0bG9nZ2VyLFxuXHRcdFx0XHRlcnJvckxvZ2dlcixcblx0XHRcdFx0ZXJyb3JIYW5kbGVyLFxuXHRcdFx0XHR2YWxpZGF0ZURlcGVuZGVuY2llc1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuaW5zdGFuY2U7XG5cdH1cbn1cbiJdfQ==
