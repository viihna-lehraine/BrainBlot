import nodemailer from 'nodemailer';
import { createClient } from 'redis';
import { BackupCodeService } from '../auth/BackupCode.mjs';
import { MailerService } from '../services/Mailer.mjs';
import { EmailMFAService } from '../auth/EmailMFA.mjs';
import { RedisService } from '../services/Redis.mjs';
import { CacheService } from '../services/Cache.mjs';
import { blankRequest } from '../config/express.mjs';
import { validateDependencies } from '../utils/helpers.mjs';
import { AppLoggerService, ErrorLoggerService } from '../services/Logger.mjs';
import { AppLoggerServiceParameters } from './parameters.mjs';
import { GatekeeperService } from '../services/Gatekeeper.mjs';
import { JWTService } from '../auth/JWT.mjs';
import { DatabaseController } from '../controllers/DatabaseController.mjs';
import { ErrorHandlerService } from '../services/ErrorHandler.mjs';
import { FIDO2Service } from '../auth/FIDO2.mjs';
import { HelmetMiddlewareService } from '../middleware/Helmet.mjs';
import { HTTPSServer } from '../services/HTTPS.mjs';
import { MulterUploadService } from '../services/MulterUpload.mjs';
import { ResourceManager } from '../services/ResourceManager.mjs';
import { PassportService } from '../auth/Passport.mjs';
import { AccessControlMiddlewareService } from '../middleware/AccessControl.mjs';
import { PassportAuthMiddlewareService } from '../middleware/PassportAuth.mjs';
import { JWTAuthMiddlewareService } from '../middleware/JWTAuth.mjs';
import { PasswordService } from '../auth/Password.mjs';
import { UserController } from '../controllers/UserController.mjs';
import { TOTPService } from '../auth/TOTP.mjs';
import { YubicoOTPService } from '../auth/YubicoOTP.mjs';
import { CSRFMiddlewareService } from '../middleware/CSRF.mjs';
import { EnvConfigService } from '../services/EnvConfig.mjs';
import { AuthController } from '../controllers/AuthController.mjs';
import { MiddlewareStatusService } from '../middleware/MiddlewareStatus.mjs';
import { HealthCheckService } from '../services/HealthCheck.mjs';
import { RootMiddlewareService } from '../middleware/Root.mjs';
import fs from 'fs';
import path from 'path';
import multer from 'multer';
import { fileTypeFromBuffer } from 'file-type';
import { csrfOptions } from '../config/middlewareOptions.mjs';
import { VaultService } from '../services/Vault.mjs';
import { BaseRouter } from 'src/routers/BaseRouter';
const defaultReq = {};
const defaultRes = {};
const defaultNext = () => {};
const loggerServiceParams = AppLoggerServiceParameters;
export class ServiceFactory {
	static loggerService = null;
	static errorLoggerService = null;
	static errorHandlerService = null;
	static envConfigService = null;
	static async getAccessControlMiddlewareService() {
		return AccessControlMiddlewareService.getInstance();
	}
	static async getAuthController() {
		return AuthController.getInstance();
	}
	static async getBackupCodeService() {
		return BackupCodeService.getInstance();
	}
	static async getBaseRouter() {
		return BaseRouter.getInstance();
	}
	static async getCacheService() {
		return CacheService.getInstance();
	}
	static async getCSRFMiddlewareService() {
		return CSRFMiddlewareService.getInstance(csrfOptions);
	}
	static async getDatabaseController() {
		return DatabaseController.getInstance();
	}
	static async getEmailMFAService() {
		return EmailMFAService.getInstance();
	}
	static async getEnvConfigService() {
		if (!this.envConfigService) {
			this.envConfigService = EnvConfigService.getInstance();
		}
		return this.envConfigService;
	}
	static async getErrorHandlerService() {
		if (!this.errorHandlerService) {
			const logger = await this.getLoggerService();
			const errorLogger = await this.getErrorLoggerService();
			this.errorHandlerService = ErrorHandlerService.getInstance(
				logger,
				errorLogger
			);
		}
		return this.errorHandlerService;
	}
	static async getErrorLoggerService() {
		if (!this.errorLoggerService) {
			this.errorLoggerService = ErrorLoggerService.getInstance(
				loggerServiceParams,
				'debug',
				'BrainBlot Backend'
			);
		}
		return this.errorLoggerService;
	}
	static async getFIDO2Service() {
		return FIDO2Service.getInstance();
	}
	static async getGatekeeperService() {
		return GatekeeperService.getInstance();
	}
	static async getHealthCheckService() {
		return HealthCheckService.getInstance();
	}
	static async getHelmetMiddlewareService() {
		return HelmetMiddlewareService.getInstance();
	}
	static async getHTTPSServer(app) {
		const databaseController = await this.getDatabaseController();
		const sequelize = databaseController.getSequelizeInstance();
		const errorHandler = await this.getErrorHandlerService();
		if (!sequelize) {
			const HTTPSServerError =
				new errorHandler.ErrorClasses.DatabaseErrorRecoverable(
					'Unable to start web server, as the sequelize instance is not initialized.',
					{ exposeToClient: false }
				);
			await errorHandler.handleError({
				error: HTTPSServerError,
				details: {
					context: 'WEB_SERVER',
					reason: 'Sequelize instance not initialized'
				}
			});
			throw HTTPSServerError;
		}
		return HTTPSServer.getInstance(app, sequelize);
	}
	static async getJWTAuthMiddlewareService() {
		return JWTAuthMiddlewareService.getInstance();
	}
	static async getJWTService() {
		return JWTService.getInstance();
	}
	static async getLoggerService() {
		if (!this.loggerService) {
			this.loggerService = AppLoggerService.getInstance(
				AppLoggerServiceParameters
			);
		}
		return this.loggerService;
	}
	static async getMailerService() {
		const envConfigService = await this.getEnvConfigService();
		return MailerService.getInstance({
			nodemailer,
			emailUser: envConfigService.getEnvVariable('emailUser'),
			validateDependencies
		});
	}
	static async getMiddlewareStatusService() {
		return MiddlewareStatusService.getInstance();
	}
	static async getMulterUploadService() {
		const logger = await this.getLoggerService();
		const errorLogger = await this.getErrorLoggerService();
		const errorHandler = await this.getErrorHandlerService();
		return MulterUploadService.getInstance({
			multer,
			fileTypeFromBuffer,
			fs,
			path,
			logger,
			errorLogger,
			errorHandler,
			validateDependencies
		});
	}
	static async getPassportService() {
		return PassportService.getInstance();
	}
	static async getPassportAuthMiddlewareService() {
		return PassportAuthMiddlewareService.getInstance();
	}
	static async getPasswordService() {
		return PasswordService.getInstance();
	}
	static async getRedisService() {
		return RedisService.getInstance({
			req: defaultReq,
			res: defaultRes,
			next: defaultNext,
			blankRequest,
			createRedisClient: createClient,
			validateDependencies
		});
	}
	static async getResourceManager() {
		return ResourceManager.getInstance();
	}
	static async getRootMiddlewareService() {
		return RootMiddlewareService.getInstance();
	}
	static async getVaultService() {
		return VaultService.getInstance();
	}
	static async getTOTPService() {
		return TOTPService.getInstance();
	}
	static async getUserController() {
		return UserController.getInstance();
	}
	static async getYubicoOTPService() {
		return YubicoOTPService.getInstance();
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmRleC9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sVUFBVSxNQUFNLFlBQVksQ0FBQztBQUNwQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBRXJDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDMUUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzFELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzNELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDekMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDdkUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQs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QUMsV0FBVyxFQUFFLENBQUM7SUFDdkMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlLCBOZXh0RnVuY3Rpb24gfSBmcm9tICdleHByZXNzJztcbmltcG9ydCBub2RlbWFpbGVyIGZyb20gJ25vZGVtYWlsZXInO1xuaW1wb3J0IHsgY3JlYXRlQ2xpZW50IH0gZnJvbSAncmVkaXMnO1xuaW1wb3J0IGFwcCBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IEJhY2t1cENvZGVTZXJ2aWNlIH0gZnJvbSAnLi4vYXV0aC9CYWNrdXBDb2RlJztcbmltcG9ydCB7IE1haWxlclNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9NYWlsZXInO1xuaW1wb3J0IHsgRW1haWxNRkFTZXJ2aWNlIH0gZnJvbSAnLi4vYXV0aC9FbWFpbE1GQSc7XG5pbXBvcnQgeyBSZWRpc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9SZWRpcyc7XG5pbXBvcnQgeyBDYWNoZVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9DYWNoZSc7XG5pbXBvcnQgeyBibGFua1JlcXVlc3QgfSBmcm9tICcuLi9jb25maWcvZXhwcmVzcyc7XG5pbXBvcnQgeyB2YWxpZGF0ZURlcGVuZGVuY2llcyB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IHsgQXBwTG9nZ2VyU2VydmljZSwgRXJyb3JMb2dnZXJTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvTG9nZ2VyJztcbmltcG9ydCB7IEFwcExvZ2dlclNlcnZpY2VQYXJhbWV0ZXJzIH0gZnJvbSAnLi9wYXJhbWV0ZXJzJztcbmltcG9ydCB7IEdhdGVrZWVwZXJTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvR2F0ZWtlZXBlcic7XG5pbXBvcnQgeyBKV1RTZXJ2aWNlIH0gZnJvbSAnLi4vYXV0aC9KV1QnO1xuaW1wb3J0IHsgRGF0YWJhc2VDb250cm9sbGVyIH0gZnJvbSAnLi4vY29udHJvbGxlcnMvRGF0YWJhc2VDb250cm9sbGVyJztcbmltcG9ydCB7IEVycm9ySGFuZGxlclNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9FcnJvckhhbmRsZXInO1xuaW1wb3J0IHsgRklETzJTZXJ2aWNlIH0gZnJvbSAnLi4vYXV0aC9GSURPMic7XG5pbXBvcnQgeyBIZWxtZXRNaWRkbGV3YXJlU2VydmljZSB9IGZyb20gJy4uL21pZGRsZXdhcmUvSGVsbWV0JztcbmltcG9ydCB7IEhUVFBTU2VydmVyIH0gZnJvbSAnLi4vc2VydmljZXMvSFRUUFMnO1xuaW1wb3J0IHsgTXVsdGVyVXBsb2FkU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL011bHRlclVwbG9hZCc7XG5pbXBvcnQgeyBSZXNvdXJjZU1hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9SZXNvdXJjZU1hbmFnZXInO1xuaW1wb3J0IHsgUGFzc3BvcnRTZXJ2aWNlIH0gZnJvbSAnLi4vYXV0aC9QYXNzcG9ydCc7XG5pbXBvcnQgeyBBY2Nlc3NDb250cm9sTWlkZGxld2FyZVNlcnZpY2UgfSBmcm9tICcuLi9taWRkbGV3YXJlL0FjY2Vzc0NvbnRyb2wnO1xuaW1wb3J0IHsgUGFzc3BvcnRBdXRoTWlkZGxld2FyZVNlcnZpY2UgfSBmcm9tICcuLi9taWRkbGV3YXJlL1Bhc3Nwb3J0QXV0aCc7XG5pbXBvcnQgeyBKV1RBdXRoTWlkZGxld2FyZVNlcnZpY2UgfSBmcm9tICcuLi9taWRkbGV3YXJlL0pXVEF1dGgnO1xuaW1wb3J0IHsgUGFzc3dvcmRTZXJ2aWNlIH0gZnJvbSAnLi4vYXV0aC9QYXNzd29yZCc7XG5pbXBvcnQgeyBVc2VyQ29udHJvbGxlciB9IGZyb20gJy4uL2NvbnRyb2xsZXJzL1VzZXJDb250cm9sbGVyJztcbmltcG9ydCB7IFRPVFBTZXJ2aWNlIH0gZnJvbSAnLi4vYXV0aC9UT1RQJztcbmltcG9ydCB7IFl1Ymljb09UUFNlcnZpY2UgfSBmcm9tICcuLi9hdXRoL1l1Ymljb09UUCc7XG5pbXBvcnQgeyBDU1JGTWlkZGxld2FyZVNlcnZpY2UgfSBmcm9tICcuLi9taWRkbGV3YXJlL0NTUkYnO1xuaW1wb3J0IHsgRW52Q29uZmlnU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL0VudkNvbmZpZyc7XG5pbXBvcnQgeyBBdXRoQ29udHJvbGxlciB9IGZyb20gJy4uL2NvbnRyb2xsZXJzL0F1dGhDb250cm9sbGVyJztcbmltcG9ydCB7IE1pZGRsZXdhcmVTdGF0dXNTZXJ2aWNlIH0gZnJvbSAnLi4vbWlkZGxld2FyZS9NaWRkbGV3YXJlU3RhdHVzJztcbmltcG9ydCB7IEhlYWx0aENoZWNrU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL0hlYWx0aENoZWNrJztcbmltcG9ydCB7IFJvb3RNaWRkbGV3YXJlU2VydmljZSB9IGZyb20gJy4uL21pZGRsZXdhcmUvUm9vdCc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgbXVsdGVyIGZyb20gJ211bHRlcic7XG5pbXBvcnQgeyBmaWxlVHlwZUZyb21CdWZmZXIgfSBmcm9tICdmaWxlLXR5cGUnO1xuaW1wb3J0IHsgY3NyZk9wdGlvbnMgfSBmcm9tICcuLi9jb25maWcvbWlkZGxld2FyZU9wdGlvbnMnO1xuaW1wb3J0IHtcblx0QWNjZXNzQ29udHJvbE1pZGRsZXdhcmVTZXJ2aWNlSW50ZXJmYWNlLFxuXHRBcHBMb2dnZXJTZXJ2aWNlSW50ZXJmYWNlLFxuXHRBdXRoQ29udHJvbGxlckludGVyZmFjZSxcblx0QmFzZVJvdXRlckludGVyZmFjZSxcblx0RGF0YWJhc2VDb250cm9sbGVySW50ZXJmYWNlLFxuXHRFbWFpbE1GQVNlcnZpY2VJbnRlcmZhY2UsXG5cdEVudkNvbmZpZ1NlcnZpY2VJbnRlcmZhY2UsXG5cdEVycm9yTG9nZ2VyU2VydmljZUludGVyZmFjZSxcblx0SGVhbHRoQ2hlY2tTZXJ2aWNlSW50ZXJmYWNlLFxuXHRIZWxtZXRNaWRkbGV3YXJlU2VydmljZUludGVyZmFjZSxcblx0SFRUUFNTZXJ2ZXJJbnRlcmZhY2UsXG5cdEpXVEF1dGhNaWRkbGV3YXJlU2VydmljZUludGVyZmFjZSxcblx0SldUU2VydmljZUludGVyZmFjZSxcblx0TWFpbGVyU2VydmljZUludGVyZmFjZSxcblx0TWlkZGxld2FyZVN0YXR1c1NlcnZpY2VJbnRlcmZhY2UsXG5cdE11bHRlclVwbG9hZFNlcnZpY2VJbnRlcmZhY2UsXG5cdFBhc3Nwb3J0QXV0aE1pZGRsZXdhcmVTZXJ2aWNlSW50ZXJmYWNlLFxuXHRQYXNzcG9ydFNlcnZpY2VJbnRlcmZhY2UsXG5cdFJlZGlzU2VydmljZUludGVyZmFjZSxcblx0UmVzb3VyY2VNYW5hZ2VySW50ZXJmYWNlLFxuXHRSb290TWlkZGxld2FyZVNlcnZpY2VJbnRlcmZhY2UsXG5cdFVzZXJDb250cm9sbGVySW50ZXJmYWNlLFxuXHRWYXVsdFNlcnZpY2VJbnRlcmZhY2UsXG5cdFl1Ymljb09UUFNlcnZpY2VJbnRlcmZhY2Vcbn0gZnJvbSAnLi9pbnRlcmZhY2VzL3NlcnZpY2VzJztcbmltcG9ydCB7IFZhdWx0U2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL1ZhdWx0JztcbmltcG9ydCB7IEJhc2VSb3V0ZXIgfSBmcm9tICdzcmMvcm91dGVycy9CYXNlUm91dGVyJztcblxuY29uc3QgZGVmYXVsdFJlcTogUmVxdWVzdCA9IHt9IGFzIFJlcXVlc3Q7XG5jb25zdCBkZWZhdWx0UmVzOiBSZXNwb25zZSA9IHt9IGFzIFJlc3BvbnNlO1xuY29uc3QgZGVmYXVsdE5leHQ6IE5leHRGdW5jdGlvbiA9ICgpID0+IHt9O1xuY29uc3QgbG9nZ2VyU2VydmljZVBhcmFtcyA9IEFwcExvZ2dlclNlcnZpY2VQYXJhbWV0ZXJzO1xuXG5leHBvcnQgY2xhc3MgU2VydmljZUZhY3Rvcnkge1xuXHRwcml2YXRlIHN0YXRpYyBsb2dnZXJTZXJ2aWNlOiBQcm9taXNlPEFwcExvZ2dlclNlcnZpY2VJbnRlcmZhY2U+IHwgbnVsbCA9XG5cdFx0bnVsbDtcblxuXHRwcml2YXRlIHN0YXRpYyBlcnJvckxvZ2dlclNlcnZpY2U6IFByb21pc2U8RXJyb3JMb2dnZXJTZXJ2aWNlSW50ZXJmYWNlPiB8IG51bGwgPVxuXHRcdG51bGw7XG5cblx0cHJpdmF0ZSBzdGF0aWMgZXJyb3JIYW5kbGVyU2VydmljZTogUHJvbWlzZTxFcnJvckhhbmRsZXJTZXJ2aWNlPiB8IG51bGwgPVxuXHRcdG51bGw7XG5cblx0cHJpdmF0ZSBzdGF0aWMgZW52Q29uZmlnU2VydmljZTogUHJvbWlzZTxFbnZDb25maWdTZXJ2aWNlSW50ZXJmYWNlPiB8IG51bGwgPVxuXHRcdG51bGw7XG5cblx0cHVibGljIHN0YXRpYyBhc3luYyBnZXRBY2Nlc3NDb250cm9sTWlkZGxld2FyZVNlcnZpY2UoKTogUHJvbWlzZTxBY2Nlc3NDb250cm9sTWlkZGxld2FyZVNlcnZpY2VJbnRlcmZhY2U+IHtcblx0XHRyZXR1cm4gQWNjZXNzQ29udHJvbE1pZGRsZXdhcmVTZXJ2aWNlLmdldEluc3RhbmNlKCk7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGFzeW5jIGdldEF1dGhDb250cm9sbGVyKCk6IFByb21pc2U8QXV0aENvbnRyb2xsZXJJbnRlcmZhY2U+IHtcblx0XHRyZXR1cm4gQXV0aENvbnRyb2xsZXIuZ2V0SW5zdGFuY2UoKTtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0QmFja3VwQ29kZVNlcnZpY2UoKTogUHJvbWlzZTxCYWNrdXBDb2RlU2VydmljZT4ge1xuXHRcdHJldHVybiBCYWNrdXBDb2RlU2VydmljZS5nZXRJbnN0YW5jZSgpO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBhc3luYyBnZXRCYXNlUm91dGVyKCk6IFByb21pc2U8QmFzZVJvdXRlckludGVyZmFjZT4ge1xuXHRcdHJldHVybiBCYXNlUm91dGVyLmdldEluc3RhbmNlKCk7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGFzeW5jIGdldENhY2hlU2VydmljZSgpOiBQcm9taXNlPENhY2hlU2VydmljZT4ge1xuXHRcdHJldHVybiBDYWNoZVNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0Q1NSRk1pZGRsZXdhcmVTZXJ2aWNlKCk6IFByb21pc2U8Q1NSRk1pZGRsZXdhcmVTZXJ2aWNlPiB7XG5cdFx0cmV0dXJuIENTUkZNaWRkbGV3YXJlU2VydmljZS5nZXRJbnN0YW5jZShjc3JmT3B0aW9ucyk7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGFzeW5jIGdldERhdGFiYXNlQ29udHJvbGxlcigpOiBQcm9taXNlPERhdGFiYXNlQ29udHJvbGxlckludGVyZmFjZT4ge1xuXHRcdHJldHVybiBEYXRhYmFzZUNvbnRyb2xsZXIuZ2V0SW5zdGFuY2UoKTtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0RW1haWxNRkFTZXJ2aWNlKCk6IFByb21pc2U8RW1haWxNRkFTZXJ2aWNlSW50ZXJmYWNlPiB7XG5cdFx0cmV0dXJuIEVtYWlsTUZBU2VydmljZS5nZXRJbnN0YW5jZSgpO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBhc3luYyBnZXRFbnZDb25maWdTZXJ2aWNlKCk6IFByb21pc2U8RW52Q29uZmlnU2VydmljZUludGVyZmFjZT4ge1xuXHRcdGlmICghdGhpcy5lbnZDb25maWdTZXJ2aWNlKSB7XG5cdFx0XHR0aGlzLmVudkNvbmZpZ1NlcnZpY2UgPSBFbnZDb25maWdTZXJ2aWNlLmdldEluc3RhbmNlKCk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVudkNvbmZpZ1NlcnZpY2U7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGFzeW5jIGdldEVycm9ySGFuZGxlclNlcnZpY2UoKTogUHJvbWlzZTxFcnJvckhhbmRsZXJTZXJ2aWNlPiB7XG5cdFx0aWYgKCF0aGlzLmVycm9ySGFuZGxlclNlcnZpY2UpIHtcblx0XHRcdGNvbnN0IGxvZ2dlciA9IGF3YWl0IHRoaXMuZ2V0TG9nZ2VyU2VydmljZSgpO1xuXHRcdFx0Y29uc3QgZXJyb3JMb2dnZXIgPSBhd2FpdCB0aGlzLmdldEVycm9yTG9nZ2VyU2VydmljZSgpO1xuXHRcdFx0dGhpcy5lcnJvckhhbmRsZXJTZXJ2aWNlID0gRXJyb3JIYW5kbGVyU2VydmljZS5nZXRJbnN0YW5jZShcblx0XHRcdFx0bG9nZ2VyLFxuXHRcdFx0XHRlcnJvckxvZ2dlclxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lcnJvckhhbmRsZXJTZXJ2aWNlO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBhc3luYyBnZXRFcnJvckxvZ2dlclNlcnZpY2UoKTogUHJvbWlzZTxFcnJvckxvZ2dlclNlcnZpY2VJbnRlcmZhY2U+IHtcblx0XHRpZiAoIXRoaXMuZXJyb3JMb2dnZXJTZXJ2aWNlKSB7XG5cdFx0XHR0aGlzLmVycm9yTG9nZ2VyU2VydmljZSA9IEVycm9yTG9nZ2VyU2VydmljZS5nZXRJbnN0YW5jZShcblx0XHRcdFx0bG9nZ2VyU2VydmljZVBhcmFtcyxcblx0XHRcdFx0J2RlYnVnJyxcblx0XHRcdFx0J0JyYWluQmxvdCBCYWNrZW5kJ1xuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lcnJvckxvZ2dlclNlcnZpY2U7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGFzeW5jIGdldEZJRE8yU2VydmljZSgpOiBQcm9taXNlPEZJRE8yU2VydmljZT4ge1xuXHRcdHJldHVybiBGSURPMlNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0R2F0ZWtlZXBlclNlcnZpY2UoKTogUHJvbWlzZTxHYXRla2VlcGVyU2VydmljZT4ge1xuXHRcdHJldHVybiBHYXRla2VlcGVyU2VydmljZS5nZXRJbnN0YW5jZSgpO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBhc3luYyBnZXRIZWFsdGhDaGVja1NlcnZpY2UoKTogUHJvbWlzZTxIZWFsdGhDaGVja1NlcnZpY2VJbnRlcmZhY2U+IHtcblx0XHRyZXR1cm4gSGVhbHRoQ2hlY2tTZXJ2aWNlLmdldEluc3RhbmNlKCk7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGFzeW5jIGdldEhlbG1ldE1pZGRsZXdhcmVTZXJ2aWNlKCk6IFByb21pc2U8SGVsbWV0TWlkZGxld2FyZVNlcnZpY2VJbnRlcmZhY2U+IHtcblx0XHRyZXR1cm4gSGVsbWV0TWlkZGxld2FyZVNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0SFRUUFNTZXJ2ZXIoXG5cdFx0YXBwOiBhcHAuQXBwbGljYXRpb25cblx0KTogUHJvbWlzZTxIVFRQU1NlcnZlckludGVyZmFjZT4ge1xuXHRcdGNvbnN0IGRhdGFiYXNlQ29udHJvbGxlciA9IGF3YWl0IHRoaXMuZ2V0RGF0YWJhc2VDb250cm9sbGVyKCk7XG5cdFx0Y29uc3Qgc2VxdWVsaXplID0gZGF0YWJhc2VDb250cm9sbGVyLmdldFNlcXVlbGl6ZUluc3RhbmNlKCk7XG5cdFx0Y29uc3QgZXJyb3JIYW5kbGVyID0gYXdhaXQgdGhpcy5nZXRFcnJvckhhbmRsZXJTZXJ2aWNlKCk7XG5cblx0XHRpZiAoIXNlcXVlbGl6ZSkge1xuXHRcdFx0Y29uc3QgSFRUUFNTZXJ2ZXJFcnJvciA9XG5cdFx0XHRcdG5ldyBlcnJvckhhbmRsZXIuRXJyb3JDbGFzc2VzLkRhdGFiYXNlRXJyb3JSZWNvdmVyYWJsZShcblx0XHRcdFx0XHQnVW5hYmxlIHRvIHN0YXJ0IHdlYiBzZXJ2ZXIsIGFzIHRoZSBzZXF1ZWxpemUgaW5zdGFuY2UgaXMgbm90IGluaXRpYWxpemVkLicsXG5cdFx0XHRcdFx0eyBleHBvc2VUb0NsaWVudDogZmFsc2UgfVxuXHRcdFx0XHQpO1xuXHRcdFx0YXdhaXQgZXJyb3JIYW5kbGVyLmhhbmRsZUVycm9yKHtcblx0XHRcdFx0ZXJyb3I6IEhUVFBTU2VydmVyRXJyb3IsXG5cdFx0XHRcdGRldGFpbHM6IHtcblx0XHRcdFx0XHRjb250ZXh0OiAnV0VCX1NFUlZFUicsXG5cdFx0XHRcdFx0cmVhc29uOiAnU2VxdWVsaXplIGluc3RhbmNlIG5vdCBpbml0aWFsaXplZCdcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHR0aHJvdyBIVFRQU1NlcnZlckVycm9yO1xuXHRcdH1cblx0XHRyZXR1cm4gSFRUUFNTZXJ2ZXIuZ2V0SW5zdGFuY2UoYXBwLCBzZXF1ZWxpemUpO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBhc3luYyBnZXRKV1RBdXRoTWlkZGxld2FyZVNlcnZpY2UoKTogUHJvbWlzZTxKV1RBdXRoTWlkZGxld2FyZVNlcnZpY2VJbnRlcmZhY2U+IHtcblx0XHRyZXR1cm4gSldUQXV0aE1pZGRsZXdhcmVTZXJ2aWNlLmdldEluc3RhbmNlKCk7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGFzeW5jIGdldEpXVFNlcnZpY2UoKTogUHJvbWlzZTxKV1RTZXJ2aWNlSW50ZXJmYWNlPiB7XG5cdFx0cmV0dXJuIEpXVFNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0TG9nZ2VyU2VydmljZSgpOiBQcm9taXNlPEFwcExvZ2dlclNlcnZpY2VJbnRlcmZhY2U+IHtcblx0XHRpZiAoIXRoaXMubG9nZ2VyU2VydmljZSkge1xuXHRcdFx0dGhpcy5sb2dnZXJTZXJ2aWNlID0gQXBwTG9nZ2VyU2VydmljZS5nZXRJbnN0YW5jZShcblx0XHRcdFx0QXBwTG9nZ2VyU2VydmljZVBhcmFtZXRlcnNcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMubG9nZ2VyU2VydmljZTtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0TWFpbGVyU2VydmljZSgpOiBQcm9taXNlPE1haWxlclNlcnZpY2VJbnRlcmZhY2U+IHtcblx0XHRjb25zdCBlbnZDb25maWdTZXJ2aWNlID0gYXdhaXQgdGhpcy5nZXRFbnZDb25maWdTZXJ2aWNlKCk7XG5cblx0XHRyZXR1cm4gTWFpbGVyU2VydmljZS5nZXRJbnN0YW5jZSh7XG5cdFx0XHRub2RlbWFpbGVyLFxuXHRcdFx0ZW1haWxVc2VyOiBlbnZDb25maWdTZXJ2aWNlLmdldEVudlZhcmlhYmxlKCdlbWFpbFVzZXInKSxcblx0XHRcdHZhbGlkYXRlRGVwZW5kZW5jaWVzXG5cdFx0fSk7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGFzeW5jIGdldE1pZGRsZXdhcmVTdGF0dXNTZXJ2aWNlKCk6IFByb21pc2U8TWlkZGxld2FyZVN0YXR1c1NlcnZpY2VJbnRlcmZhY2U+IHtcblx0XHRyZXR1cm4gTWlkZGxld2FyZVN0YXR1c1NlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0TXVsdGVyVXBsb2FkU2VydmljZSgpOiBQcm9taXNlPE11bHRlclVwbG9hZFNlcnZpY2VJbnRlcmZhY2U+IHtcblx0XHRjb25zdCBsb2dnZXIgPSBhd2FpdCB0aGlzLmdldExvZ2dlclNlcnZpY2UoKTtcblx0XHRjb25zdCBlcnJvckxvZ2dlciA9IGF3YWl0IHRoaXMuZ2V0RXJyb3JMb2dnZXJTZXJ2aWNlKCk7XG5cdFx0Y29uc3QgZXJyb3JIYW5kbGVyID0gYXdhaXQgdGhpcy5nZXRFcnJvckhhbmRsZXJTZXJ2aWNlKCk7XG5cblx0XHRyZXR1cm4gTXVsdGVyVXBsb2FkU2VydmljZS5nZXRJbnN0YW5jZSh7XG5cdFx0XHRtdWx0ZXIsXG5cdFx0XHRmaWxlVHlwZUZyb21CdWZmZXIsXG5cdFx0XHRmcyxcblx0XHRcdHBhdGgsXG5cdFx0XHRsb2dnZXIsXG5cdFx0XHRlcnJvckxvZ2dlcixcblx0XHRcdGVycm9ySGFuZGxlcixcblx0XHRcdHZhbGlkYXRlRGVwZW5kZW5jaWVzXG5cdFx0fSk7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGFzeW5jIGdldFBhc3Nwb3J0U2VydmljZSgpOiBQcm9taXNlPFBhc3Nwb3J0U2VydmljZUludGVyZmFjZT4ge1xuXHRcdHJldHVybiBQYXNzcG9ydFNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0UGFzc3BvcnRBdXRoTWlkZGxld2FyZVNlcnZpY2UoKTogUHJvbWlzZTxQYXNzcG9ydEF1dGhNaWRkbGV3YXJlU2VydmljZUludGVyZmFjZT4ge1xuXHRcdHJldHVybiBQYXNzcG9ydEF1dGhNaWRkbGV3YXJlU2VydmljZS5nZXRJbnN0YW5jZSgpO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBhc3luYyBnZXRQYXNzd29yZFNlcnZpY2UoKTogUHJvbWlzZTxQYXNzd29yZFNlcnZpY2U+IHtcblx0XHRyZXR1cm4gUGFzc3dvcmRTZXJ2aWNlLmdldEluc3RhbmNlKCk7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGFzeW5jIGdldFJlZGlzU2VydmljZSgpOiBQcm9taXNlPFJlZGlzU2VydmljZUludGVyZmFjZT4ge1xuXHRcdHJldHVybiBSZWRpc1NlcnZpY2UuZ2V0SW5zdGFuY2Uoe1xuXHRcdFx0cmVxOiBkZWZhdWx0UmVxLFxuXHRcdFx0cmVzOiBkZWZhdWx0UmVzLFxuXHRcdFx0bmV4dDogZGVmYXVsdE5leHQsXG5cdFx0XHRibGFua1JlcXVlc3QsXG5cdFx0XHRjcmVhdGVSZWRpc0NsaWVudDogY3JlYXRlQ2xpZW50LFxuXHRcdFx0dmFsaWRhdGVEZXBlbmRlbmNpZXNcblx0XHR9KTtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0UmVzb3VyY2VNYW5hZ2VyKCk6IFByb21pc2U8UmVzb3VyY2VNYW5hZ2VySW50ZXJmYWNlPiB7XG5cdFx0cmV0dXJuIFJlc291cmNlTWFuYWdlci5nZXRJbnN0YW5jZSgpO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBhc3luYyBnZXRSb290TWlkZGxld2FyZVNlcnZpY2UoKTogUHJvbWlzZTxSb290TWlkZGxld2FyZVNlcnZpY2VJbnRlcmZhY2U+IHtcblx0XHRyZXR1cm4gUm9vdE1pZGRsZXdhcmVTZXJ2aWNlLmdldEluc3RhbmNlKCk7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGFzeW5jIGdldFZhdWx0U2VydmljZSgpOiBQcm9taXNlPFZhdWx0U2VydmljZUludGVyZmFjZT4ge1xuXHRcdHJldHVybiBWYXVsdFNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0VE9UUFNlcnZpY2UoKTogUHJvbWlzZTxUT1RQU2VydmljZT4ge1xuXHRcdHJldHVybiBUT1RQU2VydmljZS5nZXRJbnN0YW5jZSgpO1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBhc3luYyBnZXRVc2VyQ29udHJvbGxlcigpOiBQcm9taXNlPFVzZXJDb250cm9sbGVySW50ZXJmYWNlPiB7XG5cdFx0cmV0dXJuIFVzZXJDb250cm9sbGVyLmdldEluc3RhbmNlKCk7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGFzeW5jIGdldFl1Ymljb09UUFNlcnZpY2UoKTogUHJvbWlzZTxZdWJpY29PVFBTZXJ2aWNlSW50ZXJmYWNlPiB7XG5cdFx0cmV0dXJuIFl1Ymljb09UUFNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcblx0fVxufVxuIl19
