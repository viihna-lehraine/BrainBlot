import { __awaiter } from 'tslib';
import { Fido2Lib } from 'fido2-lib';
import getSecrets from '../../config/secrets.js';
let fido2;
(() =>
	__awaiter(void 0, void 0, void 0, function* () {
		let secrets = yield getSecrets();
		if (!secrets) {
			throw new Error('Secrets could not be loaded');
		}
		fido2 = new Fido2Lib({
			timeout: 60000,
			rpId: secrets.RP_ID,
			rpName: secrets.RP_NAME,
			challengeSize: secrets.FIDO_CHALLENGE_SIZE,
			attestation: 'indirect', // values: 'none', 'indirect', 'direct', 'enterprise'
			cryptoParams: secrets.FIDO_CRYPTO_PARAMETERS,
			authenticatorRequireResidentKey:
				secrets.FIDO_AUTHENTICATOR_REQUIRE_RESIDENT_KEY,
			authenticatorUserVerification:
				secrets.FIDO_AUTHENTICATOR_USER_VERIFICATION
		});
	}))();
function generateU2fRegistrationOptions(user) {
	return __awaiter(this, void 0, void 0, function* () {
		let passkeyRegistrationOptions = yield fido2.attestationOptions();
		let u2fRegistrationOptions = Object.assign(
			Object.assign({}, passkeyRegistrationOptions),
			{
				user: {
					id: Buffer.from(user.id, 'utf8'), // UID from db (base64 encoded)
					name: user.email,
					displayName: user.username
				},
				pubKeyCredParams: [{ type: 'public-key', alg: -7 }],
				timeout: 60000,
				attestation: 'direct',
				authenticatorSelection: {
					authenticatorAttachment: 'platform',
					requireResidentKey: true, // Correct property name
					userVerification: 'required'
				}
			}
		);
		return u2fRegistrationOptions;
	});
}
function verifyU2fRegistration(attestation, expectedChallenge) {
	return __awaiter(this, void 0, void 0, function* () {
		let secrets = yield getSecrets();
		if (!secrets) {
			throw new Error('Secrets could not be loaded');
		}
		let u2fAttestationExpectations = {
			challenge: expectedChallenge,
			origin: secrets.RP_ORIGIN,
			factor: 'either',
			rpId: secrets.RP_ID
		};
		return yield fido2.attestationResult(
			attestation,
			u2fAttestationExpectations
		);
	});
}
function generateU2fAuthenticationOptions(user) {
	return __awaiter(this, void 0, void 0, function* () {
		let userCredentials = user.credential.map((credential) => ({
			type: 'public-key', // Explicit type
			id: Buffer.from(credential.credentialId, 'base64')
		}));
		let assertionOptions = yield fido2.assertionOptions();
		let u2fAuthenticationOptions = Object.assign(
			Object.assign({}, assertionOptions),
			{
				allowCredentials: userCredentials,
				userVerification: 'preferred',
				timeout: 60000
			}
		);
		return u2fAuthenticationOptions;
	});
}
function verifyU2fAuthentication(
	assertion,
	expectedChallenge,
	publicKey,
	previousCounter,
	id
) {
	return __awaiter(this, void 0, void 0, function* () {
		let secrets = yield getSecrets();
		if (!secrets) {
			throw new Error('Secrets could not be loaded');
		}
		let assertionExpectations = {
			challenge: expectedChallenge,
			origin: secrets.RP_ORIGIN,
			factor: 'either',
			publicKey: publicKey,
			prevCounter: previousCounter,
			userHandle: id
		};
		return yield fido2.assertionResult(assertion, assertionExpectations);
	});
}
export {
	generateU2fAuthenticationOptions,
	generateU2fRegistrationOptions,
	verifyU2fAuthentication,
	verifyU2fRegistration
};
//# sourceMappingURL=data:application/json;base64,
