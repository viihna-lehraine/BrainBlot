import { __awaiter } from 'tslib';
import bcrypt from 'bcrypt';
import crypto from 'crypto';
import setupLogger from '../../middleware/logger';
import UserMfaModelPromise from 'ts/models/UserMfa';
// Generate Backup Coedes
function generateBackupCodes(id) {
	return __awaiter(this, void 0, void 0, function* () {
		let backupCodes = [];
		for (let i = 0; i < 16; i++) {
			const code = crypto.randomBytes(4).toString('hex'); // 8-character hex code
			const hashedCode = yield bcrypt.hash(code, 10);
			backupCodes.push({ code: hashedCode, used: false });
		}
		// store backupCodes in the database associated with the user's id
		yield saveBackupCodesToDatabase(id, backupCodes);
		// return only the plain codes as strings
		return backupCodes.map((backupCode) => backupCode.code);
	});
}
// Verify a Backup Code
function verifyBackupCode(id, inputCode) {
	return __awaiter(this, void 0, void 0, function* () {
		yield UserMfaModelPromise; // await the UserMfa model when needed
		let storedCodes = yield getBackupCodesFromDatabase(id);
		if (storedCodes) {
			for (let i = 0; i < storedCodes.length; i++) {
				const match = yield bcrypt.compare(
					inputCode,
					storedCodes[i].code
				);
				if (match && !storedCodes[i].used) {
					storedCodes[i].used = true;
					yield updateBackupCodesInDatabase(id, storedCodes); // mark the code as used
					return true; // successful verification
				}
			}
		} else {
			console.error('No backup codes found for user');
			return false; // no backup codes found
		}
		return false; // verification failed
	});
}
// Save backup codes to the database
function saveBackupCodesToDatabase(id, backupCodes) {
	return __awaiter(this, void 0, void 0, function* () {
		let logger = yield setupLogger();
		let UserfMfa = yield UserMfaModelPromise; // await the UserMfa model when needed
		try {
			const user = yield UserfMfa.findByPk(id); // find user by primary key
			if (!user) throw new Error('User not found');
			// map the codes element of backupCodes to an array of strings
			const backupCodesAsStrings = backupCodes.map(
				(codeObj) => codeObj.code
			);
			// assign the array of strings to user.backupCodes
			user.backupCodes = backupCodesAsStrings;
			yield user.save();
		} catch (err) {
			logger.error('Error saving backup codes to database: ', err);
			throw new Error('Failed to save backup codes to database');
		}
	});
}
// Get backup codes from the database
function getBackupCodesFromDatabase(id) {
	return __awaiter(this, void 0, void 0, function* () {
		let logger = yield setupLogger();
		let UserMfa = yield UserMfaModelPromise; // await the User model when needed
		try {
			const user = yield UserMfa.findByPk(id); // find user by primary key
			if (!user) throw new Error('User not found');
			// assume user.backupCodes is a string[] or null, convert it to BackuopCode[] or undefined
			const backupCodes = user.backupCodes;
			if (backupCodes === null) {
				return undefined; // *DEV-NOTE* probably need to configure this later
			}
			// convert string[] to BackupCode[]
			return backupCodes.map((code) => ({ code, used: false }));
		} catch (err) {
			logger.error('Error fetching backup codes from database: ', err);
			throw new Error('Failed to retrieve backup codes from database');
		}
	});
}
// Update backup codes in the database
function updateBackupCodesInDatabase(id, backupCodes) {
	return __awaiter(this, void 0, void 0, function* () {
		let logger = yield setupLogger();
		let UserMfa = yield UserMfaModelPromise; // await the UserMfa model when needed
		try {
			const user = yield UserMfa.findByPk(id); // find user by primary key
			if (!user) throw new Error('User not found');
			// map the codes element of backupCodes to an array of strings
			let backupCodesAsStrings = backupCodes.map(
				(codeObj) => codeObj.code
			);
			// assign the array of strings to user.backupCodes
			user.backupCodes = backupCodesAsStrings;
			yield user.save();
		} catch (err) {
			logger.error('Error updating backup codes in database: ', err);
			throw new Error('Failed to update backup codes in database');
		}
	});
}
export {
	generateBackupCodes,
	getBackupCodesFromDatabase,
	saveBackupCodesToDatabase,
	verifyBackupCode
};
//# sourceMappingURL=data:application/json;base64,
