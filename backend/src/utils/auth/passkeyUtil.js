import { __awaiter } from 'tslib';
import { Fido2Lib } from 'fido2-lib';
import getSecrets from '../../config/secrets.js';
let fido2;
(() =>
	__awaiter(void 0, void 0, void 0, function* () {
		let secrets = yield getSecrets();
		if (!secrets) {
			throw new Error('Secrets could not be loaded');
		}
		fido2 = new Fido2Lib({
			timeout: 60000,
			rpId: secrets.RP_ID,
			rpName: secrets.RP_NAME,
			rpIcon: secrets.RP_ICON,
			challengeSize: secrets.FIDO_CHALLENGE_SIZE,
			attestation: 'direct',
			cryptoParams: secrets.FIDO_CRYPTO_PARAMETERS,
			authenticatorRequireResidentKey:
				secrets.FIDO_AUTHENTICATOR_REQUIRE_RESIDENT_KEY,
			authenticatorUserVerification:
				secrets.FIDO_AUTHENTICATOR_USER_VERIFICATION
		});
	}))();
function generatePasskeyRegistrationOptions(user) {
	return __awaiter(this, void 0, void 0, function* () {
		let passkeyRegistrationOptions = yield fido2.attestationOptions();
		// constructing PublicKeyCredentialCreationOptions
		let credentialCreationOptions = Object.assign(
			Object.assign({}, passkeyRegistrationOptions),
			{
				user: {
					id: Buffer.from(user.id, 'utf8'),
					name: user.email,
					displayName: user.username
				},
				authenticatorSelection: {
					authenticatorAttachment: 'platform',
					requireResidentKey: true,
					userVerification: 'required'
				}
			}
		);
		return credentialCreationOptions;
	});
}
function verifyPasskeyRegistration(attestation, expectedChallenge) {
	return __awaiter(this, void 0, void 0, function* () {
		let secrets = yield getSecrets();
		if (!secrets) {
			throw new Error('Secrets could not be loaded');
		}
		let attestationExpectations = {
			challenge: expectedChallenge,
			origin: secrets.RP_ORIGIN,
			factor: 'either', // 'factor` type should match as defined in the library
			rpId: secrets.RP_ID
		};
		return yield fido2.attestationResult(
			attestation,
			attestationExpectations
		);
	});
}
function generatePasskeyAuthenticationOptions(user) {
	return __awaiter(this, void 0, void 0, function* () {
		let userCredentials = user.credential.map((cred) => ({
			type: 'public-key', // ensures 'public-key' is strictly typed
			id: Buffer.from(cred.credentialId, 'base64'),
			transports: ['usb', 'nfc', 'ble'] // *DEV-NOTE* these are just example transports!
		}));
		let assertionOptions = Object.assign(
			Object.assign({}, yield fido2.assertionOptions()),
			{
				allowCredentials: userCredentials,
				userVerification: 'required',
				timeout: 60000
			}
		);
		return assertionOptions;
	});
}
function verifyPasskeyAuthentication(
	assertion,
	expectedChallenge,
	publicKey,
	previousCounter,
	id
) {
	return __awaiter(this, void 0, void 0, function* () {
		let secrets = yield getSecrets();
		if (!secrets) {
			throw new Error('Secrets could not be loaded');
		}
		let assertionExpectations = {
			challenge: expectedChallenge,
			origin: secrets.RP_ORIGIN,
			factor: 'either',
			publicKey: publicKey,
			prevCounter: previousCounter,
			userHandle: id
		};
		return yield fido2.assertionResult(assertion, assertionExpectations);
	});
}
export {
	generatePasskeyAuthenticationOptions,
	generatePasskeyRegistrationOptions,
	verifyPasskeyAuthentication,
	verifyPasskeyRegistration
};
//# sourceMappingURL=data:application/json;base64,
