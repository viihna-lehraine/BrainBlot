import { __awaiter } from 'tslib';
// Retrieve all entries for any model
export const getEntries = (Model) => (req, res) =>
	__awaiter(void 0, void 0, void 0, function* () {
		try {
			let entries = yield Model.findAll();
			res.status(200).json(entries);
		} catch (error) {
			console.error(error);
			res.status(500).json({
				error: `Failed to fetch entries from ${Model.name}`
			});
		}
	});
// Create a new entry for any model
export const createEntry = (Model) => (req, res) =>
	__awaiter(void 0, void 0, void 0, function* () {
		try {
			let newEntry = yield Model.create(req.body);
			res.status(201).json(newEntry);
		} catch (error) {
			console.error(error);
			res.status(400).json({
				error: `Failed to create entry in ${Model.name}`
			});
		}
	});
// Update an existing entry for any model
export const updateEntry = (Model) => (req, res) =>
	__awaiter(void 0, void 0, void 0, function* () {
		try {
			let { id } = req.params;
			let updatedEntry = yield Model.update(req.body, {
				where: { id }
			});
			if (updatedEntry[0] === 0) {
				return res
					.status(404)
					.json({ error: `${Model.name} entry not found` });
			}
			res.status(200).json({ message: `${Model.name} entry updated` });
		} catch (error) {
			console.error(error);
			res.status(400).json({
				error: `Failed to update entry in ${Model.name}`
			});
		}
		return; // unreachable code, but satisifies TypeScript
	});
// Delete an entry for any model
export const deleteEntry = (Model) => (req, res) =>
	__awaiter(void 0, void 0, void 0, function* () {
		try {
			let { id } = req.params;
			let deleted = yield Model.destroy({
				where: { id }
			});
			if (!deleted) {
				return res
					.status(404)
					.json({ error: `${Model.name} entry not found` });
			}
			res.status(200).json({ message: `${Model.name} entry deleted` });
		} catch (error) {
			console.error(error);
			res.status(500).json({
				error: `Failed to delete entry from ${Model.name}`
			});
		}
		return; // unreachable code, but satisifies TypeScript
	});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWxDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdHMvY29udHJvbGxlcnMvbW9kZWxDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFRQSxxQ0FBcUM7QUFDckMsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUN0QixDQUFzQixLQUFpRCxFQUFFLEVBQUUsQ0FDM0UsQ0FBTyxHQUFZLEVBQUUsR0FBYSxFQUFFLEVBQUU7SUFDckMsSUFBSSxDQUFDO1FBQ0osSUFBSSxPQUFPLEdBQUcsTUFBTSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDcEMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNwQixLQUFLLEVBQUUsZ0NBQWdDLEtBQUssQ0FBQyxJQUFJLEVBQUU7U0FDbkQsQ0FBQyxDQUFDO0lBQ0osQ0FBQztBQUNGLENBQUMsQ0FBQSxDQUFDO0FBRUgsbUNBQW1DO0FBQ25DLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FDdkIsQ0FBc0IsS0FHckIsRUFBRSxFQUFFLENBQ0wsQ0FBTyxHQUFZLEVBQUUsR0FBYSxFQUFFLEVBQUU7SUFDckMsSUFBSSxDQUFDO1FBQ0osSUFBSSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3BCLEtBQUssRUFBRSw2QkFBNkIsS0FBSyxDQUFDLElBQUksRUFBRTtTQUNoRCxDQUFDLENBQUM7SUFDSixDQUFDO0FBQ0YsQ0FBQyxDQUFBLENBQUM7QUFFSCx5Q0FBeUM7QUFDekMsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUN2QixDQUFzQixLQU1yQixFQUFFLEVBQUUsQ0FDTCxDQUFPLEdBQVksRUFBRSxHQUFhLEVBQUUsRUFBRTtJQUNyQyxJQUFJLENBQUM7UUFDSixJQUFJLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztRQUN4QixJQUFJLFlBQVksR0FBRyxNQUFNLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRTtZQUMvQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEVBQXFCO1NBQ2hDLENBQUMsQ0FBQztRQUNILElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQzNCLE9BQU8sR0FBRztpQkFDUixNQUFNLENBQUMsR0FBRyxDQUFDO2lCQUNYLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLGtCQUFrQixFQUFFLENBQUMsQ0FBQztRQUNwRCxDQUFDO1FBQ0QsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNwQixLQUFLLEVBQUUsNkJBQTZCLEtBQUssQ0FBQyxJQUFJLEVBQUU7U0FDaEQsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELE9BQU8sQ0FBQyw4Q0FBOEM7QUFDdkQsQ0FBQyxDQUFBLENBQUM7QUFFSCxnQ0FBZ0M7QUFDaEMsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUN2QixDQUFzQixLQUdyQixFQUFFLEVBQUUsQ0FDTCxDQUFPLEdBQVksRUFBRSxHQUFhLEVBQUUsRUFBRTtJQUNyQyxJQUFJLENBQUM7UUFDSixJQUFJLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztRQUN4QixJQUFJLE9BQU8sR0FBRyxNQUFNLEtBQUssQ0FBQyxPQUFPLENBQUM7WUFDakMsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFxQjtTQUNoQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDZCxPQUFPLEdBQUc7aUJBQ1IsTUFBTSxDQUFDLEdBQUcsQ0FBQztpQkFDWCxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxrQkFBa0IsRUFBRSxDQUFDLENBQUM7UUFDcEQsQ0FBQztRQUNELEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDcEIsS0FBSyxFQUFFLCtCQUErQixLQUFLLENBQUMsSUFBSSxFQUFFO1NBQ2xELENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxPQUFPLENBQUMsOENBQThDO0FBQ3ZELENBQUMsQ0FBQSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IE1vZGVsLCBXaGVyZU9wdGlvbnMgfSBmcm9tICdzZXF1ZWxpemUnO1xuXG4vLyBEZWZpbmUgYSBnZW5lcmljIHR5cGUgZm9yIG1vZGVsc1xuaW50ZXJmYWNlIE1vZGVsVHlwZSBleHRlbmRzIE1vZGVsIHtcblx0aWQ/OiBudW1iZXIgfCBzdHJpbmc7XG59XG5cbi8vIFJldHJpZXZlIGFsbCBlbnRyaWVzIGZvciBhbnkgbW9kZWxcbmV4cG9ydCBjb25zdCBnZXRFbnRyaWVzID1cblx0PFQgZXh0ZW5kcyBNb2RlbFR5cGU+KE1vZGVsOiB7IG5ldyAoKTogVDsgZmluZEFsbDogKCkgPT4gUHJvbWlzZTxUW10+IH0pID0+XG5cdGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcblx0XHR0cnkge1xuXHRcdFx0bGV0IGVudHJpZXMgPSBhd2FpdCBNb2RlbC5maW5kQWxsKCk7XG5cdFx0XHRyZXMuc3RhdHVzKDIwMCkuanNvbihlbnRyaWVzKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0Y29uc29sZS5lcnJvcihlcnJvcik7XG5cdFx0XHRyZXMuc3RhdHVzKDUwMCkuanNvbih7XG5cdFx0XHRcdGVycm9yOiBgRmFpbGVkIHRvIGZldGNoIGVudHJpZXMgZnJvbSAke01vZGVsLm5hbWV9YFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9O1xuXG4vLyBDcmVhdGUgYSBuZXcgZW50cnkgZm9yIGFueSBtb2RlbFxuZXhwb3J0IGNvbnN0IGNyZWF0ZUVudHJ5ID1cblx0PFQgZXh0ZW5kcyBNb2RlbFR5cGU+KE1vZGVsOiB7XG5cdFx0bmV3ICgpOiBUO1xuXHRcdGNyZWF0ZTogKHZhbHVlczogb2JqZWN0KSA9PiBQcm9taXNlPFQ+O1xuXHR9KSA9PlxuXHRhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XG5cdFx0dHJ5IHtcblx0XHRcdGxldCBuZXdFbnRyeSA9IGF3YWl0IE1vZGVsLmNyZWF0ZShyZXEuYm9keSk7XG5cdFx0XHRyZXMuc3RhdHVzKDIwMSkuanNvbihuZXdFbnRyeSk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuXHRcdFx0cmVzLnN0YXR1cyg0MDApLmpzb24oe1xuXHRcdFx0XHRlcnJvcjogYEZhaWxlZCB0byBjcmVhdGUgZW50cnkgaW4gJHtNb2RlbC5uYW1lfWBcblx0XHRcdH0pO1xuXHRcdH1cblx0fTtcblxuLy8gVXBkYXRlIGFuIGV4aXN0aW5nIGVudHJ5IGZvciBhbnkgbW9kZWxcbmV4cG9ydCBjb25zdCB1cGRhdGVFbnRyeSA9XG5cdDxUIGV4dGVuZHMgTW9kZWxUeXBlPihNb2RlbDoge1xuXHRcdG5ldyAoKTogVDtcblx0XHR1cGRhdGU6IChcblx0XHRcdHZhbHVlczogb2JqZWN0LFxuXHRcdFx0b3B0aW9uczogeyB3aGVyZTogV2hlcmVPcHRpb25zPFQ+IH1cblx0XHQpID0+IFByb21pc2U8W251bWJlciwgVFtdXT47XG5cdH0pID0+XG5cdGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcblx0XHR0cnkge1xuXHRcdFx0bGV0IHsgaWQgfSA9IHJlcS5wYXJhbXM7XG5cdFx0XHRsZXQgdXBkYXRlZEVudHJ5ID0gYXdhaXQgTW9kZWwudXBkYXRlKHJlcS5ib2R5LCB7XG5cdFx0XHRcdHdoZXJlOiB7IGlkIH0gYXMgV2hlcmVPcHRpb25zPFQ+XG5cdFx0XHR9KTtcblx0XHRcdGlmICh1cGRhdGVkRW50cnlbMF0gPT09IDApIHtcblx0XHRcdFx0cmV0dXJuIHJlc1xuXHRcdFx0XHRcdC5zdGF0dXMoNDA0KVxuXHRcdFx0XHRcdC5qc29uKHsgZXJyb3I6IGAke01vZGVsLm5hbWV9IGVudHJ5IG5vdCBmb3VuZGAgfSk7XG5cdFx0XHR9XG5cdFx0XHRyZXMuc3RhdHVzKDIwMCkuanNvbih7IG1lc3NhZ2U6IGAke01vZGVsLm5hbWV9IGVudHJ5IHVwZGF0ZWRgIH0pO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKGVycm9yKTtcblx0XHRcdHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcblx0XHRcdFx0ZXJyb3I6IGBGYWlsZWQgdG8gdXBkYXRlIGVudHJ5IGluICR7TW9kZWwubmFtZX1gXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm47IC8vIHVucmVhY2hhYmxlIGNvZGUsIGJ1dCBzYXRpc2lmaWVzIFR5cGVTY3JpcHRcblx0fTtcblxuLy8gRGVsZXRlIGFuIGVudHJ5IGZvciBhbnkgbW9kZWxcbmV4cG9ydCBjb25zdCBkZWxldGVFbnRyeSA9XG5cdDxUIGV4dGVuZHMgTW9kZWxUeXBlPihNb2RlbDoge1xuXHRcdG5ldyAoKTogVDtcblx0XHRkZXN0cm95OiAob3B0aW9uczogeyB3aGVyZTogV2hlcmVPcHRpb25zPFQ+IH0pID0+IFByb21pc2U8bnVtYmVyPjtcblx0fSkgPT5cblx0YXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuXHRcdHRyeSB7XG5cdFx0XHRsZXQgeyBpZCB9ID0gcmVxLnBhcmFtcztcblx0XHRcdGxldCBkZWxldGVkID0gYXdhaXQgTW9kZWwuZGVzdHJveSh7XG5cdFx0XHRcdHdoZXJlOiB7IGlkIH0gYXMgV2hlcmVPcHRpb25zPFQ+XG5cdFx0XHR9KTtcblx0XHRcdGlmICghZGVsZXRlZCkge1xuXHRcdFx0XHRyZXR1cm4gcmVzXG5cdFx0XHRcdFx0LnN0YXR1cyg0MDQpXG5cdFx0XHRcdFx0Lmpzb24oeyBlcnJvcjogYCR7TW9kZWwubmFtZX0gZW50cnkgbm90IGZvdW5kYCB9KTtcblx0XHRcdH1cblx0XHRcdHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgbWVzc2FnZTogYCR7TW9kZWwubmFtZX0gZW50cnkgZGVsZXRlZGAgfSk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuXHRcdFx0cmVzLnN0YXR1cyg1MDApLmpzb24oe1xuXHRcdFx0XHRlcnJvcjogYEZhaWxlZCB0byBkZWxldGUgZW50cnkgZnJvbSAke01vZGVsLm5hbWV9YFxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuOyAvLyB1bnJlYWNoYWJsZSBjb2RlLCBidXQgc2F0aXNpZmllcyBUeXBlU2NyaXB0XG5cdH07XG4iXX0=
