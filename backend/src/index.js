import initializeDatabase from './config/db';
import featureFlags from './config/featureFlags';
import loadEnv, { __dirname } from './config/loadEnv';
import startServer from './middleware/http';
import { createTransporter, getTransporter } from './config/mailer';
import multerConfiguredUpload from './config/multer';
import configurePassport from './config/passport';
import redisClient from './config/redis';
import setupSecurityHeaders from './middleware/securityHeaders';
import slowdownMiddleware from './middleware/slowdown';
import { csrfMiddleware } from './middleware/csrf';
import sops from './config/sops';
import {
	addToBlacklist,
	initializeIpBlacklist,
	ipBlacklistMiddleware,
	loadBlacklist,
	removeFromBlacklist
} from './middleware/ipBlacklist';
import { rateLimitMiddleware } from './middleware/rateLimit';
import {
	registrationValidationRules,
	validateEntry
} from './middleware/validator';
import {
	generateBackupCodes,
	getBackupCodesFromDatabase,
	saveBackupCodesToDatabase,
	verifyBackupCode
} from './utils/auth/backupCodeUtil';
import {
	generateEmail2FACode,
	verifyEmail2FACode
} from './utils/auth/email2FAUtil';
import {
	generateU2fAuthenticationOptions,
	generateU2fRegistrationOptions,
	verifyU2fAuthentication,
	verifyU2fRegistration
} from './utils/auth/fido2Util';
import { verifyJwToken } from './utils/auth/jwtUtil';
import {
	generatePasskeyAuthenticationOptions,
	generatePasskeyRegistrationOptions,
	verifyPasskeyAuthentication,
	verifyPasskeyRegistration
} from './utils/auth/passkeyUtil';
import {
	generateYubicoOtpOptions,
	validateYubicoOTP
} from './utils/auth/yubicoOtpUtil';
import {
	generateTOTPSecret,
	generateTOTPToken,
	verifyTOTPToken,
	generateQRCode
} from './utils/auth/totpUtil';
import generate2FactorEmailTemplate from './utils/emailTemplates/2FactorEmailTemplate';
import generate2FAEnabledEmailTemplate from './utils/emailTemplates/2FAEnabledEmailTemplate';
import generateAccountDeletedConfirmationEmailTemplate from './utils/emailTemplates/accountDeletedConfirmationEmailTemplate';
import generateAccountDeletionStartedEmailTemplate from './utils/emailTemplates/accountDeletionStartedEmailTemplate';
import generateConfirmationEmailTemplate from './utils/emailTemplates/confirmationEmailTemplate';
import loadTestRoutes from './utils/test/loadTestRoutes';
import { parseBoolean } from './utils/parseBoolean';
export {
	addToBlacklist,
	configurePassport,
	createTransporter,
	csrfMiddleware,
	decryptDataFiles,
	featureFlags,
	generate2FactorEmailTemplate,
	generate2FAEnabledEmailTemplate,
	generateAccountDeletedConfirmationEmailTemplate,
	generateAccountDeletionStartedEmailTemplate,
	generateBackupCodes,
	generateConfirmationEmailTemplate,
	generateEmail2FACode,
	generatePasskeyAuthenticationOptions,
	generatePasskeyRegistrationOptions,
	generateQRCode,
	generateU2fAuthenticationOptions,
	generateU2fRegistrationOptions,
	generateTOTPSecret,
	generateTOTPToken,
	generateYubicoOtpOptions,
	getBackupCodesFromDatabase,
	getSSLKeys,
	getTransporter,
	ipBlacklistMiddleware,
	initializeDatabase,
	initializeIpBlacklist,
	loadBlacklist,
	loadEnv,
	loadTestRoutes,
	multerConfiguredUpload,
	parseBoolean,
	rateLimitMiddleware,
	redisClient,
	registrationValidationRules,
	removeFromBlacklist,
	saveBackupCodesToDatabase,
	setupSecurityHeaders,
	slowdownMiddleware,
	startServer,
	validateEntry,
	validateYubicoOTP,
	verifyBackupCode,
	verifyEmail2FACode,
	verifyJwToken,
	verifyPasskeyAuthentication,
	verifyPasskeyRegistration,
	verifyTOTPToken,
	verifyU2fAuthentication,
	verifyU2fRegistration,
	__dirname
};
const { decryptDataFiles, getSSLKeys } = sops;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi90cy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLGtCQUFrQixNQUFNLGFBQWEsQ0FBQztBQUM3QyxPQUFPLFlBQVksTUFBTSx1QkFBdUIsQ0FBQztBQUNqRCxPQUFPLE9BQU8sRUFBRSxFQUFFLFNBQVMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3RELE9BQU8sV0FBVyxNQUFNLG1CQUFtQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRSxPQUFPLHNCQUFzQixNQUFNLGlCQUFpQixDQUFDO0FBQ3JELE9BQU8saUJBQWlCLE1BQU0sbUJBQW1CLENBQUM7QUFDbEQsT0FBTyxXQUFXLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxvQkFBb0IsTUFBTSw4QkFBOEIsQ0FBQztBQUNoRSxPQUFPLGtCQUFrQixNQUFNLHVCQUF1QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLElBQUksTUFBTSxlQUFlLENBQUM7QUFDakMsT0FBTyxFQUNOLGNBQWMsRUFDZCxxQkFBcUIsRUFDckIscUJBQXFCLEVBQ3JCLGFBQWEsRUFDYixtQkFBbUIsRUFDbkIsTUFBTSwwQkFBMEIsQ0FBQztBQUNsQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM3RCxPQUFPLEVBQ04sMkJBQTJCLEVBQzNCLGFBQWEsRUFDYixNQUFNLHdCQUF3QixDQUFDO0FBQ2hDLE9BQU8sRUFDTixtQkFBbUIsRUFDbkIsMEJBQTBCLEVBQzFCLHlCQUF5QixFQUN6QixnQkFBZ0IsRUFDaEIsTUFBTSw2QkFBNkIsQ0FBQztBQUNyQyxPQUFPLEVBQ04sb0JBQW9CLEVBQ3BCLGtCQUFrQixFQUNsQixNQUFNLDJCQUEyQixDQUFDO0FBQ25DLE9BQU8sRUFDTixnQ0FBZ0MsRUFDaEMsOEJBQThCLEVBQzlCLHVCQUF1QixFQUN2QixxQkFBcUIsRUFDckIsTUFBTSx3QkFBd0IsQ0FBQztBQUNoQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDckQsT0FBTyxFQUNOLG9DQUFvQyxFQUNwQyxrQ0FBa0MsRUFDbEMsMkJBQTJCLEVBQzNCLHlCQUF5QixFQUN6QixNQUFNLDBCQUEwQixDQUFDO0FBQ2xDLE9BQU8sRUFDTix3QkFBd0IsRUFDeEIsaUJBQWlCLEVBQ2pCLE1BQU0sNEJBQTRCLENBQUM7QUFDcEMsT0FBTyxFQUNOLGtCQUFrQixFQUNsQixpQkFBaUIsRUFDakIsZUFBZSxFQUNmLGNBQWMsRUFDZCxNQUFNLHVCQUF1QixDQUFDO0FBQy9CLE9BQU8sNEJBQTRCLE1BQU0sNkNBQTZDLENBQUM7QUFDdkYsT0FBTywrQkFBK0IsTUFBTSxnREFBZ0QsQ0FBQztBQUM3RixPQUFPLCtDQUErQyxNQUFNLGdFQUFnRSxDQUFDO0FBQzdILE9BQU8sMkNBQTJDLE1BQU0sNERBQTRELENBQUM7QUFDckgsT0FBTyxpQ0FBaUMsTUFBTSxrREFBa0QsQ0FBQztBQUNqRyxPQUFPLGNBQWMsTUFBTSw2QkFBNkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFcEQsT0FBTyxFQUNOLGNBQWMsRUFDZCxpQkFBaUIsRUFDakIsaUJBQWlCLEVBQ2pCLGNBQWMsRUFDZCxnQkFBZ0IsRUFDaEIsWUFBWSxFQUNaLDRCQUE0QixFQUM1QiwrQkFBK0IsRUFDL0IsK0NBQStDLEVBQy9DLDJDQUEyQyxFQUMzQyxtQkFBbUIsRUFDbkIsaUNBQWlDLEVBQ2pDLG9CQUFvQixFQUNwQixvQ0FBb0MsRUFDcEMsa0NBQWtDLEVBQ2xDLGNBQWMsRUFDZCxnQ0FBZ0MsRUFDaEMsOEJBQThCLEVBQzlCLGtCQUFrQixFQUNsQixpQkFBaUIsRUFDakIsd0JBQXdCLEVBQ3hCLDBCQUEwQixFQUMxQixVQUFVLEVBQ1YsY0FBYyxFQUNkLHFCQUFxQixFQUNyQixrQkFBa0IsRUFDbEIscUJBQXFCLEVBQ3JCLGFBQWEsRUFDYixPQUFPLEVBQ1AsY0FBYyxFQUNkLHNCQUFzQixFQUN0QixZQUFZLEVBQ1osbUJBQW1CLEVBQ25CLFdBQVcsRUFDWCwyQkFBMkIsRUFDM0IsbUJBQW1CLEVBQ25CLHlCQUF5QixFQUN6QixvQkFBb0IsRUFDcEIsa0JBQWtCLEVBQ2xCLFdBQVcsRUFDWCxhQUFhLEVBQ2IsaUJBQWlCLEVBQ2pCLGdCQUFnQixFQUNoQixrQkFBa0IsRUFDbEIsYUFBYSxFQUNiLDJCQUEyQixFQUMzQix5QkFBeUIsRUFDekIsZUFBZSxFQUNmLHVCQUF1QixFQUN2QixxQkFBcUIsRUFDckIsU0FBUyxFQUNULENBQUM7QUFFRixNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxFQUFFLEdBQUcsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGluaXRpYWxpemVEYXRhYmFzZSBmcm9tICcuL2NvbmZpZy9kYic7XG5pbXBvcnQgZmVhdHVyZUZsYWdzIGZyb20gJy4vY29uZmlnL2ZlYXR1cmVGbGFncyc7XG5pbXBvcnQgbG9hZEVudiwgeyBfX2Rpcm5hbWUgfSBmcm9tICcuL2NvbmZpZy9sb2FkRW52JztcbmltcG9ydCBzdGFydFNlcnZlciBmcm9tICcuL21pZGRsZXdhcmUvaHR0cCc7XG5pbXBvcnQgeyBjcmVhdGVUcmFuc3BvcnRlciwgZ2V0VHJhbnNwb3J0ZXIgfSBmcm9tICcuL2NvbmZpZy9tYWlsZXInO1xuaW1wb3J0IG11bHRlckNvbmZpZ3VyZWRVcGxvYWQgZnJvbSAnLi9jb25maWcvbXVsdGVyJztcbmltcG9ydCBjb25maWd1cmVQYXNzcG9ydCBmcm9tICcuL2NvbmZpZy9wYXNzcG9ydCc7XG5pbXBvcnQgcmVkaXNDbGllbnQgZnJvbSAnLi9jb25maWcvcmVkaXMnO1xuaW1wb3J0IHNldHVwU2VjdXJpdHlIZWFkZXJzIGZyb20gJy4vbWlkZGxld2FyZS9zZWN1cml0eUhlYWRlcnMnO1xuaW1wb3J0IHNsb3dkb3duTWlkZGxld2FyZSBmcm9tICcuL21pZGRsZXdhcmUvc2xvd2Rvd24nO1xuaW1wb3J0IHsgY3NyZk1pZGRsZXdhcmUgfSBmcm9tICcuL21pZGRsZXdhcmUvY3NyZic7XG5pbXBvcnQgc29wcyBmcm9tICcuL2NvbmZpZy9zb3BzJztcbmltcG9ydCB7XG5cdGFkZFRvQmxhY2tsaXN0LFxuXHRpbml0aWFsaXplSXBCbGFja2xpc3QsXG5cdGlwQmxhY2tsaXN0TWlkZGxld2FyZSxcblx0bG9hZEJsYWNrbGlzdCxcblx0cmVtb3ZlRnJvbUJsYWNrbGlzdFxufSBmcm9tICcuL21pZGRsZXdhcmUvaXBCbGFja2xpc3QnO1xuaW1wb3J0IHsgcmF0ZUxpbWl0TWlkZGxld2FyZSB9IGZyb20gJy4vbWlkZGxld2FyZS9yYXRlTGltaXQnO1xuaW1wb3J0IHtcblx0cmVnaXN0cmF0aW9uVmFsaWRhdGlvblJ1bGVzLFxuXHR2YWxpZGF0ZUVudHJ5XG59IGZyb20gJy4vbWlkZGxld2FyZS92YWxpZGF0b3InO1xuaW1wb3J0IHtcblx0Z2VuZXJhdGVCYWNrdXBDb2Rlcyxcblx0Z2V0QmFja3VwQ29kZXNGcm9tRGF0YWJhc2UsXG5cdHNhdmVCYWNrdXBDb2Rlc1RvRGF0YWJhc2UsXG5cdHZlcmlmeUJhY2t1cENvZGVcbn0gZnJvbSAnLi91dGlscy9hdXRoL2JhY2t1cENvZGVVdGlsJztcbmltcG9ydCB7XG5cdGdlbmVyYXRlRW1haWwyRkFDb2RlLFxuXHR2ZXJpZnlFbWFpbDJGQUNvZGVcbn0gZnJvbSAnLi91dGlscy9hdXRoL2VtYWlsMkZBVXRpbCc7XG5pbXBvcnQge1xuXHRnZW5lcmF0ZVUyZkF1dGhlbnRpY2F0aW9uT3B0aW9ucyxcblx0Z2VuZXJhdGVVMmZSZWdpc3RyYXRpb25PcHRpb25zLFxuXHR2ZXJpZnlVMmZBdXRoZW50aWNhdGlvbixcblx0dmVyaWZ5VTJmUmVnaXN0cmF0aW9uXG59IGZyb20gJy4vdXRpbHMvYXV0aC9maWRvMlV0aWwnO1xuaW1wb3J0IHsgdmVyaWZ5SndUb2tlbiB9IGZyb20gJy4vdXRpbHMvYXV0aC9qd3RVdGlsJztcbmltcG9ydCB7XG5cdGdlbmVyYXRlUGFzc2tleUF1dGhlbnRpY2F0aW9uT3B0aW9ucyxcblx0Z2VuZXJhdGVQYXNza2V5UmVnaXN0cmF0aW9uT3B0aW9ucyxcblx0dmVyaWZ5UGFzc2tleUF1dGhlbnRpY2F0aW9uLFxuXHR2ZXJpZnlQYXNza2V5UmVnaXN0cmF0aW9uXG59IGZyb20gJy4vdXRpbHMvYXV0aC9wYXNza2V5VXRpbCc7XG5pbXBvcnQge1xuXHRnZW5lcmF0ZVl1Ymljb090cE9wdGlvbnMsXG5cdHZhbGlkYXRlWXViaWNvT1RQXG59IGZyb20gJy4vdXRpbHMvYXV0aC95dWJpY29PdHBVdGlsJztcbmltcG9ydCB7XG5cdGdlbmVyYXRlVE9UUFNlY3JldCxcblx0Z2VuZXJhdGVUT1RQVG9rZW4sXG5cdHZlcmlmeVRPVFBUb2tlbixcblx0Z2VuZXJhdGVRUkNvZGVcbn0gZnJvbSAnLi91dGlscy9hdXRoL3RvdHBVdGlsJztcbmltcG9ydCBnZW5lcmF0ZTJGYWN0b3JFbWFpbFRlbXBsYXRlIGZyb20gJy4vdXRpbHMvZW1haWxUZW1wbGF0ZXMvMkZhY3RvckVtYWlsVGVtcGxhdGUnO1xuaW1wb3J0IGdlbmVyYXRlMkZBRW5hYmxlZEVtYWlsVGVtcGxhdGUgZnJvbSAnLi91dGlscy9lbWFpbFRlbXBsYXRlcy8yRkFFbmFibGVkRW1haWxUZW1wbGF0ZSc7XG5pbXBvcnQgZ2VuZXJhdGVBY2NvdW50RGVsZXRlZENvbmZpcm1hdGlvbkVtYWlsVGVtcGxhdGUgZnJvbSAnLi91dGlscy9lbWFpbFRlbXBsYXRlcy9hY2NvdW50RGVsZXRlZENvbmZpcm1hdGlvbkVtYWlsVGVtcGxhdGUnO1xuaW1wb3J0IGdlbmVyYXRlQWNjb3VudERlbGV0aW9uU3RhcnRlZEVtYWlsVGVtcGxhdGUgZnJvbSAnLi91dGlscy9lbWFpbFRlbXBsYXRlcy9hY2NvdW50RGVsZXRpb25TdGFydGVkRW1haWxUZW1wbGF0ZSc7XG5pbXBvcnQgZ2VuZXJhdGVDb25maXJtYXRpb25FbWFpbFRlbXBsYXRlIGZyb20gJy4vdXRpbHMvZW1haWxUZW1wbGF0ZXMvY29uZmlybWF0aW9uRW1haWxUZW1wbGF0ZSc7XG5pbXBvcnQgbG9hZFRlc3RSb3V0ZXMgZnJvbSAnLi91dGlscy90ZXN0L2xvYWRUZXN0Um91dGVzJztcbmltcG9ydCB7IHBhcnNlQm9vbGVhbiB9IGZyb20gJy4vdXRpbHMvcGFyc2VCb29sZWFuJztcblxuZXhwb3J0IHtcblx0YWRkVG9CbGFja2xpc3QsXG5cdGNvbmZpZ3VyZVBhc3Nwb3J0LFxuXHRjcmVhdGVUcmFuc3BvcnRlcixcblx0Y3NyZk1pZGRsZXdhcmUsXG5cdGRlY3J5cHREYXRhRmlsZXMsXG5cdGZlYXR1cmVGbGFncyxcblx0Z2VuZXJhdGUyRmFjdG9yRW1haWxUZW1wbGF0ZSxcblx0Z2VuZXJhdGUyRkFFbmFibGVkRW1haWxUZW1wbGF0ZSxcblx0Z2VuZXJhdGVBY2NvdW50RGVsZXRlZENvbmZpcm1hdGlvbkVtYWlsVGVtcGxhdGUsXG5cdGdlbmVyYXRlQWNjb3VudERlbGV0aW9uU3RhcnRlZEVtYWlsVGVtcGxhdGUsXG5cdGdlbmVyYXRlQmFja3VwQ29kZXMsXG5cdGdlbmVyYXRlQ29uZmlybWF0aW9uRW1haWxUZW1wbGF0ZSxcblx0Z2VuZXJhdGVFbWFpbDJGQUNvZGUsXG5cdGdlbmVyYXRlUGFzc2tleUF1dGhlbnRpY2F0aW9uT3B0aW9ucyxcblx0Z2VuZXJhdGVQYXNza2V5UmVnaXN0cmF0aW9uT3B0aW9ucyxcblx0Z2VuZXJhdGVRUkNvZGUsXG5cdGdlbmVyYXRlVTJmQXV0aGVudGljYXRpb25PcHRpb25zLFxuXHRnZW5lcmF0ZVUyZlJlZ2lzdHJhdGlvbk9wdGlvbnMsXG5cdGdlbmVyYXRlVE9UUFNlY3JldCxcblx0Z2VuZXJhdGVUT1RQVG9rZW4sXG5cdGdlbmVyYXRlWXViaWNvT3RwT3B0aW9ucyxcblx0Z2V0QmFja3VwQ29kZXNGcm9tRGF0YWJhc2UsXG5cdGdldFNTTEtleXMsXG5cdGdldFRyYW5zcG9ydGVyLFxuXHRpcEJsYWNrbGlzdE1pZGRsZXdhcmUsXG5cdGluaXRpYWxpemVEYXRhYmFzZSxcblx0aW5pdGlhbGl6ZUlwQmxhY2tsaXN0LFxuXHRsb2FkQmxhY2tsaXN0LFxuXHRsb2FkRW52LFxuXHRsb2FkVGVzdFJvdXRlcyxcblx0bXVsdGVyQ29uZmlndXJlZFVwbG9hZCxcblx0cGFyc2VCb29sZWFuLFxuXHRyYXRlTGltaXRNaWRkbGV3YXJlLFxuXHRyZWRpc0NsaWVudCxcblx0cmVnaXN0cmF0aW9uVmFsaWRhdGlvblJ1bGVzLFxuXHRyZW1vdmVGcm9tQmxhY2tsaXN0LFxuXHRzYXZlQmFja3VwQ29kZXNUb0RhdGFiYXNlLFxuXHRzZXR1cFNlY3VyaXR5SGVhZGVycyxcblx0c2xvd2Rvd25NaWRkbGV3YXJlLFxuXHRzdGFydFNlcnZlcixcblx0dmFsaWRhdGVFbnRyeSxcblx0dmFsaWRhdGVZdWJpY29PVFAsXG5cdHZlcmlmeUJhY2t1cENvZGUsXG5cdHZlcmlmeUVtYWlsMkZBQ29kZSxcblx0dmVyaWZ5SndUb2tlbixcblx0dmVyaWZ5UGFzc2tleUF1dGhlbnRpY2F0aW9uLFxuXHR2ZXJpZnlQYXNza2V5UmVnaXN0cmF0aW9uLFxuXHR2ZXJpZnlUT1RQVG9rZW4sXG5cdHZlcmlmeVUyZkF1dGhlbnRpY2F0aW9uLFxuXHR2ZXJpZnlVMmZSZWdpc3RyYXRpb24sXG5cdF9fZGlybmFtZVxufTtcblxuY29uc3QgeyBkZWNyeXB0RGF0YUZpbGVzLCBnZXRTU0xLZXlzIH0gPSBzb3BzO1xuIl19
