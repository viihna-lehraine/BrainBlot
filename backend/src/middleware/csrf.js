import csrf from 'csrf';
// Create a new CSRF protection instance
const csrfProtection = new csrf({ secretLength: 32 });
// Middleware to add CSRF token to the respone and validate incoming CSRF tokens
export function csrfMiddleware(req, res, next) {
	try {
		// Generate and set a CSRFm token in the response locals
		res.locals.csrfToken = csrfProtection.create(req.sessionID || ''); // Generate CSRF token based on session ID or some unique identifier
		// If the request method is not GET, validate the CSRF token
		if (req.method !== 'GET') {
			const token = req.body.csrfToken || req.headers['x-xsrf-token'];
			if (!token || !csrfProtection.verify(req.sessionID || '', token)) {
				return res.status(403).send('Invalid CSRF token');
			}
		}
		next(); // if validation passes, proceed to the next middleware
	} catch (err) {
		next(err); // pass any errors to the error handling middleware
	}
	return;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3NyZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3RzL21pZGRsZXdhcmUvY3NyZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFHeEIsd0NBQXdDO0FBQ3hDLE1BQU0sY0FBYyxHQUFHLElBQUksSUFBSSxDQUFDLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFFdEQsZ0ZBQWdGO0FBQ2hGLE1BQU0sVUFBVSxjQUFjLENBQzdCLEdBQVksRUFDWixHQUFhLEVBQ2IsSUFBa0I7SUFFbEIsSUFBSSxDQUFDO1FBQ0osd0RBQXdEO1FBQ3hELEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLG9FQUFvRTtRQUV2SSw0REFBNEQ7UUFDNUQsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRSxDQUFDO1lBQzFCLE1BQU0sS0FBSyxHQUNWLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFLLEdBQUcsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFZLENBQUM7WUFDL0QsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsSUFBSSxFQUFFLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDbEUsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBQ25ELENBQUM7UUFDRixDQUFDO1FBRUQsSUFBSSxFQUFFLENBQUMsQ0FBQyx1REFBdUQ7SUFDaEUsQ0FBQztJQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDZCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxtREFBbUQ7SUFDL0QsQ0FBQztJQUVELE9BQU87QUFDUixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNzcmYgZnJvbSAnY3NyZic7XG5pbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSwgTmV4dEZ1bmN0aW9uIH0gZnJvbSAnZXhwcmVzcyc7XG5cbi8vIENyZWF0ZSBhIG5ldyBDU1JGIHByb3RlY3Rpb24gaW5zdGFuY2VcbmNvbnN0IGNzcmZQcm90ZWN0aW9uID0gbmV3IGNzcmYoeyBzZWNyZXRMZW5ndGg6IDMyIH0pO1xuXG4vLyBNaWRkbGV3YXJlIHRvIGFkZCBDU1JGIHRva2VuIHRvIHRoZSByZXNwb25lIGFuZCB2YWxpZGF0ZSBpbmNvbWluZyBDU1JGIHRva2Vuc1xuZXhwb3J0IGZ1bmN0aW9uIGNzcmZNaWRkbGV3YXJlKFxuXHRyZXE6IFJlcXVlc3QsXG5cdHJlczogUmVzcG9uc2UsXG5cdG5leHQ6IE5leHRGdW5jdGlvblxuKSB7XG5cdHRyeSB7XG5cdFx0Ly8gR2VuZXJhdGUgYW5kIHNldCBhIENTUkZtIHRva2VuIGluIHRoZSByZXNwb25zZSBsb2NhbHNcblx0XHRyZXMubG9jYWxzLmNzcmZUb2tlbiA9IGNzcmZQcm90ZWN0aW9uLmNyZWF0ZShyZXEuc2Vzc2lvbklEIHx8ICcnKTsgLy8gR2VuZXJhdGUgQ1NSRiB0b2tlbiBiYXNlZCBvbiBzZXNzaW9uIElEIG9yIHNvbWUgdW5pcXVlIGlkZW50aWZpZXJcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IG1ldGhvZCBpcyBub3QgR0VULCB2YWxpZGF0ZSB0aGUgQ1NSRiB0b2tlblxuXHRcdGlmIChyZXEubWV0aG9kICE9PSAnR0VUJykge1xuXHRcdFx0Y29uc3QgdG9rZW4gPVxuXHRcdFx0XHRyZXEuYm9keS5jc3JmVG9rZW4gfHwgKHJlcS5oZWFkZXJzWyd4LXhzcmYtdG9rZW4nXSBhcyBzdHJpbmcpO1xuXHRcdFx0aWYgKCF0b2tlbiB8fCAhY3NyZlByb3RlY3Rpb24udmVyaWZ5KHJlcS5zZXNzaW9uSUQgfHwgJycsIHRva2VuKSkge1xuXHRcdFx0XHRyZXR1cm4gcmVzLnN0YXR1cyg0MDMpLnNlbmQoJ0ludmFsaWQgQ1NSRiB0b2tlbicpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG5leHQoKTsgLy8gaWYgdmFsaWRhdGlvbiBwYXNzZXMsIHByb2NlZWQgdG8gdGhlIG5leHQgbWlkZGxld2FyZVxuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRuZXh0KGVycik7IC8vIHBhc3MgYW55IGVycm9ycyB0byB0aGUgZXJyb3IgaGFuZGxpbmcgbWlkZGxld2FyZVxuXHR9XG5cblx0cmV0dXJuO1xufVxuIl19
