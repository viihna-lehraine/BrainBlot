import { __awaiter } from 'tslib';
import { constants } from 'crypto';
import fs from 'fs';
import http2 from 'http2';
import http2Express from 'http2-express-bridge';
import https from 'https';
import featureFlags from '../config/featureFlags';
import setupLogger from './logger';
import app from '../server';
// Create HTTP/2 compatible Express app
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const http2App = http2Express(app); // *DEV-NOTE* Fix any type if you can ever figure out a way. I had to give up because I was losing my mind trying to fix this one
// Use the existing Express app as middleware for the HTTP/2 compatible app
http2App.use(app);
function startHttp1Server() {
	return __awaiter(this, void 0, void 0, function* () {
		const logger = yield setupLogger();
		const keyPath = process.env.SERVER_SSL_KEY_PATH;
		const certPath = process.env.SERVER_SSL_CERT_PATH;
		const options = {
			key: fs.readFileSync(keyPath),
			cert: fs.readFileSync(certPath),
			allowHTTP1: true,
			secureOptions:
				constants.SSL_OP_NO_TLSv1 | constants.SSL_OP_NO_TLSv1_1,
			ciphers: [
				'ECDHE-ECDSA-AES256-GCM-SHA384',
				'ECDHE-RSA-AES256-GCM-SHA384',
				'ECDHE-ECDSA-CHACHA20-POLY1305',
				'ECDHE-RSA-CHACHA20-POLY1305',
				'ECDHE-ECDSA-AES128-GCM-SHA256',
				'ECDHE-RSA-AES128-GCM-SHA256',
				'ECDHE-ECDSA-AES256-SHA384',
				'ECDHE-RSA-AES256-SHA384',
				'ECDHE-ECDSA-AES128-SHA256',
				'ECDHE-RSA-AES128-SHA256'
			].join(':'),
			honorCipherOrder: true
		};
		https.createServer(options, app).listen(process.env.SERVER_PORT, () => {
			logger.info(`Server running on port ${process.env.SERVER_PORT}`);
		});
	});
}
function startHttp2Server() {
	return __awaiter(this, void 0, void 0, function* () {
		const logger = yield setupLogger();
		const keyPath = process.env.SERVER_SSL_KEY_PATH;
		const certPath = process.env.SERVER_SSL_CERT_PATH;
		const options = {
			key: fs.readFileSync(keyPath),
			cert: fs.readFileSync(certPath),
			allowHTTP1: true,
			secureOptions:
				constants.SSL_OP_NO_TLSv1 | constants.SSL_OP_NO_TLSv1_1,
			ciphers: [
				'ECDHE-ECDSA-AES256-GCM-SHA384',
				'ECDHE-RSA-AES256-GCM-SHA384',
				'ECDHE-ECDSA-CHACHA20-POLY1305',
				'ECDHE-RSA-CHACHA20-POLY1305',
				'ECDHE-ECDSA-AES128-GCM-SHA256',
				'ECDHE-RSA-AES128-GCM-SHA256',
				'ECDHE-ECDSA-AES256-SHA384',
				'ECDHE-RSA-AES256-SHA384',
				'ECDHE-ECDSA-AES128-SHA256',
				'ECDHE-RSA-AES128-SHA256'
			].join(':'),
			honorCipherOrder: true
		};
		http2
			.createSecureServer(options, app)
			.listen(process.env.SERVER_PORT, () => {
				logger.info(
					`Server running on port ${process.env.SERVER_PORT}`
				);
			});
	});
}
function startServer() {
	return __awaiter(this, void 0, void 0, function* () {
		const logger = yield setupLogger();
		if (featureFlags.http2Flag && !featureFlags.http1Flag) {
			logger.info('Starting server with HTTP/2');
			yield startHttp2Server();
		} else if (featureFlags.http1Flag && !featureFlags.http2Flag) {
			logger.info('Starting server with HTTP/1.1');
			yield startHttp1Server();
		} else {
			logger.error(
				'HTTP1 / HTTP2 flags not correctly set. Please check backend .env file'
			);
			throw new Error(
				'HTTP1 / HTTP2 flags not correctly set. Please check backend .env file'
			);
		}
	});
}
export default startServer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3RzL21pZGRsZXdhcmUvaHR0cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNuQyxPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDcEIsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sWUFBWSxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLFlBQVksTUFBTSx3QkFBd0IsQ0FBQztBQUNsRCxPQUFPLFdBQVcsTUFBTSxVQUFVLENBQUM7QUFDbkMsT0FBTyxHQUFHLE1BQU0sV0FBVyxDQUFDO0FBRTVCLHVDQUF1QztBQUN2Qyw4REFBOEQ7QUFDOUQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLEdBQVUsQ0FBQyxDQUFDLENBQUMsaUlBQWlJO0FBRTVLLDJFQUEyRTtBQUMzRSxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBRWxCLFNBQWUsZ0JBQWdCOztRQUM5QixNQUFNLE1BQU0sR0FBRyxNQUFNLFdBQVcsRUFBRSxDQUFDO1FBQ25DLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW9CLENBQUM7UUFDakQsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBcUIsQ0FBQztRQUVuRCxNQUFNLE9BQU8sR0FBRztZQUNmLEdBQUcsRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQztZQUM3QixJQUFJLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7WUFDL0IsVUFBVSxFQUFFLElBQUk7WUFDaEIsYUFBYSxFQUFFLFNBQVMsQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDLGlCQUFpQjtZQUN0RSxPQUFPLEVBQUU7Z0JBQ1IsK0JBQStCO2dCQUMvQiw2QkFBNkI7Z0JBQzdCLCtCQUErQjtnQkFDL0IsNkJBQTZCO2dCQUM3QiwrQkFBK0I7Z0JBQy9CLDZCQUE2QjtnQkFDN0IsMkJBQTJCO2dCQUMzQix5QkFBeUI7Z0JBQ3pCLDJCQUEyQjtnQkFDM0IseUJBQXlCO2FBQ3pCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztZQUNYLGdCQUFnQixFQUFFLElBQUk7U0FDdEIsQ0FBQztRQUVGLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUU7WUFDckUsTUFBTSxDQUFDLElBQUksQ0FBQywwQkFBMEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ2xFLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztDQUFBO0FBRUQsU0FBZSxnQkFBZ0I7O1FBQzlCLE1BQU0sTUFBTSxHQUFHLE1BQU0sV0FBVyxFQUFFLENBQUM7UUFDbkMsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBb0IsQ0FBQztRQUNqRCxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFxQixDQUFDO1FBRW5ELE1BQU0sT0FBTyxHQUFHO1lBQ2YsR0FBRyxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDO1lBQzdCLElBQUksRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztZQUMvQixVQUFVLEVBQUUsSUFBSTtZQUNoQixhQUFhLEVBQUUsU0FBUyxDQUFDLGVBQWUsR0FBRyxTQUFTLENBQUMsaUJBQWlCO1lBQ3RFLE9BQU8sRUFBRTtnQkFDUiwrQkFBK0I7Z0JBQy9CLDZCQUE2QjtnQkFDN0IsK0JBQStCO2dCQUMvQiw2QkFBNkI7Z0JBQzdCLCtCQUErQjtnQkFDL0IsNkJBQTZCO2dCQUM3QiwyQkFBMkI7Z0JBQzNCLHlCQUF5QjtnQkFDekIsMkJBQTJCO2dCQUMzQix5QkFBeUI7YUFDekIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ1gsZ0JBQWdCLEVBQUUsSUFBSTtTQUN0QixDQUFDO1FBRUYsS0FBSzthQUNILGtCQUFrQixDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUM7YUFDaEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtZQUNyQyxNQUFNLENBQUMsSUFBSSxDQUFDLDBCQUEwQixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDbEUsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQUE7QUFFRCxTQUFlLFdBQVc7O1FBQ3pCLE1BQU0sTUFBTSxHQUFHLE1BQU0sV0FBVyxFQUFFLENBQUM7UUFFbkMsSUFBSSxZQUFZLENBQUMsU0FBUyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ3ZELE1BQU0sQ0FBQyxJQUFJLENBQUMsNkJBQTZCLENBQUMsQ0FBQztZQUMzQyxNQUFNLGdCQUFnQixFQUFFLENBQUM7UUFDMUIsQ0FBQzthQUFNLElBQUksWUFBWSxDQUFDLFNBQVMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUM5RCxNQUFNLENBQUMsSUFBSSxDQUFDLCtCQUErQixDQUFDLENBQUM7WUFDN0MsTUFBTSxnQkFBZ0IsRUFBRSxDQUFDO1FBQzFCLENBQUM7YUFBTSxDQUFDO1lBQ1AsTUFBTSxDQUFDLEtBQUssQ0FDWCx1RUFBdUUsQ0FDdkUsQ0FBQztZQUNGLE1BQU0sSUFBSSxLQUFLLENBQ2QsdUVBQXVFLENBQ3ZFLENBQUM7UUFDSCxDQUFDO0lBQ0YsQ0FBQztDQUFBO0FBRUQsZUFBZSxXQUFXLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25zdGFudHMgfSBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBodHRwMiBmcm9tICdodHRwMic7XG5pbXBvcnQgaHR0cDJFeHByZXNzIGZyb20gJ2h0dHAyLWV4cHJlc3MtYnJpZGdlJztcbmltcG9ydCBodHRwcyBmcm9tICdodHRwcyc7XG5pbXBvcnQgZmVhdHVyZUZsYWdzIGZyb20gJy4uL2NvbmZpZy9mZWF0dXJlRmxhZ3MnO1xuaW1wb3J0IHNldHVwTG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBhcHAgZnJvbSAnLi4vc2VydmVyJztcblxuLy8gQ3JlYXRlIEhUVFAvMiBjb21wYXRpYmxlIEV4cHJlc3MgYXBwXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuY29uc3QgaHR0cDJBcHAgPSBodHRwMkV4cHJlc3MoYXBwIGFzIGFueSk7IC8vICpERVYtTk9URSogRml4IGFueSB0eXBlIGlmIHlvdSBjYW4gZXZlciBmaWd1cmUgb3V0IGEgd2F5LiBJIGhhZCB0byBnaXZlIHVwIGJlY2F1c2UgSSB3YXMgbG9zaW5nIG15IG1pbmQgdHJ5aW5nIHRvIGZpeCB0aGlzIG9uZVxuXG4vLyBVc2UgdGhlIGV4aXN0aW5nIEV4cHJlc3MgYXBwIGFzIG1pZGRsZXdhcmUgZm9yIHRoZSBIVFRQLzIgY29tcGF0aWJsZSBhcHBcbmh0dHAyQXBwLnVzZShhcHApO1xuXG5hc3luYyBmdW5jdGlvbiBzdGFydEh0dHAxU2VydmVyKCkge1xuXHRjb25zdCBsb2dnZXIgPSBhd2FpdCBzZXR1cExvZ2dlcigpO1xuXHRjb25zdCBrZXlQYXRoID0gcHJvY2Vzcy5lbnYuU0VSVkVSX1NTTF9LRVlfUEFUSCE7XG5cdGNvbnN0IGNlcnRQYXRoID0gcHJvY2Vzcy5lbnYuU0VSVkVSX1NTTF9DRVJUX1BBVEghO1xuXG5cdGNvbnN0IG9wdGlvbnMgPSB7XG5cdFx0a2V5OiBmcy5yZWFkRmlsZVN5bmMoa2V5UGF0aCksXG5cdFx0Y2VydDogZnMucmVhZEZpbGVTeW5jKGNlcnRQYXRoKSxcblx0XHRhbGxvd0hUVFAxOiB0cnVlLFxuXHRcdHNlY3VyZU9wdGlvbnM6IGNvbnN0YW50cy5TU0xfT1BfTk9fVExTdjEgfCBjb25zdGFudHMuU1NMX09QX05PX1RMU3YxXzEsXG5cdFx0Y2lwaGVyczogW1xuXHRcdFx0J0VDREhFLUVDRFNBLUFFUzI1Ni1HQ00tU0hBMzg0Jyxcblx0XHRcdCdFQ0RIRS1SU0EtQUVTMjU2LUdDTS1TSEEzODQnLFxuXHRcdFx0J0VDREhFLUVDRFNBLUNIQUNIQTIwLVBPTFkxMzA1Jyxcblx0XHRcdCdFQ0RIRS1SU0EtQ0hBQ0hBMjAtUE9MWTEzMDUnLFxuXHRcdFx0J0VDREhFLUVDRFNBLUFFUzEyOC1HQ00tU0hBMjU2Jyxcblx0XHRcdCdFQ0RIRS1SU0EtQUVTMTI4LUdDTS1TSEEyNTYnLFxuXHRcdFx0J0VDREhFLUVDRFNBLUFFUzI1Ni1TSEEzODQnLFxuXHRcdFx0J0VDREhFLVJTQS1BRVMyNTYtU0hBMzg0Jyxcblx0XHRcdCdFQ0RIRS1FQ0RTQS1BRVMxMjgtU0hBMjU2Jyxcblx0XHRcdCdFQ0RIRS1SU0EtQUVTMTI4LVNIQTI1Nidcblx0XHRdLmpvaW4oJzonKSxcblx0XHRob25vckNpcGhlck9yZGVyOiB0cnVlXG5cdH07XG5cblx0aHR0cHMuY3JlYXRlU2VydmVyKG9wdGlvbnMsIGFwcCkubGlzdGVuKHByb2Nlc3MuZW52LlNFUlZFUl9QT1JULCAoKSA9PiB7XG5cdFx0bG9nZ2VyLmluZm8oYFNlcnZlciBydW5uaW5nIG9uIHBvcnQgJHtwcm9jZXNzLmVudi5TRVJWRVJfUE9SVH1gKTtcblx0fSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0SHR0cDJTZXJ2ZXIoKSB7XG5cdGNvbnN0IGxvZ2dlciA9IGF3YWl0IHNldHVwTG9nZ2VyKCk7XG5cdGNvbnN0IGtleVBhdGggPSBwcm9jZXNzLmVudi5TRVJWRVJfU1NMX0tFWV9QQVRIITtcblx0Y29uc3QgY2VydFBhdGggPSBwcm9jZXNzLmVudi5TRVJWRVJfU1NMX0NFUlRfUEFUSCE7XG5cblx0Y29uc3Qgb3B0aW9ucyA9IHtcblx0XHRrZXk6IGZzLnJlYWRGaWxlU3luYyhrZXlQYXRoKSxcblx0XHRjZXJ0OiBmcy5yZWFkRmlsZVN5bmMoY2VydFBhdGgpLFxuXHRcdGFsbG93SFRUUDE6IHRydWUsXG5cdFx0c2VjdXJlT3B0aW9uczogY29uc3RhbnRzLlNTTF9PUF9OT19UTFN2MSB8IGNvbnN0YW50cy5TU0xfT1BfTk9fVExTdjFfMSxcblx0XHRjaXBoZXJzOiBbXG5cdFx0XHQnRUNESEUtRUNEU0EtQUVTMjU2LUdDTS1TSEEzODQnLFxuXHRcdFx0J0VDREhFLVJTQS1BRVMyNTYtR0NNLVNIQTM4NCcsXG5cdFx0XHQnRUNESEUtRUNEU0EtQ0hBQ0hBMjAtUE9MWTEzMDUnLFxuXHRcdFx0J0VDREhFLVJTQS1DSEFDSEEyMC1QT0xZMTMwNScsXG5cdFx0XHQnRUNESEUtRUNEU0EtQUVTMTI4LUdDTS1TSEEyNTYnLFxuXHRcdFx0J0VDREhFLVJTQS1BRVMxMjgtR0NNLVNIQTI1NicsXG5cdFx0XHQnRUNESEUtRUNEU0EtQUVTMjU2LVNIQTM4NCcsXG5cdFx0XHQnRUNESEUtUlNBLUFFUzI1Ni1TSEEzODQnLFxuXHRcdFx0J0VDREhFLUVDRFNBLUFFUzEyOC1TSEEyNTYnLFxuXHRcdFx0J0VDREhFLVJTQS1BRVMxMjgtU0hBMjU2J1xuXHRcdF0uam9pbignOicpLFxuXHRcdGhvbm9yQ2lwaGVyT3JkZXI6IHRydWVcblx0fTtcblxuXHRodHRwMlxuXHRcdC5jcmVhdGVTZWN1cmVTZXJ2ZXIob3B0aW9ucywgYXBwKVxuXHRcdC5saXN0ZW4ocHJvY2Vzcy5lbnYuU0VSVkVSX1BPUlQsICgpID0+IHtcblx0XHRcdGxvZ2dlci5pbmZvKGBTZXJ2ZXIgcnVubmluZyBvbiBwb3J0ICR7cHJvY2Vzcy5lbnYuU0VSVkVSX1BPUlR9YCk7XG5cdFx0fSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0U2VydmVyKCkge1xuXHRjb25zdCBsb2dnZXIgPSBhd2FpdCBzZXR1cExvZ2dlcigpO1xuXG5cdGlmIChmZWF0dXJlRmxhZ3MuaHR0cDJGbGFnICYmICFmZWF0dXJlRmxhZ3MuaHR0cDFGbGFnKSB7XG5cdFx0bG9nZ2VyLmluZm8oJ1N0YXJ0aW5nIHNlcnZlciB3aXRoIEhUVFAvMicpO1xuXHRcdGF3YWl0IHN0YXJ0SHR0cDJTZXJ2ZXIoKTtcblx0fSBlbHNlIGlmIChmZWF0dXJlRmxhZ3MuaHR0cDFGbGFnICYmICFmZWF0dXJlRmxhZ3MuaHR0cDJGbGFnKSB7XG5cdFx0bG9nZ2VyLmluZm8oJ1N0YXJ0aW5nIHNlcnZlciB3aXRoIEhUVFAvMS4xJyk7XG5cdFx0YXdhaXQgc3RhcnRIdHRwMVNlcnZlcigpO1xuXHR9IGVsc2Uge1xuXHRcdGxvZ2dlci5lcnJvcihcblx0XHRcdCdIVFRQMSAvIEhUVFAyIGZsYWdzIG5vdCBjb3JyZWN0bHkgc2V0LiBQbGVhc2UgY2hlY2sgYmFja2VuZCAuZW52IGZpbGUnXG5cdFx0KTtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHQnSFRUUDEgLyBIVFRQMiBmbGFncyBub3QgY29ycmVjdGx5IHNldC4gUGxlYXNlIGNoZWNrIGJhY2tlbmQgLmVudiBmaWxlJ1xuXHRcdCk7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhcnRTZXJ2ZXI7XG4iXX0=
