import { __awaiter } from 'tslib';
import { inRange } from 'range_check';
import fs from 'fs';
import path from 'path';
import { __dirname } from '../config/loadEnv.js';
import setupLogger from '../middleware/logger.js';
let blacklist = [];
let logger;
// Initialize rangeCheck and load the blacklist
const initializeBlacklist = () =>
	__awaiter(void 0, void 0, void 0, function* () {
		logger = yield setupLogger();
		try {
			yield loadBlacklist();
			logger.info(
				'Blacklist and range_check module loaded successfully.'
			);
		} catch (err) {
			logger.error('Error during blacklist initialization: ', err);
			throw err;
		}
	});
// Load the blacklist from file
export const loadBlacklist = () =>
	__awaiter(void 0, void 0, void 0, function* () {
		let logger = yield setupLogger();
		let filePath = path.join(__dirname, '../../data/blacklist.json');
		try {
			if (fs.existsSync(filePath)) {
				let data = fs.readFileSync(filePath, 'utf8');
				blacklist = JSON.parse(data);
			}
		} catch (err) {
			logger.error('Error loading blacklist: ', err);
			blacklist = []; // default to empty array in case of failure
		}
	});
// Add an IP or range to the blacklist
export const addToBlacklist = (ip) => {
	if (!blacklist.includes(ip)) {
		blacklist.push(ip);
		saveBlacklist();
	}
};
// Save the blacklist
const saveBlacklist = () =>
	__awaiter(void 0, void 0, void 0, function* () {
		let filePath = path.join(__dirname, '../../data/blacklist.json');
		try {
			fs.writeFileSync(filePath, JSON.stringify(blacklist, null, 2));
		} catch (err) {
			console.error('Error saving blacklist: ', err);
		}
	});
// Middleware to check if the requester's IP is blacklisted
export const ipBlacklistMiddleware = (req, res, next) => {
	let clientIp = req.ip;
	if (!clientIp) {
		console.error('Client IP undefined');
		return res.status(500).json({ error: 'Bad request' });
	}
	if (blacklist.some((range) => inRange(clientIp, range))) {
		console.log(`Blocked request from blacklisted IP: ${clientIp}`);
		return res.status(403).json({ error: 'Access denied' });
	}
	return next();
};
// Remove an IP or range from the blacklist
export let removeFromBlacklist = (ip) => {
	blacklist = blacklist.filter((range) => range != ip);
	saveBlacklist();
};
export const initializeIpBlacklist = initializeBlacklist;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXBCbGFja2xpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90cy9taWRkbGV3YXJlL2lwQmxhY2tsaXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3RDLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQztBQUNwQixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzlDLE9BQU8sV0FBVyxNQUFNLHNCQUFzQixDQUFDO0FBRS9DLElBQUksU0FBUyxHQUFhLEVBQUUsQ0FBQztBQUM3QixJQUFJLE1BQWMsQ0FBQztBQUVuQiwrQ0FBK0M7QUFDL0MsTUFBTSxtQkFBbUIsR0FBRyxHQUF3QixFQUFFO0lBQ3JELE1BQU0sR0FBRyxNQUFNLFdBQVcsRUFBRSxDQUFDO0lBQzdCLElBQUksQ0FBQztRQUNKLE1BQU0sYUFBYSxFQUFFLENBQUM7UUFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyx1REFBdUQsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2QsTUFBTSxDQUFDLEtBQUssQ0FBQyx5Q0FBeUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM3RCxNQUFNLEdBQUcsQ0FBQztJQUNYLENBQUM7QUFDRixDQUFDLENBQUEsQ0FBQztBQUVGLCtCQUErQjtBQUMvQixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsR0FBd0IsRUFBRTtJQUN0RCxJQUFJLE1BQU0sR0FBRyxNQUFNLFdBQVcsRUFBRSxDQUFDO0lBQ2pDLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLDJCQUEyQixDQUFDLENBQUM7SUFDakUsSUFBSSxDQUFDO1FBQ0osSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7WUFDN0IsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDN0MsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsQ0FBQztJQUNGLENBQUM7SUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2QsTUFBTSxDQUFDLEtBQUssQ0FBQywyQkFBMkIsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMvQyxTQUFTLEdBQUcsRUFBRSxDQUFDLENBQUMsNENBQTRDO0lBQzdELENBQUM7QUFDRixDQUFDLENBQUEsQ0FBQztBQUVGLHNDQUFzQztBQUN0QyxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxFQUFVLEVBQVEsRUFBRTtJQUNsRCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQzdCLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkIsYUFBYSxFQUFFLENBQUM7SUFDakIsQ0FBQztBQUNGLENBQUMsQ0FBQztBQUVGLHFCQUFxQjtBQUNyQixNQUFNLGFBQWEsR0FBRyxHQUF3QixFQUFFO0lBQy9DLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLDJCQUEyQixDQUFDLENBQUM7SUFDakUsSUFBSSxDQUFDO1FBQ0osRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLDBCQUEwQixFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2hELENBQUM7QUFDRixDQUFDLENBQUEsQ0FBQztBQUVGLDJEQUEyRDtBQUMzRCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxDQUNwQyxHQUFZLEVBQ1osR0FBYSxFQUNiLElBQWtCLEVBQ2pCLEVBQUU7SUFDSCxJQUFJLFFBQVEsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDO0lBRXRCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUNyQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVELElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDekQsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3Q0FBd0MsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNoRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVELE9BQU8sSUFBSSxFQUFFLENBQUM7QUFDZixDQUFDLENBQUM7QUFFRiwyQ0FBMkM7QUFDM0MsTUFBTSxDQUFDLElBQUksbUJBQW1CLEdBQUcsQ0FBQyxFQUFVLEVBQVEsRUFBRTtJQUNyRCxTQUFTLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3JELGFBQWEsRUFBRSxDQUFDO0FBQ2pCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLG1CQUFtQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5SYW5nZSB9IGZyb20gJ3JhbmdlX2NoZWNrJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJ3dpbnN0b24nO1xuaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UsIE5leHRGdW5jdGlvbiB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgX19kaXJuYW1lIH0gZnJvbSAnLi4vY29uZmlnL2xvYWRFbnYnO1xuaW1wb3J0IHNldHVwTG9nZ2VyIGZyb20gJy4uL21pZGRsZXdhcmUvbG9nZ2VyJztcblxubGV0IGJsYWNrbGlzdDogc3RyaW5nW10gPSBbXTtcbmxldCBsb2dnZXI6IExvZ2dlcjtcblxuLy8gSW5pdGlhbGl6ZSByYW5nZUNoZWNrIGFuZCBsb2FkIHRoZSBibGFja2xpc3RcbmNvbnN0IGluaXRpYWxpemVCbGFja2xpc3QgPSBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG5cdGxvZ2dlciA9IGF3YWl0IHNldHVwTG9nZ2VyKCk7XG5cdHRyeSB7XG5cdFx0YXdhaXQgbG9hZEJsYWNrbGlzdCgpO1xuXHRcdGxvZ2dlci5pbmZvKCdCbGFja2xpc3QgYW5kIHJhbmdlX2NoZWNrIG1vZHVsZSBsb2FkZWQgc3VjY2Vzc2Z1bGx5LicpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRsb2dnZXIuZXJyb3IoJ0Vycm9yIGR1cmluZyBibGFja2xpc3QgaW5pdGlhbGl6YXRpb246ICcsIGVycik7XG5cdFx0dGhyb3cgZXJyO1xuXHR9XG59O1xuXG4vLyBMb2FkIHRoZSBibGFja2xpc3QgZnJvbSBmaWxlXG5leHBvcnQgY29uc3QgbG9hZEJsYWNrbGlzdCA9IGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcblx0bGV0IGxvZ2dlciA9IGF3YWl0IHNldHVwTG9nZ2VyKCk7XG5cdGxldCBmaWxlUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi8uLi9kYXRhL2JsYWNrbGlzdC5qc29uJyk7XG5cdHRyeSB7XG5cdFx0aWYgKGZzLmV4aXN0c1N5bmMoZmlsZVBhdGgpKSB7XG5cdFx0XHRsZXQgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhmaWxlUGF0aCwgJ3V0ZjgnKTtcblx0XHRcdGJsYWNrbGlzdCA9IEpTT04ucGFyc2UoZGF0YSk7XG5cdFx0fVxuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRsb2dnZXIuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgYmxhY2tsaXN0OiAnLCBlcnIpO1xuXHRcdGJsYWNrbGlzdCA9IFtdOyAvLyBkZWZhdWx0IHRvIGVtcHR5IGFycmF5IGluIGNhc2Ugb2YgZmFpbHVyZVxuXHR9XG59O1xuXG4vLyBBZGQgYW4gSVAgb3IgcmFuZ2UgdG8gdGhlIGJsYWNrbGlzdFxuZXhwb3J0IGNvbnN0IGFkZFRvQmxhY2tsaXN0ID0gKGlwOiBzdHJpbmcpOiB2b2lkID0+IHtcblx0aWYgKCFibGFja2xpc3QuaW5jbHVkZXMoaXApKSB7XG5cdFx0YmxhY2tsaXN0LnB1c2goaXApO1xuXHRcdHNhdmVCbGFja2xpc3QoKTtcblx0fVxufTtcblxuLy8gU2F2ZSB0aGUgYmxhY2tsaXN0XG5jb25zdCBzYXZlQmxhY2tsaXN0ID0gYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuXHRsZXQgZmlsZVBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vZGF0YS9ibGFja2xpc3QuanNvbicpO1xuXHR0cnkge1xuXHRcdGZzLndyaXRlRmlsZVN5bmMoZmlsZVBhdGgsIEpTT04uc3RyaW5naWZ5KGJsYWNrbGlzdCwgbnVsbCwgMikpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRjb25zb2xlLmVycm9yKCdFcnJvciBzYXZpbmcgYmxhY2tsaXN0OiAnLCBlcnIpO1xuXHR9XG59O1xuXG4vLyBNaWRkbGV3YXJlIHRvIGNoZWNrIGlmIHRoZSByZXF1ZXN0ZXIncyBJUCBpcyBibGFja2xpc3RlZFxuZXhwb3J0IGNvbnN0IGlwQmxhY2tsaXN0TWlkZGxld2FyZSA9IChcblx0cmVxOiBSZXF1ZXN0LFxuXHRyZXM6IFJlc3BvbnNlLFxuXHRuZXh0OiBOZXh0RnVuY3Rpb25cbikgPT4ge1xuXHRsZXQgY2xpZW50SXAgPSByZXEuaXA7XG5cblx0aWYgKCFjbGllbnRJcCkge1xuXHRcdGNvbnNvbGUuZXJyb3IoJ0NsaWVudCBJUCB1bmRlZmluZWQnKTtcblx0XHRyZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0JhZCByZXF1ZXN0JyB9KTtcblx0fVxuXG5cdGlmIChibGFja2xpc3Quc29tZSgocmFuZ2UpID0+IGluUmFuZ2UoY2xpZW50SXAsIHJhbmdlKSkpIHtcblx0XHRjb25zb2xlLmxvZyhgQmxvY2tlZCByZXF1ZXN0IGZyb20gYmxhY2tsaXN0ZWQgSVA6ICR7Y2xpZW50SXB9YCk7XG5cdFx0cmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgZXJyb3I6ICdBY2Nlc3MgZGVuaWVkJyB9KTtcblx0fVxuXG5cdHJldHVybiBuZXh0KCk7XG59O1xuXG4vLyBSZW1vdmUgYW4gSVAgb3IgcmFuZ2UgZnJvbSB0aGUgYmxhY2tsaXN0XG5leHBvcnQgbGV0IHJlbW92ZUZyb21CbGFja2xpc3QgPSAoaXA6IHN0cmluZyk6IHZvaWQgPT4ge1xuXHRibGFja2xpc3QgPSBibGFja2xpc3QuZmlsdGVyKChyYW5nZSkgPT4gcmFuZ2UgIT0gaXApO1xuXHRzYXZlQmxhY2tsaXN0KCk7XG59O1xuXG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZUlwQmxhY2tsaXN0ID0gaW5pdGlhbGl6ZUJsYWNrbGlzdDtcbiJdfQ==
