import validator from 'validator';
export const validateEntry = (req, res, next) => {
	let errors = [];
	// Name validation
	if (validator.isEmpty(req.body.name || '')) {
		errors.push({ msg: 'Name is required', param: 'name' });
	}
	// Message validation
	if (validator.isEmpty(req.body.message || '')) {
		errors.push({ msg: 'Message is required', param: 'message' });
	}
	if (errors.length) {
		return res.status(400).json({ errors });
	}
	return next;
};
export const registrationValidationRules = (req, res, next) => {
	const errors = [];
	// Username validation
	if (!validator.isLength(req.body.username || '', { min: 3 })) {
		errors.push({
			msg: 'Username must be at least 3 characters long',
			param: 'username'
		});
	}
	if (!validator.matches(req.body.username || '', /^[a-zA-Z0-9_-]+$/)) {
		errors.push({
			msg: 'Username can only contain letters, numbers, underscores, and dashes',
			param: 'username'
		});
	}
	// Email validation
	if (!validator.isEmail(req.body.email || '')) {
		errors.push({
			msg: 'Please provide a valid email address',
			param: 'email'
		});
	}
	// Password validation
	if (!validator.isLength(req.body.password || '', { min: 8 })) {
		errors.push({
			msg: 'Password must be at least 8 characters long',
			param: 'password'
		});
	}
	if (!validator.matches(req.body.password || '', /[A-Z]/)) {
		errors.push({
			msg: 'Password must contain at least one uppercase letter',
			param: 'password'
		});
	}
	if (!validator.matches(req.body.password || '', /[a-z]/)) {
		errors.push({
			msg: 'Password must contain at least one lowercase letter',
			param: 'password'
		});
	}
	if (!validator.matches(req.body.password || '', /\d/)) {
		errors.push({
			msg: 'Password must contain at least one number',
			param: 'password'
		});
	}
	if (!validator.matches(req.body.password || '', /[^A-Za-z0-9]/)) {
		errors.push({
			msg: 'Password must contain at least one special character',
			param: 'password'
		});
	}
	// Confirm password validation
	if (req.body.password !== req.body.confirmPassword) {
		errors.push({
			msg: 'Passwords do not match',
			param: 'confirmPassword'
		});
	}
	if (errors.length) {
		res.status(400).json({ errors });
		return;
	}
	next();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdHMvbWlkZGxld2FyZS92YWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxTQUFTLE1BQU0sV0FBVyxDQUFDO0FBRWxDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUM1QixHQUFZLEVBQ1osR0FBYSxFQUNiLElBQWtCLEVBQ2pCLEVBQUU7SUFDSCxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFFaEIsa0JBQWtCO0lBQ2xCLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsa0JBQWtCLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVELHFCQUFxQjtJQUNyQixJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUMvQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLHFCQUFxQixFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNuQixPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDYixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxDQUMxQyxHQUFZLEVBQ1osR0FBYSxFQUNiLElBQWtCLEVBQ2pCLEVBQUU7SUFDSCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFF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QUUsQ0FBQztRQUNuQixHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDakMsT0FBTztJQUNSLENBQUM7SUFFRCxJQUFJLEVBQUUsQ0FBQztBQUNSLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRGdW5jdGlvbiwgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB2YWxpZGF0b3IgZnJvbSAndmFsaWRhdG9yJztcblxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlRW50cnkgPSAoXG5cdHJlcTogUmVxdWVzdCxcblx0cmVzOiBSZXNwb25zZSxcblx0bmV4dDogTmV4dEZ1bmN0aW9uXG4pID0+IHtcblx0bGV0IGVycm9ycyA9IFtdO1xuXG5cdC8vIE5hbWUgdmFsaWRhdGlvblxuXHRpZiAodmFsaWRhdG9yLmlzRW1wdHkocmVxLmJvZHkubmFtZSB8fCAnJykpIHtcblx0XHRlcnJvcnMucHVzaCh7IG1zZzogJ05hbWUgaXMgcmVxdWlyZWQnLCBwYXJhbTogJ25hbWUnIH0pO1xuXHR9XG5cblx0Ly8gTWVzc2FnZSB2YWxpZGF0aW9uXG5cdGlmICh2YWxpZGF0b3IuaXNFbXB0eShyZXEuYm9keS5tZXNzYWdlIHx8ICcnKSkge1xuXHRcdGVycm9ycy5wdXNoKHsgbXNnOiAnTWVzc2FnZSBpcyByZXF1aXJlZCcsIHBhcmFtOiAnbWVzc2FnZScgfSk7XG5cdH1cblxuXHRpZiAoZXJyb3JzLmxlbmd0aCkge1xuXHRcdHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVycm9ycyB9KTtcblx0fVxuXG5cdHJldHVybiBuZXh0O1xufTtcblxuZXhwb3J0IGNvbnN0IHJlZ2lzdHJhdGlvblZhbGlkYXRpb25SdWxlcyA9IChcblx0cmVxOiBSZXF1ZXN0LFxuXHRyZXM6IFJlc3BvbnNlLFxuXHRuZXh0OiBOZXh0RnVuY3Rpb25cbikgPT4ge1xuXHRjb25zdCBlcnJvcnMgPSBbXTtcblxuXHQvLyBVc2VybmFtZSB2YWxpZGF0aW9uXG5cdGlmICghdmFsaWRhdG9yLmlzTGVuZ3RoKHJlcS5ib2R5LnVzZXJuYW1lIHx8ICcnLCB7IG1pbjogMyB9KSkge1xuXHRcdGVycm9ycy5wdXNoKHtcblx0XHRcdG1zZzogJ1VzZXJuYW1lIG11c3QgYmUgYXQgbGVhc3QgMyBjaGFyYWN0ZXJzIGxvbmcnLFxuXHRcdFx0cGFyYW06ICd1c2VybmFtZSdcblx0XHR9KTtcblx0fVxuXHRpZiAoIXZhbGlkYXRvci5tYXRjaGVzKHJlcS5ib2R5LnVzZXJuYW1lIHx8ICcnLCAvXlthLXpBLVowLTlfLV0rJC8pKSB7XG5cdFx0ZXJyb3JzLnB1c2goe1xuXHRcdFx0bXNnOiAnVXNlcm5hbWUgY2FuIG9ubHkgY29udGFpbiBsZXR0ZXJzLCBudW1iZXJzLCB1bmRlcnNjb3JlcywgYW5kIGRhc2hlcycsXG5cdFx0XHRwYXJhbTogJ3VzZXJuYW1lJ1xuXHRcdH0pO1xuXHR9XG5cblx0Ly8gRW1haWwgdmFsaWRhdGlvblxuXHRpZiAoIXZhbGlkYXRvci5pc0VtYWlsKHJlcS5ib2R5LmVtYWlsIHx8ICcnKSkge1xuXHRcdGVycm9ycy5wdXNoKHtcblx0XHRcdG1zZzogJ1BsZWFzZSBwcm92aWRlIGEgdmFsaWQgZW1haWwgYWRkcmVzcycsXG5cdFx0XHRwYXJhbTogJ2VtYWlsJ1xuXHRcdH0pO1xuXHR9XG5cblx0Ly8gUGFzc3dvcmQgdmFsaWRhdGlvblxuXHRpZiAoIXZhbGlkYXRvci5pc0xlbmd0aChyZXEuYm9keS5wYXNzd29yZCB8fCAnJywgeyBtaW46IDggfSkpIHtcblx0XHRlcnJvcnMucHVzaCh7XG5cdFx0XHRtc2c6ICdQYXNzd29yZCBtdXN0IGJlIGF0IGxlYXN0IDggY2hhcmFjdGVycyBsb25nJyxcblx0XHRcdHBhcmFtOiAncGFzc3dvcmQnXG5cdFx0fSk7XG5cdH1cblx0aWYgKCF2YWxpZGF0b3IubWF0Y2hlcyhyZXEuYm9keS5wYXNzd29yZCB8fCAnJywgL1tBLVpdLykpIHtcblx0XHRlcnJvcnMucHVzaCh7XG5cdFx0XHRtc2c6ICdQYXNzd29yZCBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qgb25lIHVwcGVyY2FzZSBsZXR0ZXInLFxuXHRcdFx0cGFyYW06ICdwYXNzd29yZCdcblx0XHR9KTtcblx0fVxuXHRpZiAoIXZhbGlkYXRvci5tYXRjaGVzKHJlcS5ib2R5LnBhc3N3b3JkIHx8ICcnLCAvW2Etel0vKSkge1xuXHRcdGVycm9ycy5wdXNoKHtcblx0XHRcdG1zZzogJ1Bhc3N3b3JkIG11c3QgY29udGFpbiBhdCBsZWFzdCBvbmUgbG93ZXJjYXNlIGxldHRlcicsXG5cdFx0XHRwYXJhbTogJ3Bhc3N3b3JkJ1xuXHRcdH0pO1xuXHR9XG5cdGlmICghdmFsaWRhdG9yLm1hdGNoZXMocmVxLmJvZHkucGFzc3dvcmQgfHwgJycsIC9cXGQvKSkge1xuXHRcdGVycm9ycy5wdXNoKHtcblx0XHRcdG1zZzogJ1Bhc3N3b3JkIG11c3QgY29udGFpbiBhdCBsZWFzdCBvbmUgbnVtYmVyJyxcblx0XHRcdHBhcmFtOiAncGFzc3dvcmQnXG5cdFx0fSk7XG5cdH1cblx0aWYgKCF2YWxpZGF0b3IubWF0Y2hlcyhyZXEuYm9keS5wYXNzd29yZCB8fCAnJywgL1teQS1aYS16MC05XS8pKSB7XG5cdFx0ZXJyb3JzLnB1c2goe1xuXHRcdFx0bXNnOiAnUGFzc3dvcmQgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSBzcGVjaWFsIGNoYXJhY3RlcicsXG5cdFx0XHRwYXJhbTogJ3Bhc3N3b3JkJ1xuXHRcdH0pO1xuXHR9XG5cblx0Ly8gQ29uZmlybSBwYXNzd29yZCB2YWxpZGF0aW9uXG5cdGlmIChyZXEuYm9keS5wYXNzd29yZCAhPT0gcmVxLmJvZHkuY29uZmlybVBhc3N3b3JkKSB7XG5cdFx0ZXJyb3JzLnB1c2goe1xuXHRcdFx0bXNnOiAnUGFzc3dvcmRzIGRvIG5vdCBtYXRjaCcsXG5cdFx0XHRwYXJhbTogJ2NvbmZpcm1QYXNzd29yZCdcblx0XHR9KTtcblx0fVxuXG5cdGlmIChlcnJvcnMubGVuZ3RoKSB7XG5cdFx0cmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcnMgfSk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0bmV4dCgpO1xufTtcbiJdfQ==
