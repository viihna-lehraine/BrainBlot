import { __awaiter } from 'tslib';
import express from 'express';
import bodyParser from 'body-parser';
import cookieParser from 'cookie-parser';
import cors from 'cors';
import hpp from 'hpp';
import morgan from 'morgan';
import passport from 'passport';
import { randomBytes } from 'crypto';
import path from 'path';
import initializeStaticRoutes from '../routes/staticRoutes.js';
import apiRoutes from '../routes/apiRoutes.js';
import {
	csrfMiddleware,
	ipBlacklistMiddleware,
	loadTestRoutes,
	rateLimitMiddleware,
	setupSecurityHeaders
} from '../index.js';
import setupLogger from '../middleware/logger.js';
const app = express();
const staticRootPath = process.env.STATIC_ROOT_PATH;
function initializeApp() {
	return __awaiter(this, void 0, void 0, function* () {
		const logger = yield setupLogger();
		// Set up middlewares
		app.use(bodyParser.json());
		app.use(express.urlencoded({ extended: true }));
		app.use(
			cors({
				methods: 'GET,POST,PUT,DELETE',
				allowedHeaders: 'Content-Type,Authorization',
				credentials: true
			})
		);
		app.use(hpp());
		app.use(
			morgan('combined', {
				stream: { write: (message) => logger.info(message.trim()) }
			})
		);
		app.use(passport.initialize());
		app.use(cookieParser());
		app.use(express.static(staticRootPath));
		// Initialize routes
		app.use('/', initializeStaticRoutes);
		app.use('/api', apiRoutes);
		app.use(rateLimitMiddleware);
		app.use(ipBlacklistMiddleware);
		app.use(csrfMiddleware);
		// Generate nonce for each request
		app.use((req, res, next) => {
			res.locals.cspNonce = randomBytes(16).toString('hex');
			next();
		});
		// Set up security headers
		setupSecurityHeaders(app);
		// Load test routes
		loadTestRoutes(app);
		// Session management
		// app.use(session({
		//     store: new RedisStore({ client: redisClient }),
		//     secret: 'secrets.REDIS_KEY',
		//     resave: false,
		//     saveUninitialized: false,
		//     cookie: { secure: true },
		// }));
		// Apply Sentry middleware for request and error handling
		// app.use(Sentry.RequestHandlers.requestHandler());
		// app.use(Sentry.Handlers.errorHandler());
		// 404 error handling
		app.use((req, res, next) => {
			res.status(404).sendFile(
				path.join(__dirname, '../public', 'not-found.html')
			);
			next();
		});
		// General error handling
		app.use((err, req, res, next) => {
			logger.error('Error occurred: ', err.stack || err.message || err);
			res.status(500).send(
				`Server error - something failed ${err.stack}`
			);
			next();
		});
	});
}
export { app, initializeApp };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdHMvY29uZmlnL2FwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxPQUFPLE1BQU0sU0FBUyxDQUFDO0FBRTlCLE9BQU8sVUFBVSxNQUFNLGFBQWEsQ0FBQztBQUNyQyxPQUFPLFlBQVksTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sR0FBRyxNQUFNLEtBQUssQ0FBQztBQUN0QixPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxRQUFRLE1BQU0sVUFBVSxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDckMsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sc0JBQXNCLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxTQUFTLE1BQU0scUJBQXFCLENBQUM7QUFDNUMsT0FBTyxFQUNOLGNBQWMsRUFDZCxxQkFBcUIsRUFDckIsY0FBYyxFQUNkLG1CQUFtQixFQUNuQixvQkFBb0IsRUFDcEIsTUFBTSxVQUFVLENBQUM7QUFDbEIsT0FBTyxXQUFXLE1BQU0sc0JBQXNCLENBQUM7QUFFL0MsTUFBTSxHQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7QUFDdEIsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBaUIsQ0FBQztBQUVyRCxTQUFlLGFBQWE7O1FBQzNCLE1BQU0sTUFBTSxHQUFHLE1BQU0sV0FBVyxFQUFFLENBQUM7UUFFbkMscUJBQXFCO1FBQ3JCLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDM0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoRCxHQUFHLENB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dCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UsIE5leHRGdW5jdGlvbiB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSAnYm9keS1wYXJzZXInO1xuaW1wb3J0IGNvb2tpZVBhcnNlciBmcm9tICdjb29raWUtcGFyc2VyJztcbmltcG9ydCBjb3JzIGZyb20gJ2NvcnMnO1xuaW1wb3J0IGhwcCBmcm9tICdocHAnO1xuaW1wb3J0IG1vcmdhbiBmcm9tICdtb3JnYW4nO1xuaW1wb3J0IHBhc3Nwb3J0IGZyb20gJ3Bhc3Nwb3J0JztcbmltcG9ydCB7IHJhbmRvbUJ5dGVzIH0gZnJvbSAnY3J5cHRvJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGluaXRpYWxpemVTdGF0aWNSb3V0ZXMgZnJvbSAnLi4vcm91dGVzL3N0YXRpY1JvdXRlcyc7XG5pbXBvcnQgYXBpUm91dGVzIGZyb20gJy4uL3JvdXRlcy9hcGlSb3V0ZXMnO1xuaW1wb3J0IHtcblx0Y3NyZk1pZGRsZXdhcmUsXG5cdGlwQmxhY2tsaXN0TWlkZGxld2FyZSxcblx0bG9hZFRlc3RSb3V0ZXMsXG5cdHJhdGVMaW1pdE1pZGRsZXdhcmUsXG5cdHNldHVwU2VjdXJpdHlIZWFkZXJzXG59IGZyb20gJy4uL2luZGV4JztcbmltcG9ydCBzZXR1cExvZ2dlciBmcm9tICcuLi9taWRkbGV3YXJlL2xvZ2dlcic7XG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbmNvbnN0IHN0YXRpY1Jvb3RQYXRoID0gcHJvY2Vzcy5lbnYuU1RBVElDX1JPT1RfUEFUSCE7XG5cbmFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemVBcHAoKTogUHJvbWlzZTx2b2lkPiB7XG5cdGNvbnN0IGxvZ2dlciA9IGF3YWl0IHNldHVwTG9nZ2VyKCk7XG5cblx0Ly8gU2V0IHVwIG1pZGRsZXdhcmVzXG5cdGFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuXHRhcHAudXNlKGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKTtcblx0YXBwLnVzZShcblx0XHRjb3JzKHtcblx0XHRcdG1ldGhvZHM6ICdHRVQsUE9TVCxQVVQsREVMRVRFJyxcblx0XHRcdGFsbG93ZWRIZWFkZXJzOiAnQ29udGVudC1UeXBlLEF1dGhvcml6YXRpb24nLFxuXHRcdFx0Y3JlZGVudGlhbHM6IHRydWVcblx0XHR9KVxuXHQpO1xuXHRhcHAudXNlKGhwcCgpKTtcblx0YXBwLnVzZShcblx0XHRtb3JnYW4oJ2NvbWJpbmVkJywge1xuXHRcdFx0c3RyZWFtOiB7IHdyaXRlOiAobWVzc2FnZSkgPT4gbG9nZ2VyLmluZm8obWVzc2FnZS50cmltKCkpIH1cblx0XHR9KVxuXHQpO1xuXHRhcHAudXNlKHBhc3Nwb3J0LmluaXRpYWxpemUoKSk7XG5cdGFwcC51c2UoY29va2llUGFyc2VyKCkpO1xuXHRhcHAudXNlKGV4cHJlc3Muc3RhdGljKHN0YXRpY1Jvb3RQYXRoKSk7XG5cblx0Ly8gSW5pdGlhbGl6ZSByb3V0ZXNcblx0YXBwLnVzZSgnLycsIGluaXRpYWxpemVTdGF0aWNSb3V0ZXMpO1xuXHRhcHAudXNlKCcvYXBpJywgYXBpUm91dGVzKTtcblx0YXBwLnVzZShyYXRlTGltaXRNaWRkbGV3YXJlKTtcblx0YXBwLnVzZShpcEJsYWNrbGlzdE1pZGRsZXdhcmUpO1xuXHRhcHAudXNlKGNzcmZNaWRkbGV3YXJlKTtcblxuXHQvLyBHZW5lcmF0ZSBub25jZSBmb3IgZWFjaCByZXF1ZXN0XG5cdGFwcC51c2UoKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XG5cdFx0cmVzLmxvY2Fscy5jc3BOb25jZSA9IHJhbmRvbUJ5dGVzKDE2KS50b1N0cmluZygnaGV4Jyk7XG5cdFx0bmV4dCgpO1xuXHR9KTtcblxuXHQvLyBTZXQgdXAgc2VjdXJpdHkgaGVhZGVyc1xuXHRzZXR1cFNlY3VyaXR5SGVhZGVycyhhcHApO1xuXG5cdC8vIExvYWQgdGVzdCByb3V0ZXNcblx0bG9hZFRlc3RSb3V0ZXMoYXBwKTtcblxuXHQvLyBTZXNzaW9uIG1hbmFnZW1lbnRcblx0Ly8gYXBwLnVzZShzZXNzaW9uKHtcblx0Ly8gICAgIHN0b3JlOiBuZXcgUmVkaXNTdG9yZSh7IGNsaWVudDogcmVkaXNDbGllbnQgfSksXG5cdC8vICAgICBzZWNyZXQ6ICdzZWNyZXRzLlJFRElTX0tFWScsXG5cdC8vICAgICByZXNhdmU6IGZhbHNlLFxuXHQvLyAgICAgc2F2ZVVuaW5pdGlhbGl6ZWQ6IGZhbHNlLFxuXHQvLyAgICAgY29va2llOiB7IHNlY3VyZTogdHJ1ZSB9LFxuXHQvLyB9KSk7XG5cblx0Ly8gQXBwbHkgU2VudHJ5IG1pZGRsZXdhcmUgZm9yIHJlcXVlc3QgYW5kIGVycm9yIGhhbmRsaW5nXG5cdC8vIGFwcC51c2UoU2VudHJ5LlJlcXVlc3RIYW5kbGVycy5yZXF1ZXN0SGFuZGxlcigpKTtcblx0Ly8gYXBwLnVzZShTZW50cnkuSGFuZGxlcnMuZXJyb3JIYW5kbGVyKCkpO1xuXG5cdC8vIDQwNCBlcnJvciBoYW5kbGluZ1xuXHRhcHAudXNlKChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikgPT4ge1xuXHRcdHJlcy5zdGF0dXMoNDA0KS5zZW5kRmlsZShcblx0XHRcdHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9wdWJsaWMnLCAnbm90LWZvdW5kLmh0bWwnKVxuXHRcdCk7XG5cdFx0bmV4dCgpO1xuXHR9KTtcblxuXHQvLyBHZW5lcmFsIGVycm9yIGhhbmRsaW5nXG5cdGFwcC51c2UoKGVycjogRXJyb3IsIHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XG5cdFx0bG9nZ2VyLmVycm9yKCdFcnJvciBvY2N1cnJlZDogJywgZXJyLnN0YWNrIHx8IGVyci5tZXNzYWdlIHx8IGVycik7XG5cdFx0cmVzLnN0YXR1cyg1MDApLnNlbmQoYFNlcnZlciBlcnJvciAtIHNvbWV0aGluZyBmYWlsZWQgJHtlcnIuc3RhY2t9YCk7XG5cdFx0bmV4dCgpO1xuXHR9KTtcbn1cblxuZXhwb3J0IHsgYXBwLCBpbml0aWFsaXplQXBwIH07XG4iXX0=
