import { __awaiter } from 'tslib';
import express from 'express';
import bodyParser from 'body-parser';
import cookieParser from 'cookie-parser';
import cors from 'cors';
import hpp from 'hpp';
import morgan from 'morgan';
import passport from 'passport';
import { randomBytes } from 'crypto';
// import sentry from '@sentry/node';
// import session from 'express-session';
// import connectRedis from 'connect-redis';
import path from 'path';
import initializeStaticRoutes from '../routes/staticRoutes.js';
import apiRoutes from '../routes/apiRoutes.js';
import {
	csrfMiddleware,
	ipBlacklistMiddleware,
	loadTestRoutes,
	rateLimitMiddleware,
	setupSecurityHeaders
} from '../index.js';
import setupLogger from '../middleware/logger.js';
const app = express();
const staticRootPath = process.env.STATIC_ROOT_PATH;
// Setup middlewares and routes
function initializeApp() {
	return __awaiter(this, void 0, void 0, function* () {
		let logger = yield setupLogger();
		app.use(bodyParser.json());
		app.use(express.urlencoded({ extended: true }));
		app.use(
			cors({
				methods: 'GET,POST,PUT,DELETE',
				allowedHeaders: 'Content-Type,Authorization',
				credentials: true
			})
		);
		app.use(hpp());
		app.use(
			morgan('combined', {
				stream: { write: (message) => logger.info(message.trim()) }
			})
		);
		app.use(passport.initialize());
		app.use(cookieParser());
		app.use(express.static(staticRootPath));
		app.use('/', initializeStaticRoutes);
		app.use('/api', apiRoutes);
		app.use(rateLimitMiddleware);
		app.use(ipBlacklistMiddleware);
		app.use(csrfMiddleware);
		// Generate nonce for each request
		app.use((req, res, next) => {
			res.locals.cspNonce = randomBytes(16).toString('hex');
			next();
		});
		setupSecurityHeaders(app);
		// Load test routes
		loadTestRoutes(app);
		// Session management
		// app.use(session({
		//     store: new RedisStore({ client: redisClient }),
		//     secret: 'secrets.REDIS_KEY',
		//     resave: false,
		//     saveUninitialized: false,
		//     cookie: { secure: true },
		// }));
		// Apply Sentry middleware for request and error handling
		// app.use(Sentry.RequestHandlers.requestHandler());
		// app.use(Sentry.Handlers.errorHandler());
		// 404 error handling
		app.use((req, res, next) => {
			res.status(404).sendFile(
				path.join(__dirname, '../public', 'not-found.html')
			);
			next();
		});
		// Error handling middleware
		app.use((err, req, res, next) => {
			logger.error('Error occurred: ', err.stack || err.message || err);
			res.status(500).send(
				`Server error - something failed ${err.stack}`
			);
			next();
		});
		return app;
	});
}
export { app, initializeApp };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdHMvY29uZmlnL2FwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxPQUFPLE1BQU0sU0FBUyxDQUFDO0FBRTlCLE9BQU8sVUFBVSxNQUFNLGFBQWEsQ0FBQztBQUNyQyxPQUFPLFlBQVksTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sR0FBRyxNQUFNLEtBQUssQ0FBQztBQUN0QixPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxRQUFRLE1BQU0sVUFBVSxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDckMscUNBQXFDO0FBQ3JDLHlDQUF5QztBQUN6Qyw0Q0FBNEM7QUFDNUMsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sc0JBQXNCLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxTQUFTLE1BQU0scUJBQXFCLENBQUM7QUFDNUMsT0FBTyxFQUNOLGNBQWMsRUFDZCxxQkFBcUIsRUFDckIsY0FBYyxFQUNkLG1CQUFtQixFQUNuQixvQkFBb0IsRUFDcEIsTUFBTSxVQUFVLENBQUM7QUFDbEIsT0FBTyxXQUFXLE1BQU0sc0JBQXNCLENBQUM7QUFFL0MsTUFBTSxHQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7QUFDdEIsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBaUIsQ0FBQztBQUVyRCwrQkFBK0I7QUFDL0IsU0FBZSxhQUFhOztRQUMzQixJQUFJLE1BQU0sR0FBRyxNQUFNLFdBQVcsRUFBRSxDQUFDO1FBRWpDLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDM0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsUUFBUSxFQUFF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QUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UsIE5leHRGdW5jdGlvbiB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSAnYm9keS1wYXJzZXInO1xuaW1wb3J0IGNvb2tpZVBhcnNlciBmcm9tICdjb29raWUtcGFyc2VyJztcbmltcG9ydCBjb3JzIGZyb20gJ2NvcnMnO1xuaW1wb3J0IGhwcCBmcm9tICdocHAnO1xuaW1wb3J0IG1vcmdhbiBmcm9tICdtb3JnYW4nO1xuaW1wb3J0IHBhc3Nwb3J0IGZyb20gJ3Bhc3Nwb3J0JztcbmltcG9ydCB7IHJhbmRvbUJ5dGVzIH0gZnJvbSAnY3J5cHRvJztcbi8vIGltcG9ydCBzZW50cnkgZnJvbSAnQHNlbnRyeS9ub2RlJztcbi8vIGltcG9ydCBzZXNzaW9uIGZyb20gJ2V4cHJlc3Mtc2Vzc2lvbic7XG4vLyBpbXBvcnQgY29ubmVjdFJlZGlzIGZyb20gJ2Nvbm5lY3QtcmVkaXMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgaW5pdGlhbGl6ZVN0YXRpY1JvdXRlcyBmcm9tICcuLi9yb3V0ZXMvc3RhdGljUm91dGVzJztcbmltcG9ydCBhcGlSb3V0ZXMgZnJvbSAnLi4vcm91dGVzL2FwaVJvdXRlcyc7XG5pbXBvcnQge1xuXHRjc3JmTWlkZGxld2FyZSxcblx0aXBCbGFja2xpc3RNaWRkbGV3YXJlLFxuXHRsb2FkVGVzdFJvdXRlcyxcblx0cmF0ZUxpbWl0TWlkZGxld2FyZSxcblx0c2V0dXBTZWN1cml0eUhlYWRlcnNcbn0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IHNldHVwTG9nZ2VyIGZyb20gJy4uL21pZGRsZXdhcmUvbG9nZ2VyJztcblxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuY29uc3Qgc3RhdGljUm9vdFBhdGggPSBwcm9jZXNzLmVudi5TVEFUSUNfUk9PVF9QQVRIITtcblxuLy8gU2V0dXAgbWlkZGxld2FyZXMgYW5kIHJvdXRlc1xuYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZUFwcCgpIHtcblx0bGV0IGxvZ2dlciA9IGF3YWl0IHNldHVwTG9nZ2VyKCk7XG5cblx0YXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XG5cdGFwcC51c2UoZXhwcmVzcy51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IHRydWUgfSkpO1xuXHRhcHAudXNlKFxuXHRcdGNvcnMoe1xuXHRcdFx0bWV0aG9kczogJ0dFVCxQT1NULFBVVCxERUxFVEUnLFxuXHRcdFx0YWxsb3dlZEhlYWRlcnM6ICdDb250ZW50LVR5cGUsQXV0aG9yaXphdGlvbicsXG5cdFx0XHRjcmVkZW50aWFsczogdHJ1ZVxuXHRcdH0pXG5cdCk7XG5cdGFwcC51c2UoaHBwKCkpO1xuXHRhcHAudXNlKFxuXHRcdG1vcmdhbignY29tYmluZWQnLCB7XG5cdFx0XHRzdHJlYW06IHsgd3JpdGU6IChtZXNzYWdlKSA9PiBsb2dnZXIuaW5mbyhtZXNzYWdlLnRyaW0oKSkgfVxuXHRcdH0pXG5cdCk7XG5cdGFwcC51c2UocGFzc3BvcnQuaW5pdGlhbGl6ZSgpKTtcblx0YXBwLnVzZShjb29raWVQYXJzZXIoKSk7XG5cdGFwcC51c2UoZXhwcmVzcy5zdGF0aWMoc3RhdGljUm9vdFBhdGgpKTtcblx0YXBwLnVzZSgnLycsIGluaXRpYWxpemVTdGF0aWNSb3V0ZXMpO1xuXHRhcHAudXNlKCcvYXBpJywgYXBpUm91dGVzKTtcblx0YXBwLnVzZShyYXRlTGltaXRNaWRkbGV3YXJlKTtcblx0YXBwLnVzZShpcEJsYWNrbGlzdE1pZGRsZXdhcmUpO1xuXHRhcHAudXNlKGNzcmZNaWRkbGV3YXJlKTtcblxuXHQvLyBHZW5lcmF0ZSBub25jZSBmb3IgZWFjaCByZXF1ZXN0XG5cdGFwcC51c2UoKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XG5cdFx0cmVzLmxvY2Fscy5jc3BOb25jZSA9IHJhbmRvbUJ5dGVzKDE2KS50b1N0cmluZygnaGV4Jyk7XG5cdFx0bmV4dCgpO1xuXHR9KTtcblxuXHRzZXR1cFNlY3VyaXR5SGVhZGVycyhhcHApO1xuXG5cdC8vIExvYWQgdGVzdCByb3V0ZXNcblx0bG9hZFRlc3RSb3V0ZXMoYXBwKTtcblxuXHQvLyBTZXNzaW9uIG1hbmFnZW1lbnRcblx0Ly8gYXBwLnVzZShzZXNzaW9uKHtcblx0Ly8gICAgIHN0b3JlOiBuZXcgUmVkaXNTdG9yZSh7IGNsaWVudDogcmVkaXNDbGllbnQgfSksXG5cdC8vICAgICBzZWNyZXQ6ICdzZWNyZXRzLlJFRElTX0tFWScsXG5cdC8vICAgICByZXNhdmU6IGZhbHNlLFxuXHQvLyAgICAgc2F2ZVVuaW5pdGlhbGl6ZWQ6IGZhbHNlLFxuXHQvLyAgICAgY29va2llOiB7IHNlY3VyZTogdHJ1ZSB9LFxuXHQvLyB9KSk7XG5cblx0Ly8gQXBwbHkgU2VudHJ5IG1pZGRsZXdhcmUgZm9yIHJlcXVlc3QgYW5kIGVycm9yIGhhbmRsaW5nXG5cdC8vIGFwcC51c2UoU2VudHJ5LlJlcXVlc3RIYW5kbGVycy5yZXF1ZXN0SGFuZGxlcigpKTtcblx0Ly8gYXBwLnVzZShTZW50cnkuSGFuZGxlcnMuZXJyb3JIYW5kbGVyKCkpO1xuXG5cdC8vIDQwNCBlcnJvciBoYW5kbGluZ1xuXHRhcHAudXNlKChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikgPT4ge1xuXHRcdHJlcy5zdGF0dXMoNDA0KS5zZW5kRmlsZShcblx0XHRcdHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9wdWJsaWMnLCAnbm90LWZvdW5kLmh0bWwnKVxuXHRcdCk7XG5cdFx0bmV4dCgpO1xuXHR9KTtcblxuXHQvLyBFcnJvciBoYW5kbGluZyBtaWRkbGV3YXJlXG5cdGFwcC51c2UoKGVycjogRXJyb3IsIHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XG5cdFx0bG9nZ2VyLmVycm9yKCdFcnJvciBvY2N1cnJlZDogJywgZXJyLnN0YWNrIHx8IGVyci5tZXNzYWdlIHx8IGVycik7XG5cdFx0cmVzLnN0YXR1cyg1MDApLnNlbmQoYFNlcnZlciBlcnJvciAtIHNvbWV0aGluZyBmYWlsZWQgJHtlcnIuc3RhY2t9YCk7XG5cdFx0bmV4dCgpO1xuXHR9KTtcblxuXHRyZXR1cm4gYXBwO1xufVxuXG5leHBvcnQgeyBhcHAsIGluaXRpYWxpemVBcHAgfTtcbiJdfQ==
