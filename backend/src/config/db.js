import { __awaiter } from 'tslib';
import { Sequelize } from 'sequelize';
import setupLogger from '../middleware/logger.js';
import featureFlags from './featureFlags.js';
import getSecrets from './secrets.js';
let sequelize = null;
export function initializeDatabase() {
	return __awaiter(this, void 0, void 0, function* () {
		if (!sequelize) {
			let secrets = yield getSecrets();
			let logger = yield setupLogger();
			console.log(
				'Sequelize logging is set to ',
				featureFlags.sequelizeLoggingFlag,
				' data type: ',
				typeof featureFlags.sequelizeLoggingFlag
			);
			sequelize = new Sequelize(
				secrets.DB_NAME,
				secrets.DB_USER,
				secrets.DB_PASSWORD,
				{
					host: secrets.DB_HOST,
					dialect: secrets.DB_DIALECT,
					logging: process.env.FEATURE_SEQUELIZE_LOGGING
						? (msg) => logger.info(msg)
						: false
				}
			);
			try {
				yield sequelize.authenticate();
				logger.info('Connection has been established successfully.');
			} catch (error) {
				logger.error('Unable to connect to the database:', error);
				throw error;
			}
		}
		return sequelize;
	});
}
export function getSequelizeInstance() {
	if (!sequelize) {
		throw new Error(
			'Database has not been initialized. Call initializeDatabase() first.'
		);
	}
	return sequelize;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90cy9jb25maWcvZGIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDdEMsT0FBTyxXQUFXLE1BQU0sc0JBQXNCLENBQUM7QUFDL0MsT0FBTyxZQUFZLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUMsT0FBTyxVQUFVLE1BQU0sV0FBVyxDQUFDO0FBRW5DLElBQUksU0FBUyxHQUFxQixJQUFJLENBQUM7QUFFdkMsTUFBTSxVQUFnQixrQkFBa0I7O1FBQ3ZDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNoQixJQUFJLE9BQU8sR0FBRyxNQUFNLFVBQVUsRUFBRSxDQUFDO1lBQ2pDLElBQUksTUFBTSxHQUFHLE1BQU0sV0FBVyxFQUFFLENBQUM7WUFFakMsT0FBTyxDQUFDLEdBQUcsQ0FDViw4QkFBOEIsRUFDOUIsWUFBWSxDQUFDLG9CQUFvQixFQUNqQyxjQUFjLEVBQ2QsT0FBTyxZQUFZLENBQUMsb0JBQW9CLENBQ3hDLENBQUM7WUFFRixTQUFTLEdBQUcsSUFBSSxTQUFTLENBQ3hCLE9BQU8sQ0FBQyxPQUFPLEVBQ2YsT0FBTyxDQUFDLE9BQU8sRUFDZixPQUFPLENBQUMsV0FBVyxFQUNuQjtnQkFDQyxJQUFJLEVBQUUsT0FBTyxDQUFDLE9BQU87Z0JBQ3JCLE9BQU8sRUFBRSxPQUFPLENBQUMsVUFBVTtnQkFDM0IsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCO29CQUM3QyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO29CQUMzQixDQUFDLENBQUMsS0FBSzthQUNSLENBQ0QsQ0FBQztZQUVGLElBQUksQ0FBQztnQkFDSixNQUFNLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztnQkFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO1lBQzlELENBQUM7WUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO2dCQUNoQixNQUFNLENBQUMsS0FBSyxDQUFDLG9DQUFvQyxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUMxRCxNQUFNLEtBQUssQ0FBQztZQUNiLENBQUM7UUFDRixDQUFDO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFDbEIsQ0FBQztDQUFBO0FBRUQsTUFBTSxVQUFVLG9CQUFvQjtJQUNuQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FDZCxxRUFBcUUsQ0FDckUsQ0FBQztJQUNILENBQUM7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2VxdWVsaXplIH0gZnJvbSAnc2VxdWVsaXplJztcbmltcG9ydCBzZXR1cExvZ2dlciBmcm9tICcuLi9taWRkbGV3YXJlL2xvZ2dlcic7XG5pbXBvcnQgZmVhdHVyZUZsYWdzIGZyb20gJy4vZmVhdHVyZUZsYWdzJztcbmltcG9ydCBnZXRTZWNyZXRzIGZyb20gJy4vc2VjcmV0cyc7XG5cbmxldCBzZXF1ZWxpemU6IFNlcXVlbGl6ZSB8IG51bGwgPSBudWxsO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZURhdGFiYXNlKCk6IFByb21pc2U8U2VxdWVsaXplPiB7XG5cdGlmICghc2VxdWVsaXplKSB7XG5cdFx0bGV0IHNlY3JldHMgPSBhd2FpdCBnZXRTZWNyZXRzKCk7XG5cdFx0bGV0IGxvZ2dlciA9IGF3YWl0IHNldHVwTG9nZ2VyKCk7XG5cblx0XHRjb25zb2xlLmxvZyhcblx0XHRcdCdTZXF1ZWxpemUgbG9nZ2luZyBpcyBzZXQgdG8gJyxcblx0XHRcdGZlYXR1cmVGbGFncy5zZXF1ZWxpemVMb2dnaW5nRmxhZyxcblx0XHRcdCcgZGF0YSB0eXBlOiAnLFxuXHRcdFx0dHlwZW9mIGZlYXR1cmVGbGFncy5zZXF1ZWxpemVMb2dnaW5nRmxhZ1xuXHRcdCk7XG5cblx0XHRzZXF1ZWxpemUgPSBuZXcgU2VxdWVsaXplKFxuXHRcdFx0c2VjcmV0cy5EQl9OQU1FLFxuXHRcdFx0c2VjcmV0cy5EQl9VU0VSLFxuXHRcdFx0c2VjcmV0cy5EQl9QQVNTV09SRCxcblx0XHRcdHtcblx0XHRcdFx0aG9zdDogc2VjcmV0cy5EQl9IT1NULFxuXHRcdFx0XHRkaWFsZWN0OiBzZWNyZXRzLkRCX0RJQUxFQ1QsXG5cdFx0XHRcdGxvZ2dpbmc6IHByb2Nlc3MuZW52LkZFQVRVUkVfU0VRVUVMSVpFX0xPR0dJTkdcblx0XHRcdFx0XHQ/IChtc2cpID0+IGxvZ2dlci5pbmZvKG1zZylcblx0XHRcdFx0XHQ6IGZhbHNlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdHRyeSB7XG5cdFx0XHRhd2FpdCBzZXF1ZWxpemUuYXV0aGVudGljYXRlKCk7XG5cdFx0XHRsb2dnZXIuaW5mbygnQ29ubmVjdGlvbiBoYXMgYmVlbiBlc3RhYmxpc2hlZCBzdWNjZXNzZnVsbHkuJyk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGxvZ2dlci5lcnJvcignVW5hYmxlIHRvIGNvbm5lY3QgdG8gdGhlIGRhdGFiYXNlOicsIGVycm9yKTtcblx0XHRcdHRocm93IGVycm9yO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBzZXF1ZWxpemU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZXF1ZWxpemVJbnN0YW5jZSgpOiBTZXF1ZWxpemUge1xuXHRpZiAoIXNlcXVlbGl6ZSkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdCdEYXRhYmFzZSBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQuIENhbGwgaW5pdGlhbGl6ZURhdGFiYXNlKCkgZmlyc3QuJ1xuXHRcdCk7XG5cdH1cblx0cmV0dXJuIHNlcXVlbGl6ZTtcbn1cbiJdfQ==
