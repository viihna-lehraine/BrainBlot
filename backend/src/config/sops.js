import { __awaiter } from 'tslib';
import { execSync } from 'child_process';
import path from 'path';
import { __dirname } from './loadEnv.js';
import setupLogger from '../middleware/logger.js';
function decryptFile(encryptedFilePath) {
	return __awaiter(this, void 0, void 0, function* () {
		let logger = yield setupLogger();
		try {
			let decryptedFile = execSync(
				`sops -d --output-type json ${encryptedFilePath}`
			).toString();
			return decryptedFile;
		} catch (err) {
			logger.error('Error decrypting file from SOPS: ', err);
			throw err;
		}
	});
}
function decryptDataFiles() {
	return __awaiter(this, void 0, void 0, function* () {
		let logger = yield setupLogger();
		try {
			let filePaths = [
				process.env.SERVER_DATA_FILE_PATH_1,
				process.env.SERVER_DATA_FILE_PATH_2,
				process.env.SERVER_DATA_FILE_PATH_3,
				process.env.SERVER_DATA_FILE_PATH_4
			];
			let decryptedFiles = {};
			for (let [index, filePath] of filePaths.entries()) {
				if (filePath) {
					decryptedFiles[`files${index + 1}`] = execSync(
						`sops -d --output-type json ${filePath}`
					).toString();
				} else {
					logger.warn(
						`SERVER_DATA_FILE_PATH_${index + 1} is not defined`
					);
				}
			}
			return decryptedFiles;
		} catch (err) {
			logger.error(
				'Error decrypting files from backend data folder: ',
				err
			);
			throw err;
		}
	});
}
function getSSLKeys() {
	return __awaiter(this, void 0, void 0, function* () {
		let logger = yield setupLogger();
		try {
			let keyPath = path.join(
				__dirname,
				'../../keys/ssl/app.pem.key.gpg'
			);
			let certPath = path.join(
				__dirname,
				'../../keys/ssl/app.cert.pem.gpg'
			);
			let decryptedKey = yield decryptFile(keyPath);
			let decryptedCert = yield decryptFile(certPath);
			return {
				key: decryptedKey,
				cert: decryptedCert
			};
		} catch (err) {
			logger.error('Error retrieving SSL keys from SOPS: ', err);
			throw err;
		}
	});
}
export default { decryptDataFiles, getSSLKeys };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29wcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3RzL2NvbmZpZy9zb3BzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3RDLE9BQU8sV0FBVyxNQUFNLHNCQUFzQixDQUFDO0FBRS9DLFNBQWUsV0FBVyxDQUFDLGlCQUF5Qjs7UUFDbkQsSUFBSSxNQUFNLEdBQUcsTUFBTSxXQUFXLEVBQUUsQ0FBQztRQUVqQyxJQUFJLENBQUM7WUFDSixJQUFJLGFBQWEsR0FBRyxRQUFRLENBQzNCLDhCQUE4QixpQkFBaUIsRUFBRSxDQUNqRCxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2IsT0FBTyxhQUFhLENBQUM7UUFDdEIsQ0FBQztRQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7WUFDZCxNQUFNLENBQUMsS0FBSyxDQUFDLG1DQUFtQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZELE1BQU0sR0FBRyxDQUFDO1FBQ1gsQ0FBQztJQUNGLENBQUM7Q0FBQTtBQUVELFNBQWUsZ0JBQWdCOztRQUM5QixJQUFJLE1BQU0sR0FBRyxNQUFNLFdBQVcsRUFBRSxDQUFDO1FBRWpDLElBQUksQ0FBQztZQUNKLElBQUksU0FBUyxHQUFHO2dCQUNmLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCO2dCQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QjtnQkFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUI7Z0JBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCO2FBQ25DLENBQUM7WUFFRixJQUFJLGNBQWMsR0FBOEIsRUFBRSxDQUFDO1lBRW5ELEtBQUssSUFBSSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsSUFBSSxTQUFTLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztnQkFDbkQsSUFBSSxRQUFRLEVBQUUsQ0FBQztvQkFDZCxjQUFjLENBQUMsUUFBUSxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQzdDLDhCQUE4QixRQUFRLEVBQUUsQ0FDeEMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDZCxDQUFDO3FCQUFNLENBQUM7b0JBQ1AsTUFBTSxDQUFDLElBQUksQ0FDVix5QkFBeUIsS0FBSyxHQUFHLENBQUMsaUJBQWlCLENBQ25ELENBQUM7Z0JBQ0gsQ0FBQztZQUNGLENBQUM7WUFFRCxPQUFPLGNBQWMsQ0FBQztRQUN2QixDQUFDO1FBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztZQUNkLE1BQU0sQ0FBQyxLQUFLLENBQUMsbURBQW1ELEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDdkUsTUFBTSxHQUFHLENBQUM7UUFDWCxDQUFDO0lBQ0YsQ0FBQztDQUFBO0FBRUQsU0FBZSxVQUFVOztRQUN4QixJQUFJLE1BQU0sR0FBRyxNQUFNLFdBQVcsRUFBRSxDQUFDO1FBRWpDLElBQUksQ0FBQztZQUNKLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGdDQUFnQyxDQUFDLENBQUM7WUFDckUsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsaUNBQWlDLENBQUMsQ0FBQztZQUN2RSxJQUFJLFlBQVksR0FBRyxNQUFNLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM5QyxJQUFJLGFBQWEsR0FBRyxNQUFNLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUVoRCxPQUFPO2dCQUNOLEdBQUcsRUFBRSxZQUFZO2dCQUNqQixJQUFJLEVBQUUsYUFBYTthQUNuQixDQUFDO1FBQ0gsQ0FBQztRQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7WUFDZCxNQUFNLENBQUMsS0FBSyxDQUFDLHVDQUF1QyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzNELE1BQU0sR0FBRyxDQUFDO1FBQ1gsQ0FBQztJQUNGLENBQUM7Q0FBQTtBQUVELGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWNTeW5jIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IF9fZGlybmFtZSB9IGZyb20gJy4vbG9hZEVudic7XG5pbXBvcnQgc2V0dXBMb2dnZXIgZnJvbSAnLi4vbWlkZGxld2FyZS9sb2dnZXInO1xuXG5hc3luYyBmdW5jdGlvbiBkZWNyeXB0RmlsZShlbmNyeXB0ZWRGaWxlUGF0aDogc3RyaW5nKSB7XG5cdGxldCBsb2dnZXIgPSBhd2FpdCBzZXR1cExvZ2dlcigpO1xuXG5cdHRyeSB7XG5cdFx0bGV0IGRlY3J5cHRlZEZpbGUgPSBleGVjU3luYyhcblx0XHRcdGBzb3BzIC1kIC0tb3V0cHV0LXR5cGUganNvbiAke2VuY3J5cHRlZEZpbGVQYXRofWBcblx0XHQpLnRvU3RyaW5nKCk7XG5cdFx0cmV0dXJuIGRlY3J5cHRlZEZpbGU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdGxvZ2dlci5lcnJvcignRXJyb3IgZGVjcnlwdGluZyBmaWxlIGZyb20gU09QUzogJywgZXJyKTtcblx0XHR0aHJvdyBlcnI7XG5cdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZGVjcnlwdERhdGFGaWxlcygpIHtcblx0bGV0IGxvZ2dlciA9IGF3YWl0IHNldHVwTG9nZ2VyKCk7XG5cblx0dHJ5IHtcblx0XHRsZXQgZmlsZVBhdGhzID0gW1xuXHRcdFx0cHJvY2Vzcy5lbnYuU0VSVkVSX0RBVEFfRklMRV9QQVRIXzEsXG5cdFx0XHRwcm9jZXNzLmVudi5TRVJWRVJfREFUQV9GSUxFX1BBVEhfMixcblx0XHRcdHByb2Nlc3MuZW52LlNFUlZFUl9EQVRBX0ZJTEVfUEFUSF8zLFxuXHRcdFx0cHJvY2Vzcy5lbnYuU0VSVkVSX0RBVEFfRklMRV9QQVRIXzRcblx0XHRdO1xuXG5cdFx0bGV0IGRlY3J5cHRlZEZpbGVzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge307XG5cblx0XHRmb3IgKGxldCBbaW5kZXgsIGZpbGVQYXRoXSBvZiBmaWxlUGF0aHMuZW50cmllcygpKSB7XG5cdFx0XHRpZiAoZmlsZVBhdGgpIHtcblx0XHRcdFx0ZGVjcnlwdGVkRmlsZXNbYGZpbGVzJHtpbmRleCArIDF9YF0gPSBleGVjU3luYyhcblx0XHRcdFx0XHRgc29wcyAtZCAtLW91dHB1dC10eXBlIGpzb24gJHtmaWxlUGF0aH1gXG5cdFx0XHRcdCkudG9TdHJpbmcoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxvZ2dlci53YXJuKFxuXHRcdFx0XHRcdGBTRVJWRVJfREFUQV9GSUxFX1BBVEhfJHtpbmRleCArIDF9IGlzIG5vdCBkZWZpbmVkYFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBkZWNyeXB0ZWRGaWxlcztcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0bG9nZ2VyLmVycm9yKCdFcnJvciBkZWNyeXB0aW5nIGZpbGVzIGZyb20gYmFja2VuZCBkYXRhIGZvbGRlcjogJywgZXJyKTtcblx0XHR0aHJvdyBlcnI7XG5cdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0U1NMS2V5cygpIHtcblx0bGV0IGxvZ2dlciA9IGF3YWl0IHNldHVwTG9nZ2VyKCk7XG5cblx0dHJ5IHtcblx0XHRsZXQga2V5UGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi8uLi9rZXlzL3NzbC9hcHAucGVtLmtleS5ncGcnKTtcblx0XHRsZXQgY2VydFBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4va2V5cy9zc2wvYXBwLmNlcnQucGVtLmdwZycpO1xuXHRcdGxldCBkZWNyeXB0ZWRLZXkgPSBhd2FpdCBkZWNyeXB0RmlsZShrZXlQYXRoKTtcblx0XHRsZXQgZGVjcnlwdGVkQ2VydCA9IGF3YWl0IGRlY3J5cHRGaWxlKGNlcnRQYXRoKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRrZXk6IGRlY3J5cHRlZEtleSxcblx0XHRcdGNlcnQ6IGRlY3J5cHRlZENlcnRcblx0XHR9O1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRsb2dnZXIuZXJyb3IoJ0Vycm9yIHJldHJpZXZpbmcgU1NMIGtleXMgZnJvbSBTT1BTOiAnLCBlcnIpO1xuXHRcdHRocm93IGVycjtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCB7IGRlY3J5cHREYXRhRmlsZXMsIGdldFNTTEtleXMgfTtcbiJdfQ==
