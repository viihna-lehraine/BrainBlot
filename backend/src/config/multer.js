import multer from 'multer';
import path from 'path';
// Define the storage location and filename
let storage = multer.diskStorage({
	destination: (req, file, cb) => {
		cb(null, path.join(__dirname, '../../uploads')); // save files to 'uploads' directory
	},
	filename: (req, file, cb) => {
		let uniqueSuffix = `${Date.now()}-${Math.round(Math.random() * 1e9)}`;
		cb(null, `${uniqueSuffix}-${file.originalname}`);
	}
});
// File filter definition with type declarations
let fileFilter = (req, file, cb) => {
	let allowedMimeTypes = [
		'application/json',
		'application/x-x509-ca-cert',
		'application/pgp-keys',
		'application/pgp-signature',
		'application/xml',
		'application/x-gpg-key',
		'application/x-pkcs7-certificates',
		'audio/mp4',
		'audio/mpeg',
		'audio/ogg',
		'audio/wav',
		'audio/webm',
		'image/bmp',
		'image/jpeg',
		'image/jpg',
		'image/gif',
		'image/png',
		'image/svg+xml',
		'image/tiff',
		'image/webp',
		'text/html',
		'text/css',
		'text/csv',
		'text/markdown',
		'text/plain',
		'video/mp4',
		'video/mpeg',
		'video/quicktime',
		'video/x-msvideo'
	];
	let allowedExtensions = [
		'.avi',
		'.json',
		'.gpg',
		'.asc',
		'.xml',
		'.mp4',
		'.mp3',
		'.ogg',
		'.wav',
		'.webm',
		'.bmp',
		'.jpeg',
		'.jpg',
		'.gif',
		'.png',
		'.svg',
		'.tiff',
		'.webp',
		'.html',
		'.css',
		'.csv',
		'.md',
		'.txt',
		'.mpeg',
		'.mov',
		'.crt'
	];
	let ext = path.extname(file.originalname).toLowerCase();
	if (
		allowedMimeTypes.includes(file.mimetype) &&
		allowedExtensions.includes(ext)
	) {
		cb(null, true);
	} else {
		cb(null, false);
	}
};
// Set limits for the uploaded fileslet multerLimits = {
let multerLimits = {
	fileSize: 1024 * 1024 * 5
}; // Limit files to 5MB
// Create the multer instance with the storage, fileFilter, and limits
let multerConfiguredUpload = multer({
	storage: storage,
	fileFilter: fileFilter,
	limits: multerLimits
});
export default multerConfiguredUpload;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdHMvY29uZmlnL211bHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLE1BQThCLE1BQU0sUUFBUSxDQUFDO0FBQ3BELE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUV4QiwyQ0FBMkM7QUFDM0MsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztJQUNoQyxXQUFXLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFO1FBQzlCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLG9DQUFvQztJQUN0RixDQUFDO0lBQ0QsUUFBUSxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRTtRQUMzQixJQUFJLFlBQVksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3RFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxZQUFZLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7SUFDbEQsQ0FBQztDQUNELENBQUMsQ0FBQztBQUVILGdEQUFnRDtBQUNoRCxJQUFJLFVBQVUsR0FBRyxDQUNoQixHQUFZLEVBQ1osSUFBeUIsRUFDekIsRUFBc0IsRUFDckIsRUFBRTtJQUNILElBQUksZ0JBQWdCLEdBQUc7UUFDdEIsa0JBQWtCO1FBQ2xCLDRCQUE0QjtRQUM1QixzQkFBc0I7UUFDdEIsMkJBQTJCO1FBQzNCLGlCQUFpQjtRQUNqQix1QkFBdUI7UUFDdkIsa0NBQWtDO1FBQ2xDLFdBQVc7UUFDWCxZQUFZO1FBQ1osV0FBVztRQUNYLFdBQVc7UUFDWCxZQUFZO1FBQ1osV0FBVztRQUNYLFlBQVk7UUFDWixXQUFXO1FBQ1gsV0FBVztRQUNYLFdBQVc7UUFDWCxlQUFlO1FBQ2YsWUFBWTtRQUNaLFlBQVk7UUFDWixXQUFXO1FBQ1gsVUFBVTtRQUNWLFVBQVU7UUFDVixlQUFlO1FBQ2YsWUFBWTtRQUNaLFdBQVc7UUFDWCxZQUFZO1FBQ1osaUJBQWlCO1FBQ2pCLGlCQUFpQjtLQUNqQixDQUFDO0lBRUYsSUFBSSxpQkFBaUIsR0FBRztRQUN2QixNQUFNO1FBQ04sT0FBTztRQUNQLE1BQU07UUFDTixNQUFNO1FBQ04sTUFBTTtRQUNOLE1BQU07UUFDTixNQUFNO1FBQ04sTUFBTTtRQUNOLE1BQU07UUFDTixPQUFPO1FBQ1AsTUFBTTtRQUNOLE9BQU87UUFDUCxNQUFNO1FBQ04sTUFBTTtRQUNOLE1BQU07UUFDTixNQUFNO1FBQ04sT0FBTztRQUNQLE9BQU87UUFDUCxPQUFPO1FBQ1AsTUFBTTtRQUNOLE1BQU07UUFDTixLQUFLO1FBQ0wsTUFBTTtRQUNOLE9BQU87UUFDUCxNQUFNO1FBQ04sTUFBTTtLQUNOLENBQUM7SUFFRixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN4RCxJQUNDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3hDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFDOUIsQ0FBQztRQUNGLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDaEIsQ0FBQztTQUFNLENBQUM7UUFDUCxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2pCLENBQUM7QUFDRixDQUFDLENBQUM7QUFFRix3REFBd0Q7QUFDeEQsSUFBSSxZQUFZLEdBQUc7SUFDbEIsUUFBUSxFQUFFLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQztDQUN6QixDQUFDLENBQUMscUJBQXFCO0FBRXhCLHNFQUFzRTtBQUN0RSxJQUFJLHNCQUFzQixHQUFHLE1BQU0sQ0FBQztJQUNuQyxPQUFPLEVBQUUsT0FBTztJQUNoQixVQUFVLEVBQUUsVUFBVTtJQUN0QixNQUFNLEVBQUUsWUFBWTtDQUNwQixDQUFDLENBQUM7QUFFSCxlQUFlLHNCQUFzQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IG11bHRlciwgeyBGaWxlRmlsdGVyQ2FsbGJhY2sgfSBmcm9tICdtdWx0ZXInO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbi8vIERlZmluZSB0aGUgc3RvcmFnZSBsb2NhdGlvbiBhbmQgZmlsZW5hbWVcbmxldCBzdG9yYWdlID0gbXVsdGVyLmRpc2tTdG9yYWdlKHtcblx0ZGVzdGluYXRpb246IChyZXEsIGZpbGUsIGNiKSA9PiB7XG5cdFx0Y2IobnVsbCwgcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uLy4uL3VwbG9hZHMnKSk7IC8vIHNhdmUgZmlsZXMgdG8gJ3VwbG9hZHMnIGRpcmVjdG9yeVxuXHR9LFxuXHRmaWxlbmFtZTogKHJlcSwgZmlsZSwgY2IpID0+IHtcblx0XHRsZXQgdW5pcXVlU3VmZml4ID0gYCR7RGF0ZS5ub3coKX0tJHtNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxZTkpfWA7XG5cdFx0Y2IobnVsbCwgYCR7dW5pcXVlU3VmZml4fS0ke2ZpbGUub3JpZ2luYWxuYW1lfWApO1xuXHR9XG59KTtcblxuLy8gRmlsZSBmaWx0ZXIgZGVmaW5pdGlvbiB3aXRoIHR5cGUgZGVjbGFyYXRpb25zXG5sZXQgZmlsZUZpbHRlciA9IChcblx0cmVxOiBSZXF1ZXN0LFxuXHRmaWxlOiBFeHByZXNzLk11bHRlci5GaWxlLFxuXHRjYjogRmlsZUZpbHRlckNhbGxiYWNrXG4pID0+IHtcblx0bGV0IGFsbG93ZWRNaW1lVHlwZXMgPSBbXG5cdFx0J2FwcGxpY2F0aW9uL2pzb24nLFxuXHRcdCdhcHBsaWNhdGlvbi94LXg1MDktY2EtY2VydCcsXG5cdFx0J2FwcGxpY2F0aW9uL3BncC1rZXlzJyxcblx0XHQnYXBwbGljYXRpb24vcGdwLXNpZ25hdHVyZScsXG5cdFx0J2FwcGxpY2F0aW9uL3htbCcsXG5cdFx0J2FwcGxpY2F0aW9uL3gtZ3BnLWtleScsXG5cdFx0J2FwcGxpY2F0aW9uL3gtcGtjczctY2VydGlmaWNhdGVzJyxcblx0XHQnYXVkaW8vbXA0Jyxcblx0XHQnYXVkaW8vbXBlZycsXG5cdFx0J2F1ZGlvL29nZycsXG5cdFx0J2F1ZGlvL3dhdicsXG5cdFx0J2F1ZGlvL3dlYm0nLFxuXHRcdCdpbWFnZS9ibXAnLFxuXHRcdCdpbWFnZS9qcGVnJyxcblx0XHQnaW1hZ2UvanBnJyxcblx0XHQnaW1hZ2UvZ2lmJyxcblx0XHQnaW1hZ2UvcG5nJyxcblx0XHQnaW1hZ2Uvc3ZnK3htbCcsXG5cdFx0J2ltYWdlL3RpZmYnLFxuXHRcdCdpbWFnZS93ZWJwJyxcblx0XHQndGV4dC9odG1sJyxcblx0XHQndGV4dC9jc3MnLFxuXHRcdCd0ZXh0L2NzdicsXG5cdFx0J3RleHQvbWFya2Rvd24nLFxuXHRcdCd0ZXh0L3BsYWluJyxcblx0XHQndmlkZW8vbXA0Jyxcblx0XHQndmlkZW8vbXBlZycsXG5cdFx0J3ZpZGVvL3F1aWNrdGltZScsXG5cdFx0J3ZpZGVvL3gtbXN2aWRlbydcblx0XTtcblxuXHRsZXQgYWxsb3dlZEV4dGVuc2lvbnMgPSBbXG5cdFx0Jy5hdmknLFxuXHRcdCcuanNvbicsXG5cdFx0Jy5ncGcnLFxuXHRcdCcuYXNjJyxcblx0XHQnLnhtbCcsXG5cdFx0Jy5tcDQnLFxuXHRcdCcubXAzJyxcblx0XHQnLm9nZycsXG5cdFx0Jy53YXYnLFxuXHRcdCcud2VibScsXG5cdFx0Jy5ibXAnLFxuXHRcdCcuanBlZycsXG5cdFx0Jy5qcGcnLFxuXHRcdCcuZ2lmJyxcblx0XHQnLnBuZycsXG5cdFx0Jy5zdmcnLFxuXHRcdCcudGlmZicsXG5cdFx0Jy53ZWJwJyxcblx0XHQnLmh0bWwnLFxuXHRcdCcuY3NzJyxcblx0XHQnLmNzdicsXG5cdFx0Jy5tZCcsXG5cdFx0Jy50eHQnLFxuXHRcdCcubXBlZycsXG5cdFx0Jy5tb3YnLFxuXHRcdCcuY3J0J1xuXHRdO1xuXG5cdGxldCBleHQgPSBwYXRoLmV4dG5hbWUoZmlsZS5vcmlnaW5hbG5hbWUpLnRvTG93ZXJDYXNlKCk7XG5cdGlmIChcblx0XHRhbGxvd2VkTWltZVR5cGVzLmluY2x1ZGVzKGZpbGUubWltZXR5cGUpICYmXG5cdFx0YWxsb3dlZEV4dGVuc2lvbnMuaW5jbHVkZXMoZXh0KVxuXHQpIHtcblx0XHRjYihudWxsLCB0cnVlKTtcblx0fSBlbHNlIHtcblx0XHRjYihudWxsLCBmYWxzZSk7XG5cdH1cbn07XG5cbi8vIFNldCBsaW1pdHMgZm9yIHRoZSB1cGxvYWRlZCBmaWxlc2xldCBtdWx0ZXJMaW1pdHMgPSB7XG5sZXQgbXVsdGVyTGltaXRzID0ge1xuXHRmaWxlU2l6ZTogMTAyNCAqIDEwMjQgKiA1XG59OyAvLyBMaW1pdCBmaWxlcyB0byA1TUJcblxuLy8gQ3JlYXRlIHRoZSBtdWx0ZXIgaW5zdGFuY2Ugd2l0aCB0aGUgc3RvcmFnZSwgZmlsZUZpbHRlciwgYW5kIGxpbWl0c1xubGV0IG11bHRlckNvbmZpZ3VyZWRVcGxvYWQgPSBtdWx0ZXIoe1xuXHRzdG9yYWdlOiBzdG9yYWdlLFxuXHRmaWxlRmlsdGVyOiBmaWxlRmlsdGVyLFxuXHRsaW1pdHM6IG11bHRlckxpbWl0c1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG11bHRlckNvbmZpZ3VyZWRVcGxvYWQ7XG4iXX0=
