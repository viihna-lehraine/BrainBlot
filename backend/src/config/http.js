import { __awaiter } from 'tslib';
import express from 'express';
import { constants } from 'crypto';
import http2 from 'http2';
import createHttp2ExpressBridge from 'http2-express-bridge';
import https from 'https';
import featureFlags from './featureFlags.js';
import setupLogger from '../middleware/logger.js';
import sops from './sops.js';
export function setupHttp(app) {
	return __awaiter(this, void 0, void 0, function* () {
		console.log('setupHttp() executing');
		let logger = yield setupLogger();
		let sslKeys = yield sops.getSSLKeys();
		// Define global SSL options
		let options = {
			key: sslKeys.key,
			cert: sslKeys.cert,
			allowHTTP1: true,
			secureOptions:
				constants.SSL_OP_NO_TLSv1 | constants.SSL_OP_NO_TLSv1_1,
			ciphers: [
				'ECDHE-ECDSA-AES256-GCM-SHA384',
				'ECDHE-RSA-AES256-GCM-SHA384',
				'ECDHE-ECDSA-CHACHA20-POLY1305',
				'ECDHE-RSA-CHACHA20-POLY1305',
				'ECDHE-ECDSA-AES128-GCM-SHA256',
				'ECDHE-RSA-AES128-GCM-SHA256',
				'ECDHE-ECDSA-AES256-SHA384',
				'ECDHE-RSA-AES256-SHA384',
				'ECDHE-ECDSA-AES128-SHA256',
				'ECDHE-RSA-AES128-SHA256'
			].join(':'),
			honorCipherOrder: true
		};
		function startHttp1Server() {
			return __awaiter(this, void 0, void 0, function* () {
				logger.info('Starting HTTP1.1 server');
				logger.info('Server port: ', process.env.SERVER_PORT);
				https
					.createServer(options, app)
					.listen(process.env.SERVER_PORT, () => {
						logger.info(
							`HTTP1.1 server running on port ${process.env.SERVER_PORT}`
						);
					});
			});
		}
		function startHttp2Server() {
			return __awaiter(this, void 0, void 0, function* () {
				let http2App = createHttp2ExpressBridge(express);
				// Use the existing Express app as middleware for the HTTP2-compatible app
				http2App.use(app);
				try {
					http2
						.createSecureServer(options, http2App)
						.listen(process.env.SERVER_PORT, () => {
							logger.info(
								`HTTP2 server running on port ${process.env.SERVER_PORT}`
							);
						});
				} catch (err) {
					logger.error('Error starting HTTP2 server: ', err);
					throw err;
				}
			});
		}
		function startServer() {
			return __awaiter(this, void 0, void 0, function* () {
				if (featureFlags.http1Flag) {
					yield startHttp1Server();
				} else if (featureFlags.http2Flag) {
					yield startHttp2Server();
				} else {
					logger.error(
						'Please set one of the HTTP flags to true in the .env file'
					);
					throw new Error(
						'Please set one of the HTTP flags to true in the .env file'
					);
				}
			});
		}
		return { startServer };
	});
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3RzL2NvbmZpZy9odHRwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLE9BQXdCLE1BQU0sU0FBUyxDQUFDO0FBQy9DLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbkMsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sd0JBQXdCLE1BQU0sc0JBQXNCLENBQUM7QUFDNUQsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sWUFBWSxNQUFNLGdCQUFnQixDQUFDO0FBQzFDLE9BQU8sV0FBVyxNQUFNLHNCQUFzQixDQUFDO0FBQy9DLE9BQU8sSUFBSSxNQUFNLFFBQVEsQ0FBQztBQUUxQixNQUFNLFVBQWdCLFNBQVMsQ0FBQyxHQUFnQjs7UUFDL0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ3JDLElBQUksTUFBTSxHQUFHLE1BQU0sV0FBVyxFQUFFLENBQUM7UUFDakMsSUFBSSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFFdEMsNEJBQTRCO1FBQzVCLElBQUksT0FBTyxHQUFHO1lBQ2IsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHO1lBQ2hCLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtZQUNsQixVQUFVLEVBQUUsSUFBSTtZQUNoQixhQUFhLEVBQUUsU0FBUyxDQUFDLGVBQWUsR0FBRyxTQUFTLENBQUMsaUJBQWlCO1lBQ3RFLE9BQU8sRUFBRTtnQkFDUiwrQkFBK0I7Z0JBQy9CLDZCQUE2QjtnQkFDN0IsK0JBQStCO2dCQUMvQiw2QkFBNkI7Z0JBQzdCLCtCQUErQjtnQkFDL0IsNkJBQTZCO2dCQUM3QiwyQkFBMkI7Z0JBQzNCLHlCQUF5QjtnQkFDekIsMkJBQTJCO2dCQUMzQix5QkFBeUI7YUFDekIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ1gsZ0JBQWdCLEVBQUUsSUFBSTtTQUN0QixDQUFDO1FBRUYsU0FBZSxnQkFBZ0I7O2dCQUM5QixNQUFNLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUM7Z0JBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBRXRELEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUU7b0JBQ3JFLE1BQU0sQ0FBQyxJQUFJLENBQ1Ysa0NBQWtDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQzNELENBQUM7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDSixDQUFDO1NBQUE7UUFFRCxTQUFlLGdCQUFnQjs7Z0JBQzlCLElBQUksUUFBUSxHQUFHLHdCQUF3QixDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUVqRCwwRUFBMEU7Z0JBQzFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBRWxCLElBQUksQ0FBQztvQkFDSixLQUFLO3lCQUNILGtCQUFrQixDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUM7eUJBQ3JDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUU7d0JBQ3JDLE1BQU0sQ0FBQyxJQUFJLENBQ1YsZ0NBQWdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQ3pELENBQUM7b0JBQ0gsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQztnQkFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO29CQUNkLE1BQU0sQ0FBQyxLQUFLLENBQUMsK0JBQStCLEVBQUUsR0FBRyxDQUFDLENBQUM7b0JBQ25ELE1BQU0sR0FBRyxDQUFDO2dCQUNYLENBQUM7WUFDRixDQUFDO1NBQUE7UUFFRCxTQUFlLFdBQVc7O2dCQUN6QixJQUFJLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQztvQkFDNUIsTUFBTSxnQkFBZ0IsRUFBRSxDQUFDO2dCQUMxQixDQUFDO3FCQUFNLElBQUksWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDO29CQUNuQyxNQUFNLGdCQUFnQixFQUFFLENBQUM7Z0JBQzFCLENBQUM7cUJBQU0sQ0FBQztvQkFDUCxNQUFNLENBQUMsS0FBSyxDQUNYLDJEQUEyRCxDQUMzRCxDQUFDO29CQUNGLE1BQU0sSUFBSSxLQUFLLENBQ2QsMkRBQTJELENBQzNELENBQUM7Z0JBQ0gsQ0FBQztZQUNGLENBQUM7U0FBQTtRQUVELE9BQU8sRUFBRSxXQUFXLEVBQUUsQ0FBQztJQUN4QixDQUFDO0NBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcywgeyBBcHBsaWNhdGlvbiB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgY29uc3RhbnRzIH0gZnJvbSAnY3J5cHRvJztcbmltcG9ydCBodHRwMiBmcm9tICdodHRwMic7XG5pbXBvcnQgY3JlYXRlSHR0cDJFeHByZXNzQnJpZGdlIGZyb20gJ2h0dHAyLWV4cHJlc3MtYnJpZGdlJztcbmltcG9ydCBodHRwcyBmcm9tICdodHRwcyc7XG5pbXBvcnQgZmVhdHVyZUZsYWdzIGZyb20gJy4vZmVhdHVyZUZsYWdzJztcbmltcG9ydCBzZXR1cExvZ2dlciBmcm9tICcuLi9taWRkbGV3YXJlL2xvZ2dlcic7XG5pbXBvcnQgc29wcyBmcm9tICcuL3NvcHMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2V0dXBIdHRwKGFwcDogQXBwbGljYXRpb24pIHtcblx0Y29uc29sZS5sb2coJ3NldHVwSHR0cCgpIGV4ZWN1dGluZycpO1xuXHRsZXQgbG9nZ2VyID0gYXdhaXQgc2V0dXBMb2dnZXIoKTtcblx0bGV0IHNzbEtleXMgPSBhd2FpdCBzb3BzLmdldFNTTEtleXMoKTtcblxuXHQvLyBEZWZpbmUgZ2xvYmFsIFNTTCBvcHRpb25zXG5cdGxldCBvcHRpb25zID0ge1xuXHRcdGtleTogc3NsS2V5cy5rZXksXG5cdFx0Y2VydDogc3NsS2V5cy5jZXJ0LFxuXHRcdGFsbG93SFRUUDE6IHRydWUsXG5cdFx0c2VjdXJlT3B0aW9uczogY29uc3RhbnRzLlNTTF9PUF9OT19UTFN2MSB8IGNvbnN0YW50cy5TU0xfT1BfTk9fVExTdjFfMSxcblx0XHRjaXBoZXJzOiBbXG5cdFx0XHQnRUNESEUtRUNEU0EtQUVTMjU2LUdDTS1TSEEzODQnLFxuXHRcdFx0J0VDREhFLVJTQS1BRVMyNTYtR0NNLVNIQTM4NCcsXG5cdFx0XHQnRUNESEUtRUNEU0EtQ0hBQ0hBMjAtUE9MWTEzMDUnLFxuXHRcdFx0J0VDREhFLVJTQS1DSEFDSEEyMC1QT0xZMTMwNScsXG5cdFx0XHQnRUNESEUtRUNEU0EtQUVTMTI4LUdDTS1TSEEyNTYnLFxuXHRcdFx0J0VDREhFLVJTQS1BRVMxMjgtR0NNLVNIQTI1NicsXG5cdFx0XHQnRUNESEUtRUNEU0EtQUVTMjU2LVNIQTM4NCcsXG5cdFx0XHQnRUNESEUtUlNBLUFFUzI1Ni1TSEEzODQnLFxuXHRcdFx0J0VDREhFLUVDRFNBLUFFUzEyOC1TSEEyNTYnLFxuXHRcdFx0J0VDREhFLVJTQS1BRVMxMjgtU0hBMjU2J1xuXHRcdF0uam9pbignOicpLFxuXHRcdGhvbm9yQ2lwaGVyT3JkZXI6IHRydWVcblx0fTtcblxuXHRhc3luYyBmdW5jdGlvbiBzdGFydEh0dHAxU2VydmVyKCkge1xuXHRcdGxvZ2dlci5pbmZvKCdTdGFydGluZyBIVFRQMS4xIHNlcnZlcicpO1xuXHRcdGxvZ2dlci5pbmZvKCdTZXJ2ZXIgcG9ydDogJywgcHJvY2Vzcy5lbnYuU0VSVkVSX1BPUlQpO1xuXG5cdFx0aHR0cHMuY3JlYXRlU2VydmVyKG9wdGlvbnMsIGFwcCkubGlzdGVuKHByb2Nlc3MuZW52LlNFUlZFUl9QT1JULCAoKSA9PiB7XG5cdFx0XHRsb2dnZXIuaW5mbyhcblx0XHRcdFx0YEhUVFAxLjEgc2VydmVyIHJ1bm5pbmcgb24gcG9ydCAke3Byb2Nlc3MuZW52LlNFUlZFUl9QT1JUfWBcblx0XHRcdCk7XG5cdFx0fSk7XG5cdH1cblxuXHRhc3luYyBmdW5jdGlvbiBzdGFydEh0dHAyU2VydmVyKCkge1xuXHRcdGxldCBodHRwMkFwcCA9IGNyZWF0ZUh0dHAyRXhwcmVzc0JyaWRnZShleHByZXNzKTtcblxuXHRcdC8vIFVzZSB0aGUgZXhpc3RpbmcgRXhwcmVzcyBhcHAgYXMgbWlkZGxld2FyZSBmb3IgdGhlIEhUVFAyLWNvbXBhdGlibGUgYXBwXG5cdFx0aHR0cDJBcHAudXNlKGFwcCk7XG5cblx0XHR0cnkge1xuXHRcdFx0aHR0cDJcblx0XHRcdFx0LmNyZWF0ZVNlY3VyZVNlcnZlcihvcHRpb25zLCBodHRwMkFwcClcblx0XHRcdFx0Lmxpc3Rlbihwcm9jZXNzLmVudi5TRVJWRVJfUE9SVCwgKCkgPT4ge1xuXHRcdFx0XHRcdGxvZ2dlci5pbmZvKFxuXHRcdFx0XHRcdFx0YEhUVFAyIHNlcnZlciBydW5uaW5nIG9uIHBvcnQgJHtwcm9jZXNzLmVudi5TRVJWRVJfUE9SVH1gXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fSk7XG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRsb2dnZXIuZXJyb3IoJ0Vycm9yIHN0YXJ0aW5nIEhUVFAyIHNlcnZlcjogJywgZXJyKTtcblx0XHRcdHRocm93IGVycjtcblx0XHR9XG5cdH1cblxuXHRhc3luYyBmdW5jdGlvbiBzdGFydFNlcnZlcigpIHtcblx0XHRpZiAoZmVhdHVyZUZsYWdzLmh0dHAxRmxhZykge1xuXHRcdFx0YXdhaXQgc3RhcnRIdHRwMVNlcnZlcigpO1xuXHRcdH0gZWxzZSBpZiAoZmVhdHVyZUZsYWdzLmh0dHAyRmxhZykge1xuXHRcdFx0YXdhaXQgc3RhcnRIdHRwMlNlcnZlcigpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRsb2dnZXIuZXJyb3IoXG5cdFx0XHRcdCdQbGVhc2Ugc2V0IG9uZSBvZiB0aGUgSFRUUCBmbGFncyB0byB0cnVlIGluIHRoZSAuZW52IGZpbGUnXG5cdFx0XHQpO1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHQnUGxlYXNlIHNldCBvbmUgb2YgdGhlIEhUVFAgZmxhZ3MgdG8gdHJ1ZSBpbiB0aGUgLmVudiBmaWxlJ1xuXHRcdFx0KTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGFydFNlcnZlciB9O1xufVxuIl19
