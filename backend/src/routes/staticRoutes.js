import { __awaiter } from 'tslib';
import express from 'express';
import path from 'path';
import setupLogger from '../middleware/logger.js';
let router = express.Router();
function setupStaticRoutes() {
	return __awaiter(this, void 0, void 0, function* () {
		let logger = yield setupLogger();
		let staticRootPath = process.env.STATIC_ROOT_PATH;
		// Define root file path for public/
		router.get('/', (req, res) => {
			logger.info('GET request received at /');
			res.sendFile(path.join(staticRootPath, 'index.html'));
			logger.info('index.html was accessed');
		});
		// Serve root HTML files
		router.get('/:page', (req, res) => {
			let page = req.params.page;
			res.sendFile(path.join(staticRootPath, `${page}.html`), (err) => {
				if (err) {
					res.status(404).send('Page not found');
				}
			});
		});
		// Serve static directories
		router.use(
			'/css',
			express.static(path.join(staticRootPath, 'assets/css'))
		);
		router.use(
			'/js',
			express.static(path.join(staticRootPath, 'assets/js'))
		);
		router.use(
			'/images',
			express.static(path.join(staticRootPath, 'assets/images'))
		);
		router.use(
			'/fonts',
			express.static(path.join(staticRootPath, 'assets/fonts'))
		);
		router.use(
			'/icons',
			express.static(path.join(staticRootPath, 'assets/icons'))
		);
		// Serve nested HTML files
		router.get('/*', (req, res) => {
			res.sendFile(
				path.join(staticRootPath, req.path + '.html'),
				(err) => {
					if (err) {
						res.status(404).send('Page not found');
					}
				}
			);
		});
		// Serve specific static files
		router.get('/app.js', (req, res) => {
			logger.info('GET request received at /app.js');
			res.sendFile(process.env.FRONTEND_APP_JS_PATH);
			logger.info('app.js was accessed');
		});
		router.get('/secrets.json.gpg', (req, res) => {
			logger.info('GET request received at /secrets.json.gpg');
			res.sendFile(process.env.FRONTEND_SECRETS_PATH, (err) => {
				if (err) {
					logger.error('Failed to send secrets.json.gpg:', err);
					res.status(404).send('File not found');
				} else {
					logger.info('secrets.json.gpg was accessed');
				}
			});
		});
		router.get('/browser-config.xml', (req, res) => {
			logger.info('GET request received at /browser-config.xml');
			res.sendFile(process.env.FRONTEND_BROWSER_CONFIG_XML_PATH);
			logger.info('browser-config.xml was accessed');
		});
		router.get('/humans.md', (req, res) => {
			logger.info('GET request received at /humans.md');
			res.sendFile(process.env.FRONTEND_HUMANS_MD_PATH);
			logger.info('humans.md was accessed');
		});
		router.get('/robots.txt', (req, res) => {
			logger.info('GET request received at /robots.txt');
			res.sendFile(process.env.FRONTEND_ROBOTS_TXT_PATH);
			logger.info('robots.txt was accessed');
		});
		// 404 handler for unmatched routes
		router.use((req, res) => {
			res.status(404).sendFile(
				path.join(staticRootPath, 'not-found.html')
			);
			logger.info('404 - Not Found');
		});
	});
}
// For setting up routes when initializing the application
export default function initializeStaticRoutes(app) {
	return __awaiter(this, void 0, void 0, function* () {
		try {
			yield setupStaticRoutes();
			app.use('/', router);
		} catch (err) {
			console.error('Error setting up routes: ', err);
		}
	});
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGljUm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdHMvcm91dGVzL3N0YXRpY1JvdXRlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxPQUFPLE1BQU0sU0FBUyxDQUFDO0FBQzlCLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLFdBQVcsTUFBTSxzQkFBc0IsQ0FBQztBQUUvQyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFOUIsU0FBZSxpQkFBaUI7O1FBQy9CLElBQUksTUFBTSxHQUFHLE1BQU0sV0FBVyxFQUFFLENBQUM7UUFDakMsSUFBSSxjQUFjLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBMEIsQ0FBQztRQUU1RCxvQ0FBb0M7UUFDcEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDNUIsTUFBTSxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1lBQ3pDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUN0RCxNQUFNLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7UUFFSCx3QkFBd0I7UUFDeEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDakMsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDM0IsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxHQUFHLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDL0QsSUFBSSxHQUFHLEVBQUUsQ0FBQztvQkFD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QU0sQ0FBQyxPQUFPLFVBQWdCLHNCQUFzQixDQUNuRCxHQUF3Qjs7UUFFeEIsSUFBSSxDQUFDO1lBQ0osTUFBTSxpQkFBaUIsRUFBRSxDQUFDO1lBQzFCLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3RCLENBQUM7UUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ2QsT0FBTyxDQUFDLEtBQUssQ0FBQywyQkFBMkIsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNqRCxDQUFDO0lBQ0YsQ0FBQztDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBzZXR1cExvZ2dlciBmcm9tICcuLi9taWRkbGV3YXJlL2xvZ2dlcic7XG5cbmxldCByb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xuXG5hc3luYyBmdW5jdGlvbiBzZXR1cFN0YXRpY1JvdXRlcygpOiBQcm9taXNlPHZvaWQ+IHtcblx0bGV0IGxvZ2dlciA9IGF3YWl0IHNldHVwTG9nZ2VyKCk7XG5cdGxldCBzdGF0aWNSb290UGF0aCA9IHByb2Nlc3MuZW52LlNUQVRJQ19ST09UX1BBVEggYXMgc3RyaW5nO1xuXG5cdC8vIERlZmluZSByb290IGZpbGUgcGF0aCBmb3IgcHVibGljL1xuXHRyb3V0ZXIuZ2V0KCcvJywgKHJlcSwgcmVzKSA9PiB7XG5cdFx0bG9nZ2VyLmluZm8oJ0dFVCByZXF1ZXN0IHJlY2VpdmVkIGF0IC8nKTtcblx0XHRyZXMuc2VuZEZpbGUocGF0aC5qb2luKHN0YXRpY1Jvb3RQYXRoLCAnaW5kZXguaHRtbCcpKTtcblx0XHRsb2dnZXIuaW5mbygnaW5kZXguaHRtbCB3YXMgYWNjZXNzZWQnKTtcblx0fSk7XG5cblx0Ly8gU2VydmUgcm9vdCBIVE1MIGZpbGVzXG5cdHJvdXRlci5nZXQoJy86cGFnZScsIChyZXEsIHJlcykgPT4ge1xuXHRcdGxldCBwYWdlID0gcmVxLnBhcmFtcy5wYWdlO1xuXHRcdHJlcy5zZW5kRmlsZShwYXRoLmpvaW4oc3RhdGljUm9vdFBhdGgsIGAke3BhZ2V9Lmh0bWxgKSwgKGVycikgPT4ge1xuXHRcdFx0aWYgKGVycikge1xuXHRcdFx0XHRyZXMuc3RhdHVzKDQwNCkuc2VuZCgnUGFnZSBub3QgZm91bmQnKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG5cblx0Ly8gU2VydmUgc3RhdGljIGRpcmVjdG9yaWVzXG5cdHJvdXRlci51c2UoJy9jc3MnLCBleHByZXNzLnN0YXRpYyhwYXRoLmpvaW4oc3RhdGljUm9vdFBhdGgsICdhc3NldHMvY3NzJykpKTtcblx0cm91dGVyLnVzZSgnL2pzJywgZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKHN0YXRpY1Jvb3RQYXRoLCAnYXNzZXRzL2pzJykpKTtcblx0cm91dGVyLnVzZShcblx0XHQnL2ltYWdlcycsXG5cdFx0ZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKHN0YXRpY1Jvb3RQYXRoLCAnYXNzZXRzL2ltYWdlcycpKVxuXHQpO1xuXHRyb3V0ZXIudXNlKFxuXHRcdCcvZm9udHMnLFxuXHRcdGV4cHJlc3Muc3RhdGljKHBhdGguam9pbihzdGF0aWNSb290UGF0aCwgJ2Fzc2V0cy9mb250cycpKVxuXHQpO1xuXHRyb3V0ZXIudXNlKFxuXHRcdCcvaWNvbnMnLFxuXHRcdGV4cHJlc3Muc3RhdGljKHBhdGguam9pbihzdGF0aWNSb290UGF0aCwgJ2Fzc2V0cy9pY29ucycpKVxuXHQpO1xuXG5cdC8vIFNlcnZlIG5lc3RlZCBIVE1MIGZpbGVzXG5cdHJvdXRlci5nZXQoJy8qJywgKHJlcSwgcmVzKSA9PiB7XG5cdFx0cmVzLnNlbmRGaWxlKHBhdGguam9pbihzdGF0aWNSb290UGF0aCwgcmVxLnBhdGggKyAnLmh0bWwnKSwgKGVycikgPT4ge1xuXHRcdFx0aWYgKGVycikge1xuXHRcdFx0XHRyZXMuc3RhdHVzKDQwNCkuc2VuZCgnUGFnZSBub3QgZm91bmQnKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG5cblx0Ly8gU2VydmUgc3BlY2lmaWMgc3RhdGljIGZpbGVzXG5cdHJvdXRlci5nZXQoJy9hcHAuanMnLCAocmVxLCByZXMpID0+IHtcblx0XHRsb2dnZXIuaW5mbygnR0VUIHJlcXVlc3QgcmVjZWl2ZWQgYXQgL2FwcC5qcycpO1xuXHRcdHJlcy5zZW5kRmlsZShwcm9jZXNzLmVudi5GUk9OVEVORF9BUFBfSlNfUEFUSCBhcyBzdHJpbmcpO1xuXHRcdGxvZ2dlci5pbmZvKCdhcHAuanMgd2FzIGFjY2Vzc2VkJyk7XG5cdH0pO1xuXG5cdHJvdXRlci5nZXQoJy9zZWNyZXRzLmpzb24uZ3BnJywgKHJlcSwgcmVzKSA9PiB7XG5cdFx0bG9nZ2VyLmluZm8oJ0dFVCByZXF1ZXN0IHJlY2VpdmVkIGF0IC9zZWNyZXRzLmpzb24uZ3BnJyk7XG5cdFx0cmVzLnNlbmRGaWxlKHByb2Nlc3MuZW52LkZST05URU5EX1NFQ1JFVFNfUEFUSCBhcyBzdHJpbmcsIChlcnIpID0+IHtcblx0XHRcdGlmIChlcnIpIHtcblx0XHRcdFx0bG9nZ2VyLmVycm9yKCdGYWlsZWQgdG8gc2VuZCBzZWNyZXRzLmpzb24uZ3BnOicsIGVycik7XG5cdFx0XHRcdHJlcy5zdGF0dXMoNDA0KS5zZW5kKCdGaWxlIG5vdCBmb3VuZCcpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bG9nZ2VyLmluZm8oJ3NlY3JldHMuanNvbi5ncGcgd2FzIGFjY2Vzc2VkJyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xuXG5cdHJvdXRlci5nZXQoJy9icm93c2VyLWNvbmZpZy54bWwnLCAocmVxLCByZXMpID0+IHtcblx0XHRsb2dnZXIuaW5mbygnR0VUIHJlcXVlc3QgcmVjZWl2ZWQgYXQgL2Jyb3dzZXItY29uZmlnLnhtbCcpO1xuXHRcdHJlcy5zZW5kRmlsZShwcm9jZXNzLmVudi5GUk9OVEVORF9CUk9XU0VSX0NPTkZJR19YTUxfUEFUSCBhcyBzdHJpbmcpO1xuXHRcdGxvZ2dlci5pbmZvKCdicm93c2VyLWNvbmZpZy54bWwgd2FzIGFjY2Vzc2VkJyk7XG5cdH0pO1xuXG5cdHJvdXRlci5nZXQoJy9odW1hbnMubWQnLCAocmVxLCByZXMpID0+IHtcblx0XHRsb2dnZXIuaW5mbygnR0VUIHJlcXVlc3QgcmVjZWl2ZWQgYXQgL2h1bWFucy5tZCcpO1xuXHRcdHJlcy5zZW5kRmlsZShwcm9jZXNzLmVudi5GUk9OVEVORF9IVU1BTlNfTURfUEFUSCBhcyBzdHJpbmcpO1xuXHRcdGxvZ2dlci5pbmZvKCdodW1hbnMubWQgd2FzIGFjY2Vzc2VkJyk7XG5cdH0pO1xuXG5cdHJvdXRlci5nZXQoJy9yb2JvdHMudHh0JywgKHJlcSwgcmVzKSA9PiB7XG5cdFx0bG9nZ2VyLmluZm8oJ0dFVCByZXF1ZXN0IHJlY2VpdmVkIGF0IC9yb2JvdHMudHh0Jyk7XG5cdFx0cmVzLnNlbmRGaWxlKHByb2Nlc3MuZW52LkZST05URU5EX1JPQk9UU19UWFRfUEFUSCBhcyBzdHJpbmcpO1xuXHRcdGxvZ2dlci5pbmZvKCdyb2JvdHMudHh0IHdhcyBhY2Nlc3NlZCcpO1xuXHR9KTtcblxuXHQvLyA0MDQgaGFuZGxlciBmb3IgdW5tYXRjaGVkIHJvdXRlc1xuXHRyb3V0ZXIudXNlKChyZXEsIHJlcykgPT4ge1xuXHRcdHJlcy5zdGF0dXMoNDA0KS5zZW5kRmlsZShwYXRoLmpvaW4oc3RhdGljUm9vdFBhdGgsICdub3QtZm91bmQuaHRtbCcpKTtcblx0XHRsb2dnZXIuaW5mbygnNDA0IC0gTm90IEZvdW5kJyk7XG5cdH0pO1xufVxuXG4vLyBGb3Igc2V0dGluZyB1cCByb3V0ZXMgd2hlbiBpbml0aWFsaXppbmcgdGhlIGFwcGxpY2F0aW9uXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBpbml0aWFsaXplU3RhdGljUm91dGVzKFxuXHRhcHA6IGV4cHJlc3MuQXBwbGljYXRpb25cbik6IFByb21pc2U8dm9pZD4ge1xuXHR0cnkge1xuXHRcdGF3YWl0IHNldHVwU3RhdGljUm91dGVzKCk7XG5cdFx0YXBwLnVzZSgnLycsIHJvdXRlcik7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNldHRpbmcgdXAgcm91dGVzOiAnLCBlcnIpO1xuXHR9XG59XG4iXX0=
