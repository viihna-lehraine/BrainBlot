import { __awaiter } from 'tslib';
import express from 'express';
import argon2 from 'argon2';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import axios from 'axios';
import zxcvbn from 'zxcvbn';
import { v4 as uuidv4 } from 'uuid';
import xss from 'xss';
import {
	generateConfirmationEmailTemplate,
	generateEmail2FACode,
	generateQRCode,
	generateTOTPSecret,
	getTransporter,
	verifyEmail2FACode,
	verifyTOTPToken
} from '../index.js';
import setupLogger from '../middleware/logger.js';
import getSecrets from '../config/secrets.js';
import UserModelPromise from '../models/User.js';
let router = express.Router();
// Password strength checker
let checkPasswordStrength = (password) => {
	let { score } = zxcvbn(password);
	return score >= 3;
};
// Register
router.post('/register', (req, res) =>
	__awaiter(void 0, void 0, void 0, function* () {
		let { username, email, password, confirmPassword } = req.body;
		let secrets = yield getSecrets();
		let logger = yield setupLogger();
		// Sanitize inputs
		let sanitizedUsername = xss(username);
		let sanitizedEmail = xss(email);
		let sanitizedPassword = xss(password);
		if (sanitizedPassword !== confirmPassword) {
			logger.info('Registration failure: passwords do not match');
			return res.status(400).json({
				password: 'Registration failure: passwords do not match'
			});
		}
		let User = yield UserModelPromise;
		if (!User.validatePassword(sanitizedPassword)) {
			logger.info(
				'Registration failure: passwords do not meet complexity requirements'
			);
			return res.status(400).json({
				password:
					'Registration failure: password does not meet complexity requirements'
			});
		}
		if (!checkPasswordStrength(sanitizedPassword)) {
			logger.info('Registration failure: password is too weak');
			return res.status(400).json({
				password: 'Registration failure: password is too weak'
			});
		}
		// let didHibpCheckFail = false; // *DEV-NOTE* need to figure out what, if anything, to do with this variable
		try {
			let pwnedResponse = yield axios.get(
				`https://api.pwnedpasswords.com/range/${sanitizedPassword.substring(0, 5)}`
			);
			let pwnedList = pwnedResponse.data
				.split('\n')
				.map((p) => p.split(':')[0]);
			if (
				pwnedList.includes(sanitizedPassword.substring(5).toUpperCase())
			) {
				logger.warn(
					'Registration warning: password has been exposed in a data breach'
				);
				return res.status(400).json({
					password:
						'Registration warning: password has been exposed in a data breach'
				});
			}
		} catch (error) {
			console.error(error);
			logger.error('Registration error: HIBP API check failed');
			// didHibpCheckFail = true;
		}
		try {
			let user = yield User.findOne({ where: { email: sanitizedEmail } });
			if (user) {
				logger.info('Registration failure: email already exists');
				return res.status(400).json({
					email: 'Registration failure: email already exists'
				});
			} else {
				let hashedPassword = yield argon2.hash(
					sanitizedPassword + secrets.PEPPER,
					{
						type: argon2.argon2id
					}
				);
				let newUser = yield User.create({
					id: uuidv4(),
					username: sanitizedUsername,
					password: hashedPassword,
					email: sanitizedEmail,
					isAccountVerified: false,
					resetPasswordToken: null,
					resetPasswordExpires: null,
					isMfaEnabled: false,
					creationDate: new Date()
				});
				// Generate a confirmation token
				let confirmationToken = jwt.sign(
					{ id: newUser.id },
					secrets.JWT_SECRET,
					{ expiresIn: '1d' }
				);
				let confirmationUrl = `http://localhost:${process.env.SERVER_PORT}/api/users/confirm/${confirmationToken}`;
				// Send confirmation email
				let mailOptions = {
					from: process.env.EMAIL_USER,
					to: newUser.email,
					subject: 'Guestbook - Account Confirmation',
					html: generateConfirmationEmailTemplate(
						newUser.username,
						confirmationUrl
					)
				};
				yield (yield getTransporter()).sendMail(mailOptions);
				logger.info('User registration complete');
				res.json({
					message:
						'Registration successful. Please check your email to confirm your account.'
				});
			}
		} catch (err) {
			logger.error('User Registration: server error: ', err);
			res.status(500).json({ error: 'User registration: server error' });
		}
		return;
	})
);
// Login
router.post('/login', (req, res) =>
	__awaiter(void 0, void 0, void 0, function* () {
		let secrets = yield getSecrets();
		let logger = yield setupLogger();
		let { email, password } = req.body;
		// sanitize inputs
		let sanitizedEmail = xss(email);
		let sanitizedPassword = xss(password);
		try {
			let User = yield UserModelPromise;
			let user = yield User.findOne({ where: { email: sanitizedEmail } });
			if (!user) {
				logger.info('400 - User not found');
				return res.status(400).json({ email: 'User not found' });
			}
			let isMatch = yield argon2.verify(
				user.password,
				sanitizedPassword + secrets.PEPPER
			);
			if (isMatch) {
				let payload = { id: user.userid, username: user.username };
				let token = jwt.sign(payload, secrets.JWT_SECRET, {
					expiresIn: '1h'
				});
				res.json({ success: true, token: `Bearer ${token}` });
			} else {
				return res.status(400).json({ password: 'Incorrect password' });
			}
		} catch (err) {
			console.error(err);
			logger.error('Login - server error');
			res.status(500).json({ error: 'Login - Server error' });
		}
		return;
	})
);
// Password Recovery (simplified)
router.post('/recover-password', (req, res) =>
	__awaiter(void 0, void 0, void 0, function* () {
		let logger = yield setupLogger();
		let { email } = req.body;
		// sanitize inputs
		let sanitizedEmail = xss(email);
		try {
			let User = yield UserModelPromise;
			let user = yield User.findOne({ where: { email: sanitizedEmail } });
			if (!user) {
				return res.status(404).json({ email: 'User not found' });
			}
			// Generate a token (customize this later)
			let token = yield bcrypt.genSalt(25);
			// let passwordResetUrl = `https://localhost:${process.env.SERVER_PORT}/password-reset${token}`;
			// Store the token in the database (simplified for now)
			user.resetPasswordToken = token;
			user.resetPasswordExpires = new Date(Date.now() + 1800000); // 30 min
			yield user.save();
			// Send password reset email
			logger.info('Password reset link sent to user ', user.email);
			res.json({ message: `Password reset link sent to ${user.email}` });
		} catch (err) {
			logger.error('Password Recovery - Server error: ', err);
			res.status(500).json({ error: 'Password Recovery - Server error' });
		}
		return;
	})
);
// Route for TOTP secret generation
router.post('/generate-totp', (req, res) =>
	__awaiter(void 0, void 0, void 0, function* () {
		let logger = yield setupLogger();
		// let { username } = req.body; // *DEV-NOTE* does this even need to be here?
		// sanitize username input
		// let sanitizedUsername = xss(username); // *DEV-NOTE* or this?
		// *DEV-NOTE* here, we could store the secret in the session or send it to the client
		// depending on the use case; food for thought
		try {
			let { base32, otpauth_url } = generateTOTPSecret();
			let qrCodeUrl = yield generateQRCode(otpauth_url);
			res.json({ secret: base32, qrCodeUrl });
		} catch (err) {
			logger.error('Error generating TOTP secret: ', err);
			res.status(500).json({ error: 'Internal server error' });
		}
	})
);
// Route to verify TOTP tokens
router.post('/verify-totp', (req, res) =>
	__awaiter(void 0, void 0, void 0, function* () {
		let logger = yield setupLogger();
		// Extract token and secret from req.body
		let { token, secret } = req.body;
		try {
			// Verify the TOTP token using the provided secret
			let isTOTPTokenValid = verifyTOTPToken(secret, token);
			res.json({ isTOTPTokenValid });
		} catch (err) {
			logger.error('Error verifying TOTP token: ', err);
			res.status(500).json({ error: 'Internal server error' });
		}
		return;
	})
);
// Route to generate and send 2FA codes by email
router.post('/generate-2fa', (req, res) =>
	__awaiter(void 0, void 0, void 0, function* () {
		let logger = yield setupLogger();
		let { email } = req.body;
		// sanitize email input
		let sanitizedEmail = xss(email);
		try {
			let User = yield UserModelPromise;
			let user = yield User.findOne({ where: { email: sanitizedEmail } });
			if (!user) {
				return res
					.status(404)
					.json({ error: 'Generate 2FA: user not found' });
			}
			// generate 2FA token
			let { email2FAToken } = yield generateEmail2FACode();
			// save the 2FA token and expiration time in the user's record
			user.resetPasswordToken = email2FAToken;
			user.resetPasswordExpires = new Date(Date.now() + 30 * 60000); // 30 min
			yield user.save(); // save the user data with the new 2FA token and expiration time
			// send the 2FA code to user's email
			yield (yield getTransporter()).sendMail({
				// send the 2FA code to user's email
				to: sanitizedEmail,
				subject: 'Guestbook - Your Login Code',
				text: `Your 2FA code is ${email2FAToken}`
			});
			// respond with success message
			res.json({ message: '2FA code sent to email' });
		} catch (err) {
			// log the error and respond with a 500 status message
			logger.error('Error generating 2FA code: ', err);
			res.status(500).json({
				error: 'Generate 2FA: internal server error'
			});
		}
		return;
	})
);
// Route to verify email 2FA code
router.post('/verify-2fa', (req, res) =>
	__awaiter(void 0, void 0, void 0, function* () {
		let logger = yield setupLogger();
		let { email, email2FACode } = req.body;
		// sanitize inputs
		let sanitizedEmail = xss(email);
		try {
			let User = yield UserModelPromise;
			let user = yield User.findOne({ where: { email: sanitizedEmail } });
			if (!user) {
				logger.error('Verify 2FA: user not found');
				return res
					.status(404)
					.json({ error: 'Verify 2FA: User not found' });
			}
			let resetPasswordToken = user.resetPasswordToken || '';
			let isEmail2FACodeValid = verifyEmail2FACode(
				resetPasswordToken,
				email2FACode
			);
			if (!isEmail2FACodeValid) {
				logger.error('Invalid or expired 2FA code');
				return res
					.status(400)
					.json({ error: 'Invalid or expired 2FA code' });
			}
			res.json({ message: '2FA code verified successfully' });
		} catch (err) {
			logger.error('Error verifying 2FA code:', err);
			res.status(500).json({ error: 'Internal server error' });
		}
		return;
	})
);
export default router;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlclJvdXRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3RzL3JvdXRlcy91c2VyUm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLE9BQThCLE1BQU0sU0FBUyxDQUFDO0FBQ3JELE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUM1QixPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxHQUFHLE1BQU0sY0FBYyxDQUFDO0FBQy9CLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxFQUFFLEVBQUUsSUFBSSxNQUFNLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEMsT0FBTyxHQUFHLE1BQU0sS0FBSyxDQUFDO0FBQ3RCLE9BQU8sRUFDTixpQ0FBaUMsRUFDakMsb0JBQW9CLEVBQ3BCLGNBQWMsRUFDZCxrQkFBa0IsRUFDbEIsY0FBYyxFQUNkLGtCQUFrQixFQUNsQixlQUFlLEVBQ2YsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxXQUFXLE1BQU0sc0JBQXNCLENBQUM7QUFDL0MsT0FBTyxVQUFVLE1BQU0sbUJBQW1CLENBQUM7QUFDM0MsT0FBTyxnQkFBZ0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUU5QyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFOUIsNEJBQTRCO0FBQzVCLElBQUkscUJBQXFCLEdBQUcsQ0FBQyxRQUFnQixFQUFFLEVBQUU7SUFDaEQsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqQyxPQUFPLEtBQUssSUFBSSxDQUFDLENBQUM7QUFDbkIsQ0FBQyxDQUFDO0FBRUYsV0FBVztBQUNYLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQU8sR0FBWSxFQUFFLEdBQWEsRUFBRSxFQUFFO0lBQzlELElBQUksRUFBRSxR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LEVBQUUsS0FBSyxFQUFFLDZCQUE2QixFQUFFLENBQUMsQ0FBQztRQUNsRCxDQUFDO1FBRUQsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDZCxNQUFNLENBQUMsS0FBSyxDQUFDLDJCQUEyQixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQy9DLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLHVCQUF1QixFQUFFLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsT0FBTztBQUNSLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFFSCxlQUFlLE1BQU0sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzLCB7IFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgYXJnb24yIGZyb20gJ2FyZ29uMic7XG5pbXBvcnQgYmNyeXB0IGZyb20gJ2JjcnlwdCc7XG5pbXBvcnQgand0IGZyb20gJ2pzb253ZWJ0b2tlbic7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHp4Y3ZibiBmcm9tICd6eGN2Ym4nO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCc7XG5pbXBvcnQgeHNzIGZyb20gJ3hzcyc7XG5pbXBvcnQge1xuXHRnZW5lcmF0ZUNvbmZpcm1hdGlvbkVtYWlsVGVtcGxhdGUsXG5cdGdlbmVyYXRlRW1haWwyRkFDb2RlLFxuXHRnZW5lcmF0ZVFSQ29kZSxcblx0Z2VuZXJhdGVUT1RQU2VjcmV0LFxuXHRnZXRUcmFuc3BvcnRlcixcblx0dmVyaWZ5RW1haWwyRkFDb2RlLFxuXHR2ZXJpZnlUT1RQVG9rZW5cbn0gZnJvbSAnLi4vaW5kZXguanMnO1xuaW1wb3J0IHNldHVwTG9nZ2VyIGZyb20gJy4uL21pZGRsZXdhcmUvbG9nZ2VyJztcbmltcG9ydCBnZXRTZWNyZXRzIGZyb20gJy4uL2NvbmZpZy9zZWNyZXRzJztcbmltcG9ydCBVc2VyTW9kZWxQcm9taXNlIGZyb20gJy4uL21vZGVscy9Vc2VyJztcblxubGV0IHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG5cbi8vIFBhc3N3b3JkIHN0cmVuZ3RoIGNoZWNrZXJcbmxldCBjaGVja1Bhc3N3b3JkU3RyZW5ndGggPSAocGFzc3dvcmQ6IHN0cmluZykgPT4ge1xuXHRsZXQgeyBzY29yZSB9ID0genhjdmJuKHBhc3N3b3JkKTtcblx0cmV0dXJuIHNjb3JlID49IDM7XG59O1xuXG4vLyBSZWdpc3Rlclxucm91dGVyLnBvc3QoJy9yZWdpc3RlcicsIGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcblx0bGV0IHsgdXNlcm5hbWUsIGVtYWlsLCBwYXNzd29yZCwgY29uZmlybVBhc3N3b3JkIH0gPSByZXEuYm9keTtcblx0bGV0IHNlY3JldHMgPSBhd2FpdCBnZXRTZWNyZXRzKCk7XG5cdGxldCBsb2dnZXIgPSBhd2FpdCBzZXR1cExvZ2dlcigpO1xuXG5cdC8vIFNhbml0aXplIGlucHV0c1xuXHRsZXQgc2FuaXRpemVkVXNlcm5hbWUgPSB4c3ModXNlcm5hbWUpO1xuXHRsZXQgc2FuaXRpemVkRW1haWwgPSB4c3MoZW1haWwpO1xuXHRsZXQgc2FuaXRpemVkUGFzc3dvcmQgPSB4c3MocGFzc3dvcmQpO1xuXG5cdGlmIChzYW5pdGl6ZWRQYXNzd29yZCAhPT0gY29uZmlybVBhc3N3b3JkKSB7XG5cdFx0bG9nZ2VyLmluZm8oJ1JlZ2lzdHJhdGlvbiBmYWlsdXJlOiBwYXNzd29yZHMgZG8gbm90IG1hdGNoJyk7XG5cdFx0cmV0dXJuIHJlc1xuXHRcdFx0LnN0YXR1cyg0MDApXG5cdFx0XHQuanNvbih7IHBhc3N3b3JkOiAnUmVnaXN0cmF0aW9uIGZhaWx1cmU6IHBhc3N3b3JkcyBkbyBub3QgbWF0Y2gnIH0pO1xuXHR9XG5cblx0bGV0IFVzZXIgPSBhd2FpdCBVc2VyTW9kZWxQcm9taXNlO1xuXHRpZiAoIVVzZXIudmFsaWRhdGVQYXNzd29yZChzYW5pdGl6ZWRQYXNzd29yZCkpIHtcblx0XHRsb2dnZXIuaW5mbyhcblx0XHRcdCdSZWdpc3RyYXRpb24gZmFpbHVyZTogcGFzc3dvcmRzIGRvIG5vdCBtZWV0IGNvbXBsZXhpdHkgcmVxdWlyZW1lbnRzJ1xuXHRcdCk7XG5cdFx0cmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcblx0XHRcdHBhc3N3b3JkOlxuXHRcdFx0XHQnUmVnaXN0cmF0aW9uIGZhaWx1cmU6IHBhc3N3b3JkIGRvZXMgbm90IG1lZXQgY29tcGxleGl0eSByZXF1aXJlbWVudHMnXG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIWNoZWNrUGFzc3dvcmRTdHJlbmd0aChzYW5pdGl6ZWRQYXNzd29yZCkpIHtcblx0XHRsb2dnZXIuaW5mbygnUmVnaXN0cmF0aW9uIGZhaWx1cmU6IHBhc3N3b3JkIGlzIHRvbyB3ZWFrJyk7XG5cdFx0cmV0dXJuIHJlc1xuXHRcdFx0LnN0YXR1cyg0MDApXG5cdFx0XHQuanNvbih7IHBhc3N3b3JkOiAnUmVnaXN0cmF0aW9uIGZhaWx1cmU6IHBhc3N3b3JkIGlzIHRvbyB3ZWFrJyB9KTtcblx0fVxuXG5cdC8vIGxldCBkaWRIaWJwQ2hlY2tGYWlsID0gZmFsc2U7IC8vICpERVYtTk9URSogbmVlZCB0byBmaWd1cmUgb3V0IHdoYXQsIGlmIGFueXRoaW5nLCB0byBkbyB3aXRoIHRoaXMgdmFyaWFibGVcblxuXHR0cnkge1xuXHRcdGxldCBwd25lZFJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KFxuXHRcdFx0YGh0dHBzOi8vYXBpLnB3bmVkcGFzc3dvcmRzLmNvbS9yYW5nZS8ke3Nhbml0aXplZFBhc3N3b3JkLnN1YnN0cmluZygwLCA1KX1gXG5cdFx0KTtcblx0XHRsZXQgcHduZWRMaXN0ID0gcHduZWRSZXNwb25zZS5kYXRhXG5cdFx0XHQuc3BsaXQoJ1xcbicpXG5cdFx0XHQubWFwKChwOiBzdHJpbmcpID0+IHAuc3BsaXQoJzonKVswXSk7XG5cdFx0aWYgKHB3bmVkTGlzdC5pbmNsdWRlcyhzYW5pdGl6ZWRQYXNzd29yZC5zdWJzdHJpbmcoNSkudG9VcHBlckNhc2UoKSkpIHtcblx0XHRcdGxvZ2dlci53YXJuKFxuXHRcdFx0XHQnUmVnaXN0cmF0aW9uIHdhcm5pbmc6IHBhc3N3b3JkIGhhcyBiZWVuIGV4cG9zZWQgaW4gYSBkYXRhIGJyZWFjaCdcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuXHRcdFx0XHRwYXNzd29yZDpcblx0XHRcdFx0XHQnUmVnaXN0cmF0aW9uIHdhcm5pbmc6IHBhc3N3b3JkIGhhcyBiZWVuIGV4cG9zZWQgaW4gYSBkYXRhIGJyZWFjaCdcblx0XHRcdH0pO1xuXHRcdH1cblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGVycm9yKTtcblx0XHRsb2dnZXIuZXJyb3IoJ1JlZ2lzdHJhdGlvbiBlcnJvcjogSElCUCBBUEkgY2hlY2sgZmFpbGVkJyk7XG5cdFx0Ly8gZGlkSGlicENoZWNrRmFpbCA9IHRydWU7XG5cdH1cblxuXHR0cnkge1xuXHRcdGxldCB1c2VyID0gYXdhaXQgVXNlci5maW5kT25lKHsgd2hlcmU6IHsgZW1haWw6IHNhbml0aXplZEVtYWlsIH0gfSk7XG5cdFx0aWYgKHVzZXIpIHtcblx0XHRcdGxvZ2dlci5pbmZvKCdSZWdpc3RyYXRpb24gZmFpbHVyZTogZW1haWwgYWxyZWFkeSBleGlzdHMnKTtcblx0XHRcdHJldHVybiByZXNcblx0XHRcdFx0LnN0YXR1cyg0MDApXG5cdFx0XHRcdC5qc29uKHsgZW1haWw6ICdSZWdpc3RyYXRpb24gZmFpbHVyZTogZW1haWwgYWxyZWFkeSBleGlzdHMnIH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRsZXQgaGFzaGVkUGFzc3dvcmQgPSBhd2FpdCBhcmdvbjIuaGFzaChcblx0XHRcdFx0c2FuaXRpemVkUGFzc3dvcmQgKyBzZWNyZXRzLlBFUFBFUixcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHR5cGU6IGFyZ29uMi5hcmdvbjJpZFxuXHRcdFx0XHR9XG5cdFx0XHQpO1xuXHRcdFx0bGV0IG5ld1VzZXIgPSBhd2FpdCBVc2VyLmNyZWF0ZSh7XG5cdFx0XHRcdGlkOiB1dWlkdjQoKSxcblx0XHRcdFx0dXNlcm5hbWU6IHNhbml0aXplZFVzZXJuYW1lLFxuXHRcdFx0XHRwYXNzd29yZDogaGFzaGVkUGFzc3dvcmQsXG5cdFx0XHRcdGVtYWlsOiBzYW5pdGl6ZWRFbWFpbCxcblx0XHRcdFx0aXNBY2NvdW50VmVyaWZpZWQ6IGZhbHNlLFxuXHRcdFx0XHRyZXNldFBhc3N3b3JkVG9rZW46IG51bGwsXG5cdFx0XHRcdHJlc2V0UGFzc3dvcmRFeHBpcmVzOiBudWxsLFxuXHRcdFx0XHRpc01mYUVuYWJsZWQ6IGZhbHNlLFxuXHRcdFx0XHRjcmVhdGlvbkRhdGU6IG5ldyBEYXRlKClcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBHZW5lcmF0ZSBhIGNvbmZpcm1hdGlvbiB0b2tlblxuXHRcdFx0bGV0IGNvbmZpcm1hdGlvblRva2VuID0gand0LnNpZ24oXG5cdFx0XHRcdHsgaWQ6IG5ld1VzZXIuaWQgfSxcblx0XHRcdFx0c2VjcmV0cy5KV1RfU0VDUkVULFxuXHRcdFx0XHR7IGV4cGlyZXNJbjogJzFkJyB9XG5cdFx0XHQpO1xuXHRcdFx0bGV0IGNvbmZpcm1hdGlvblVybCA9IGBodHRwOi8vbG9jYWxob3N0OiR7cHJvY2Vzcy5lbnYuU0VSVkVSX1BPUlR9L2FwaS91c2Vycy9jb25maXJtLyR7Y29uZmlybWF0aW9uVG9rZW59YDtcblxuXHRcdFx0Ly8gU2VuZCBjb25maXJtYXRpb24gZW1haWxcblx0XHRcdGxldCBtYWlsT3B0aW9ucyA9IHtcblx0XHRcdFx0ZnJvbTogcHJvY2Vzcy5lbnYuRU1BSUxfVVNFUixcblx0XHRcdFx0dG86IG5ld1VzZXIuZW1haWwsXG5cdFx0XHRcdHN1YmplY3Q6ICdHdWVzdGJvb2sgLSBBY2NvdW50IENvbmZpcm1hdGlvbicsXG5cdFx0XHRcdGh0bWw6IGdlbmVyYXRlQ29uZmlybWF0aW9uRW1haWxUZW1wbGF0ZShcblx0XHRcdFx0XHRuZXdVc2VyLnVzZXJuYW1lLFxuXHRcdFx0XHRcdGNvbmZpcm1hdGlvblVybFxuXHRcdFx0XHQpXG5cdFx0XHR9O1xuXG5cdFx0XHRhd2FpdCAoYXdhaXQgZ2V0VHJhbnNwb3J0ZXIoKSkuc2VuZE1haWwobWFpbE9wdGlvbnMpO1xuXG5cdFx0XHRsb2dnZXIuaW5mbygnVXNlciByZWdpc3RyYXRpb24gY29tcGxldGUnKTtcblx0XHRcdHJlcy5qc29uKHtcblx0XHRcdFx0bWVzc2FnZTpcblx0XHRcdFx0XHQnUmVnaXN0cmF0aW9uIHN1Y2Nlc3NmdWwuIFBsZWFzZSBjaGVjayB5b3VyIGVtYWlsIHRvIGNvbmZpcm0geW91ciBhY2NvdW50Lidcblx0XHRcdH0pO1xuXHRcdH1cblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0bG9nZ2VyLmVycm9yKCdVc2VyIFJlZ2lzdHJhdGlvbjogc2VydmVyIGVycm9yOiAnLCBlcnIpO1xuXHRcdHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdVc2VyIHJlZ2lzdHJhdGlvbjogc2VydmVyIGVycm9yJyB9KTtcblx0fVxuXG5cdHJldHVybjtcbn0pO1xuXG4vLyBMb2dpblxucm91dGVyLnBvc3QoJy9sb2dpbicsIGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcblx0bGV0IHNlY3JldHMgPSBhd2FpdCBnZXRTZWNyZXRzKCk7XG5cdGxldCBsb2dnZXIgPSBhd2FpdCBzZXR1cExvZ2dlcigpO1xuXHRsZXQgeyBlbWFpbCwgcGFzc3dvcmQgfSA9IHJlcS5ib2R5O1xuXG5cdC8vIHNhbml0aXplIGlucHV0c1xuXHRsZXQgc2FuaXRpemVkRW1haWwgPSB4c3MoZW1haWwpO1xuXHRsZXQgc2FuaXRpemVkUGFzc3dvcmQgPSB4c3MocGFzc3dvcmQpO1xuXG5cdHRyeSB7XG5cdFx0bGV0IFVzZXIgPSBhd2FpdCBVc2VyTW9kZWxQcm9taXNlO1xuXHRcdGxldCB1c2VyID0gYXdhaXQgVXNlci5maW5kT25lKHsgd2hlcmU6IHsgZW1haWw6IHNhbml0aXplZEVtYWlsIH0gfSk7XG5cdFx0aWYgKCF1c2VyKSB7XG5cdFx0XHRsb2dnZXIuaW5mbygnNDAwIC0gVXNlciBub3QgZm91bmQnKTtcblx0XHRcdHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IGVtYWlsOiAnVXNlciBub3QgZm91bmQnIH0pO1xuXHRcdH1cblx0XHRsZXQgaXNNYXRjaCA9IGF3YWl0IGFyZ29uMi52ZXJpZnkoXG5cdFx0XHR1c2VyLnBhc3N3b3JkLFxuXHRcdFx0c2FuaXRpemVkUGFzc3dvcmQgKyBzZWNyZXRzLlBFUFBFUlxuXHRcdCk7XG5cdFx0aWYgKGlzTWF0Y2gpIHtcblx0XHRcdGxldCBwYXlsb2FkID0geyBpZDogdXNlci51c2VyaWQsIHVzZXJuYW1lOiB1c2VyLnVzZXJuYW1lIH07XG5cdFx0XHRsZXQgdG9rZW4gPSBqd3Quc2lnbihwYXlsb2FkLCBzZWNyZXRzLkpXVF9TRUNSRVQsIHtcblx0XHRcdFx0ZXhwaXJlc0luOiAnMWgnXG5cdFx0XHR9KTtcblx0XHRcdHJlcy5qc29uKHsgc3VjY2VzczogdHJ1ZSwgdG9rZW46IGBCZWFyZXIgJHt0b2tlbn1gIH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBwYXNzd29yZDogJ0luY29ycmVjdCBwYXNzd29yZCcgfSk7XG5cdFx0fVxuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRjb25zb2xlLmVycm9yKGVycik7XG5cdFx0bG9nZ2VyLmVycm9yKCdMb2dpbiAtIHNlcnZlciBlcnJvcicpO1xuXHRcdHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdMb2dpbiAtIFNlcnZlciBlcnJvcicgfSk7XG5cdH1cblxuXHRyZXR1cm47XG59KTtcblxuLy8gUGFzc3dvcmQgUmVjb3ZlcnkgKHNpbXBsaWZpZWQpXG5yb3V0ZXIucG9zdCgnL3JlY292ZXItcGFzc3dvcmQnLCBhc3luYyAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XG5cdGxldCBsb2dnZXIgPSBhd2FpdCBzZXR1cExvZ2dlcigpO1xuXHRsZXQgeyBlbWFpbCB9ID0gcmVxLmJvZHk7XG5cblx0Ly8gc2FuaXRpemUgaW5wdXRzXG5cdGxldCBzYW5pdGl6ZWRFbWFpbCA9IHhzcyhlbWFpbCk7XG5cblx0dHJ5IHtcblx0XHRsZXQgVXNlciA9IGF3YWl0IFVzZXJNb2RlbFByb21pc2U7XG5cdFx0bGV0IHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRPbmUoeyB3aGVyZTogeyBlbWFpbDogc2FuaXRpemVkRW1haWwgfSB9KTtcblx0XHRpZiAoIXVzZXIpIHtcblx0XHRcdHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVtYWlsOiAnVXNlciBub3QgZm91bmQnIH0pO1xuXHRcdH1cblx0XHQvLyBHZW5lcmF0ZSBhIHRva2VuIChjdXN0b21pemUgdGhpcyBsYXRlcilcblx0XHRsZXQgdG9rZW4gPSBhd2FpdCBiY3J5cHQuZ2VuU2FsdCgyNSk7XG5cdFx0Ly8gbGV0IHBhc3N3b3JkUmVzZXRVcmwgPSBgaHR0cHM6Ly9sb2NhbGhvc3Q6JHtwcm9jZXNzLmVudi5TRVJWRVJfUE9SVH0vcGFzc3dvcmQtcmVzZXQke3Rva2VufWA7XG5cblx0XHQvLyBTdG9yZSB0aGUgdG9rZW4gaW4gdGhlIGRhdGFiYXNlIChzaW1wbGlmaWVkIGZvciBub3cpXG5cdFx0dXNlci5yZXNldFBhc3N3b3JkVG9rZW4gPSB0b2tlbjtcblx0XHR1c2VyLnJlc2V0UGFzc3dvcmRFeHBpcmVzID0gbmV3IERhdGUoRGF0ZS5ub3coKSArIDE4MDAwMDApOyAvLyAzMCBtaW5cblx0XHRhd2FpdCB1c2VyLnNhdmUoKTtcblxuXHRcdC8vIFNlbmQgcGFzc3dvcmQgcmVzZXQgZW1haWxcblx0XHRsb2dnZXIuaW5mbygnUGFzc3dvcmQgcmVzZXQgbGluayBzZW50IHRvIHVzZXIgJywgdXNlci5lbWFpbCk7XG5cdFx0cmVzLmpzb24oeyBtZXNzYWdlOiBgUGFzc3dvcmQgcmVzZXQgbGluayBzZW50IHRvICR7dXNlci5lbWFpbH1gIH0pO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRsb2dnZXIuZXJyb3IoJ1Bhc3N3b3JkIFJlY292ZXJ5IC0gU2VydmVyIGVycm9yOiAnLCBlcnIpO1xuXHRcdHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6ICdQYXNzd29yZCBSZWNvdmVyeSAtIFNlcnZlciBlcnJvcicgfSk7XG5cdH1cblxuXHRyZXR1cm47XG59KTtcblxuLy8gUm91dGUgZm9yIFRPVFAgc2VjcmV0IGdlbmVyYXRpb25cbnJvdXRlci5wb3N0KCcvZ2VuZXJhdGUtdG90cCcsIGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcblx0bGV0IGxvZ2dlciA9IGF3YWl0IHNldHVwTG9nZ2VyKCk7XG5cdC8vIGxldCB7IHVzZXJuYW1lIH0gPSByZXEuYm9keTsgLy8gKkRFVi1OT1RFKiBkb2VzIHRoaXMgZXZlbiBuZWVkIHRvIGJlIGhlcmU/XG5cblx0Ly8gc2FuaXRpemUgdXNlcm5hbWUgaW5wdXRcblx0Ly8gbGV0IHNhbml0aXplZFVzZXJuYW1lID0geHNzKHVzZXJuYW1lKTsgLy8gKkRFVi1OT1RFKiBvciB0aGlzP1xuXG5cdC8vICpERVYtTk9URSogaGVyZSwgd2UgY291bGQgc3RvcmUgdGhlIHNlY3JldCBpbiB0aGUgc2Vzc2lvbiBvciBzZW5kIGl0IHRvIHRoZSBjbGllbnRcblx0Ly8gZGVwZW5kaW5nIG9uIHRoZSB1c2UgY2FzZTsgZm9vZCBmb3IgdGhvdWdodFxuXG5cdHRyeSB7XG5cdFx0bGV0IHsgYmFzZTMyLCBvdHBhdXRoX3VybCB9ID0gZ2VuZXJhdGVUT1RQU2VjcmV0KCk7XG5cdFx0bGV0IHFyQ29kZVVybCA9IGF3YWl0IGdlbmVyYXRlUVJDb2RlKG90cGF1dGhfdXJsKTtcblx0XHRyZXMuanNvbih7IHNlY3JldDogYmFzZTMyLCBxckNvZGVVcmwgfSk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdGxvZ2dlci5lcnJvcignRXJyb3IgZ2VuZXJhdGluZyBUT1RQIHNlY3JldDogJywgZXJyKTtcblx0XHRyZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyB9KTtcblx0fVxufSk7XG5cbi8vIFJvdXRlIHRvIHZlcmlmeSBUT1RQIHRva2Vuc1xucm91dGVyLnBvc3QoJy92ZXJpZnktdG90cCcsIGFzeW5jIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcblx0bGV0IGxvZ2dlciA9IGF3YWl0IHNldHVwTG9nZ2VyKCk7XG5cblx0Ly8gRXh0cmFjdCB0b2tlbiBhbmQgc2VjcmV0IGZyb20gcmVxLmJvZHlcblx0bGV0IHsgdG9rZW4sIHNlY3JldCB9ID0gcmVxLmJvZHk7XG5cblx0dHJ5IHtcblx0XHQvLyBWZXJpZnkgdGhlIFRPVFAgdG9rZW4gdXNpbmcgdGhlIHByb3ZpZGVkIHNlY3JldFxuXHRcdGxldCBpc1RPVFBUb2tlblZhbGlkID0gdmVyaWZ5VE9UUFRva2VuKHNlY3JldCwgdG9rZW4pO1xuXHRcdHJlcy5qc29uKHsgaXNUT1RQVG9rZW5WYWxpZCB9KTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0bG9nZ2VyLmVycm9yKCdFcnJvciB2ZXJpZnlpbmcgVE9UUCB0b2tlbjogJywgZXJyKTtcblx0XHRyZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyB9KTtcblx0fVxuXG5cdHJldHVybjtcbn0pO1xuXG4vLyBSb3V0ZSB0byBnZW5lcmF0ZSBhbmQgc2VuZCAyRkEgY29kZXMgYnkgZW1haWxcbnJvdXRlci5wb3N0KCcvZ2VuZXJhdGUtMmZhJywgYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuXHRsZXQgbG9nZ2VyID0gYXdhaXQgc2V0dXBMb2dnZXIoKTtcblx0bGV0IHsgZW1haWwgfSA9IHJlcS5ib2R5O1xuXG5cdC8vIHNhbml0aXplIGVtYWlsIGlucHV0XG5cdGxldCBzYW5pdGl6ZWRFbWFpbCA9IHhzcyhlbWFpbCk7XG5cblx0dHJ5IHtcblx0XHRsZXQgVXNlciA9IGF3YWl0IFVzZXJNb2RlbFByb21pc2U7XG5cdFx0bGV0IHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRPbmUoeyB3aGVyZTogeyBlbWFpbDogc2FuaXRpemVkRW1haWwgfSB9KTtcblxuXHRcdGlmICghdXNlcikge1xuXHRcdFx0cmV0dXJuIHJlc1xuXHRcdFx0XHQuc3RhdHVzKDQwNClcblx0XHRcdFx0Lmpzb24oeyBlcnJvcjogJ0dlbmVyYXRlIDJGQTogdXNlciBub3QgZm91bmQnIH0pO1xuXHRcdH1cblxuXHRcdC8vIGdlbmVyYXRlIDJGQSB0b2tlblxuXHRcdGxldCB7IGVtYWlsMkZBVG9rZW4gfSA9IGF3YWl0IGdlbmVyYXRlRW1haWwyRkFDb2RlKCk7XG5cblx0XHQvLyBzYXZlIHRoZSAyRkEgdG9rZW4gYW5kIGV4cGlyYXRpb24gdGltZSBpbiB0aGUgdXNlcidzIHJlY29yZFxuXHRcdHVzZXIucmVzZXRQYXNzd29yZFRva2VuID0gZW1haWwyRkFUb2tlbjtcblx0XHR1c2VyLnJlc2V0UGFzc3dvcmRFeHBpcmVzID0gbmV3IERhdGUoRGF0ZS5ub3coKSArIDMwICogNjAwMDApOyAvLyAzMCBtaW5cblx0XHRhd2FpdCB1c2VyLnNhdmUoKTsgLy8gc2F2ZSB0aGUgdXNlciBkYXRhIHdpdGggdGhlIG5ldyAyRkEgdG9rZW4gYW5kIGV4cGlyYXRpb24gdGltZVxuXG5cdFx0Ly8gc2VuZCB0aGUgMkZBIGNvZGUgdG8gdXNlcidzIGVtYWlsXG5cdFx0YXdhaXQgKFxuXHRcdFx0YXdhaXQgZ2V0VHJhbnNwb3J0ZXIoKVxuXHRcdCkuc2VuZE1haWwoe1xuXHRcdFx0Ly8gc2VuZCB0aGUgMkZBIGNvZGUgdG8gdXNlcidzIGVtYWlsXG5cdFx0XHR0bzogc2FuaXRpemVkRW1haWwsXG5cdFx0XHRzdWJqZWN0OiAnR3Vlc3Rib29rIC0gWW91ciBMb2dpbiBDb2RlJyxcblx0XHRcdHRleHQ6IGBZb3VyIDJGQSBjb2RlIGlzICR7ZW1haWwyRkFUb2tlbn1gXG5cdFx0fSk7XG5cblx0XHQvLyByZXNwb25kIHdpdGggc3VjY2VzcyBtZXNzYWdlXG5cdFx0cmVzLmpzb24oeyBtZXNzYWdlOiAnMkZBIGNvZGUgc2VudCB0byBlbWFpbCcgfSk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIGxvZyB0aGUgZXJyb3IgYW5kIHJlc3BvbmQgd2l0aCBhIDUwMCBzdGF0dXMgbWVzc2FnZVxuXHRcdGxvZ2dlci5lcnJvcignRXJyb3IgZ2VuZXJhdGluZyAyRkEgY29kZTogJywgZXJyKTtcblx0XHRyZXMuc3RhdHVzKDUwMCkuanNvbih7IGVycm9yOiAnR2VuZXJhdGUgMkZBOiBpbnRlcm5hbCBzZXJ2ZXIgZXJyb3InIH0pO1xuXHR9XG5cblx0cmV0dXJuO1xufSk7XG5cbi8vIFJvdXRlIHRvIHZlcmlmeSBlbWFpbCAyRkEgY29kZVxucm91dGVyLnBvc3QoJy92ZXJpZnktMmZhJywgYXN5bmMgKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSkgPT4ge1xuXHRsZXQgbG9nZ2VyID0gYXdhaXQgc2V0dXBMb2dnZXIoKTtcblx0bGV0IHsgZW1haWwsIGVtYWlsMkZBQ29kZSB9ID0gcmVxLmJvZHk7XG5cblx0Ly8gc2FuaXRpemUgaW5wdXRzXG5cdGxldCBzYW5pdGl6ZWRFbWFpbCA9IHhzcyhlbWFpbCk7XG5cblx0dHJ5IHtcblx0XHRsZXQgVXNlciA9IGF3YWl0IFVzZXJNb2RlbFByb21pc2U7XG5cdFx0bGV0IHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRPbmUoeyB3aGVyZTogeyBlbWFpbDogc2FuaXRpemVkRW1haWwgfSB9KTtcblx0XHRpZiAoIXVzZXIpIHtcblx0XHRcdGxvZ2dlci5lcnJvcignVmVyaWZ5IDJGQTogdXNlciBub3QgZm91bmQnKTtcblx0XHRcdHJldHVybiByZXNcblx0XHRcdFx0LnN0YXR1cyg0MDQpXG5cdFx0XHRcdC5qc29uKHsgZXJyb3I6ICdWZXJpZnkgMkZBOiBVc2VyIG5vdCBmb3VuZCcgfSk7XG5cdFx0fVxuXG5cdFx0bGV0IHJlc2V0UGFzc3dvcmRUb2tlbiA9IHVzZXIucmVzZXRQYXNzd29yZFRva2VuIHx8ICcnO1xuXG5cdFx0bGV0IGlzRW1haWwyRkFDb2RlVmFsaWQgPSB2ZXJpZnlFbWFpbDJGQUNvZGUoXG5cdFx0XHRyZXNldFBhc3N3b3JkVG9rZW4sXG5cdFx0XHRlbWFpbDJGQUNvZGVcblx0XHQpO1xuXHRcdGlmICghaXNFbWFpbDJGQUNvZGVWYWxpZCkge1xuXHRcdFx0bG9nZ2VyLmVycm9yKCdJbnZhbGlkIG9yIGV4cGlyZWQgMkZBIGNvZGUnKTtcblx0XHRcdHJldHVybiByZXNcblx0XHRcdFx0LnN0YXR1cyg0MDApXG5cdFx0XHRcdC5qc29uKHsgZXJyb3I6ICdJbnZhbGlkIG9yIGV4cGlyZWQgMkZBIGNvZGUnIH0pO1xuXHRcdH1cblxuXHRcdHJlcy5qc29uKHsgbWVzc2FnZTogJzJGQSBjb2RlIHZlcmlmaWVkIHN1Y2Nlc3NmdWxseScgfSk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdGxvZ2dlci5lcnJvcignRXJyb3IgdmVyaWZ5aW5nIDJGQSBjb2RlOicsIGVycik7XG5cdFx0cmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicgfSk7XG5cdH1cblxuXHRyZXR1cm47XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xuIl19
