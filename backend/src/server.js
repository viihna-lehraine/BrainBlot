import { __awaiter } from 'tslib';
import passport from 'passport';
import loadEnv from './config/loadEnv.js';
import {
	initializeDatabase,
	configurePassport,
	initializeIpBlacklist,
	setupHttp
} from './index.js';
import { app, initializeApp } from './config/app.js';
import featureFlags from './config/featureFlags.js';
import { getSequelizeInstance } from './config/db.js';
import { initializeModels } from './models/ModelsIndex.js';
loadEnv();
function initializeServer() {
	return __awaiter(this, void 0, void 0, function* () {
		try {
			// Initialize the database
			console.log('Initializing database');
			yield initializeDatabase();
			// Initialize all models
			console.log('Initializing models');
			initializeModels();
			// Configure Passport for authentication]
			console.log('Initializing passport');
			yield configurePassport(passport);
			// Initialize IP blacklist
			console.log('Initializing IP blacklist');
			yield initializeIpBlacklist();
			// Initialize the Express application with all middlewares and routes
			console.log('Initializing app');
			yield initializeApp();
			// Sync Datababase Connection and Models, dependent on flag value
			console.log(
				'DB Sync Flag: ',
				featureFlags.dbSyncFlag,
				typeof featureFlags.dbSyncFlag
			);
			if (featureFlags.dbSyncFlag) {
				// Test the database connection and sync models
				console.log(
					'Testing database connection and syncing models using getSequelizeInstance'
				);
				let sequelize = getSequelizeInstance();
				try {
					yield sequelize.sync(); // if sync isnt working, try adding { force: true }	for one round then removing again
					console.info('Database and tables created!');
				} catch (err) {
					console.error(
						'Database Connection Test and Sync: Server error:',
						err
					);
					throw err;
				}
			}
			// Start Web Server
			console.log('Starting server');
			setupHttp(app);
			console.info('Server started successfully!');
		} catch (err) {
			console.error('Failed to start server:', err);
			process.exit(1); // exit process with failure
		}
	});
}
initializeServer().catch((err) => {
	console.error('Unhandled error during server initialization:', err);
	process.exit(1); // exit process with failure
});
export default app;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vdHMvc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLFFBQVEsTUFBTSxVQUFVLENBQUM7QUFDaEMsT0FBTyxPQUFPLE1BQU0sa0JBQWtCLENBQUM7QUFDdkMsT0FBTyxFQUNOLGtCQUFrQixFQUNsQixpQkFBaUIsRUFDakIscUJBQXFCLEVBQ3JCLFNBQVMsRUFDVCxNQUFNLFNBQVMsQ0FBQztBQUNqQixPQUFPLEVBQUUsR0FBRyxFQUFFLGFBQWEsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNsRCxPQUFPLFlBQVksTUFBTSx1QkFBdUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDbkQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFeEQsT0FBTyxFQUFFLENBQUM7QUFFVixTQUFlLGdCQUFnQjs7UUFDOUIsSUFBSSxDQUFDO1lBQ0osMEJBQTBCO1lBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQztZQUNyQyxNQUFNLGtCQUFrQixFQUFFLENBQUM7WUFFM0Isd0JBQXdCO1lBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUNuQyxnQkFBZ0IsRUFBRSxDQUFDO1lBRW5CLHlDQUF5QztZQUN6QyxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7WUFDckMsTUFBTSxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUVsQywwQkFBMEI7WUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1lBQ3pDLE1BQU0scUJBQXFCLEVBQUUsQ0FBQztZQUU5QixxRUFBcUU7WUFDckUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ2hDLE1BQU0sYUFBYSxFQUFFLENBQUM7WUFFdEIsaUVBQWlFO1lBQ2pFLE9BQU8sQ0FBQyxHQUFHLENBQ1YsZ0JBQWdCLEVBQ2hCLFlBQVksQ0FBQyxVQUFVLEVBQ3ZCLE9BQU8sWUFBWSxDQUFDLFVBQVUsQ0FDOUIsQ0FBQztZQUVGLElBQUksWUFBWSxDQUFDLFVBQVUsRUFBRSxDQUFDO2dCQUM3QiwrQ0FBK0M7Z0JBQy9DLE9BQU8sQ0FBQyxHQUFHLENBQ1YsMkVBQTJFLENBQzNFLENBQUM7Z0JBQ0YsSUFBSSxTQUFTLEdBQUcsb0JBQW9CLEVBQUUsQ0FBQztnQkFDdkMsSUFBSSxDQUFDO29CQUNKLE1BQU0sU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMscUZBQXFGO29CQUM3RyxPQUFPLENBQUMsSUFBSSxDQUFDLDhCQUE4QixDQUFDLENBQUM7Z0JBQzlDLENBQUM7Z0JBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztvQkFDZCxPQUFPLENBQUMsS0FBSyxDQUNaLGtEQUFrRCxFQUNsRCxHQUFHLENBQ0gsQ0FBQztvQkFDRixNQUFNLEdBQUcsQ0FBQztnQkFDWCxDQUFDO1lBQ0YsQ0FBQztZQUVELG1CQUFtQjtZQUNuQixPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDL0IsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2YsT0FBTyxDQUFDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQzlDLENBQUM7UUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ2QsT0FBTyxDQUFDLEtBQUssQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUM5QyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsNEJBQTRCO1FBQzlDLENBQUM7SUFDRixDQUFDO0NBQUE7QUFFRCxnQkFBZ0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO0lBQ2hDLE9BQU8sQ0FBQyxLQUFLLENBQUMsK0NBQStDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDcEUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLDRCQUE0QjtBQUM5QyxDQUFDLENBQUMsQ0FBQztBQUVILGVBQWUsR0FBRyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhc3Nwb3J0IGZyb20gJ3Bhc3Nwb3J0JztcbmltcG9ydCBsb2FkRW52IGZyb20gJy4vY29uZmlnL2xvYWRFbnYnO1xuaW1wb3J0IHtcblx0aW5pdGlhbGl6ZURhdGFiYXNlLFxuXHRjb25maWd1cmVQYXNzcG9ydCxcblx0aW5pdGlhbGl6ZUlwQmxhY2tsaXN0LFxuXHRzZXR1cEh0dHBcbn0gZnJvbSAnLi9pbmRleCc7XG5pbXBvcnQgeyBhcHAsIGluaXRpYWxpemVBcHAgfSBmcm9tICcuL2NvbmZpZy9hcHAnO1xuaW1wb3J0IGZlYXR1cmVGbGFncyBmcm9tICcuL2NvbmZpZy9mZWF0dXJlRmxhZ3MnO1xuaW1wb3J0IHsgZ2V0U2VxdWVsaXplSW5zdGFuY2UgfSBmcm9tICcuL2NvbmZpZy9kYic7XG5pbXBvcnQgeyBpbml0aWFsaXplTW9kZWxzIH0gZnJvbSAnLi9tb2RlbHMvTW9kZWxzSW5kZXgnO1xuXG5sb2FkRW52KCk7XG5cbmFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemVTZXJ2ZXIoKTogUHJvbWlzZTx2b2lkPiB7XG5cdHRyeSB7XG5cdFx0Ly8gSW5pdGlhbGl6ZSB0aGUgZGF0YWJhc2Vcblx0XHRjb25zb2xlLmxvZygnSW5pdGlhbGl6aW5nIGRhdGFiYXNlJyk7XG5cdFx0YXdhaXQgaW5pdGlhbGl6ZURhdGFiYXNlKCk7XG5cblx0XHQvLyBJbml0aWFsaXplIGFsbCBtb2RlbHNcblx0XHRjb25zb2xlLmxvZygnSW5pdGlhbGl6aW5nIG1vZGVscycpO1xuXHRcdGluaXRpYWxpemVNb2RlbHMoKTtcblxuXHRcdC8vIENvbmZpZ3VyZSBQYXNzcG9ydCBmb3IgYXV0aGVudGljYXRpb25dXG5cdFx0Y29uc29sZS5sb2coJ0luaXRpYWxpemluZyBwYXNzcG9ydCcpO1xuXHRcdGF3YWl0IGNvbmZpZ3VyZVBhc3Nwb3J0KHBhc3Nwb3J0KTtcblxuXHRcdC8vIEluaXRpYWxpemUgSVAgYmxhY2tsaXN0XG5cdFx0Y29uc29sZS5sb2coJ0luaXRpYWxpemluZyBJUCBibGFja2xpc3QnKTtcblx0XHRhd2FpdCBpbml0aWFsaXplSXBCbGFja2xpc3QoKTtcblxuXHRcdC8vIEluaXRpYWxpemUgdGhlIEV4cHJlc3MgYXBwbGljYXRpb24gd2l0aCBhbGwgbWlkZGxld2FyZXMgYW5kIHJvdXRlc1xuXHRcdGNvbnNvbGUubG9nKCdJbml0aWFsaXppbmcgYXBwJyk7XG5cdFx0YXdhaXQgaW5pdGlhbGl6ZUFwcCgpO1xuXG5cdFx0Ly8gU3luYyBEYXRhYmFiYXNlIENvbm5lY3Rpb24gYW5kIE1vZGVscywgZGVwZW5kZW50IG9uIGZsYWcgdmFsdWVcblx0XHRjb25zb2xlLmxvZyhcblx0XHRcdCdEQiBTeW5jIEZsYWc6ICcsXG5cdFx0XHRmZWF0dXJlRmxhZ3MuZGJTeW5jRmxhZyxcblx0XHRcdHR5cGVvZiBmZWF0dXJlRmxhZ3MuZGJTeW5jRmxhZ1xuXHRcdCk7XG5cblx0XHRpZiAoZmVhdHVyZUZsYWdzLmRiU3luY0ZsYWcpIHtcblx0XHRcdC8vIFRlc3QgdGhlIGRhdGFiYXNlIGNvbm5lY3Rpb24gYW5kIHN5bmMgbW9kZWxzXG5cdFx0XHRjb25zb2xlLmxvZyhcblx0XHRcdFx0J1Rlc3RpbmcgZGF0YWJhc2UgY29ubmVjdGlvbiBhbmQgc3luY2luZyBtb2RlbHMgdXNpbmcgZ2V0U2VxdWVsaXplSW5zdGFuY2UnXG5cdFx0XHQpO1xuXHRcdFx0bGV0IHNlcXVlbGl6ZSA9IGdldFNlcXVlbGl6ZUluc3RhbmNlKCk7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRhd2FpdCBzZXF1ZWxpemUuc3luYygpOyAvLyBpZiBzeW5jIGlzbnQgd29ya2luZywgdHJ5IGFkZGluZyB7IGZvcmNlOiB0cnVlIH1cdGZvciBvbmUgcm91bmQgdGhlbiByZW1vdmluZyBhZ2FpblxuXHRcdFx0XHRjb25zb2xlLmluZm8oJ0RhdGFiYXNlIGFuZCB0YWJsZXMgY3JlYXRlZCEnKTtcblx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKFxuXHRcdFx0XHRcdCdEYXRhYmFzZSBDb25uZWN0aW9uIFRlc3QgYW5kIFN5bmM6IFNlcnZlciBlcnJvcjonLFxuXHRcdFx0XHRcdGVyclxuXHRcdFx0XHQpO1xuXHRcdFx0XHR0aHJvdyBlcnI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3RhcnQgV2ViIFNlcnZlclxuXHRcdGNvbnNvbGUubG9nKCdTdGFydGluZyBzZXJ2ZXInKTtcblx0XHRzZXR1cEh0dHAoYXBwKTtcblx0XHRjb25zb2xlLmluZm8oJ1NlcnZlciBzdGFydGVkIHN1Y2Nlc3NmdWxseSEnKTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Y29uc29sZS5lcnJvcignRmFpbGVkIHRvIHN0YXJ0IHNlcnZlcjonLCBlcnIpO1xuXHRcdHByb2Nlc3MuZXhpdCgxKTsgLy8gZXhpdCBwcm9jZXNzIHdpdGggZmFpbHVyZVxuXHR9XG59XG5cbmluaXRpYWxpemVTZXJ2ZXIoKS5jYXRjaCgoZXJyKSA9PiB7XG5cdGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBlcnJvciBkdXJpbmcgc2VydmVyIGluaXRpYWxpemF0aW9uOicsIGVycik7XG5cdHByb2Nlc3MuZXhpdCgxKTsgLy8gZXhpdCBwcm9jZXNzIHdpdGggZmFpbHVyZVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGFwcDtcbiJdfQ==
