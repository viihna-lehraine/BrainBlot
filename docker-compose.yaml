version: '3.8'
services:
  backend:
    build: ./backend
    container_name: guestbook-server
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - db
      - redis
    environment:
      - NODE_ENV=development
      - DB_URL=${DB_URL}
      - REDIS_URL=${REDIS_URL}
    env_file:
      - docker.env
    volumes: 
      - ./backend:/app
      - guestbook-backend-node-modules:/app/node_modules
      - ~/.gnupg:/root/.gnupg
      - /run/user/1000/gnupg/S.gpg-agent:/root/.gnupg/S.gpg-agent
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  db:
    image: postgres:15-alpine
    container_name: guestbook-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5685:5432"
    volumes:
      - ./database/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./database/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./database/ssl/pg-server.crt:/etc/ssl/certs/pg-server.crt
      - ./database/ssl/pg-server.key:/etc/ssl/private/pg-server.key
    command: >
      /bin/sh -c "
        apk add --no-cache bash findutils musl-locales &&
        export LANG=en_US.UTF-8 &&
        find /var/lib/postgresql/data -mindepth 1 \
        ! -name 'pg-server.crt' ! -name 'pg-server.key' \
        ! -name 'pg_hba.conf' ! -name 'postgresql.conf' \
        -exec rm -rf {} \; &&
        docker-entrypoint.sh postgres"
    networks:
      - app-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.2.3
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
      - "9300:9300"

  frontend:
    build: ./frontend
    container_name: guestbook-frontend
    restart: unless-stopped
    env_file:
      - docker.env
    volumes:
      - ./frontend:/app
      - guestbook-frontend-node-modules:/app/node_modules
    expose:
      - "8080"
    depends_on:
      - backend
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  kibana:
    image: docker.elastic.co/kibana/kibana:8.2.3
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  logstash:
    image: docker.elastic.co/logstash/logstash:8.2.3
    ports:
      - "5000:5000"
      - "9600:9600"
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    
  nginx:
    build: ./nginx
    container_name: guestbook-nginx
    restart: unless-stopped
    env_file:
      - docker.env
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d/:/app/nginx/conf.d/
      - ./nginx/ssl/:/etc/nginx/ssl/
      - ./nginx/mime.types:/etc/nginx/mime.types
      - guestbook-nginx-logs:/app/nginx/logs/
      - ~/.gnupg:/root/.gnupg
      - /run/user/1000/gnupg/S.gpg-agent:/root/.gnupg/S.gpg-agent
    depends_on:
      - frontend
      - backend
      - redis
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  redis:
    image: redis:alpine
    container_name: guestbook-redis
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    env_file:
      - docker.env
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6969:6969"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  pgdata:
  redis-data:
  guestbook-backend-node-modules:
  guestbook-frontend-node-modules:
  guestbook-nginx-logs:
