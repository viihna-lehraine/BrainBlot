import { execSync } from 'child_process';
import * as cryptoConstants from 'constants';
import fs, { promises as fsPromises } from 'fs';
import { inRange } from 'range_check';
import { v4 as uuidv4 } from 'uuid';
import jwt from 'jsonwebtoken';
import { Sequelize } from 'sequelize';
import { addColors, createLogger, format, transports } from 'winston';
import DailyRotateFile from 'winston-daily-rotate-file';
import LogStashTransport from 'winston-logstash';
import { blankRequest } from '../../config/express.mjs';
import { tlsCiphers } from '../../config/security.mjs';
import { ErrorClasses, ErrorSeverity } from '../../errors/ErrorClasses.mjs';
import { validateDependencies } from '../../utils/helpers.mjs';
import { sanitizeRequestBody } from '../../utils/validator.mjs';
// ****** PARAMETER OBJECTS ****** //
export const AddIpToBlacklistStaticParameters = {
	validateDependencies
};
export const CreateJwtParameters = {
	jwt,
	execSync,
	validateDependencies
};
export const DeclareWebServerOptionsStaticParameters = {
	blankRequest,
	constants: cryptoConstants,
	fs: fs.promises,
	tlsCiphers,
	validateDependencies
};
export const envVariables = {
	baseUrl: process.env.BASE_URL,
	batchReEncryptSecretsInterval: Number(
		process.env.BATCH_RE_ENCRYPT_SECRETS_INTERVAL
	),
	blacklistSyncInterval: Number(process.env.BLACKLIST_SYNC_INTERVAL),
	clearExpiredSecretsInterval: Number(
		process.env.TZ_CLEAR_EXPIRED_SECRETS_INTERVAL
	),
	cpuLimit: Number(process.env.CPU_LIMIT),
	cpuThreshold: Number(process.env.CPU_THRESHOLD),
	cronLoggerSetting: Number(process.env.CRON_LOGGER_SETTING),
	dbDialect: process.env.DB_DIALECT,
	dbHost: process.env.DB_HOST || 'localhost',
	dbInitMaxRetries: Number(process.env.DB_INIT_MAX_RETRIES),
	dbInitRetryAfter: Number(process.env.DB_INIT_RETRY_AFTER),
	dbName: process.env.DB_NAME,
	dbUser: process.env.DB_USER,
	diskPath: process.env.DISK_PATH,
	emailHost: process.env.EMAIL_HOST,
	emailPort: Number(process.env.EMAIL_PORT),
	emailSecure: process.env.EMAIL_SECURE === 'true',
	emailUser: process.env.EMAIL_USER,
	eventLoopLagThreshold: Number(process.env.EVENT_LOOP_LAG),
	featureApiRoutesCsrf: process.env.FEATURE_API_ROUTES_CSRF === 'true',
	featureDbSync: process.env.FEATURE_DB_SYNC === 'true',
	featureEnableIpBlacklist:
		process.env.FEATURE_ENABLE_IP_BLACKLIST === 'true',
	featureEnableJwtAuth: process.env.FEATURE_ENABLE_JWT_AUTH === 'true',
	featureEnableLogStash: process.env.FEATURE_ENABLE_LOGSTASH === 'true',
	featureEnableRateLimit: process.env.FEATURE_ENABLE_RATE_LIMIT === 'true',
	featureEnableResourceAutoScaling:
		process.env.FEATURE_ENABLE_RESOURCE_AUTO_SCALING === 'true',
	featureEnableSession: process.env.FEATURE_ENABLE_SESSION === 'true',
	featureEncryptSecretsStore: process.env.FEATURE_ENCRYPTS_STORE === 'true',
	featureHttpsRedirect: process.env.FEATURE_HTTPS_REDIRECT === 'true',
	featureLoadTestRoutes: process.env.FEATURE_LOAD_TEST_ROUTES === 'true',
	featureSequelizeLogging: process.env.FEATURE_SEQUELIZE_LOGGING === 'true',
	featureHonorCipherOrder: process.env.FEATURE_HONOR_CIPHER_ORDER === 'true',
	fido2Timeout: Number(process.env.FIDO2_TIMEOUT),
	fidoAuthRequireResidentKey:
		process.env.FIDO_AUTHENTICATOR_REQUIRE_RESIDENT_KEY === 'true',
	fidoAuthUserVerification: process.env.FIDO_AUTHENTICATOR_USER_VERIFICATION,
	fidoChallengeSize: Number(process.env.FIDO_CHALLENGE_SIZE),
	fidoCryptoParams: process.env.FIDO_CRYPTO_PARAMS.split(',').map(Number),
	frontendSecretsPath: process.env.FRONTEND_SECRETS_PATH,
	gracefulShutdownTimeout: Number(process.env.GRACEFUL_SHUTDOWN_TIMEOUT),
	ipWhitelistPath: process.env.IP_WHITELIST_PATH,
	logExportPath: process.env.LOG_EXPORT_PATH,
	logLevel: process.env.LOG_LEVEL,
	loggerServiceName: process.env.LOG_SERVICE_NAME,
	logStashHost: process.env.LOGSTASH_HOST,
	logStashNode: process.env.LOGSTASH_NODE,
	logStashPort: Number(process.env.LOGSTASH_PORT),
	maxCacheSize: Number(process.env.MAX_CACHE_SIZE),
	maxRedisCacheSize: Number(process.env.MAX_REDIS_CACHE_SIZE),
	memoryLimit: Number(process.env.MEMORY_LIMIT),
	memoryThreshold: Number(process.env.MEMORY_THRESHOLD),
	memoryMonitorInterval: Number(process.env.MEMORY_MONITOR_INTERVAL),
	multerFileSizeLimit: Number(process.env.MULTER_FILE_SIZE_LIMIT),
	multerStorageDir: process.env.MULTER_STORAGE_DIR,
	multerUploadDir: process.env.UPLOAD_DIR,
	nodeEnv: process.env.NODE_ENV,
	npmLogPath: process.env.SERVER_NPM_LOG_PATH,
	primaryLogPath: process.env.SERVER_LOG_PATH,
	rateLimiterBaseDuration: Number(process.env.RATE_LIMITER_BASE_DURATION),
	rateLimiterBasePoints: Number(process.env.RATE_LIMITER_BASE_POINTS),
	rateLimiterGlobalReset: Number(process.env.RATE_LIMITER_GLOBAL_RESET),
	redisUrl: process.env.REDIS_URL,
	requestTimeout: process.env.REQUEST_TIMEOUT,
	revokedTokenRetentionPeriod: Number(
		process.env.REVOKED_TOKEN_RETENTION_PERIOD
	),
	rpName: process.env.RP_NAME,
	rpIcon: process.env.RP_ICON,
	rpId: process.env.RP_ID,
	rpOrigin: process.env.RP_ORIGIN,
	secretsExpiryTimeout: Number(process.env.SECRETS_EXPIRY_TIMEOUT),
	secretsFilePath1: process.env.SECRETS_FILE_PATH_1,
	secretsRateLimitMaxAttempts: Number(
		process.env.SECRETS_RATE_LIMIT_MAX_ATTEMPTS
	),
	secretsRateLimitWindow: Number(process.env.RATE_LIMIT_WINDOW),
	serverDataFilePath1: process.env.SERVER_DATA_FILE_PATH_1,
	serverDataFilePath2: process.env.SERVER_DATA_FILE_PATH_2,
	serverDataFilePath3: process.env.SERVER_DATA_FILE_PATH_3,
	serverDataFilePath4: process.env.SERVER_DATA_FILE_PATH_4,
	serverPort: Number(process.env.SERVER_PORT),
	slowdownThreshold: Number(process.env.SLOWDOWN_THRESHOLD),
	staticRootPath: process.env.STATIC_ROOT_PATH,
	tempDir: process.env.TEMP_DIR,
	tlsCertPath1: process.env.TLS_CERT_PATH_1,
	tlsKeyPath1: process.env.TLS_KEY_PATH_1,
	tokenExpiryListPath: process.env.TOKEN_REVOCATION_LIST_PATH,
	tokenRevokedListPath: process.env.TOKEN_BLACKLIST_PATH,
	tokenCacheDuration: Number(process.env.TOKEN_CACHE_DURATION),
	yubicoApiUrl: process.env.YUBICO_API_URL
};
export const ExpressErrorHandlerStaticParameters = {
	fallbackLogger: console
};
export const FeatureFlagNames = {
	API_ROUTES_CSR: 'FEATURE_API_ROUTES_CSRF',
	DB_SYNC: 'FEATURE_DB_SYNC',
	ENABLE_CSRF: 'FEATURE_ENABLE_CSRF',
	ENABLE_IP_BLACKLIST: 'FEATURE_ENABLE_IP_BLACKLIST',
	ENABLE_JWT_AUTH: 'FEATURE_ENABLE_JWT_AUTH',
	ENABLE_LOG_STASH: 'FEATURE_ENABLE_LOG_STASH',
	ENABLE_RATE_LIMIT: 'FEATURE_ENABLE_RATE_LIMIT',
	ENABLE_TLS: 'FEATURE_ENABLE_TLS',
	ENCRYPT_SECRETS_STORE: 'FEATURE_ENCRYPT_SECRETS_STORE',
	HONOR_CIPHER_ORDER: 'FEATURE_HONOR_CIPHER_ORDER',
	HTTPS_REDIRECT: 'FEATURE_HTTPS_REDIRECT',
	LOAD_TEST_ROUTES: 'FEATURE_LOAD_TEST_ROUTES',
	SECURE_HEADERS: 'FEATURE_SECURE_HEADERS',
	SEQUELIZE_LOGGING: 'FEATURE_SEQUELIZE_LOGGING'
};
export const GetFeatureFlagsStaticParameters = {
	blankRequest
};
export const HandleCriticalErrorStaticParameters = {
	fallbackLogger: console
};
export const HandleErrorStaticParameters = {
	fallbackLogger: console
};
export const InitializeDatabaseStaticParameters = {
	blankRequest
};
export const InitIpBlacklistParameters = {
	fsModule: fs,
	inRange,
	validateDependencies
};
export const LoadIpBlacklistParameters = {
	fsModule: fsPromises
};
export const SetUpDatabaseParameters = {
	blankRequest
};
//
///
////
///// ***** SERVICE PARAMETER OBJECTS *****
////
///
//
export const AppLoggerServiceParameters = {
	winston: {
		createLogger,
		format,
		transports,
		addColors
	},
	DailyRotateFile,
	LogStashTransport,
	ErrorClasses,
	ErrorSeverity,
	HandleErrorStaticParameters,
	uuidv4,
	sanitizeRequestBody,
	fs,
	Sequelize
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pbmRleC9pbnRlcmZhY2VzL21haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEtBQUssZUFBZSxNQUFNLFdBQVcsQ0FBQztBQVU3QyxPQUFPLEVBQUUsRUFBRSxFQUFFLFFBQVEsSUFBSSxVQUFVLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDaEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN0QyxPQUFPLEVBQUUsRUFBRSxJQUFJLE1BQU0sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQU9wQyxPQUFPLEdBQXdDLE1BQU0sY0FBYyxDQUFDO0FBRXBFLE9BQU8sRUFBRSxTQUFTLEVBQWdCLE1BQU0sV0FBVyxDQUFDO0FBQ3BELE9BQU8sRUFDTixTQUFTLEVBQ1QsWUFBWSxFQUNaLE1BQU0sRUFFTixVQUFVLEVBQ1YsTUFBTSxTQUFTLENBQUM7QUFDakIsT0FBTyxlQUFlLE1BQU0sMkJBQTJCLENBQUM7QUFDeEQsT0FBTyxpQkFBaUIsTUFBTSxrQkFBa0IsQ0FBQztBQU9qRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ25ELE9BQU8sRUFHTixZQUFZLEVBQ1osYUFBYSxFQUNiLE1BQU0sMkJBQTJCLENBQUM7QUFDbkMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDM0QsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFNUQsT0FBTyx3Q0FBd0MsQ0FBQztBQW83QmhELHFDQUFxQztBQUVyQyxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FHekM7SUFDSCxvQkFBb0I7Q0FDcEIsQ0FBQztBQUVGLE1BQU0sQ0FB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Q3BCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBMkI7SUFDOUQsWUFBWTtDQUNaLENBQUM7QUFFRixFQUFFO0FBQ0YsR0FBRztBQUNILElBQUk7QUFDSiwyQ0FBMkM7QUFDM0MsSUFBSTtBQUNKLEdBQUc7QUFDSCxFQUFFO0FBRUYsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUc7SUFDekMsT0FBTyxFQUFFO1FBQ1IsWUFBWTtRQUNaLE1BQU07UUFDTixVQUFVO1FBQ1YsU0FBUztLQUNUO0lBQ0QsZUFBZTtJQUNmLGlCQUFpQjtJQUNqQixZQUFZO0lBQ1osYUFBYTtJQUNiLDJCQUEyQjtJQUMzQixNQUFNO0lBQ04sbUJBQW1CO0lBQ25CLEVBQUU7SUFDRixTQUFTO0NBQ1QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWNTeW5jIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgKiBhcyBjcnlwdG9Db25zdGFudHMgZnJvbSAnY29uc3RhbnRzJztcbmltcG9ydCB0eXBlIHtcblx0QXBwbGljYXRpb24sXG5cdE5leHRGdW5jdGlvbixcblx0UmVxdWVzdCxcblx0UmVxdWVzdEhhbmRsZXIsXG5cdFJlc3BvbnNlLFxuXHRSb3V0ZXJcbn0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBTZXNzaW9uIH0gZnJvbSAnZXhwcmVzcy1zZXNzaW9uJztcbmltcG9ydCBmcywgeyBwcm9taXNlcyBhcyBmc1Byb21pc2VzIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgaW5SYW5nZSB9IGZyb20gJ3JhbmdlX2NoZWNrJztcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gJ3V1aWQnO1xuaW1wb3J0IHR5cGUge1xuXHRBdHRlc3RhdGlvblJlc3VsdCxcblx0RmlkbzJBdHRlc3RhdGlvblJlc3VsdCxcblx0UHVibGljS2V5Q3JlZGVudGlhbENyZWF0aW9uT3B0aW9ucyxcblx0UHVibGljS2V5Q3JlZGVudGlhbFJlcXVlc3RPcHRpb25zXG59IGZyb20gJ2ZpZG8yLWxpYic7XG5pbXBvcnQgand0LCB7IEp3dFBheWxvYWQsIFNlY3JldCwgU2lnbk9wdGlvbnMgfSBmcm9tICdqc29ud2VidG9rZW4nO1xuaW1wb3J0IHsgVHJhbnNwb3J0ZXIgfSBmcm9tICdub2RlbWFpbGVyJztcbmltcG9ydCB7IFNlcXVlbGl6ZSwgV2hlcmVPcHRpb25zIH0gZnJvbSAnc2VxdWVsaXplJztcbmltcG9ydCB7XG5cdGFkZENvbG9ycyxcblx0Y3JlYXRlTG9nZ2VyLFxuXHRmb3JtYXQsXG5cdExvZ2dlciBhcyBXaW5zdG9uTG9nZ2VyLFxuXHR0cmFuc3BvcnRzXG59IGZyb20gJ3dpbnN0b24nO1xuaW1wb3J0IERhaWx5Um90YXRlRmlsZSBmcm9tICd3aW5zdG9uLWRhaWx5LXJvdGF0ZS1maWxlJztcbmltcG9ydCBMb2dTdGFzaFRyYW5zcG9ydCBmcm9tICd3aW5zdG9uLWxvZ3N0YXNoJztcbmltcG9ydCB7IEVudlZhcmlhYmxlVHlwZXMsIEZlYXR1cmVGbGFnVHlwZXMsIFNlY3JldHNNYXAgfSBmcm9tICcuL2Vudic7XG5pbXBvcnQge1xuXHRNb2RlbE9wZXJhdGlvbnMsXG5cdFVzZXJBdHRyaWJ1dGVzSW50ZXJmYWNlLFxuXHRVc2VySW5zdGFuY2VJbnRlcmZhY2Vcbn0gZnJvbSAnLi9tb2RlbHMnO1xuaW1wb3J0IHsgYmxhbmtSZXF1ZXN0IH0gZnJvbSAnLi4vLi4vY29uZmlnL2V4cHJlc3MnO1xuaW1wb3J0IHsgdGxzQ2lwaGVycyB9IGZyb20gJy4uLy4uL2NvbmZpZy9zZWN1cml0eSc7XG5pbXBvcnQge1xuXHRBcHBFcnJvcixcblx0Q2xpZW50RXJyb3IsXG5cdEVycm9yQ2xhc3Nlcyxcblx0RXJyb3JTZXZlcml0eVxufSBmcm9tICcuLi8uLi9lcnJvcnMvRXJyb3JDbGFzc2VzJztcbmltcG9ydCB7IHZhbGlkYXRlRGVwZW5kZW5jaWVzIH0gZnJvbSAnLi4vLi4vdXRpbHMvaGVscGVycyc7XG5pbXBvcnQgeyBzYW5pdGl6ZVJlcXVlc3RCb2R5IH0gZnJvbSAnLi4vLi4vdXRpbHMvdmFsaWRhdG9yJztcblxuaW1wb3J0ICcuLi8uLi8uLi90eXBlcy9jdXN0b20vd2luc3Rvbi1sb2dzdGFzaCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWNjZXNzQ29udHJvbE1pZGRsZXdhcmVTZXJ2aWNlSW50ZXJmYWNlIHtcblx0cmVzdHJpY3RUbyguLi5hbGxvd2VkUm9sZXM6IHN0cmluZ1tdKTogUmVxdWVzdEhhbmRsZXI7XG5cdGhhc1Blcm1pc3Npb24oLi4ucmVxdWlyZWRQZXJtaXNzaW9uczogc3RyaW5nW10pOiBSZXF1ZXN0SGFuZGxlcjtcblx0c2h1dGRvd24oKTogUHJvbWlzZTx2b2lkPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBMb2dnZXJTZXJ2aWNlSW50ZXJmYWNlIGV4dGVuZHMgV2luc3RvbkxvZ2dlciB7XG5cdGdldFJlZGFjdGVkTG9nZ2VyKCk6IEFwcExvZ2dlclNlcnZpY2VJbnRlcmZhY2U7XG5cdGxvZ0RlYnVnKG1lc3NhZ2U6IHN0cmluZywgZGV0YWlscz86IFJlY29yZDxzdHJpbmcsIHVua25vd24+KTogdm9pZDtcblx0bG9nSW5mbyhtZXNzYWdlOiBzdHJpbmcsIGRldGFpbHM/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPik6IHZvaWQ7XG5cdGxvZ05vdGljZShtZXNzYWdlOiBzdHJpbmcsIGRldGFpbHM/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPik6IHZvaWQ7XG5cdGxvZ1dhcm4obWVzc2FnZTogc3RyaW5nLCBkZXRhaWxzPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj4pOiB2b2lkO1xuXHRsb2dFcnJvcihtZXNzYWdlOiBzdHJpbmcsIGRldGFpbHM/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPik6IHZvaWQ7XG5cdGxvZ0NyaXRpY2FsKG1lc3NhZ2U6IHN0cmluZywgZGV0YWlscz86IFJlY29yZDxzdHJpbmcsIHVua25vd24+KTogdm9pZDtcblx0Y2xlYW5VcE9sZExvZ3MoXG5cdFx0c2VxdWVsaXplOiBTZXF1ZWxpemUsXG5cdFx0cmV0ZW50aW9uUGVyaW9kRGF5cz86IG51bWJlclxuXHQpOiBQcm9taXNlPHZvaWQ+O1xuXHRzZXRBZG1pbklkKGFkbWluSWQ6IG51bWJlciB8IG51bGwpOiB2b2lkO1xuXHRnZXRFcnJvckRldGFpbHMoXG5cdFx0Z2V0Q2FsbGVySW5mbzogKCkgPT4gc3RyaW5nLFxuXHRcdGFjdGlvbjogc3RyaW5nLFxuXHRcdHJlcT86IFJlcXVlc3QsXG5cdFx0dXNlcklkPzogc3RyaW5nIHwgbnVsbCxcblx0XHRhZGRpdGlvbmFsRGF0YT86IFJlY29yZDxzdHJpbmcsIHVua25vd24+XG5cdCk6IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuXHRzZXRVcFNlY3JldHMoc2VjcmV0czogVmF1bHRTZXJ2aWNlSW50ZXJmYWNlKTogdm9pZDtcblx0c2V0RXJyb3JIYW5kbGVyKGVycm9ySGFuZGxlcjogRXJyb3JIYW5kbGVyU2VydmljZUludGVyZmFjZSk6IHZvaWQ7XG5cdHNodXRkb3duKCk6IFByb21pc2U8dm9pZD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXV0aENvbnRyb2xsZXJJbnRlcmZhY2Uge1xuXHRpbml0aWFsaXplQXV0aE1pZGRsZXdhcmUoKTogUHJvbWlzZTx2b2lkPjtcblx0aW5pdGlhbGl6ZUpXVEF1dGhNaWRkbGV3YXJlKCk6IFJlcXVlc3RIYW5kbGVyO1xuXHRpbml0aWFsaXplUGFzc3BvcnRBdXRoTWlkZGxld2FyZSgpOiBSZXF1ZXN0SGFuZGxlcjtcblx0bG9naW5Vc2VyKFxuXHRcdGVtYWlsOiBzdHJpbmcsXG5cdFx0cGFzc3dvcmQ6IHN0cmluZ1xuXHQpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgdG9rZW4/OiBzdHJpbmcgfT47XG5cdGdlbmVyYXRlUmVzZXRUb2tlbih1c2VyOiBVc2VySW5zdGFuY2VJbnRlcmZhY2UpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+O1xuXHR2YWxpZGF0ZVJlc2V0VG9rZW4oXG5cdFx0dXNlcklkOiBzdHJpbmcsXG5cdFx0dG9rZW46IHN0cmluZ1xuXHQpOiBQcm9taXNlPFVzZXJJbnN0YW5jZUludGVyZmFjZSB8IG51bGw+O1xuXHRjb21wYXJlUGFzc3dvcmQoXG5cdFx0dXNlcjogVXNlckluc3RhbmNlSW50ZXJmYWNlLFxuXHRcdHBhc3N3b3JkOiBzdHJpbmdcblx0KTogUHJvbWlzZTxib29sZWFuPjtcblx0cmVzZXRQYXNzd29yZChcblx0XHR1c2VyOiBVc2VySW5zdGFuY2VJbnRlcmZhY2UsXG5cdFx0bmV3UGFzc3dvcmQ6IHN0cmluZ1xuXHQpOiBQcm9taXNlPFVzZXJJbnN0YW5jZUludGVyZmFjZSB8IG51bGw+O1xuXHRlbmFibGVNZmEodXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+O1xuXHRkaXNhYmxlTWZhKHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPjtcblx0cmVjb3ZlclBhc3N3b3JkKGVtYWlsOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+O1xuXHRnZW5lcmF0ZUVtYWlsTUZBQ29kZShlbWFpbDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPjtcblx0dmVyaWZ5RW1haWxNRkFDb2RlKGVtYWlsOiBzdHJpbmcsIGVtYWlsMkZBQ29kZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPjtcblx0Z2VuZXJhdGVUT1RQKFxuXHRcdHVzZXJJZDogc3RyaW5nXG5cdCk6IFByb21pc2U8eyBzZWNyZXQ6IHN0cmluZzsgcXJDb2RlVXJsOiBzdHJpbmcgfT47XG5cdHZlcmlmeVRPVFAodXNlcklkOiBzdHJpbmcsIHRva2VuOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+O1xuXHRzaHV0ZG93bigpOiBQcm9taXNlPHZvaWQ+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJhc2VSb3V0ZXJJbnRlcmZhY2Uge1xuXHRnZXRSb3V0ZXIoKTogUm91dGVyO1xuXHRzaHV0ZG93bigpOiBQcm9taXNlPHZvaWQ+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJhY2t1cENvZGVTZXJ2aWNlSW50ZXJmYWNlIHtcblx0Z2VuZXJhdGVCYWNrdXBDb2RlcyhpZDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4gfCBzdHJpbmdbXTtcblx0dmVyaWZ5QmFja3VwQ29kZShpZDogc3RyaW5nLCBpbnB1dENvZGU6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj47XG5cdHNhdmVCYWNrdXBDb2Rlc1RvRGF0YWJhc2UoXG5cdFx0aWQ6IHN0cmluZyxcblx0XHRiYWNrdXBDb2RlczogQmFja3VwQ29kZUludGVyZmFjZVtdXG5cdCk6IFByb21pc2U8dm9pZD47XG5cdGdldEJhY2t1cENvZGVzRnJvbURhdGFiYXNlKFxuXHRcdGlkOiBzdHJpbmdcblx0KTogUHJvbWlzZTxCYWNrdXBDb2RlSW50ZXJmYWNlW10gfCB1bmRlZmluZWQ+O1xuXHR1cGRhdGVCYWNrdXBDb2Rlc0luRGF0YWJhc2UoXG5cdFx0aWQ6IHN0cmluZyxcblx0XHRiYWNrdXBDb2RlczogQmFja3VwQ29kZUludGVyZmFjZVtdXG5cdCk6IFByb21pc2U8dm9pZD47XG5cdHNodXRkb3duKCk6IFByb21pc2U8dm9pZD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FjaGVTZXJ2aWNlSW50ZXJmYWNlIHtcblx0Z2V0Q2FjaGVNZXRyaWNzKHNlcnZpY2U6IHN0cmluZyk6IENhY2hlTWV0cmljcztcblx0Z2V0TWVtb3J5Q2FjaGUoXG5cdFx0c2VydmljZTogc3RyaW5nXG5cdCk6IE1hcDxzdHJpbmcsIHsgdmFsdWU6IHVua25vd247IGV4cGlyYXRpb246IG51bWJlciB8IHVuZGVmaW5lZCB9PiB8IG51bGw7XG5cdGdldDxUPihrZXk6IHN0cmluZywgc2VydmljZTogc3RyaW5nKTogUHJvbWlzZTxUIHwgbnVsbD47XG5cdHNldDxUPihcblx0XHRrZXk6IHN0cmluZyxcblx0XHR2YWx1ZTogVCxcblx0XHRzZXJ2aWNlOiBzdHJpbmcsXG5cdFx0ZXhwaXJhdGlvbkluU2Vjb25kcz86IG51bWJlclxuXHQpOiBQcm9taXNlPHZvaWQ+O1xuXHRkZWwoa2V5OiBzdHJpbmcsIHNlcnZpY2U6IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG5cdGV4aXN0cyhrZXk6IHN0cmluZywgc2VydmljZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPjtcblx0Y2xlYW51cEV4cGlyZWRFbnRyaWVzKCk6IHZvaWQ7XG5cdGZsdXNoQ2FjaGUoc2VydmljZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcblx0Y2xlYXJOYW1lc3BhY2Uoc2VydmljZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcblx0Y2xvc2VDb25uZWN0aW9uKCk6IFByb21pc2U8dm9pZD47XG5cdHNodXRkb3duKCk6IFByb21pc2U8dm9pZD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ1NSRk1pZGRsZXdhcmVTZXJ2aWNlSW50ZXJmYWNlIHtcblx0aW5pdGlhbGl6ZUNTUkZNaWRkbGV3YXJlKCk6IChcblx0XHRyZXE6IFJlcXVlc3QsXG5cdFx0cmVzOiBSZXNwb25zZSxcblx0XHRuZXh0OiBOZXh0RnVuY3Rpb25cblx0KSA9PiBQcm9taXNlPHZvaWQ+O1xuXHRzaHV0ZG93bigpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFiYXNlQ29udHJvbGxlckludGVyZmFjZSB7XG5cdGluaXRpYWxpemUoKTogUHJvbWlzZTxTZXF1ZWxpemU+O1xuXHRnZXRTZXF1ZWxpemVJbnN0YW5jZSgpOiBTZXF1ZWxpemUgfCBudWxsO1xuXHRjbGVhcklkbGVDb25uZWN0aW9ucygpOiBQcm9taXNlPHZvaWQ+O1xuXHRnZXRFbnRyaWVzPFQ+KE1vZGVsOiBNb2RlbE9wZXJhdGlvbnM8VD4pOiBQcm9taXNlPFRbXT47XG5cdGNyZWF0ZUVudHJ5PFQ+KE1vZGVsOiBNb2RlbE9wZXJhdGlvbnM8VD4sIGRhdGE6IFQpOiBQcm9taXNlPFQ+O1xuXHRkZWxldGVFbnRyeTxUPihNb2RlbDogTW9kZWxPcGVyYXRpb25zPFQ+LCBpZDogbnVtYmVyKTogUHJvbWlzZTxib29sZWFuPjtcblx0Y2FjaGVEYXRhPFQ+KGtleTogc3RyaW5nLCBkYXRhOiBULCBleHBpcmF0aW9uPzogbnVtYmVyKTogUHJvbWlzZTx2b2lkPjtcblx0cXVlcnlXaXRoQ2FjaGU8VCBleHRlbmRzIG9iamVjdD4oXG5cdFx0cXVlcnk6IHN0cmluZyxcblx0XHRjYWNoZUtleTogc3RyaW5nLFxuXHRcdGV4cGlyYXRpb24/OiBudW1iZXJcblx0KTogUHJvbWlzZTxUIHwgbnVsbD47XG5cdGdldENhY2hlZERhdGE8VD4oa2V5OiBzdHJpbmcpOiBQcm9taXNlPFQgfCBudWxsPjtcblx0Y2xlYXJDYWNoZShrZXk6IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG5cdGdldERhdGFiYXNlSW5mbygpOiBQcm9taXNlPFJlY29yZDxzdHJpbmcsIHVua25vd24+Pjtcblx0Z2V0RGF0YWJhc2VNZXRyaWNzKHNlcnZpY2VOYW1lOiBzdHJpbmcpOiBQcm9taXNlPFJlY29yZDxzdHJpbmcsIHVua25vd24+Pjtcblx0c2h1dGRvd24oKTogUHJvbWlzZTx2b2lkPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbWFpbE1GQVNlcnZpY2VJbnRlcmZhY2Uge1xuXHRnZW5lcmF0ZUVtYWlsTUZBQ29kZSh7IGJjcnlwdCwgand0IH06IEVtYWlsTUZBU2VydmljZURlcHMpOiBQcm9taXNlPHtcblx0XHRlbWFpbE1GQUNvZGU6IHN0cmluZztcblx0XHRlbWFpbE1GQVRva2VuOiBzdHJpbmc7XG5cdH0+O1xuXHR2ZXJpZnlFbWFpbE1GQUNvZGUoXG5cdFx0dG9rZW46IHN0cmluZyxcblx0XHRlbWFpbE1GQUNvZGU6IHN0cmluZyxcblx0XHRqd3Q6IEVtYWlsTUZBU2VydmljZURlcHNbJ2p3dCddXG5cdCk6IFByb21pc2U8Ym9vbGVhbj47XG5cdHNodXRkb3duKCk6IFByb21pc2U8dm9pZD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW52Q29uZmlnU2VydmljZUludGVyZmFjZSB7XG5cdGdldEVudlZhcmlhYmxlPEsgZXh0ZW5kcyBrZXlvZiBFbnZWYXJpYWJsZVR5cGVzPihcblx0XHRrZXk6IEtcblx0KTogRW52VmFyaWFibGVUeXBlc1tLXTtcblx0Z2V0RmVhdHVyZUZsYWdzKCk6IEZlYXR1cmVGbGFnVHlwZXM7XG5cdHNodXRkb3duKCk6IFByb21pc2U8dm9pZD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXJyb3JMb2dnZXJTZXJ2aWNlSW50ZXJmYWNlIGV4dGVuZHMgQXBwTG9nZ2VyU2VydmljZUludGVyZmFjZSB7XG5cdGxvZ0FwcEVycm9yKFxuXHRcdGVycm9yOiBFcnJvcixcblx0XHRzZXF1ZWxpemU/OiBTZXF1ZWxpemUsXG5cdFx0ZGV0YWlscz86IFJlY29yZDxzdHJpbmcsIHVua25vd24+XG5cdCk6IHZvaWQ7XG5cdGxvZ1RvRGF0YWJhc2UoXG5cdFx0ZXJyb3I6IEVycm9yLFxuXHRcdHNlcXVlbGl6ZTogU2VxdWVsaXplLFxuXHRcdHJldHJ5Q291bnQ/OiBudW1iZXJcblx0KTogUHJvbWlzZTx2b2lkPjtcblx0Z2V0RXJyb3JDb3VudChlcnJvck5hbWU6IHN0cmluZyk6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFcnJvckhhbmRsZXJTZXJ2aWNlSW50ZXJmYWNlIHtcblx0RXJyb3JDbGFzc2VzOiB0eXBlb2YgRXJyb3JDbGFzc2VzO1xuXHRFcnJvclNldmVyaXR5OiB0eXBlb2YgaW1wb3J0KCcuLi8uLi9lcnJvcnMvRXJyb3JDbGFzc2VzJykuRXJyb3JTZXZlcml0eTtcblx0aGFuZGxlRXJyb3IocGFyYW1zOiB7XG5cdFx0ZXJyb3I6IHVua25vd247XG5cdFx0cmVxPzogUmVxdWVzdDtcblx0XHRkZXRhaWxzPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG5cdFx0c2V2ZXJpdHk/OiBpbXBvcnQoJy4uLy4uL2Vycm9ycy9FcnJvckNsYXNzZXMnKS5FcnJvclNldmVyaXR5VHlwZTtcblx0XHRhY3Rpb24/OiBzdHJpbmc7XG5cdFx0dXNlcklkPzogc3RyaW5nO1xuXHRcdHNlcXVlbGl6ZT86IFNlcXVlbGl6ZTtcblx0fSk6IHZvaWQ7XG5cdGV4cHJlc3NFcnJvckhhbmRsZXIoKTogKFxuXHRcdGVycjogQXBwRXJyb3IgfCBDbGllbnRFcnJvciB8IEVycm9yIHwgUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG5cdFx0cmVxOiBSZXF1ZXN0LFxuXHRcdHJlczogUmVzcG9uc2UsXG5cdFx0bmV4dDogTmV4dEZ1bmN0aW9uXG5cdCkgPT4gdm9pZDtcblx0aGFuZGxlQ3JpdGljYWxFcnJvcihwYXJhbXM6IHtcblx0XHRlcnJvcjogdW5rbm93bjtcblx0XHRyZXE/OiBSZXF1ZXN0O1xuXHRcdGRldGFpbHM/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcblx0fSk6IHZvaWQ7XG5cdHNlbmRDbGllbnRFcnJvclJlc3BvbnNlKHBhcmFtczoge1xuXHRcdG1lc3NhZ2U6IHN0cmluZztcblx0XHRzdGF0dXNDb2RlPzogbnVtYmVyO1xuXHRcdHJlczogUmVzcG9uc2U7XG5cdFx0cmVzcG9uc2VJZD86IHN0cmluZztcblx0fSk6IFByb21pc2U8dm9pZD47XG5cdGluaXRpYWxpemVHbG9iYWxFcnJvckhhbmRsZXJzKCk6IHZvaWQ7XG5cdHNldFNodXRkb3duSGFuZGxlcihzaHV0ZG93bkZuOiAoKSA9PiBQcm9taXNlPHZvaWQ+KTogdm9pZDtcblx0c2h1dGRvd24oKTogUHJvbWlzZTx2b2lkPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGSURPMlNlcnZpY2VJbnRlcmZhY2Uge1xuXHRpbml0aWFsaXplRklETzJTZXJ2aWNlKCk6IFByb21pc2U8dm9pZD47XG5cdGdlbmVyYXRlRklETzJSZWdpc3RyYXRpb25PcHRpb25zKFxuXHRcdHVzZXI6IEZpZG9Vc2VySW50ZXJmYWNlXG5cdCk6IFByb21pc2U8UHVibGljS2V5Q3JlZGVudGlhbENyZWF0aW9uT3B0aW9ucz47XG5cdHZlcmlmeUZJRE8yUmVnaXN0cmF0aW9uKFxuXHRcdGF0dGVzdGF0aW9uOiBBdHRlc3RhdGlvblJlc3VsdCxcblx0XHRleHBlY3RlZENoYWxsZW5nZTogc3RyaW5nXG5cdCk6IFByb21pc2U8RmlkbzJBdHRlc3RhdGlvblJlc3VsdD47XG5cdGdlbmVyYXRlRklETzJBdXRoZW50aWNhdGlvbk9wdGlvbnMoXG5cdFx0dXNlcjogRmlkb1VzZXJJbnRlcmZhY2Vcblx0KTogUHJvbWlzZTxQdWJsaWNLZXlDcmVkZW50aWFsUmVxdWVzdE9wdGlvbnM+O1xuXHRpbnZhbGlkYXRlRmlkbzJDYWNoZSh1c2VySWQ6IHN0cmluZywgYWN0aW9uOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+O1xuXHRzaHV0ZG93bigpOiBQcm9taXNlPHZvaWQ+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdhdGVrZWVwZXJTZXJ2aWNlSW50ZXJmYWNlIHtcblx0aW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+O1xuXHRyYXRlTGltaXRNaWRkbGV3YXJlKCk6IChcblx0XHRyZXE6IFJlcXVlc3QsXG5cdFx0cmVzOiBSZXNwb25zZSxcblx0XHRuZXh0OiBOZXh0RnVuY3Rpb25cblx0KSA9PiBQcm9taXNlPHZvaWQ+O1xuXHRzbG93ZG93bk1pZGRsZXdhcmUoKTogKFxuXHRcdHJlcTogUmVxdWVzdCAmIHsgc2Vzc2lvbjogU2Vzc2lvbiAmIHsgbGFzdFJlcXVlc3RUaW1lPzogbnVtYmVyIH0gfSxcblx0XHRyZXM6IFJlc3BvbnNlLFxuXHRcdG5leHQ6IE5leHRGdW5jdGlvblxuXHQpID0+IHZvaWQ7XG5cdHRocm90dGxlUmVxdWVzdHMoKTogKFxuXHRcdHJlcTogUmVxdWVzdCxcblx0XHRyZXM6IFJlc3BvbnNlLFxuXHRcdG5leHQ6IE5leHRGdW5jdGlvblxuXHQpID0+IFByb21pc2U8dm9pZCB8IFJlc3BvbnNlPjtcblx0aXBCbGFja2xpc3RNaWRkbGV3YXJlKCk6IChcblx0XHRyZXE6IFJlcXVlc3QsXG5cdFx0cmVzOiBSZXNwb25zZSxcblx0XHRuZXh0OiBOZXh0RnVuY3Rpb25cblx0KSA9PiBQcm9taXNlPHZvaWQ+O1xuXHRhZGRJcFRvQmxhY2tsaXN0KGlwOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+O1xuXHRyZW1vdmVJcEZyb21CbGFja2xpc3QoaXA6IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG5cdHByZUluaXRJcEJsYWNrbGlzdCgpOiBQcm9taXNlPHZvaWQ+O1xuXHRsb2FkSXBCbGFja2xpc3QoKTogUHJvbWlzZTx2b2lkPjtcblx0dGVtcG9yYXJ5QmxhY2tsaXN0KGlwOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+O1xuXHRpc0JsYWNrbGlzdGVkKGlwOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+O1xuXHRpc1RlbXBvcmFyaWx5QmxhY2tsaXN0ZWQoaXA6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj47XG5cdGlzQmxhY2tsaXN0ZWRPclRlbXBvcmFyaWx5QmxhY2tsaXN0ZWQoaXA6IHN0cmluZyk6IFByb21pc2U8e1xuXHRcdGlzQmxhY2tsaXN0ZWQ6IGJvb2xlYW47XG5cdFx0aXNUZW1wb3JhcmlseUJsYWNrbGlzdGVkOiBib29sZWFuO1xuXHR9Pjtcblx0ZHluYW1pY1JhdGVMaW1pdGVyKCk6IFByb21pc2U8dm9pZD47XG5cdHNodXRkb3duKCk6IFByb21pc2U8dm9pZD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGVhbHRoQ2hlY2tTZXJ2aWNlSW50ZXJmYWNlIHtcblx0cGVyZm9ybUhlYWx0aENoZWNrKCk6IFByb21pc2U8UmVjb3JkPHN0cmluZywgdW5rbm93bj4+O1xuXHRzaHV0ZG93bigpOiBQcm9taXNlPHZvaWQ+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhlbG1ldE1pZGRsZXdhcmVTZXJ2aWNlSW50ZXJmYWNlIHtcblx0aW5pdGlhbGl6ZUhlbG1ldE1pZGRsZXdhcmUoYXBwOiBBcHBsaWNhdGlvbik6IFByb21pc2U8dm9pZD47XG5cdGFwcGx5SGVsbWV0KGFwcDogQXBwbGljYXRpb24pOiBQcm9taXNlPHZvaWQ+O1xuXHRhcHBseUNTUChhcHA6IEFwcGxpY2F0aW9uKTogUHJvbWlzZTx2b2lkPjtcblx0YXBwbHlFeHBlY3RDVChhcHA6IEFwcGxpY2F0aW9uKTogUHJvbWlzZTx2b2lkPjtcblx0YXBwbHlSZWZlcnJlclBvbGljeShhcHA6IEFwcGxpY2F0aW9uKTogUHJvbWlzZTx2b2lkPjtcblx0YXBwbHlQZXJtaXNzaW9uc1BvbGljeShhcHA6IEFwcGxpY2F0aW9uKTogUHJvbWlzZTx2b2lkPjtcblx0YXBwbHlYc3NGaWx0ZXIoYXBwOiBBcHBsaWNhdGlvbik6IFByb21pc2U8dm9pZD47XG5cdGhlbG1ldE9wdGlvbnM/OiB0eXBlb2YgaW1wb3J0KCcuLi8uLi9jb25maWcvbWlkZGxld2FyZU9wdGlvbnMnKS5oZWxtZXRPcHRpb25zO1xuXHRwZXJtaXNzaW9uc1BvbGljeU9wdGlvbnM/OiB7XG5cdFx0W2tleTogc3RyaW5nXTogc3RyaW5nW107XG5cdH07XG5cdHNodXRkb3duKCk6IFByb21pc2U8dm9pZD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSFRUUFNTZXJ2ZXJJbnRlcmZhY2Uge1xuXHRpbml0aWFsaXplOiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xuXHRzdGFydFNlcnZlcjogKCkgPT4gUHJvbWlzZTx2b2lkPjtcblx0Z2V0SFRUUFNTZXJ2ZXJJbmZvKCk6IFByb21pc2U8UmVjb3JkPHN0cmluZywgdW5rbm93bj4+O1xuXHRnZXRIVFRQU1NlcnZlck1ldHJpY3MoXG5cdFx0c2VydmljZU5hbWU6IHN0cmluZ1xuXHQpOiBQcm9taXNlPFJlY29yZDxzdHJpbmcsIHVua25vd24+Pjtcblx0c2h1dGRvd25TZXJ2ZXI6ICgpID0+IFByb21pc2U8dm9pZD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSldUQXV0aE1pZGRsZXdhcmVTZXJ2aWNlSW50ZXJmYWNlIHtcblx0aW5pdGlhbGl6ZUpXVEF1dGhNaWRkbGV3YXJlKCk6IChcblx0XHRyZXE6IFJlcXVlc3QsXG5cdFx0cmVzOiBSZXNwb25zZSxcblx0XHRuZXh0OiBOZXh0RnVuY3Rpb25cblx0KSA9PiBQcm9taXNlPHZvaWQgfCBSZXNwb25zZT47XG5cdHNodXRkb3duKCk6IFByb21pc2U8dm9pZD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSldUU2VydmljZUludGVyZmFjZSB7XG5cdGdlbmVyYXRlSldUKGlkOiBzdHJpbmcsIHVzZXJuYW1lOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz47XG5cdHZlcmlmeUpXVCh0b2tlbjogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmcgfCBKd3RQYXlsb2FkIHwgbnVsbD47XG5cdHNodXRkb3duKCk6IFByb21pc2U8dm9pZD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWFpbGVyU2VydmljZUludGVyZmFjZSB7XG5cdGdldFRyYW5zcG9ydGVyKCk6IFByb21pc2U8VHJhbnNwb3J0ZXI+O1xuXHR2YWxpZGF0ZU1haWxlckRlcGVuZGVuY2llcygpOiB2b2lkO1xuXHRjcmVhdGVNYWlsVHJhbnNwb3J0ZXIoKTogUHJvbWlzZTxUcmFuc3BvcnRlcj47XG5cdHNodXRkb3duKCk6IFByb21pc2U8dm9pZD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWlkZGxld2FyZVN0YXR1c1NlcnZpY2VJbnRlcmZhY2Uge1xuXHRzZXRTdGF0dXMobWlkZGxld2FyZU5hbWU6IHN0cmluZywgc3RhdHVzOiAnb24nIHwgJ29mZicpOiB2b2lkO1xuXHRnZXRTdGF0dXMobWlkZGxld2FyZU5hbWU6IHN0cmluZyk6ICdvbicgfCAnb2ZmJyB8IHVuZGVmaW5lZCB8IHZvaWQ7XG5cdGlzTWlkZGxld2FyZU9uKG1pZGRsZXdhcmVOYW1lOiBzdHJpbmcpOiBib29sZWFuO1xuXHRzaHV0ZG93bigpOiBQcm9taXNlPHZvaWQ+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE11bHRlclVwbG9hZFNlcnZpY2VJbnRlcmZhY2Uge1xuXHRzZXRGaWxlU2l6ZUxpbWl0KGxpbWl0OiBudW1iZXIpOiB2b2lkO1xuXHRzZXRBbGxvd2VkTWltZVR5cGVzKG1pbWVUeXBlczogc3RyaW5nW10pOiB2b2lkO1xuXHRzZXRBbGxvd2VkRXh0ZW5zaW9ucyhleHRlbnNpb25zOiBzdHJpbmdbXSk6IHZvaWQ7XG5cdGNyZWF0ZU11bHRlclVwbG9hZChcblx0XHR2YWxpZGF0aW9uQ2FsbGJhY2s/OiAoZmlsZTogRXhwcmVzcy5NdWx0ZXIuRmlsZSkgPT4gYm9vbGVhblxuXHQpOiBpbXBvcnQoJ211bHRlcicpLk11bHRlciB8IHVuZGVmaW5lZDtcblx0b25VcGxvYWRTdWNjZXNzKGNhbGxiYWNrOiAoZmlsZTogRXhwcmVzcy5NdWx0ZXIuRmlsZSkgPT4gdm9pZCk6IHZvaWQ7XG5cdHNodXRkb3duKCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFzc3BvcnRBdXRoTWlkZGxld2FyZVNlcnZpY2VJbnRlcmZhY2Uge1xuXHRpbml0aWFsaXplUGFzc3BvcnRBdXRoTWlkZGxld2FyZSh7XG5cdFx0cGFzc3BvcnQsXG5cdFx0YXV0aGVudGljYXRlT3B0aW9ucyxcblx0XHR2YWxpZGF0ZURlcGVuZGVuY2llc1xuXHR9OiBQYXNzcG9ydEF1dGhNaWRkbGV3YXJlU2VydmljZURlcHMpOiBSZXF1ZXN0SGFuZGxlcjtcblx0c2h1dGRvd24oKTogUHJvbWlzZTx2b2lkPjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgUGFzc3BvcnRTZXJ2aWNlSW50ZXJmYWNlIHtcblx0Y29uZmlndXJlUGFzc3BvcnQoXG5cdFx0cGFzc3BvcnQ6IGltcG9ydCgncGFzc3BvcnQnKS5QYXNzcG9ydFN0YXRpYyxcblx0XHRVc2VyTW9kZWw6IHR5cGVvZiBpbXBvcnQoJy4uLy4uL21vZGVscy9Vc2VyJykuVXNlclxuXHQpOiBQcm9taXNlPHZvaWQ+O1xuXHRzaHV0ZG93bigpOiBQcm9taXNlPHZvaWQ+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhc3N3b3JkU2VydmljZUludGVyZmFjZSB7XG5cdGhhc2hQYXNzd29yZChwYXNzd29yZDogc3RyaW5nLCBwZXBwZXI6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPjtcblx0Y29tcGFyZVBhc3N3b3JkKFxuXHRcdHN0b3JlZFBhc3N3b3JkOiBzdHJpbmcsXG5cdFx0cHJvdmlkZWRQYXNzd29yZDogc3RyaW5nLFxuXHRcdHBlcHBlcjogc3RyaW5nXG5cdCk6IFByb21pc2U8Ym9vbGVhbj47XG5cdHNodXRkb3duKCk6IFByb21pc2U8dm9pZD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzb3VyY2VNYW5hZ2VySW50ZXJmYWNlIHtcblx0Z2V0Q3B1VXNhZ2UoKTogQXJyYXk8eyBjb3JlOiBudW1iZXI7IHVzYWdlOiBzdHJpbmcgfT47XG5cdGdldE1lbW9yeVVzYWdlKCk6IHtcblx0XHRoZWFwVXNlZDogbnVtYmVyO1xuXHRcdGhlYXBUb3RhbDogbnVtYmVyO1xuXHRcdGhlYXBVc2VkUGVyY2VudGFnZTogbnVtYmVyO1xuXHRcdG1lbW9yeUxpbWl0OiBudW1iZXI7XG5cdFx0aXNNZW1vcnlIZWFsdGh5OiBib29sZWFuO1xuXHR9O1xuXHRnZXREaXNrVXNhZ2UoKTogUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj47XG5cdGdldE5ldHdvcmtVc2FnZSgpOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPltdO1xuXHRhZGp1c3RSZXNvdXJjZXMoKTogdm9pZDtcblx0Y2xlYXJDYWNoZXMoc2VydmljZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcblx0ZXZpY3RDYWNoZUVudHJpZXMoc2VydmljZTogc3RyaW5nKTogdm9pZDtcblx0Y2xvc2VJZGxlQ29ubmVjdGlvbnMoKTogUHJvbWlzZTx2b2lkPjtcblx0c2F2ZVRvQ2FjaGU8VD4oXG5cdFx0a2V5OiBzdHJpbmcsXG5cdFx0dmFsdWU6IFQsXG5cdFx0c2VydmljZTogc3RyaW5nLFxuXHRcdGV4cGlyYXRpb246IG51bWJlclxuXHQpOiBQcm9taXNlPHZvaWQ+O1xuXHRnZXRGcm9tQ2FjaGU8VD4oa2V5OiBzdHJpbmcsIHNlcnZpY2U6IHN0cmluZyk6IFByb21pc2U8VCB8IG51bGw+O1xuXHRzaHV0ZG93bigpOiBQcm9taXNlPHZvaWQ+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJvb3RNaWRkbGV3YXJlU2VydmljZUludGVyZmFjZSB7XG5cdGluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPjtcblx0dHJhY2tSZXNwb25zZVRpbWUocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pOiB2b2lkO1xuXHRjYWxjdWxhdGVSZXF1ZXN0c1BlclNlY29uZCgpOiB2b2lkO1xuXHRzaHV0ZG93bigpOiBQcm9taXNlPHZvaWQ+O1xuXHRnZXRBdmVyYWdlUmVzcG9uc2VUaW1lKCk6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdGF0aWNSb3V0ZXJJbnRlcmZhY2Uge1xuXHRpbml0aWFsaXplU3RhdGljUm91dGVyKCk6IFByb21pc2U8dm9pZD47XG5cdHNlcnZlTm90Rm91bmRQYWdlKFxuXHRcdHJlcTogUmVxdWVzdCxcblx0XHRyZXM6IFJlc3BvbnNlLFxuXHRcdG5leHQ6IE5leHRGdW5jdGlvblxuXHQpOiBQcm9taXNlPHZvaWQ+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRPVFBTZXJ2aWNlSW50ZXJmYWNlIHtcblx0Z2VuZXJhdGVUT1RQU2VjcmV0KCk6IFRPVFBTZWNyZXRJbnRlcmZhY2U7XG5cdGdlbmVyYXRlVE9UUFRva2VuKHNlY3JldDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+O1xuXHR2ZXJpZnlUT1RQVG9rZW4oc2VjcmV0OiBzdHJpbmcsIHRva2VuOiBzdHJpbmcpOiBib29sZWFuO1xuXHRnZW5lcmF0ZVFSQ29kZShvdHBhdXRoX3VybDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+O1xuXHRzaHV0ZG93bigpOiBQcm9taXNlPHZvaWQ+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZXJDb250cm9sbGVySW50ZXJmYWNlIHtcblx0ZmluZE9uZShcblx0XHRjcml0ZXJpYTogV2hlcmVPcHRpb25zPFVzZXJBdHRyaWJ1dGVzSW50ZXJmYWNlPlxuXHQpOiBQcm9taXNlPFVzZXJJbnN0YW5jZUludGVyZmFjZSB8IG51bGw+O1xuXHRmaW5kVXNlckJ5RW1haWwoZW1haWw6IHN0cmluZyk6IFByb21pc2U8VXNlckluc3RhbmNlSW50ZXJmYWNlIHwgbnVsbD47XG5cdGZpbmRVc2VyQnlJZCh1c2VySWQ6IHN0cmluZyk6IFByb21pc2U8VXNlckluc3RhbmNlSW50ZXJmYWNlIHwgbnVsbD47XG5cdGNyZWF0ZVVzZXIoXG5cdFx0dXNlckRldGFpbHM6IE9taXQ8VXNlckF0dHJpYnV0ZXNJbnRlcmZhY2UsICdpZCcgfCAnY3JlYXRpb25EYXRlJz5cblx0KTogUHJvbWlzZTxVc2VySW5zdGFuY2VJbnRlcmZhY2UgfCBudWxsPjtcblx0dXBkYXRlVXNlcihcblx0XHR1c2VyOiBVc2VySW5zdGFuY2VJbnRlcmZhY2UsXG5cdFx0dXBkYXRlZERldGFpbHM6IFBhcnRpYWw8VXNlckluc3RhbmNlSW50ZXJmYWNlPlxuXHQpOiBQcm9taXNlPFVzZXJJbnN0YW5jZUludGVyZmFjZSB8IG51bGw+O1xuXHRkZWxldGVVc2VyKHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPjtcblx0dmVyaWZ5VXNlckFjY291bnQodXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+O1xuXHRzaHV0ZG93bigpOiBQcm9taXNlPHZvaWQ+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZhdWx0U2VydmljZUludGVyZmFjZSB7XG5cdHN0b3JlU2VjcmV0KGtleTogc3RyaW5nLCBzZWNyZXQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG5cdHJldHJpZXZlU2VjcmV0KFxuXHRcdGtleToga2V5b2YgU2VjcmV0c01hcCxcblx0XHR1c2FnZUNhbGxiYWNrOiAoc2VjcmV0OiBzdHJpbmcpID0+IHZvaWRcblx0KTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPjtcblx0cmV0cmlldmVTZWNyZXRzKFxuXHRcdHNlY3JldEtleXM6IChrZXlvZiBTZWNyZXRzTWFwKVtdLFxuXHRcdHVzYWdlQ2FsbGJhY2s6IChzZWNyZXRzOiBQYXJ0aWFsPFNlY3JldHNNYXA+KSA9PiB2b2lkXG5cdCk6IFByb21pc2U8UGFydGlhbDxTZWNyZXRzTWFwPiB8IG51bGw+O1xuXHRyZWRhY3RTZWNyZXRzKFxuXHRcdGxvZ0RhdGE6IHN0cmluZyB8IFJlY29yZDxzdHJpbmcsIHVua25vd24+IHwgdW5rbm93bltdXG5cdCk6IFByb21pc2U8c3RyaW5nIHwgUmVjb3JkPHN0cmluZywgdW5rbm93bj4gfCB1bmtub3duW10+O1xuXHRjbGVhckV4cGlyZWRTZWNyZXRzRnJvbU1lbW9yeSgpOiB2b2lkO1xuXHRjbGVhclNlY3JldHNGcm9tTWVtb3J5KHNlY3JldEtleXM6IHN0cmluZyB8IHN0cmluZ1tdKTogdm9pZDtcblx0YmF0Y2hDbGVhclNlY3JldHMoKTogUHJvbWlzZTx2b2lkPjtcblx0c2h1dGRvd24oKTogUHJvbWlzZTx2b2lkPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0b3JTZXJ2aWNlSW50ZXJmYWNlIHtcblx0dmFsaWRhdGVFbnRyeShyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbik6IHZvaWQ7XG5cdHJlZ2lzdHJhdGlvblZhbGlkYXRpb25SdWxlcyhcblx0XHRyZXE6IFJlcXVlc3QsXG5cdFx0cmVzOiBSZXNwb25zZSxcblx0XHRuZXh0OiBOZXh0RnVuY3Rpb25cblx0KTogdm9pZDtcblx0aGFuZGxlVmFsaWRhdGlvbkVycm9ycyhcblx0XHRyZXE6IFJlcXVlc3QsXG5cdFx0cmVzOiBSZXNwb25zZSxcblx0XHRuZXh0OiBOZXh0RnVuY3Rpb25cblx0KTogUmVzcG9uc2UgfCB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFl1Ymljb09UUFNlcnZpY2VJbnRlcmZhY2Uge1xuXHRpbml0aWFsaXplWXViaWNvT1RQKCk6IFByb21pc2U8dm9pZD47XG5cdGluaXQoY2xpZW50SWQ6IHN0cmluZywgc2VjcmV0S2V5OiBzdHJpbmcpOiBZdWJDbGllbnRJbnRlcmZhY2U7XG5cdHZhbGlkYXRlWXViaWNvT1RQKG90cDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPjtcblx0Z2VuZXJhdGVZdWJpY29PVFBPcHRpb25zKCk6IFByb21pc2U8WXViaWNvT1RQT3B0aW9uc0ludGVyZmFjZT47XG5cdHNodXRkb3duKCk6IFByb21pc2U8dm9pZD47XG59XG5cbi8vXG4vLy9cbi8vLy9cbi8vLy8vICoqKioqIFNFUlZJQ0UgREVQRU5ERU5DSUVTICoqKioqXG4vLy8vXG4vLy9cbi8vXG5cbmV4cG9ydCBpbnRlcmZhY2UgQVBJUm91dGVyRGVwcyB7XG5cdFVzZXJSb3V0ZXM6IFVzZXJDb250cm9sbGVySW50ZXJmYWNlO1xuXHRhcmdvbjI6IHtcblx0XHRoYXNoKFxuXHRcdFx0ZGF0YTogc3RyaW5nIHwgQnVmZmVyLFxuXHRcdFx0b3B0aW9ucz86IFJlY29yZDxzdHJpbmcsIHVua25vd24+XG5cdFx0KTogUHJvbWlzZTxzdHJpbmc+O1xuXHRcdHZlcmlmeShcblx0XHRcdHBsYWluOiBzdHJpbmcgfCBCdWZmZXIsXG5cdFx0XHRoYXNoOiBzdHJpbmcsXG5cdFx0XHRvcHRpb25zPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj5cblx0XHQpOiBQcm9taXNlPGJvb2xlYW4+O1xuXHRcdGFyZ29uMmlkOiBudW1iZXI7XG5cdH07XG5cdGp3dDogdHlwZW9mIGltcG9ydCgnanNvbndlYnRva2VuJyk7XG5cdGF4aW9zOiB7XG5cdFx0Z2V0PFQ+KHVybDogc3RyaW5nLCBjb25maWc/OiBvYmplY3QpOiBQcm9taXNlPHsgZGF0YTogVCB9Pjtcblx0XHRwb3N0PFQ+KFxuXHRcdFx0dXJsOiBzdHJpbmcsXG5cdFx0XHRkYXRhPzogdW5rbm93bixcblx0XHRcdGNvbmZpZz86IG9iamVjdFxuXHRcdCk6IFByb21pc2U8eyBkYXRhOiBUIH0+O1xuXHRcdHB1dDxUPihcblx0XHRcdHVybDogc3RyaW5nLFxuXHRcdFx0ZGF0YT86IHVua25vd24sXG5cdFx0XHRjb25maWc/OiBvYmplY3Rcblx0XHQpOiBQcm9taXNlPHsgZGF0YTogVCB9Pjtcblx0XHRkZWxldGU8VD4odXJsOiBzdHJpbmcsIGNvbmZpZz86IG9iamVjdCk6IFByb21pc2U8eyBkYXRhOiBUIH0+O1xuXHR9O1xuXHRiY3J5cHQ6IHR5cGVvZiBpbXBvcnQoJ2JjcnlwdCcpO1xuXHR1dWlkdjQ6ICgpID0+IHN0cmluZztcblx0eHNzOiAoaW5wdXQ6IHN0cmluZykgPT4gc3RyaW5nO1xuXHRnZW5lcmF0ZUNvbmZpcm1hdGlvbkVtYWlsVGVtcGxhdGU6IChcblx0XHR1c2VyTmFtZTogc3RyaW5nLFxuXHRcdGNvbmZpcm1hdGlvbkxpbms6IHN0cmluZ1xuXHQpID0+IHN0cmluZztcblx0Z2V0VHJhbnNwb3J0ZXI6IChkZXBzOiBNYWlsZXJTZXJ2aWNlSW50ZXJmYWNlKSA9PiBQcm9taXNlPFRyYW5zcG9ydGVyPjtcblx0dG90cE1mYToge1xuXHRcdGdlbmVyYXRlVE9UUFNlY3JldDogKCkgPT4gVE9UUFNlY3JldEludGVyZmFjZTtcblx0XHRnZW5lcmF0ZVRPVFBUb2tlbjogKHNlY3JldDogc3RyaW5nKSA9PiBzdHJpbmc7XG5cdFx0dmVyaWZ5VE9UUFRva2VuOiAoc2VjcmV0OiBzdHJpbmcsIHRva2VuOiBzdHJpbmcpID0+IGJvb2xlYW47XG5cdFx0Z2VuZXJhdGVRUkNvZGU6IChvdHBhdXRoX3VybDogc3RyaW5nKSA9PiBQcm9taXNlPHN0cmluZz47XG5cdH07XG5cdHp4Y3ZibjogKHBhc3N3b3JkOiBzdHJpbmcpID0+IHtcblx0XHRzY29yZTogbnVtYmVyO1xuXHRcdGd1ZXNzZXM6IG51bWJlcjtcblx0fTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBMb2dnZXJTZXJ2aWNlRGVwcyB7XG5cdHdpbnN0b246IHtcblx0XHRjcmVhdGVMb2dnZXI6IHR5cGVvZiBpbXBvcnQoJ3dpbnN0b24nKS5jcmVhdGVMb2dnZXI7XG5cdFx0Zm9ybWF0OiB0eXBlb2YgaW1wb3J0KCd3aW5zdG9uJykuZm9ybWF0O1xuXHRcdHRyYW5zcG9ydHM6IHR5cGVvZiBpbXBvcnQoJ3dpbnN0b24nKS50cmFuc3BvcnRzO1xuXHRcdGFkZENvbG9yczogdHlwZW9mIGltcG9ydCgnd2luc3RvbicpLmFkZENvbG9ycztcblx0fTtcblx0RGFpbHlSb3RhdGVGaWxlOiB0eXBlb2YgaW1wb3J0KCd3aW5zdG9uLWRhaWx5LXJvdGF0ZS1maWxlJyk7XG5cdExvZ1N0YXNoVHJhbnNwb3J0OiB0eXBlb2YgaW1wb3J0KCd3aW5zdG9uLWxvZ3N0YXNoJyk7XG5cdEVycm9yQ2xhc3NlczogdHlwZW9mIGltcG9ydCgnLi4vLi4vZXJyb3JzL0Vycm9yQ2xhc3NlcycpLkVycm9yQ2xhc3Nlcztcblx0SGFuZGxlRXJyb3JTdGF0aWNQYXJhbWV0ZXJzOiB0eXBlb2YgSGFuZGxlRXJyb3JTdGF0aWNQYXJhbWV0ZXJzO1xuXHRmczogdHlwZW9mIGltcG9ydCgnZnMnKTtcblx0U2VxdWVsaXplOiB0eXBlb2YgaW1wb3J0KCdzZXF1ZWxpemUnKS5TZXF1ZWxpemU7XG5cdHV1aWR2NDogKCkgPT4gc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJhY2t1cENvZGVTZXJ2aWNlRGVwcyB7XG5cdFVzZXJNRkE6IHR5cGVvZiBpbXBvcnQoJy4uLy4uL21vZGVscy9Vc2VyTUZBJykuVXNlck1GQTtcblx0Y3J5cHRvOiB0eXBlb2YgaW1wb3J0KCdjcnlwdG8nKTtcblx0YmNyeXB0OiB0eXBlb2YgaW1wb3J0KCdiY3J5cHQnKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbWFpbE1GQVNlcnZpY2VEZXBzIHtcblx0YmNyeXB0OiB7XG5cdFx0Z2VuU2FsdDogKHJvdW5kczogbnVtYmVyKSA9PiBQcm9taXNlPHN0cmluZz47XG5cdH07XG5cdGp3dDoge1xuXHRcdHNpZ246IChcblx0XHRcdHBheWxvYWQ6IHN0cmluZyB8IG9iamVjdCB8IEJ1ZmZlcixcblx0XHRcdHNlY3JldE9yUHJpdmF0ZUtleTogU2VjcmV0LFxuXHRcdFx0b3B0aW9ucz86IFNpZ25PcHRpb25zXG5cdFx0KSA9PiBzdHJpbmc7XG5cdFx0dmVyaWZ5OiAoXG5cdFx0XHR0b2tlbjogc3RyaW5nLFxuXHRcdFx0c2VjcmV0T3JQdWJsaWNLZXk6IFNlY3JldFxuXHRcdCkgPT4gc3RyaW5nIHwgSnd0UGF5bG9hZDtcblx0fTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFcnJvckxvZ2dlclNlcnZpY2VEZXBzIHtcblx0cmVhZG9ubHkgdmFsaWRhdGVEZXBlbmRlbmNpZXM6IChcblx0XHRkZXBlbmRlbmNpZXM6IERlcGVuZGVuY3lJbnRlcmZhY2VbXSxcblx0XHRsb2dnZXI6IEFwcExvZ2dlclNlcnZpY2VJbnRlcmZhY2Vcblx0KSA9PiB2b2lkO1xuXHRyZWFkb25seSBFcnJvckNsYXNzZXM6IHR5cGVvZiBpbXBvcnQoJy4uLy4uL2Vycm9ycy9FcnJvckNsYXNzZXMnKS5FcnJvckNsYXNzZXM7XG5cdHJlYWRvbmx5IEVycm9yU2V2ZXJpdHk6IHN0cmluZztcblx0cmVhZG9ubHkgaGFuZGxlRXJyb3I6IEVycm9ySGFuZGxlclNlcnZpY2VJbnRlcmZhY2VbJ2hhbmRsZUVycm9yJ107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSFRUUFNTZXJ2ZXJEZXBzIHtcblx0YXBwOiBpbXBvcnQoJ2V4cHJlc3MnKS5BcHBsaWNhdGlvbjtcblx0YmxhbmtSZXF1ZXN0OiBpbXBvcnQoJ2V4cHJlc3MnKS5SZXF1ZXN0O1xuXHREZWNsYXJlV2ViU2VydmVyT3B0aW9uc1N0YXRpY1BhcmFtZXRlcnM6IERlY2xhcmVXZWJTZXJ2ZXJPcHRpb25zSW50ZXJmYWNlO1xuXHRzZXF1ZWxpemU6IGltcG9ydCgnc2VxdWVsaXplJykuU2VxdWVsaXplIHwgbnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNYWlsZXJTZXJ2aWNlRGVwcyB7XG5cdG5vZGVtYWlsZXI6IHR5cGVvZiBpbXBvcnQoJ25vZGVtYWlsZXInKTtcblx0ZW1haWxVc2VyOiBzdHJpbmc7XG5cdHZhbGlkYXRlRGVwZW5kZW5jaWVzOiAoXG5cdFx0ZGVwZW5kZW5jaWVzOiBEZXBlbmRlbmN5SW50ZXJmYWNlW10sXG5cdFx0bG9nZ2VyOiBBcHBMb2dnZXJTZXJ2aWNlSW50ZXJmYWNlXG5cdCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNdWx0ZXJVcGxvYWRTZXJ2aWNlRGVwcyB7XG5cdG11bHRlcjogdHlwZW9mIGltcG9ydCgnbXVsdGVyJyk7XG5cdGZpbGVUeXBlRnJvbUJ1ZmZlcjogdHlwZW9mIGltcG9ydCgnZmlsZS10eXBlJykuZmlsZVR5cGVGcm9tQnVmZmVyO1xuXHRmczogdHlwZW9mIGltcG9ydCgnZnMnKTtcblx0cGF0aDogdHlwZW9mIGltcG9ydCgncGF0aCcpO1xuXHR2YWxpZGF0ZURlcGVuZGVuY2llczogKFxuXHRcdGRlcGVuZGVuY2llczogRGVwZW5kZW5jeUludGVyZmFjZVtdLFxuXHRcdGxvZ2dlcjogQXBwTG9nZ2VyU2VydmljZUludGVyZmFjZVxuXHQpID0+IHZvaWQ7XG5cdGxvZ2dlcjogQXBwTG9nZ2VyU2VydmljZUludGVyZmFjZTtcblx0ZXJyb3JMb2dnZXI6IEFwcExvZ2dlclNlcnZpY2VJbnRlcmZhY2U7XG5cdGVycm9ySGFuZGxlcjogRXJyb3JIYW5kbGVyU2VydmljZUludGVyZmFjZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXNzcG9ydEF1dGhNaWRkbGV3YXJlU2VydmljZURlcHMge1xuXHRwYXNzcG9ydDogaW1wb3J0KCdwYXNzcG9ydCcpLlBhc3Nwb3J0U3RhdGljO1xuXHRhdXRoZW50aWNhdGVPcHRpb25zOiBpbXBvcnQoJ3Bhc3Nwb3J0JykuQXV0aGVudGljYXRlT3B0aW9ucztcblx0dmFsaWRhdGVEZXBlbmRlbmNpZXM6IChcblx0XHRkZXBlbmRlbmNpZXM6IERlcGVuZGVuY3lJbnRlcmZhY2VbXSxcblx0XHRsb2dnZXI6IEFwcExvZ2dlclNlcnZpY2VJbnRlcmZhY2Vcblx0KSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhc3Nwb3J0U2VydmljZUludGVyZmFjZSB7XG5cdGNvbmZpZ3VyZVBhc3Nwb3J0KFxuXHRcdHBhc3Nwb3J0OiBpbXBvcnQoJ3Bhc3Nwb3J0JykuUGFzc3BvcnRTdGF0aWMsXG5cdFx0VXNlck1vZGVsOiB0eXBlb2YgaW1wb3J0KCcuLi8uLi9tb2RlbHMvVXNlcicpLlVzZXJcblx0KTogUHJvbWlzZTx2b2lkPjtcblx0c2h1dGRvd24oKTogUHJvbWlzZTx2b2lkPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VyQ29udHJvbGxlckRlcHMge1xuXHRhcmdvbjI6IHtcblx0XHRoYXNoKFxuXHRcdFx0ZGF0YTogc3RyaW5nIHwgQnVmZmVyLFxuXHRcdFx0b3B0aW9ucz86IFJlY29yZDxzdHJpbmcsIHVua25vd24+XG5cdFx0KTogUHJvbWlzZTxzdHJpbmc+O1xuXHRcdHZlcmlmeShcblx0XHRcdHBsYWluOiBzdHJpbmcgfCBCdWZmZXIsXG5cdFx0XHRoYXNoOiBzdHJpbmcsXG5cdFx0XHRvcHRpb25zPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj5cblx0XHQpOiBQcm9taXNlPGJvb2xlYW4+O1xuXHRcdGFyZ29uMmlkOiBudW1iZXI7XG5cdH07XG5cdGp3dDogdHlwZW9mIGltcG9ydCgnanNvbndlYnRva2VuJyk7XG5cdGJjcnlwdDogdHlwZW9mIGltcG9ydCgnYmNyeXB0Jyk7XG5cdHV1aWR2NDogKCkgPT4gc3RyaW5nO1xuXHRheGlvczoge1xuXHRcdGdldDxUPih1cmw6IHN0cmluZywgY29uZmlnPzogb2JqZWN0KTogUHJvbWlzZTx7IGRhdGE6IFQgfT47XG5cdFx0cG9zdDxUPihcblx0XHRcdHVybDogc3RyaW5nLFxuXHRcdFx0ZGF0YT86IHVua25vd24sXG5cdFx0XHRjb25maWc/OiBvYmplY3Rcblx0XHQpOiBQcm9taXNlPHsgZGF0YTogVCB9Pjtcblx0XHRwdXQ8VD4oXG5cdFx0XHR1cmw6IHN0cmluZyxcblx0XHRcdGRhdGE/OiB1bmtub3duLFxuXHRcdFx0Y29uZmlnPzogb2JqZWN0XG5cdFx0KTogUHJvbWlzZTx7IGRhdGE6IFQgfT47XG5cdFx0ZGVsZXRlPFQ+KHVybDogc3RyaW5nLCBjb25maWc/OiBvYmplY3QpOiBQcm9taXNlPHsgZGF0YTogVCB9Pjtcblx0fTtcblx0eHNzOiAoaW5wdXQ6IHN0cmluZykgPT4gc3RyaW5nO1xuXHR6eGN2Ym46IChwYXNzd29yZDogc3RyaW5nKSA9PiB7XG5cdFx0c2NvcmU6IG51bWJlcjtcblx0XHRndWVzc2VzOiBudW1iZXI7XG5cdH07XG5cdHRvdHBNZmE6IHtcblx0XHRnZW5lcmF0ZVRPVFBTZWNyZXQ6ICgpID0+IFRPVFBTZWNyZXRJbnRlcmZhY2U7XG5cdFx0Z2VuZXJhdGVUT1RQVG9rZW46IChzZWNyZXQ6IHN0cmluZykgPT4gc3RyaW5nO1xuXHRcdHZlcmlmeVRPVFBUb2tlbjogKHNlY3JldDogc3RyaW5nLCB0b2tlbjogc3RyaW5nKSA9PiBib29sZWFuO1xuXHRcdGdlbmVyYXRlUVJDb2RlOiAob3RwYXV0aF91cmw6IHN0cmluZykgPT4gUHJvbWlzZTxzdHJpbmc+O1xuXHR9O1xufVxuXG4vL1xuLy8vXG4vLy8vXG4vLy8vLyAqKioqKiBTRVJWSUNFIENPTVBPTkVOVFMgKioqKipcbi8vLy9cbi8vL1xuLy9cblxuZXhwb3J0IGludGVyZmFjZSBBZGRJcFRvQmxhY2tsaXN0SW50ZXJmYWNlIHtcblx0aXA6IHN0cmluZztcblx0dmFsaWRhdGVEZXBlbmRlbmNpZXM6IChcblx0XHRkZXBlbmRlbmNpZXM6IERlcGVuZGVuY3lJbnRlcmZhY2VbXSxcblx0XHRsb2dnZXI6IEFwcExvZ2dlclNlcnZpY2VJbnRlcmZhY2Vcblx0KSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF1dGhlbnRpY2F0ZWRVc2VySW50ZXJmYWNlIHtcblx0aWQ6IHN0cmluZztcblx0cm9sZTogc3RyaW5nO1xuXHRwZXJtaXNzaW9uczogc3RyaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFja3VwQ29kZUludGVyZmFjZSB7XG5cdGNvZGU6IHN0cmluZztcblx0dXNlZDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYWNoZU1ldHJpY3Mge1xuXHRjYWNoZUhpdHM6IG51bWJlcjtcblx0Y2FjaGVNaXNzZXM6IG51bWJlcjtcblx0Y2FjaGVTaXplPzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZ1NlY3JldHNJbnRlcmZhY2Uge1xuXHRyZWFkb25seSBleGVjU3luYzogdHlwZW9mIGltcG9ydCgnY2hpbGRfcHJvY2VzcycpLmV4ZWNTeW5jO1xuXHRyZWFkb25seSBnZXREaXJlY3RvcnlQYXRoOiAoKSA9PiBzdHJpbmc7XG5cdHJlYWRvbmx5IGdwZ1Bhc3NwaHJhc2U6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDcmVhdGVKd3RJbnRlcmZhY2Uge1xuXHRqd3Q6IHR5cGVvZiBpbXBvcnQoJ2pzb253ZWJ0b2tlbicpO1xuXHRleGVjU3luYzogdHlwZW9mIGltcG9ydCgnY2hpbGRfcHJvY2VzcycpLmV4ZWNTeW5jO1xuXHR2YWxpZGF0ZURlcGVuZGVuY2llczogKFxuXHRcdGRlcGVuZGVuY2llczogRGVwZW5kZW5jeUludGVyZmFjZVtdLFxuXHRcdGxvZ2dlcjogQXBwTG9nZ2VyU2VydmljZUludGVyZmFjZVxuXHQpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3NyZk1pZGRsZXdhcmVJbnRlcmZhY2Uge1xuXHRyZXE6IGltcG9ydCgnZXhwcmVzcycpLlJlcXVlc3Q7XG5cdHJlczogaW1wb3J0KCdleHByZXNzJykuUmVzcG9uc2U7XG5cdG5leHQ6IGltcG9ydCgnZXhwcmVzcycpLk5leHRGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEZWNsYXJlV2ViU2VydmVyT3B0aW9uc0ludGVyZmFjZSB7XG5cdGJsYW5rUmVxdWVzdDogaW1wb3J0KCdleHByZXNzJykuUmVxdWVzdDtcblx0Y29uc3RhbnRzOiB0eXBlb2YgaW1wb3J0KCdjcnlwdG8nKS5jb25zdGFudHM7XG5cdGZzOiB0eXBlb2YgaW1wb3J0KCdmcycpLnByb21pc2VzO1xuXHR0bHNDaXBoZXJzOiBzdHJpbmdbXTtcblx0dmFsaWRhdGVEZXBlbmRlbmNpZXM6IChcblx0XHRkZXBlbmRlbmNpZXM6IERlcGVuZGVuY3lJbnRlcmZhY2VbXSxcblx0XHRsb2dnZXI6IEFwcExvZ2dlclNlcnZpY2VJbnRlcmZhY2Vcblx0KSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlcGVuZGVuY3lJbnRlcmZhY2Uge1xuXHRuYW1lOiBzdHJpbmc7XG5cdGluc3RhbmNlOiB1bmtub3duO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV4cHJlc3NFcnJvckhhbmRsZXJJbnRlcmZhY2Uge1xuXHRleHByZXNzRXJyb3I6IEFwcEVycm9yIHwgQ2xpZW50RXJyb3IgfCBFcnJvcjtcblx0cmVxOiBSZXF1ZXN0O1xuXHRyZXM6IFJlc3BvbnNlO1xuXHRuZXh0OiBOZXh0RnVuY3Rpb247XG5cdGZhbGxiYWNrTG9nZ2VyOiBDb25zb2xlO1xuXHRlcnJvclJlc3BvbnNlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yTG9nZ2VyRGV0YWlsc0ludGVyZmFjZSB7XG5cdGdldENhbGxlckluZm86ICgpID0+IHN0cmluZztcblx0cmVxOiBpbXBvcnQoJ2V4cHJlc3MnKS5SZXF1ZXN0O1xuXHRyZXF1ZXN0SWRWYWw/OiBzdHJpbmc7XG5cdGFkbWluSWRWYWw/OiBzdHJpbmc7XG5cdHVzZXJJZFZhbD86IHN0cmluZztcblx0YWN0aW9uVmFsPzogc3RyaW5nO1xuXHRpcFZhbD86IHN0cmluZztcblx0dXNlckFnZW50VmFsPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpZG9Vc2VySW50ZXJmYWNlIHtcblx0aWQ6IHN0cmluZztcblx0ZW1haWw6IHN0cmluZztcblx0dXNlcm5hbWU6IHN0cmluZztcblx0Y3JlZGVudGlhbDoge1xuXHRcdGNyZWRlbnRpYWxJZDogc3RyaW5nO1xuXHR9W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZVR5cGVSZWNvcmRzIHtcblx0W2tleTogc3RyaW5nXTogc3RyaW5nIHwgc3RyaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0RmVhdHVyZUZsYWdzSW50ZXJmYWNlIHtcblx0YmxhbmtSZXF1ZXN0OiBpbXBvcnQoJ2V4cHJlc3MnKS5SZXF1ZXN0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdlbmVyYXRlUGFzc2tleUludGVyZmFjZSB7XG5cdHVzZXI6IEZpZG9Vc2VySW50ZXJmYWNlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdlbmVyYXRlUGFzc2tleUludGVyZmFjZSB7XG5cdHVzZXI6IEZpZG9Vc2VySW50ZXJmYWNlO1xuXHRsb2dnZXI6IEFwcExvZ2dlclNlcnZpY2VJbnRlcmZhY2U7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGFuZGxlQ3JpdGljYWxFcnJvckludGVyZmFjZSB7XG5cdGVycm9yOiB1bmtub3duO1xuXHRyZXE/OiBSZXF1ZXN0O1xuXHRkZXRhaWxzPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGFuZGxlRXJyb3JJbnRlcmZhY2Uge1xuXHRlcnJvcjogdW5rbm93bjtcblx0cmVxPzogUmVxdWVzdDtcblx0ZGV0YWlscz86IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuXHRzZXZlcml0eT86IGltcG9ydCgnLi4vLi4vZXJyb3JzL0Vycm9yQ2xhc3NlcycpLkVycm9yU2V2ZXJpdHlUeXBlO1xuXHRhY3Rpb24/OiBzdHJpbmc7XG5cdHVzZXJJZD86IHN0cmluZztcblx0c2VxdWVsaXplPzogU2VxdWVsaXplO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhhc2hQYXNzd29yZEludGVyZmFjZSB7XG5cdHBhc3N3b3JkOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5pdERhdGFiYXNlSW50ZXJmYWNlIHtcblx0bWF4UmV0cmllczogbnVtYmVyO1xuXHRyZXRyeUFmdGVyOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5pdGlhbGl6ZURhdGFiYXNlSW50ZXJmYWNlIHtcblx0cmVhZG9ubHkgYmxhbmtSZXF1ZXN0OiBpbXBvcnQoJ2V4cHJlc3MnKS5SZXF1ZXN0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEluaXRFeHByZXNzTWlkZGx3YXJlIHtcblx0YXBwOiBpbXBvcnQoJ2V4cHJlc3MnKS5BcHBsaWNhdGlvbjtcblx0bWlkZGxld2FyZTogaW1wb3J0KCdleHByZXNzJykuUmVxdWVzdEhhbmRsZXI7XG5cdG1pZGRsZXdhcmVOYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5pdElwQmxhY2tsaXN0SW50ZXJmYWNlIHtcblx0ZnNNb2R1bGU6IHR5cGVvZiBpbXBvcnQoJ2ZzJyk7XG5cdGluUmFuZ2U6IHR5cGVvZiBpbXBvcnQoJ3JhbmdlX2NoZWNrJykuaW5SYW5nZTtcblx0dmFsaWRhdGVEZXBlbmRlbmNpZXM6IChcblx0XHRkZXBlbmRlbmNpZXM6IERlcGVuZGVuY3lJbnRlcmZhY2VbXSxcblx0XHRsb2dnZXI6IEFwcExvZ2dlclNlcnZpY2VJbnRlcmZhY2Vcblx0KSA9PiB2b2lkO1xufVxuZXhwb3J0IGludGVyZmFjZSBMb2FkSXBCbGFja2xpc3RJbnRlcmZhY2Uge1xuXHRmc01vZHVsZTogdHlwZW9mIGltcG9ydCgnZnMnKS5wcm9taXNlcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNYWlsT3B0aW9ucyB7XG5cdGZyb206IHN0cmluZztcblx0dG86IHN0cmluZztcblx0c3ViamVjdDogc3RyaW5nO1xuXHR0ZXh0Pzogc3RyaW5nO1xuXHRodG1sPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1lbW9yeU1vbml0b3JJbnRlcmZhY2Uge1xuXHRvczogdHlwZW9mIGltcG9ydCgnb3MnKTtcblx0cHJvY2VzczogTm9kZUpTLlByb2Nlc3M7XG5cdHNldEludGVydmFsOiB0eXBlb2Ygc2V0SW50ZXJ2YWw7XG5cdHZhbGlkYXRlRGVwZW5kZW5jaWVzOiAoXG5cdFx0ZGVwZW5kZW5jaWVzOiBEZXBlbmRlbmN5SW50ZXJmYWNlW10sXG5cdFx0bG9nZ2VyOiBBcHBMb2dnZXJTZXJ2aWNlSW50ZXJmYWNlXG5cdCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNZW1vcnlNb25pdG9yU3RhdHMge1xuXHRyc3M6IHN0cmluZztcblx0aGVhcFRvdGFsOiBzdHJpbmc7XG5cdGhlYXBVc2VkOiBzdHJpbmc7XG5cdGV4dGVybmFsOiBzdHJpbmc7XG5cdGF2YWlsYWJsZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJvdXRlUGFyYW1zIHtcblx0YXBwOiBpbXBvcnQoJ2V4cHJlc3MnKS5BcHBsaWNhdGlvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZW5kQ2xpZW50RXJyb3JSZXNwb25zZUludGVyZmFjZSB7XG5cdG1lc3NhZ2U6IHN0cmluZztcblx0c3RhdHVzQ29kZTogbnVtYmVyO1xuXHRyZXM6IFJlc3BvbnNlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNldFVwRGF0YWJhc2VJbnRlcmZhY2Uge1xuXHRyZWFkb25seSBibGFua1JlcXVlc3Q/OiBpbXBvcnQoJ2V4cHJlc3MnKS5SZXF1ZXN0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNsb3dkb3duQ29uZmlnSW50ZXJmYWNlIHtcblx0c2xvd2Rvd25UaHJlc2hvbGQ6IG51bWJlcjtcblx0dmFsaWRhdGVEZXBlbmRlbmNpZXM6IChcblx0XHRkZXBlbmRlbmNpZXM6IERlcGVuZGVuY3lJbnRlcmZhY2VbXSxcblx0XHRsb2dnZXI6IEFwcExvZ2dlclNlcnZpY2VJbnRlcmZhY2Vcblx0KSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRMU0tleXMge1xuXHRjZXJ0OiBzdHJpbmc7XG5cdGtleTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRPVFBNRkEge1xuXHRRUkNvZGU6IHR5cGVvZiBpbXBvcnQoJ3FyY29kZScpO1xuXHRzcGVha2Vhc3k6IHR5cGVvZiBpbXBvcnQoJ3NwZWFrZWFzeScpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRPVFBTZWNyZXRJbnRlcmZhY2Uge1xuXHRhc2NpaTogc3RyaW5nO1xuXHRoZXg6IHN0cmluZztcblx0YmFzZTMyOiBzdHJpbmc7XG5cdG90cGF1dGhfdXJsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmFsaWRhdG9ySW50ZXJmYWNlIHtcblx0dmFsaWRhdG9yOiB0eXBlb2YgaW1wb3J0KCd2YWxpZGF0b3InKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0ZURlcGVuZGVuY2llc0ludGVyZmFjZSB7XG5cdHZhbGlkYXRlRGVwZW5kZW5jaWVzKFxuXHRcdGRlcGVuZGVuY2llczogRGVwZW5kZW5jeUludGVyZmFjZVtdLFxuXHRcdGxvZ2dlcjogQXBwTG9nZ2VyU2VydmljZUludGVyZmFjZVxuXHQpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZhbGlkRmlsZXMge1xuXHRjc3NGaWxlczogRmlsZVR5cGVSZWNvcmRzO1xuXHRmb250RmlsZXM6IEZpbGVUeXBlUmVjb3Jkcztcblx0aHRtbEZpbGVzOiBGaWxlVHlwZVJlY29yZHM7XG5cdGljb25GaWxlczogRmlsZVR5cGVSZWNvcmRzO1xuXHRpbWFnZUZpbGVzOiBGaWxlVHlwZVJlY29yZHM7XG5cdGpzRmlsZXM6IEZpbGVUeXBlUmVjb3Jkcztcblx0bG9nb0ZpbGVzOiBGaWxlVHlwZVJlY29yZHM7XG5cdG1kRmlsZXM6IEZpbGVUeXBlUmVjb3Jkcztcblx0dHh0RmlsZXM6IEZpbGVUeXBlUmVjb3Jkcztcblx0eG1sRmlsZXM6IEZpbGVUeXBlUmVjb3Jkcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWZXJpZnlQYXNza2V5QXV0aEludGVyZmFjZSB7XG5cdGFzc2VydGlvbjogaW1wb3J0KCdmaWRvMi1saWInKS5Bc3NlcnRpb25SZXN1bHQ7XG5cdGV4cGVjdGVkQ2hhbGxlbmdlOiBzdHJpbmc7XG5cdHB1YmxpY0tleTogc3RyaW5nO1xuXHRwcmV2aW91c0NvdW50ZXI6IG51bWJlcjtcblx0aWQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWZXJpZnlQYXNza2V5UmVnaXN0cmF0aW9uSW50ZXJmYWNlIHtcblx0YXR0ZXN0YXRpb246IGltcG9ydCgnZmlkbzItbGliJykuQXR0ZXN0YXRpb25SZXN1bHQ7XG5cdGV4cGVjdGVkQ2hhbGxlbmdlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgWE1MUGFyc2VkUmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuXHRwYXJzZWRYbWxCb2R5PzogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgWXViQ2xpZW50SW50ZXJmYWNlIHtcblx0dmVyaWZ5KFxuXHRcdG90cDogc3RyaW5nLFxuXHRcdGNhbGxiYWNrOiAoZXJyOiBFcnJvciB8IG51bGwsIGRhdGE6IFl1YlJlc3BvbnNlSW50ZXJmYWNlKSA9PiB2b2lkXG5cdCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgWXViaWNvT1RQT3B0aW9uc0ludGVyZmFjZSB7XG5cdGNsaWVudElkOiBudW1iZXI7XG5cdGFwaUtleTogc3RyaW5nO1xuXHRhcGlVcmw6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBZdWJSZXNwb25zZUludGVyZmFjZSB7XG5cdHN0YXR1czogc3RyaW5nO1xuXHRba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgb2JqZWN0IHwgbnVsbCB8IHVuZGVmaW5lZDtcbn1cblxuLy8gKioqKioqIFBBUkFNRVRFUiBPQkpFQ1RTICoqKioqKiAvL1xuXG5leHBvcnQgY29uc3QgQWRkSXBUb0JsYWNrbGlzdFN0YXRpY1BhcmFtZXRlcnM6IE9taXQ8XG5cdEFkZElwVG9CbGFja2xpc3RJbnRlcmZhY2UsXG5cdCdpcCdcbj4gPSB7XG5cdHZhbGlkYXRlRGVwZW5kZW5jaWVzXG59O1xuXG5leHBvcnQgY29uc3QgQ3JlYXRlSnd0UGFyYW1ldGVyczogQ3JlYXRlSnd0SW50ZXJmYWNlID0ge1xuXHRqd3QsXG5cdGV4ZWNTeW5jLFxuXHR2YWxpZGF0ZURlcGVuZGVuY2llc1xufTtcblxuZXhwb3J0IGNvbnN0IERlY2xhcmVXZWJTZXJ2ZXJPcHRpb25zU3RhdGljUGFyYW1ldGVyczogRGVjbGFyZVdlYlNlcnZlck9wdGlvbnNJbnRlcmZhY2UgPVxuXHR7XG5cdFx0YmxhbmtSZXF1ZXN0LFxuXHRcdGNvbnN0YW50czogY3J5cHRvQ29uc3RhbnRzLFxuXHRcdGZzOiBmcy5wcm9taXNlcyxcblx0XHR0bHNDaXBoZXJzLFxuXHRcdHZhbGlkYXRlRGVwZW5kZW5jaWVzXG5cdH07XG5cbmV4cG9ydCBjb25zdCBlbnZWYXJpYWJsZXM6IEVudlZhcmlhYmxlVHlwZXMgPSB7XG5cdGJhc2VVcmw6IHByb2Nlc3MuZW52LkJBU0VfVVJMISxcblx0YmF0Y2hSZUVuY3J5cHRTZWNyZXRzSW50ZXJ2YWw6IE51bWJlcihcblx0XHRwcm9jZXNzLmVudi5CQVRDSF9SRV9FTkNSWVBUX1NFQ1JFVFNfSU5URVJWQUwhXG5cdCksXG5cdGJsYWNrbGlzdFN5bmNJbnRlcnZhbDogTnVtYmVyKHByb2Nlc3MuZW52LkJMQUNLTElTVF9TWU5DX0lOVEVSVkFMISksXG5cdGNsZWFyRXhwaXJlZFNlY3JldHNJbnRlcnZhbDogTnVtYmVyKFxuXHRcdHByb2Nlc3MuZW52LlRaX0NMRUFSX0VYUElSRURfU0VDUkVUU19JTlRFUlZBTCFcblx0KSxcblx0Y3B1TGltaXQ6IE51bWJlcihwcm9jZXNzLmVudi5DUFVfTElNSVQhKSxcblx0Y3B1VGhyZXNob2xkOiBOdW1iZXIocHJvY2Vzcy5lbnYuQ1BVX1RIUkVTSE9MRCEpLFxuXHRjcm9uTG9nZ2VyU2V0dGluZzogTnVtYmVyKHByb2Nlc3MuZW52LkNST05fTE9HR0VSX1NFVFRJTkchKSxcblx0ZGJEaWFsZWN0OiBwcm9jZXNzLmVudi5EQl9ESUFMRUNUISBhc1xuXHRcdHwgJ21hcmlhZGInXG5cdFx0fCAnbXNzcWwnXG5cdFx0fCAnbXlzcWwnXG5cdFx0fCAncG9zdGdyZXMnXG5cdFx0fCAnc3FsaXRlJyxcblx0ZGJIb3N0OiBwcm9jZXNzLmVudi5EQl9IT1NUISB8fCAnbG9jYWxob3N0Jyxcblx0ZGJJbml0TWF4UmV0cmllczogTnVtYmVyKHByb2Nlc3MuZW52LkRCX0lOSVRfTUFYX1JFVFJJRVMhKSxcblx0ZGJJbml0UmV0cnlBZnRlcjogTnVtYmVyKHByb2Nlc3MuZW52LkRCX0lOSVRfUkVUUllfQUZURVIhKSxcblx0ZGJOYW1lOiBwcm9jZXNzLmVudi5EQl9OQU1FISxcblx0ZGJVc2VyOiBwcm9jZXNzLmVudi5EQl9VU0VSISxcblx0ZGlza1BhdGg6IHByb2Nlc3MuZW52LkRJU0tfUEFUSCEsXG5cdGVtYWlsSG9zdDogcHJvY2Vzcy5lbnYuRU1BSUxfSE9TVCEsXG5cdGVtYWlsUG9ydDogTnVtYmVyKHByb2Nlc3MuZW52LkVNQUlMX1BPUlQhKSxcblx0ZW1haWxTZWN1cmU6IHByb2Nlc3MuZW52LkVNQUlMX1NFQ1VSRSA9PT0gJ3RydWUnLFxuXHRlbWFpbFVzZXI6IHByb2Nlc3MuZW52LkVNQUlMX1VTRVIhLFxuXHRldmVudExvb3BMYWdUaHJlc2hvbGQ6IE51bWJlcihwcm9jZXNzLmVudi5FVkVOVF9MT09QX0xBRyEpLFxuXHRmZWF0dXJlQXBpUm91dGVzQ3NyZjogcHJvY2Vzcy5lbnYuRkVBVFVSRV9BUElfUk9VVEVTX0NTUkYgPT09ICd0cnVlJyxcblx0ZmVhdHVyZURiU3luYzogcHJvY2Vzcy5lbnYuRkVBVFVSRV9EQl9TWU5DID09PSAndHJ1ZScsXG5cdGZlYXR1cmVFbmFibGVJcEJsYWNrbGlzdDpcblx0XHRwcm9jZXNzLmVudi5GRUFUVVJFX0VOQUJMRV9JUF9CTEFDS0xJU1QgPT09ICd0cnVlJyxcblx0ZmVhdHVyZUVuYWJsZUp3dEF1dGg6IHByb2Nlc3MuZW52LkZFQVRVUkVfRU5BQkxFX0pXVF9BVVRIID09PSAndHJ1ZScsXG5cdGZlYXR1cmVFbmFibGVMb2dTdGFzaDogcHJvY2Vzcy5lbnYuRkVBVFVSRV9FTkFCTEVfTE9HU1RBU0ggPT09ICd0cnVlJyxcblx0ZmVhdHVyZUVuYWJsZVJhdGVMaW1pdDogcHJvY2Vzcy5lbnYuRkVBVFVSRV9FTkFCTEVfUkFURV9MSU1JVCA9PT0gJ3RydWUnLFxuXHRmZWF0dXJlRW5hYmxlUmVzb3VyY2VBdXRvU2NhbGluZzpcblx0XHRwcm9jZXNzLmVudi5GRUFUVVJFX0VOQUJMRV9SRVNPVVJDRV9BVVRPX1NDQUxJTkchID09PSAndHJ1ZScsXG5cdGZlYXR1cmVFbmFibGVTZXNzaW9uOiBwcm9jZXNzLmVudi5GRUFUVVJFX0VOQUJMRV9TRVNTSU9OISA9PT0gJ3RydWUnLFxuXHRmZWF0dXJlRW5jcnlwdFNlY3JldHNTdG9yZTogcHJvY2Vzcy5lbnYuRkVBVFVSRV9FTkNSWVBUU19TVE9SRSEgPT09ICd0cnVlJyxcblx0ZmVhdHVyZUh0dHBzUmVkaXJlY3Q6IHByb2Nlc3MuZW52LkZFQVRVUkVfSFRUUFNfUkVESVJFQ1QhID09PSAndHJ1ZScsXG5cdGZlYXR1cmVMb2FkVGVzdFJvdXRlczogcHJvY2Vzcy5lbnYuRkVBVFVSRV9MT0FEX1RFU1RfUk9VVEVTISA9PT0gJ3RydWUnLFxuXHRmZWF0dXJlU2VxdWVsaXplTG9nZ2luZzogcHJvY2Vzcy5lbnYuRkVBVFVSRV9TRVFVRUxJWkVfTE9HR0lORyEgPT09ICd0cnVlJyxcblx0ZmVhdHVyZUhvbm9yQ2lwaGVyT3JkZXI6IHByb2Nlc3MuZW52LkZFQVRVUkVfSE9OT1JfQ0lQSEVSX09SREVSISA9PT0gJ3RydWUnLFxuXHRmaWRvMlRpbWVvdXQ6IE51bWJlcihwcm9jZXNzLmVudi5GSURPMl9USU1FT1VUISksXG5cdGZpZG9BdXRoUmVxdWlyZVJlc2lkZW50S2V5OlxuXHRcdHByb2Nlc3MuZW52LkZJRE9fQVVUSEVOVElDQVRPUl9SRVFVSVJFX1JFU0lERU5UX0tFWSEgPT09ICd0cnVlJyxcblx0Zmlkb0F1dGhVc2VyVmVyaWZpY2F0aW9uOiBwcm9jZXNzLmVudlxuXHRcdC5GSURPX0FVVEhFTlRJQ0FUT1JfVVNFUl9WRVJJRklDQVRJT04hIGFzXG5cdFx0fCAncmVxdWlyZWQnXG5cdFx0fCAncHJlZmVycmVkJ1xuXHRcdHwgJ2Rpc2NvdXJhZ2VkJ1xuXHRcdHwgJ2VudGVycHJpc2UnLFxuXHRmaWRvQ2hhbGxlbmdlU2l6ZTogTnVtYmVyKHByb2Nlc3MuZW52LkZJRE9fQ0hBTExFTkdFX1NJWkUhKSxcblx0Zmlkb0NyeXB0b1BhcmFtczogcHJvY2Vzcy5lbnYuRklET19DUllQVE9fUEFSQU1TIS5zcGxpdCgnLCcpLm1hcChOdW1iZXIpLFxuXHRmcm9udGVuZFNlY3JldHNQYXRoOiBwcm9jZXNzLmVudi5GUk9OVEVORF9TRUNSRVRTX1BBVEghLFxuXHRncmFjZWZ1bFNodXRkb3duVGltZW91dDogTnVtYmVyKHByb2Nlc3MuZW52LkdSQUNFRlVMX1NIVVRET1dOX1RJTUVPVVQhKSxcblx0aXBXaGl0ZWxpc3RQYXRoOiBwcm9jZXNzLmVudi5JUF9XSElURUxJU1RfUEFUSCEsXG5cdGxvZ0V4cG9ydFBhdGg6IHByb2Nlc3MuZW52LkxPR19FWFBPUlRfUEFUSCEsXG5cdGxvZ0xldmVsOiBwcm9jZXNzLmVudi5MT0dfTEVWRUwhIGFzICdkZWJ1ZycgfCAnaW5mbycgfCAnd2FybicgfCAnZXJyb3InLFxuXHRsb2dnZXJTZXJ2aWNlTmFtZTogcHJvY2Vzcy5lbnYuTE9HX1NFUlZJQ0VfTkFNRSEsXG5cdGxvZ1N0YXNoSG9zdDogcHJvY2Vzcy5lbnYuTE9HU1RBU0hfSE9TVCEsXG5cdGxvZ1N0YXNoTm9kZTogcHJvY2Vzcy5lbnYuTE9HU1RBU0hfTk9ERSEsXG5cdGxvZ1N0YXNoUG9ydDogTnVtYmVyKHByb2Nlc3MuZW52LkxPR1NUQVNIX1BPUlQhKSxcblx0bWF4Q2FjaGVTaXplOiBOdW1iZXIocHJvY2Vzcy5lbnYuTUFYX0NBQ0hFX1NJWkUhKSxcblx0bWF4UmVkaXNDYWNoZVNpemU6IE51bWJlcihwcm9jZXNzLmVudi5NQVhfUkVESVNfQ0FDSEVfU0laRSEpLFxuXHRtZW1vcnlMaW1pdDogTnVtYmVyKHByb2Nlc3MuZW52Lk1FTU9SWV9MSU1JVCEpLFxuXHRtZW1vcnlUaHJlc2hvbGQ6IE51bWJlcihwcm9jZXNzLmVudi5NRU1PUllfVEhSRVNIT0xEISksXG5cdG1lbW9yeU1vbml0b3JJbnRlcnZhbDogTnVtYmVyKHByb2Nlc3MuZW52Lk1FTU9SWV9NT05JVE9SX0lOVEVSVkFMISksXG5cdG11bHRlckZpbGVTaXplTGltaXQ6IE51bWJlcihwcm9jZXNzLmVudi5NVUxURVJfRklMRV9TSVpFX0xJTUlUISksXG5cdG11bHRlclN0b3JhZ2VEaXI6IHByb2Nlc3MuZW52Lk1VTFRFUl9TVE9SQUdFX0RJUiEsXG5cdG11bHRlclVwbG9hZERpcjogcHJvY2Vzcy5lbnYuVVBMT0FEX0RJUiEsXG5cdG5vZGVFbnY6IHByb2Nlc3MuZW52Lk5PREVfRU5WISBhcyAnZGV2ZWxvcG1lbnQnIHwgJ3Rlc3RpbmcnIHwgJ3Byb2R1Y3Rpb24nLFxuXHRucG1Mb2dQYXRoOiBwcm9jZXNzLmVudi5TRVJWRVJfTlBNX0xPR19QQVRIISxcblx0cHJpbWFyeUxvZ1BhdGg6IHByb2Nlc3MuZW52LlNFUlZFUl9MT0dfUEFUSCEsXG5cdHJhdGVMaW1pdGVyQmFzZUR1cmF0aW9uOiBOdW1iZXIocHJvY2Vzcy5lbnYuUkFURV9MSU1JVEVSX0JBU0VfRFVSQVRJT04hKSxcblx0cmF0ZUxpbWl0ZXJCYXNlUG9pbnRzOiBOdW1iZXIocHJvY2Vzcy5lbnYuUkFURV9MSU1JVEVSX0JBU0VfUE9JTlRTISksXG5cdHJhdGVMaW1pdGVyR2xvYmFsUmVzZXQ6IE51bWJlcihwcm9jZXNzLmVudi5SQVRFX0xJTUlURVJfR0xPQkFMX1JFU0VUISksXG5cdHJlZGlzVXJsOiBwcm9jZXNzLmVudi5SRURJU19VUkwhLFxuXHRyZXF1ZXN0VGltZW91dDogcHJvY2Vzcy5lbnYuUkVRVUVTVF9USU1FT1VUISxcblx0cmV2b2tlZFRva2VuUmV0ZW50aW9uUGVyaW9kOiBOdW1iZXIoXG5cdFx0cHJvY2Vzcy5lbnYuUkVWT0tFRF9UT0tFTl9SRVRFTlRJT05fUEVSSU9EIVxuXHQpLFxuXHRycE5hbWU6IHByb2Nlc3MuZW52LlJQX05BTUUhLFxuXHRycEljb246IHByb2Nlc3MuZW52LlJQX0lDT04hLFxuXHRycElkOiBwcm9jZXNzLmVudi5SUF9JRCEsXG5cdHJwT3JpZ2luOiBwcm9jZXNzLmVudi5SUF9PUklHSU4hLFxuXHRzZWNyZXRzRXhwaXJ5VGltZW91dDogTnVtYmVyKHByb2Nlc3MuZW52LlNFQ1JFVFNfRVhQSVJZX1RJTUVPVVQhKSxcblx0c2VjcmV0c0ZpbGVQYXRoMTogcHJvY2Vzcy5lbnYuU0VDUkVUU19GSUxFX1BBVEhfMSEsXG5cdHNlY3JldHNSYXRlTGltaXRNYXhBdHRlbXB0czogTnVtYmVyKFxuXHRcdHByb2Nlc3MuZW52LlNFQ1JFVFNfUkFURV9MSU1JVF9NQVhfQVRURU1QVFMhXG5cdCksXG5cdHNlY3JldHNSYXRlTGltaXRXaW5kb3c6IE51bWJlcihwcm9jZXNzLmVudi5SQVRFX0xJTUlUX1dJTkRPVyEpLFxuXHRzZXJ2ZXJEYXRhRmlsZVBhdGgxOiBwcm9jZXNzLmVudi5TRVJWRVJfREFUQV9GSUxFX1BBVEhfMSEsXG5cdHNlcnZlckRhdGFGaWxlUGF0aDI6IHByb2Nlc3MuZW52LlNFUlZFUl9EQVRBX0ZJTEVfUEFUSF8yISxcblx0c2VydmVyRGF0YUZpbGVQYXRoMzogcHJvY2Vzcy5lbnYuU0VSVkVSX0RBVEFfRklMRV9QQVRIXzMhLFxuXHRzZXJ2ZXJEYXRhRmlsZVBhdGg0OiBwcm9jZXNzLmVudi5TRVJWRVJfREFUQV9GSUxFX1BBVEhfNCEsXG5cdHNlcnZlclBvcnQ6IE51bWJlcihwcm9jZXNzLmVudi5TRVJWRVJfUE9SVCEpLFxuXHRzbG93ZG93blRocmVzaG9sZDogTnVtYmVyKHByb2Nlc3MuZW52LlNMT1dET1dOX1RIUkVTSE9MRCEpLFxuXHRzdGF0aWNSb290UGF0aDogcHJvY2Vzcy5lbnYuU1RBVElDX1JPT1RfUEFUSCEsXG5cdHRlbXBEaXI6IHByb2Nlc3MuZW52LlRFTVBfRElSISxcblx0dGxzQ2VydFBhdGgxOiBwcm9jZXNzLmVudi5UTFNfQ0VSVF9QQVRIXzEhLFxuXHR0bHNLZXlQYXRoMTogcHJvY2Vzcy5lbnYuVExTX0tFWV9QQVRIXzEhLFxuXHR0b2tlbkV4cGlyeUxpc3RQYXRoOiBwcm9jZXNzLmVudi5UT0tFTl9SRVZPQ0FUSU9OX0xJU1RfUEFUSCEsXG5cdHRva2VuUmV2b2tlZExpc3RQYXRoOiBwcm9jZXNzLmVudi5UT0tFTl9CTEFDS0xJU1RfUEFUSCEsXG5cdHRva2VuQ2FjaGVEdXJhdGlvbjogTnVtYmVyKHByb2Nlc3MuZW52LlRPS0VOX0NBQ0hFX0RVUkFUSU9OISksXG5cdHl1Ymljb0FwaVVybDogcHJvY2Vzcy5lbnYuWVVCSUNPX0FQSV9VUkwhXG59O1xuXG5leHBvcnQgY29uc3QgRXhwcmVzc0Vycm9ySGFuZGxlclN0YXRpY1BhcmFtZXRlcnMgPSB7XG5cdGZhbGxiYWNrTG9nZ2VyOiBjb25zb2xlXG59O1xuXG5leHBvcnQgY29uc3QgRmVhdHVyZUZsYWdOYW1lcyA9IHtcblx0QVBJX1JPVVRFU19DU1I6ICdGRUFUVVJFX0FQSV9ST1VURVNfQ1NSRicsXG5cdERCX1NZTkM6ICdGRUFUVVJFX0RCX1NZTkMnLFxuXHRFTkFCTEVfQ1NSRjogJ0ZFQVRVUkVfRU5BQkxFX0NTUkYnLFxuXHRFTkFCTEVfSVBfQkxBQ0tMSVNUOiAnRkVBVFVSRV9FTkFCTEVfSVBfQkxBQ0tMSVNUJyxcblx0RU5BQkxFX0pXVF9BVVRIOiAnRkVBVFVSRV9FTkFCTEVfSldUX0FVVEgnLFxuXHRFTkFCTEVfTE9HX1NUQVNIOiAnRkVBVFVSRV9FTkFCTEVfTE9HX1NUQVNIJyxcblx0RU5BQkxFX1JBVEVfTElNSVQ6ICdGRUFUVVJFX0VOQUJMRV9SQVRFX0xJTUlUJyxcblx0RU5BQkxFX1RMUzogJ0ZFQVRVUkVfRU5BQkxFX1RMUycsXG5cdEVOQ1JZUFRfU0VDUkVUU19TVE9SRTogJ0ZFQVRVUkVfRU5DUllQVF9TRUNSRVRTX1NUT1JFJyxcblx0SE9OT1JfQ0lQSEVSX09SREVSOiAnRkVBVFVSRV9IT05PUl9DSVBIRVJfT1JERVInLFxuXHRIVFRQU19SRURJUkVDVDogJ0ZFQVRVUkVfSFRUUFNfUkVESVJFQ1QnLFxuXHRMT0FEX1RFU1RfUk9VVEVTOiAnRkVBVFVSRV9MT0FEX1RFU1RfUk9VVEVTJyxcblx0U0VDVVJFX0hFQURFUlM6ICdGRUFUVVJFX1NFQ1VSRV9IRUFERVJTJyxcblx0U0VRVUVMSVpFX0xPR0dJTkc6ICdGRUFUVVJFX1NFUVVFTElaRV9MT0dHSU5HJ1xufSBhcyBjb25zdDtcblxuZXhwb3J0IGNvbnN0IEdldEZlYXR1cmVGbGFnc1N0YXRpY1BhcmFtZXRlcnMgPSB7XG5cdGJsYW5rUmVxdWVzdFxufTtcblxuZXhwb3J0IGNvbnN0IEhhbmRsZUNyaXRpY2FsRXJyb3JTdGF0aWNQYXJhbWV0ZXJzID0ge1xuXHRmYWxsYmFja0xvZ2dlcjogY29uc29sZVxufTtcblxuZXhwb3J0IGNvbnN0IEhhbmRsZUVycm9yU3RhdGljUGFyYW1ldGVycyA9IHtcblx0ZmFsbGJhY2tMb2dnZXI6IGNvbnNvbGVcbn07XG5cbmV4cG9ydCBjb25zdCBJbml0aWFsaXplRGF0YWJhc2VTdGF0aWNQYXJhbWV0ZXJzOiBJbml0aWFsaXplRGF0YWJhc2VJbnRlcmZhY2UgPSB7XG5cdGJsYW5rUmVxdWVzdFxufTtcblxuZXhwb3J0IGNvbnN0IEluaXRJcEJsYWNrbGlzdFBhcmFtZXRlcnM6IEluaXRJcEJsYWNrbGlzdEludGVyZmFjZSA9IHtcblx0ZnNNb2R1bGU6IGZzLFxuXHRpblJhbmdlLFxuXHR2YWxpZGF0ZURlcGVuZGVuY2llc1xufTtcblxuZXhwb3J0IGNvbnN0IExvYWRJcEJsYWNrbGlzdFBhcmFtZXRlcnM6IExvYWRJcEJsYWNrbGlzdEludGVyZmFjZSA9IHtcblx0ZnNNb2R1bGU6IGZzUHJvbWlzZXNcbn07XG5cbmV4cG9ydCBjb25zdCBTZXRVcERhdGFiYXNlUGFyYW1ldGVyczogU2V0VXBEYXRhYmFzZUludGVyZmFjZSA9IHtcblx0YmxhbmtSZXF1ZXN0XG59O1xuXG4vL1xuLy8vXG4vLy8vXG4vLy8vLyAqKioqKiBTRVJWSUNFIFBBUkFNRVRFUiBPQkpFQ1RTICoqKioqXG4vLy8vXG4vLy9cbi8vXG5cbmV4cG9ydCBjb25zdCBBcHBMb2dnZXJTZXJ2aWNlUGFyYW1ldGVycyA9IHtcblx0d2luc3Rvbjoge1xuXHRcdGNyZWF0ZUxvZ2dlcixcblx0XHRmb3JtYXQsXG5cdFx0dHJhbnNwb3J0cyxcblx0XHRhZGRDb2xvcnNcblx0fSxcblx0RGFpbHlSb3RhdGVGaWxlLFxuXHRMb2dTdGFzaFRyYW5zcG9ydCxcblx0RXJyb3JDbGFzc2VzLFxuXHRFcnJvclNldmVyaXR5LFxuXHRIYW5kbGVFcnJvclN0YXRpY1BhcmFtZXRlcnMsXG5cdHV1aWR2NCxcblx0c2FuaXRpemVSZXF1ZXN0Qm9keSxcblx0ZnMsXG5cdFNlcXVlbGl6ZVxufTtcbiJdfQ==
