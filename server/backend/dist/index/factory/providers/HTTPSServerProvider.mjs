import { HTTPSServer } from '../../../services/HTTPS.mjs';
import { DatabaseControllerFactory } from '../subfactories/DatabaseControllerFactory.mjs';
import { ErrorHandlerServiceFactory } from '../subfactories/ErrorHandlerServiceFactory.mjs';
let expressApp;
export class HTTPSServerProvider {
	static instance = null;
	static async getHTTPSServer() {
		if (!this.instance) {
			const databaseController =
				await DatabaseControllerFactory.getDatabaseController();
			const sequelize = databaseController.getSequelizeInstance();
			const errorHandler =
				await ErrorHandlerServiceFactory.getErrorHandlerService();
			if (!sequelize) {
				const HTTPSServerError =
					new errorHandler.ErrorClasses.DatabaseErrorRecoverable(
						'Unable to start web server, as the sequelize instance is not initialized.',
						{ exposeToClient: false }
					);
				errorHandler.handleError({
					error: HTTPSServerError,
					details: {
						context: 'WEB_SERVER',
						reason: 'Sequelize instance not initialized'
					}
				});
				throw HTTPSServerError;
			}
			this.instance = HTTPSServer.getInstance(expressApp, sequelize);
		}
		return this.instance;
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSFRUUFNTZXJ2ZXJQcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pbmRleC9mYWN0b3J5L3Byb3ZpZGVycy9IVFRQU1NlcnZlclByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUV0RCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUN0RixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUV4RixJQUFJLFVBQStCLENBQUM7QUFFcEMsTUFBTSxPQUFPLG1CQUFtQjtJQUN2QixNQUFNLENBQUMsUUFBUSxHQUF5QyxJQUFJLENBQUM7SUFFOUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjO1FBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDcEIsTUFBTSxrQkFBa0IsR0FDdkIsTUFBTSx5QkFBeUIsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1lBQ3pELE1BQU0sU0FBUyxHQUFHLGtCQUFrQixDQUFDLG9CQUFvQixFQUFFLENBQUM7WUFDNUQsTUFBTSxZQUFZLEdBQ2pCLE1BQU0sMEJBQTBCLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztZQUUzRCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7Z0JBQ2hCLE1BQU0sZ0JBQWdCLEdBQ3JCLElBQUksWUFBWSxDQUFDLFlBQVksQ0FBQyx3QkFBd0IsQ0FDckQsMkVBQTJFLEVBQzNFLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxDQUN6QixDQUFDO2dCQUNILFlBQVksQ0FBQyxXQUFXLENBQUM7b0JBQ3hCLEtBQUssRUFBRSxnQkFBZ0I7b0JBQ3ZCLE9BQU8sRUFBRTt3QkFDUixPQUFPLEVBQUUsWUFBWTt3QkFDckIsTUFBTSxFQUFFLG9DQUFvQztxQkFDNUM7aUJBQ0QsQ0FBQyxDQUFDO2dCQUNILE1BQU0sZ0JBQWdCLENBQUM7WUFDeEIsQ0FBQztZQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsV0FBVyxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDaEUsQ0FBQztRQUVELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN0QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBIVFRQU1NlcnZlciB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL0hUVFBTJztcbmltcG9ydCB7IEhUVFBTU2VydmVySW50ZXJmYWNlIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9tYWluJztcbmltcG9ydCB7IERhdGFiYXNlQ29udHJvbGxlckZhY3RvcnkgfSBmcm9tICcuLi9zdWJmYWN0b3JpZXMvRGF0YWJhc2VDb250cm9sbGVyRmFjdG9yeSc7XG5pbXBvcnQgeyBFcnJvckhhbmRsZXJTZXJ2aWNlRmFjdG9yeSB9IGZyb20gJy4uL3N1YmZhY3Rvcmllcy9FcnJvckhhbmRsZXJTZXJ2aWNlRmFjdG9yeSc7XG5cbmxldCBleHByZXNzQXBwOiBleHByZXNzLkFwcGxpY2F0aW9uO1xuXG5leHBvcnQgY2xhc3MgSFRUUFNTZXJ2ZXJQcm92aWRlciB7XG5cdHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBQcm9taXNlPEhUVFBTU2VydmVySW50ZXJmYWNlPiB8IG51bGwgPSBudWxsO1xuXG5cdHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0SFRUUFNTZXJ2ZXIoKTogUHJvbWlzZTxIVFRQU1NlcnZlckludGVyZmFjZT4ge1xuXHRcdGlmICghdGhpcy5pbnN0YW5jZSkge1xuXHRcdFx0Y29uc3QgZGF0YWJhc2VDb250cm9sbGVyID1cblx0XHRcdFx0YXdhaXQgRGF0YWJhc2VDb250cm9sbGVyRmFjdG9yeS5nZXREYXRhYmFzZUNvbnRyb2xsZXIoKTtcblx0XHRcdGNvbnN0IHNlcXVlbGl6ZSA9IGRhdGFiYXNlQ29udHJvbGxlci5nZXRTZXF1ZWxpemVJbnN0YW5jZSgpO1xuXHRcdFx0Y29uc3QgZXJyb3JIYW5kbGVyID1cblx0XHRcdFx0YXdhaXQgRXJyb3JIYW5kbGVyU2VydmljZUZhY3RvcnkuZ2V0RXJyb3JIYW5kbGVyU2VydmljZSgpO1xuXG5cdFx0XHRpZiAoIXNlcXVlbGl6ZSkge1xuXHRcdFx0XHRjb25zdCBIVFRQU1NlcnZlckVycm9yID1cblx0XHRcdFx0XHRuZXcgZXJyb3JIYW5kbGVyLkVycm9yQ2xhc3Nlcy5EYXRhYmFzZUVycm9yUmVjb3ZlcmFibGUoXG5cdFx0XHRcdFx0XHQnVW5hYmxlIHRvIHN0YXJ0IHdlYiBzZXJ2ZXIsIGFzIHRoZSBzZXF1ZWxpemUgaW5zdGFuY2UgaXMgbm90IGluaXRpYWxpemVkLicsXG5cdFx0XHRcdFx0XHR7IGV4cG9zZVRvQ2xpZW50OiBmYWxzZSB9XG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0ZXJyb3JIYW5kbGVyLmhhbmRsZUVycm9yKHtcblx0XHRcdFx0XHRlcnJvcjogSFRUUFNTZXJ2ZXJFcnJvcixcblx0XHRcdFx0XHRkZXRhaWxzOiB7XG5cdFx0XHRcdFx0XHRjb250ZXh0OiAnV0VCX1NFUlZFUicsXG5cdFx0XHRcdFx0XHRyZWFzb246ICdTZXF1ZWxpemUgaW5zdGFuY2Ugbm90IGluaXRpYWxpemVkJ1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHRcdHRocm93IEhUVFBTU2VydmVyRXJyb3I7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuaW5zdGFuY2UgPSBIVFRQU1NlcnZlci5nZXRJbnN0YW5jZShleHByZXNzQXBwLCBzZXF1ZWxpemUpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmluc3RhbmNlO1xuXHR9XG59XG4iXX0=
