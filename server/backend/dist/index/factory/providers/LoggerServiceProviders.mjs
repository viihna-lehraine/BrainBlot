import {
	AppLoggerService,
	ErrorLoggerService
} from '../../../services/Logger.mjs';
async function loadLoggerDeps() {
	const winston = await import('winston');
	const DailyRotateFileModule = await import('winston-daily-rotate-file');
	const LogStashTransportModule = await import('winston-logstash');
	const { ErrorClasses } = await import('../../../errors/ErrorClasses');
	const { HandleErrorStaticParameters } = await import(
		'../../interfaces/main'
	);
	const fs = await import('fs');
	const { Sequelize } = await import('sequelize');
	const { v4: uuidv4 } = await import('uuid');
	return {
		winston: {
			createLogger: winston.createLogger,
			format: winston.format,
			transports: winston.transports,
			addColors: winston.addColors
		},
		DailyRotateFile: DailyRotateFileModule.default,
		LogStashTransport: LogStashTransportModule.default,
		ErrorClasses,
		HandleErrorStaticParameters,
		fs,
		Sequelize,
		uuidv4
	};
}
export class LoggerServiceProvider {
	static instance = null;
	static async getLoggerService(logLevel, serviceName) {
		if (!this.instance) {
			const deps = await loadLoggerDeps();
			this.instance = AppLoggerService.getInstance(
				deps,
				logLevel,
				serviceName
			);
		}
		return await this.instance;
	}
}
export class ErrorLoggerServiceProvider {
	static instance = null;
	static async getErrorLoggerService(logLevel, serviceName) {
		if (!this.instance) {
			const deps = await loadLoggerDeps();
			this.instance = ErrorLoggerService.getInstance(
				deps,
				logLevel,
				serviceName
			);
		}
		return await this.instance;
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9nZ2VyU2VydmljZVByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pbmRleC9mYWN0b3J5L3Byb3ZpZGVycy9Mb2dnZXJTZXJ2aWNlUHJvdmlkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRWhGLEtBQUssVUFBVSxjQUFjO0lBQzVCLE1BQU0sT0FBTyxHQUFHLE1BQU0sTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3hDLE1BQU0scUJBQXFCLEdBQUcsTUFBTSxNQUFNLENBQUMsMkJBQTJCLENBQUMsQ0FBQztJQUN4RSxNQUFNLHVCQUF1QixHQUFHLE1BQU0sTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDakUsTUFBTSxFQUFFLFlBQVksRUFBRSxHQUFHLE1BQU0sTUFBTSxDQUFDLDhCQUE4QixDQUFDLENBQUM7SUFDdEUsTUFBTSxFQUFFLDJCQUEyQixFQUFFLEdBQUcsTUFBTSxNQUFNLENBQ25ELHVCQUF1QixDQUN2QixDQUFDO0lBQ0YsTUFBTSxFQUFFLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUIsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLE1BQU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2hELE1BQU0sRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsTUFBTSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFNUMsT0FBTztRQUNOLE9BQU8sRUFBRTtZQUNSLFlBQVksRUFBRSxPQUFPLENBQUMsWUFBWTtZQUNsQyxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07WUFDdEIsVUFBVSxFQUFFLE9BQU8sQ0FBQyxVQUFVO1lBQzlCLFNBQVMsRUFBRSxPQUFPLENBQUMsU0FBUztTQUM1QjtRQUNELGVBQWUsRUFBRSxxQkFBcUIsQ0FBQyxPQUFPO1FBQzlDLGlCQUFpQixFQUFFLHVCQUF1QixDQUFDLE9BQU87UUFDbEQsWUFBWTtRQUNaLDJCQUEyQjtRQUMzQixFQUFFO1FBQ0YsU0FBUztRQUNULE1BQU07S0FDTixDQUFDO0FBQ0gsQ0FBQztBQUVELE1BQU0sT0FBTyxxQkFBcUI7SUFDekIsTUFBTSxDQUFDLFFBQVEsR0FBOEMsSUFBSSxDQUFDO0lBRW5FLE1BQU0sQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQ25DLFFBQWlCLEVBQ2pCLFdBQW9CO1FBRXBCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDcEIsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFjLEVBQUUsQ0FBQztZQUNwQyxJQUFJLENBQUMsUUFBUSxHQUFHLGdCQUFnQixDQUFDLFdBQVcsQ0FDM0MsSUFBSSxFQUNKLFFBQVEsRUFDUixXQUFXLENBQ1gsQ0FBQztRQUNILENBQUM7UUFDRCxPQUFPLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUM1QixDQUFDOztBQUdGLE1BQU0sT0FBTywwQkFBMEI7SUFDOUIsTUFBTSxDQUFDLFFBQVEsR0FBZ0QsSUFBSSxDQUFDO0lBRXJFLE1BQU0sQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQ3hDLFFBQWlCLEVBQ2pCLFdBQW9CO1FBRXBCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDcEIsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFjLEVBQUUsQ0FBQztZQUNwQyxJQUFJLENBQUMsUUFBUSxHQUFHLGtCQUFrQixDQUFDLFdBQVcsQ0FDN0MsSUFBSSxFQUNKLFFBQVEsRUFDUixXQUFXLENBQ1gsQ0FBQztRQUNILENBQUM7UUFDRCxPQUFPLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUM1QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0QXBwTG9nZ2VyU2VydmljZURlcHMsXG5cdEFwcExvZ2dlclNlcnZpY2VJbnRlcmZhY2UsXG5cdEVycm9yTG9nZ2VyU2VydmljZUludGVyZmFjZVxufSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL21haW4nO1xuaW1wb3J0IHsgQXBwTG9nZ2VyU2VydmljZSwgRXJyb3JMb2dnZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvTG9nZ2VyJztcblxuYXN5bmMgZnVuY3Rpb24gbG9hZExvZ2dlckRlcHMoKTogUHJvbWlzZTxBcHBMb2dnZXJTZXJ2aWNlRGVwcz4ge1xuXHRjb25zdCB3aW5zdG9uID0gYXdhaXQgaW1wb3J0KCd3aW5zdG9uJyk7XG5cdGNvbnN0IERhaWx5Um90YXRlRmlsZU1vZHVsZSA9IGF3YWl0IGltcG9ydCgnd2luc3Rvbi1kYWlseS1yb3RhdGUtZmlsZScpO1xuXHRjb25zdCBMb2dTdGFzaFRyYW5zcG9ydE1vZHVsZSA9IGF3YWl0IGltcG9ydCgnd2luc3Rvbi1sb2dzdGFzaCcpO1xuXHRjb25zdCB7IEVycm9yQ2xhc3NlcyB9ID0gYXdhaXQgaW1wb3J0KCcuLi8uLi8uLi9lcnJvcnMvRXJyb3JDbGFzc2VzJyk7XG5cdGNvbnN0IHsgSGFuZGxlRXJyb3JTdGF0aWNQYXJhbWV0ZXJzIH0gPSBhd2FpdCBpbXBvcnQoXG5cdFx0Jy4uLy4uL2ludGVyZmFjZXMvbWFpbidcblx0KTtcblx0Y29uc3QgZnMgPSBhd2FpdCBpbXBvcnQoJ2ZzJyk7XG5cdGNvbnN0IHsgU2VxdWVsaXplIH0gPSBhd2FpdCBpbXBvcnQoJ3NlcXVlbGl6ZScpO1xuXHRjb25zdCB7IHY0OiB1dWlkdjQgfSA9IGF3YWl0IGltcG9ydCgndXVpZCcpO1xuXG5cdHJldHVybiB7XG5cdFx0d2luc3Rvbjoge1xuXHRcdFx0Y3JlYXRlTG9nZ2VyOiB3aW5zdG9uLmNyZWF0ZUxvZ2dlcixcblx0XHRcdGZvcm1hdDogd2luc3Rvbi5mb3JtYXQsXG5cdFx0XHR0cmFuc3BvcnRzOiB3aW5zdG9uLnRyYW5zcG9ydHMsXG5cdFx0XHRhZGRDb2xvcnM6IHdpbnN0b24uYWRkQ29sb3JzXG5cdFx0fSxcblx0XHREYWlseVJvdGF0ZUZpbGU6IERhaWx5Um90YXRlRmlsZU1vZHVsZS5kZWZhdWx0LFxuXHRcdExvZ1N0YXNoVHJhbnNwb3J0OiBMb2dTdGFzaFRyYW5zcG9ydE1vZHVsZS5kZWZhdWx0LFxuXHRcdEVycm9yQ2xhc3Nlcyxcblx0XHRIYW5kbGVFcnJvclN0YXRpY1BhcmFtZXRlcnMsXG5cdFx0ZnMsXG5cdFx0U2VxdWVsaXplLFxuXHRcdHV1aWR2NFxuXHR9O1xufVxuXG5leHBvcnQgY2xhc3MgTG9nZ2VyU2VydmljZVByb3ZpZGVyIHtcblx0cHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IFByb21pc2U8QXBwTG9nZ2VyU2VydmljZUludGVyZmFjZT4gfCBudWxsID0gbnVsbDtcblxuXHRwdWJsaWMgc3RhdGljIGFzeW5jIGdldExvZ2dlclNlcnZpY2UoXG5cdFx0bG9nTGV2ZWw/OiBzdHJpbmcsXG5cdFx0c2VydmljZU5hbWU/OiBzdHJpbmdcblx0KTogUHJvbWlzZTxBcHBMb2dnZXJTZXJ2aWNlSW50ZXJmYWNlPiB7XG5cdFx0aWYgKCF0aGlzLmluc3RhbmNlKSB7XG5cdFx0XHRjb25zdCBkZXBzID0gYXdhaXQgbG9hZExvZ2dlckRlcHMoKTtcblx0XHRcdHRoaXMuaW5zdGFuY2UgPSBBcHBMb2dnZXJTZXJ2aWNlLmdldEluc3RhbmNlKFxuXHRcdFx0XHRkZXBzLFxuXHRcdFx0XHRsb2dMZXZlbCxcblx0XHRcdFx0c2VydmljZU5hbWVcblx0XHRcdCk7XG5cdFx0fVxuXHRcdHJldHVybiBhd2FpdCB0aGlzLmluc3RhbmNlO1xuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBFcnJvckxvZ2dlclNlcnZpY2VQcm92aWRlciB7XG5cdHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBQcm9taXNlPEVycm9yTG9nZ2VyU2VydmljZUludGVyZmFjZT4gfCBudWxsID0gbnVsbDtcblxuXHRwdWJsaWMgc3RhdGljIGFzeW5jIGdldEVycm9yTG9nZ2VyU2VydmljZShcblx0XHRsb2dMZXZlbD86IHN0cmluZyxcblx0XHRzZXJ2aWNlTmFtZT86IHN0cmluZ1xuXHQpOiBQcm9taXNlPEVycm9yTG9nZ2VyU2VydmljZUludGVyZmFjZT4ge1xuXHRcdGlmICghdGhpcy5pbnN0YW5jZSkge1xuXHRcdFx0Y29uc3QgZGVwcyA9IGF3YWl0IGxvYWRMb2dnZXJEZXBzKCk7XG5cdFx0XHR0aGlzLmluc3RhbmNlID0gRXJyb3JMb2dnZXJTZXJ2aWNlLmdldEluc3RhbmNlKFxuXHRcdFx0XHRkZXBzLFxuXHRcdFx0XHRsb2dMZXZlbCxcblx0XHRcdFx0c2VydmljZU5hbWVcblx0XHRcdCk7XG5cdFx0fVxuXHRcdHJldHVybiBhd2FpdCB0aGlzLmluc3RhbmNlO1xuXHR9XG59XG4iXX0=
