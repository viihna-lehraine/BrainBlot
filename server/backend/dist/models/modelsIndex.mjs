import { loadModels } from './loadModels.mjs';
import { validateDependencies } from '../utils/helpers.mjs';
import { ServiceFactory } from '../index/factory/ServiceFactory.mjs';
const logger = await ServiceFactory.getLoggerService();
const errorLogger = await ServiceFactory.getErrorLoggerService();
const errorHandler = await ServiceFactory.getErrorHandlerService();
let models = null;
let sequelize;
export async function initializeModels(sequelize) {
	try {
		validateDependencies(
			[{ name: 'sequelize', instance: sequelize }],
			logger
		);
		logger.info('Initializing and loading models');
		if (!models) {
			models = await loadModels(sequelize);
			logger.info('Models loaded');
		} else {
			logger.info('Models loaded');
		}
		return models;
	} catch (dbError) {
		const databaseError =
			new errorHandler.ErrorClasses.DatabaseErrorRecoverable(
				`Error occurred while attempting to initialize model files using initializeModels(): ${dbError instanceof Error ? dbError.message : dbError}`,
				{ exposeToClient: false }
			);
		errorLogger.logInfo(databaseError.message);
		errorHandler.handleError({
			error: databaseError || dbError || Error || 'Unknown error'
		});
		logger.debug('Returning empty object in lieu of models');
		return {};
	}
}
export async function getModels() {
	try {
		if (!models) {
			logger.error('Models have not been initialized');
			try {
				logger.info('Attempting to load models');
				models = await initializeModels(sequelize);
				if (models) {
					logger.info('Models loaded');
					return models;
				}
			} catch (dbError) {
				const databaseError =
					new errorHandler.ErrorClasses.DatabaseErrorRecoverable(
						`Error occurred within getModels() - models were uninitialized when function was called and getModels() failed to initialize them: ${dbError instanceof Error ? dbError.message : dbError}`,
						{ exposeToClient: false }
					);
				errorLogger.logInfo(databaseError.message);
				errorHandler.handleError({
					error: databaseError || dbError || Error || 'Unknown error'
				});
				logger.debug('Returning empty object in lieu of models');
				return {};
			}
		}
		return models;
	} catch (dbError) {
		const databaseError =
			new errorHandler.ErrorClasses.DatabaseErrorRecoverable(
				`Error occurred while attempting to retrieve models using getModels(): ${dbError instanceof Error ? dbError.message : dbError}`,
				{ exposeToClient: false }
			);
		errorLogger.logInfo(databaseError.message);
		errorHandler.handleError({
			error: databaseError || dbError || Error || 'Unknown error'
		});
		logger.debug('Returning empty object in lieu of models');
		return {};
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWxzSW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9kZWxzL21vZGVsc0luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQVUsTUFBTSxjQUFjLENBQUM7QUFDbEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRWpFLE1BQU0sTUFBTSxHQUFHLE1BQU0sY0FBYyxDQUFDLGdCQUFnQixFQUFFLENBQUM7QUFDdkQsTUFBTSxXQUFXLEdBQUcsTUFBTSxjQUFjLENBQUMscUJBQXFCLEVBQUUsQ0FBQztBQUNqRSxNQUFNLFlBQVksR0FBRyxNQUFNLGNBQWMsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0FBRW5FLElBQUksTUFBTSxHQUFrQixJQUFJLENBQUM7QUFDakMsSUFBSSxTQUFvQixDQUFDO0FBRXpCLE1BQU0sQ0FBQyxLQUFLLFVBQVUsZ0JBQWdCLENBQUMsU0FBb0I7SUFDMUQsSUFBSSxDQUFDO1FBQ0osb0JBQW9CLENBQ25CLENBQUMsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUM1QyxNQUFNLENBQ04sQ0FBQztRQUVGLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUNBQWlDLENBQUMsQ0FBQztRQUUvQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDYixNQUFNLEdBQUcsTUFBTSxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDckMsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUM5QixDQUFDO2FBQU0sQ0FBQztZQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDOUIsQ0FBQztRQUVELE9BQU8sTUFBZ0IsQ0FBQztJQUN6QixDQUFDO0lBQUMsT0FBTyxPQUFPLEVBQUUsQ0FBQztRQUNsQixNQUFNLGFBQWEsR0FDbEIsSUFBSSxZQUFZLENBQUMsWUFBWSxDQUFDLHdCQUF3QixDQUNyRCx1RkFBdUYsT0FBTyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQzdJLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxDQUN6QixDQUFDO1FBQ0gsV0FBVyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0MsWUFBWSxDQUFDLFdBQVcsQ0FBQztZQUN4QixLQUFLLEVBQUUsYUFBYSxJQUFJLE9BQU8sSUFBSSxLQUFLLElBQUksZUFBZTtTQUMzRCxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7UUFFekQsT0FBTyxFQUFZLENBQUM7SUFDckIsQ0FBQztBQUNGLENBQUM7QUFFRCxNQUFNLENBQUMsS0FBSyxVQUFVLFNBQVM7SUFDOUIsSUFBSSxDQUFDO1FBQ0osSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2IsTUFBTSxDQUFDLEtBQUssQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1lBQ2pELElBQUksQ0FBQztnQkFDSixNQUFNLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLENBQUM7Z0JBQ3pDLE1BQU0sR0FBRyxNQUFNLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUMzQyxJQUFJLE1BQU0sRUFBRSxDQUFDO29CQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7b0JBQzdCLE9BQU8sTUFBTSxDQUFDO2dCQUNmLENBQUM7WUFDRixDQUFDO1lBQUMsT0FBTyxPQUFPLEVBQUUsQ0FBQztnQkFDbEIsTUFBTSxhQUFhLEdBQ2xCLElBQUksWUFBWSxDQUFDLFlBQVksQ0FBQyx3QkFBd0IsQ0FDckQscUlBQXFJLE9BQU8sWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUMzTCxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsQ0FDekIsQ0FBQztnQkFDSCxXQUFXLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDM0MsWUFBWSxDQUFDLFdBQVcsQ0FBQztvQkFDeEIsS0FBSyxFQUFFLGFBQWEsSUFBSSxPQUFPLElBQUksS0FBSyxJQUFJLGVBQWU7aUJBQzNELENBQUMsQ0FBQztnQkFDSCxNQUFNLENBQUMsS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7Z0JBRXpELE9BQU8sRUFBWSxDQUFDO1lBQ3JCLENBQUM7UUFDRixDQUFDO1FBQ0QsT0FBTyxNQUFnQixDQUFDO0lBQ3pCLENBQUM7SUFBQyxPQUFPLE9BQU8sRUFBRSxDQUFDO1FBQ2xCLE1BQU0sYUFBYSxHQUNsQixJQUFJLFlBQVksQ0FBQyxZQUFZLENBQUMsd0JBQXdCLENBQ3JELHlFQUF5RSxPQUFPLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFDL0gsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLENBQ3pCLENBQUM7UUFDSCxXQUFXLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQyxZQUFZLENBQUMsV0FBVyxDQUFDO1lBQ3hCLEtBQUssRUFBRSxhQUFhLElBQUksT0FBTyxJQUFJLEtBQUssSUFBSSxlQUFlO1NBQzNELENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztRQUN6RCxPQUFPLEVBQVksQ0FBQztJQUNyQixDQUFDO0FBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlcXVlbGl6ZSB9IGZyb20gJ3NlcXVlbGl6ZSc7XG5pbXBvcnQgeyBsb2FkTW9kZWxzLCBNb2RlbHMgfSBmcm9tICcuL2xvYWRNb2RlbHMnO1xuaW1wb3J0IHsgdmFsaWRhdGVEZXBlbmRlbmNpZXMgfSBmcm9tICcuLi91dGlscy9oZWxwZXJzJztcbmltcG9ydCB7IFNlcnZpY2VGYWN0b3J5IH0gZnJvbSAnLi4vaW5kZXgvZmFjdG9yeS9TZXJ2aWNlRmFjdG9yeSc7XG5cbmNvbnN0IGxvZ2dlciA9IGF3YWl0IFNlcnZpY2VGYWN0b3J5LmdldExvZ2dlclNlcnZpY2UoKTtcbmNvbnN0IGVycm9yTG9nZ2VyID0gYXdhaXQgU2VydmljZUZhY3RvcnkuZ2V0RXJyb3JMb2dnZXJTZXJ2aWNlKCk7XG5jb25zdCBlcnJvckhhbmRsZXIgPSBhd2FpdCBTZXJ2aWNlRmFjdG9yeS5nZXRFcnJvckhhbmRsZXJTZXJ2aWNlKCk7XG5cbmxldCBtb2RlbHM6IE1vZGVscyB8IG51bGwgPSBudWxsO1xubGV0IHNlcXVlbGl6ZTogU2VxdWVsaXplO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdGlhbGl6ZU1vZGVscyhzZXF1ZWxpemU6IFNlcXVlbGl6ZSk6IFByb21pc2U8TW9kZWxzPiB7XG5cdHRyeSB7XG5cdFx0dmFsaWRhdGVEZXBlbmRlbmNpZXMoXG5cdFx0XHRbeyBuYW1lOiAnc2VxdWVsaXplJywgaW5zdGFuY2U6IHNlcXVlbGl6ZSB9XSxcblx0XHRcdGxvZ2dlclxuXHRcdCk7XG5cblx0XHRsb2dnZXIuaW5mbygnSW5pdGlhbGl6aW5nIGFuZCBsb2FkaW5nIG1vZGVscycpO1xuXG5cdFx0aWYgKCFtb2RlbHMpIHtcblx0XHRcdG1vZGVscyA9IGF3YWl0IGxvYWRNb2RlbHMoc2VxdWVsaXplKTtcblx0XHRcdGxvZ2dlci5pbmZvKCdNb2RlbHMgbG9hZGVkJyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxvZ2dlci5pbmZvKCdNb2RlbHMgbG9hZGVkJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1vZGVscyBhcyBNb2RlbHM7XG5cdH0gY2F0Y2ggKGRiRXJyb3IpIHtcblx0XHRjb25zdCBkYXRhYmFzZUVycm9yID1cblx0XHRcdG5ldyBlcnJvckhhbmRsZXIuRXJyb3JDbGFzc2VzLkRhdGFiYXNlRXJyb3JSZWNvdmVyYWJsZShcblx0XHRcdFx0YEVycm9yIG9jY3VycmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gaW5pdGlhbGl6ZSBtb2RlbCBmaWxlcyB1c2luZyBpbml0aWFsaXplTW9kZWxzKCk6ICR7ZGJFcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZGJFcnJvci5tZXNzYWdlIDogZGJFcnJvcn1gLFxuXHRcdFx0XHR7IGV4cG9zZVRvQ2xpZW50OiBmYWxzZSB9XG5cdFx0XHQpO1xuXHRcdGVycm9yTG9nZ2VyLmxvZ0luZm8oZGF0YWJhc2VFcnJvci5tZXNzYWdlKTtcblx0XHRlcnJvckhhbmRsZXIuaGFuZGxlRXJyb3Ioe1xuXHRcdFx0ZXJyb3I6IGRhdGFiYXNlRXJyb3IgfHwgZGJFcnJvciB8fCBFcnJvciB8fCAnVW5rbm93biBlcnJvcidcblx0XHR9KTtcblxuXHRcdGxvZ2dlci5kZWJ1ZygnUmV0dXJuaW5nIGVtcHR5IG9iamVjdCBpbiBsaWV1IG9mIG1vZGVscycpO1xuXG5cdFx0cmV0dXJuIHt9IGFzIE1vZGVscztcblx0fVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TW9kZWxzKCk6IFByb21pc2U8TW9kZWxzPiB7XG5cdHRyeSB7XG5cdFx0aWYgKCFtb2RlbHMpIHtcblx0XHRcdGxvZ2dlci5lcnJvcignTW9kZWxzIGhhdmUgbm90IGJlZW4gaW5pdGlhbGl6ZWQnKTtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGxvZ2dlci5pbmZvKCdBdHRlbXB0aW5nIHRvIGxvYWQgbW9kZWxzJyk7XG5cdFx0XHRcdG1vZGVscyA9IGF3YWl0IGluaXRpYWxpemVNb2RlbHMoc2VxdWVsaXplKTtcblx0XHRcdFx0aWYgKG1vZGVscykge1xuXHRcdFx0XHRcdGxvZ2dlci5pbmZvKCdNb2RlbHMgbG9hZGVkJyk7XG5cdFx0XHRcdFx0cmV0dXJuIG1vZGVscztcblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZGJFcnJvcikge1xuXHRcdFx0XHRjb25zdCBkYXRhYmFzZUVycm9yID1cblx0XHRcdFx0XHRuZXcgZXJyb3JIYW5kbGVyLkVycm9yQ2xhc3Nlcy5EYXRhYmFzZUVycm9yUmVjb3ZlcmFibGUoXG5cdFx0XHRcdFx0XHRgRXJyb3Igb2NjdXJyZWQgd2l0aGluIGdldE1vZGVscygpIC0gbW9kZWxzIHdlcmUgdW5pbml0aWFsaXplZCB3aGVuIGZ1bmN0aW9uIHdhcyBjYWxsZWQgYW5kIGdldE1vZGVscygpIGZhaWxlZCB0byBpbml0aWFsaXplIHRoZW06ICR7ZGJFcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZGJFcnJvci5tZXNzYWdlIDogZGJFcnJvcn1gLFxuXHRcdFx0XHRcdFx0eyBleHBvc2VUb0NsaWVudDogZmFsc2UgfVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdGVycm9yTG9nZ2VyLmxvZ0luZm8oZGF0YWJhc2VFcnJvci5tZXNzYWdlKTtcblx0XHRcdFx0ZXJyb3JIYW5kbGVyLmhhbmRsZUVycm9yKHtcblx0XHRcdFx0XHRlcnJvcjogZGF0YWJhc2VFcnJvciB8fCBkYkVycm9yIHx8IEVycm9yIHx8ICdVbmtub3duIGVycm9yJ1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0bG9nZ2VyLmRlYnVnKCdSZXR1cm5pbmcgZW1wdHkgb2JqZWN0IGluIGxpZXUgb2YgbW9kZWxzJyk7XG5cblx0XHRcdFx0cmV0dXJuIHt9IGFzIE1vZGVscztcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG1vZGVscyBhcyBNb2RlbHM7XG5cdH0gY2F0Y2ggKGRiRXJyb3IpIHtcblx0XHRjb25zdCBkYXRhYmFzZUVycm9yID1cblx0XHRcdG5ldyBlcnJvckhhbmRsZXIuRXJyb3JDbGFzc2VzLkRhdGFiYXNlRXJyb3JSZWNvdmVyYWJsZShcblx0XHRcdFx0YEVycm9yIG9jY3VycmVkIHdoaWxlIGF0dGVtcHRpbmcgdG8gcmV0cmlldmUgbW9kZWxzIHVzaW5nIGdldE1vZGVscygpOiAke2RiRXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGRiRXJyb3IubWVzc2FnZSA6IGRiRXJyb3J9YCxcblx0XHRcdFx0eyBleHBvc2VUb0NsaWVudDogZmFsc2UgfVxuXHRcdFx0KTtcblx0XHRlcnJvckxvZ2dlci5sb2dJbmZvKGRhdGFiYXNlRXJyb3IubWVzc2FnZSk7XG5cdFx0ZXJyb3JIYW5kbGVyLmhhbmRsZUVycm9yKHtcblx0XHRcdGVycm9yOiBkYXRhYmFzZUVycm9yIHx8IGRiRXJyb3IgfHwgRXJyb3IgfHwgJ1Vua25vd24gZXJyb3InXG5cdFx0fSk7XG5cblx0XHRsb2dnZXIuZGVidWcoJ1JldHVybmluZyBlbXB0eSBvYmplY3QgaW4gbGlldSBvZiBtb2RlbHMnKTtcblx0XHRyZXR1cm4ge30gYXMgTW9kZWxzO1xuXHR9XG59XG4iXX0=
