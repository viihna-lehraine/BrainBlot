import { validateDependencies } from '../utils/helpers.mjs';
import { LoggerServiceFactory } from '../index/factory/subfactories/LoggerServiceFactory.mjs';
import { ErrorHandlerServiceFactory } from '../index/factory/subfactories/ErrorHandlerServiceFactory.mjs';
import { EnvConfigServiceFactory } from '../index/factory/subfactories/EnvConfigServiceFactory.mjs';
import { VaultServiceFactory } from '../index/factory/subfactories/VaultServiceFactory.mjs';
export class MailerService {
	nodemailer;
	emailUser;
	static instance = null;
	logger;
	errorLogger;
	errorHandler;
	envConfig;
	vault;
	transporter = null;
	constructor(nodemailer, emailUser) {
		this.nodemailer = nodemailer;
		this.emailUser = emailUser;
	}
	static async getInstance(deps) {
		deps.validateDependencies(
			[
				{ name: 'nodemailer', instance: deps.nodemailer },
				{ name: 'emailUser', instance: deps.emailUser }
			],
			await LoggerServiceFactory.getLoggerService()
		);
		if (!MailerService.instance) {
			const logger = await LoggerServiceFactory.getLoggerService();
			const errorLogger =
				await LoggerServiceFactory.getErrorLoggerService();
			const errorHandler =
				await ErrorHandlerServiceFactory.getErrorHandlerService();
			const envConfig =
				await EnvConfigServiceFactory.getEnvConfigService();
			const vault = await VaultServiceFactory.getVaultService();
			MailerService.instance = new MailerService(
				deps.nodemailer,
				deps.emailUser
			);
			MailerService.instance.logger = logger;
			MailerService.instance.errorLogger = errorLogger;
			MailerService.instance.errorHandler = errorHandler;
			MailerService.instance.envConfig = envConfig;
			MailerService.instance.vault = vault;
		}
		return MailerService.instance;
	}
	validateMailerDependencies() {
		validateDependencies(
			[
				{ name: 'nodemailer', instance: this.nodemailer },
				{ name: 'emailUser', instance: this.emailUser }
			],
			this.logger
		);
	}
	async createMailTransporter() {
		try {
			this.validateMailerDependencies();
			const smtpToken = this.vault.retrieveSecret(
				'SMTP_TOKEN',
				secret => secret
			);
			if (typeof smtpToken !== 'string') {
				const smtpTokenError =
					new this.errorHandler.ErrorClasses.ConfigurationError(
						'Invalid SMTP token'
					);
				this.errorLogger.logError(smtpTokenError.message);
				this.errorHandler.handleError({ error: smtpTokenError });
				throw smtpTokenError;
			}
			const transportOptions = {
				host: this.envConfig.getEnvVariable('emailHost'),
				port: this.envConfig.getEnvVariable('emailPort'),
				secure: this.envConfig.getEnvVariable('emailSecure'),
				auth: {
					user: this.emailUser,
					pass: smtpToken
				}
			};
			return this.nodemailer.createTransport(transportOptions);
		} catch (depError) {
			const dependencyError =
				new this.errorHandler.ErrorClasses.DependencyErrorRecoverable(
					`Unable to create transporter for Mailer Service\n${depError instanceof Error ? depError.message : 'Unknown error'};`,
					{ exposeToClient: false }
				);
			this.errorLogger.logError(dependencyError.message);
			this.errorHandler.handleError({
				error:
					dependencyError ||
					depError ||
					Error ||
					'Unable to create transporter for Mailer Service'
			});
			throw dependencyError;
		}
	}
	async getTransporter() {
		try {
			this.validateMailerDependencies();
			if (!this.transporter) {
				this.transporter = await this.createMailTransporter();
			}
			return this.transporter;
		} catch (depError) {
			const dependencyError =
				new this.errorHandler.ErrorClasses.DependencyErrorRecoverable(
					`Unable to retrieve transporter for Mailer Service\n${depError instanceof Error ? depError.message : 'Unknown error'};`,
					{
						dependency: 'getTransporter()',
						originalError: depError,
						exposeToClient: false
					}
				);
			this.logger.logError(dependencyError.message);
			this.errorHandler.handleError({
				error: dependencyError || depError || Error || 'Unknown error'
			});
			throw dependencyError;
		}
	}
	async shutdown() {
		try {
			if (this.transporter) {
				this.transporter.close();
				MailerService.instance = null;
				this.logger.info('Mailer service transporter closed.');
			}
		} catch (error) {
			this.errorLogger.logError(
				`Error shutting down Mailer service: ${error instanceof Error ? error.message : error}`
			);
		}
	}
}
//# sourceMappingURL=data:application/json;base64,
