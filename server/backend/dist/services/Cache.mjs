import { serviceTTLConfig } from '../config/cache.mjs';
import { withRetry } from '../utils/helpers.mjs';
import { LoggerServiceFactory } from '../index/factory/subfactories/LoggerServiceFactory.mjs';
import { ErrorHandlerServiceFactory } from '../index/factory/subfactories/ErrorHandlerServiceFactory.mjs';
export class CacheService {
	static instance = null;
	logger;
	errorLogger;
	errorHandler;
	memoryCache = new Map();
	memoryCacheLRU = new Map();
	serviceMetrics = {};
	constructor(logger, errorLogger, errorHandler) {
		this.logger = logger;
		this.errorLogger = errorLogger;
		this.errorHandler = errorHandler;
	}
	static async getInstance() {
		if (!CacheService.instance) {
			CacheService.instance = new CacheService(
				await LoggerServiceFactory.getLoggerService(),
				await LoggerServiceFactory.getErrorLoggerService(),
				await ErrorHandlerServiceFactory.getErrorHandlerService()
			);
		}
		return CacheService.instance;
	}
	getServiceTTL(service) {
		return serviceTTLConfig[service] || serviceTTLConfig['default'];
	}
	getNamespacedKey(service, key) {
		return `${service}:${key}`;
	}
	updateMetrics(service, type) {
		if (!this.serviceMetrics[service]) {
			this.serviceMetrics[service] = {
				cacheHits: 0,
				cacheMisses: 0,
				redisHits: 0
			};
		}
		if (type === 'hit') {
			this.serviceMetrics[service].cacheHits++;
		} else if (type === 'miss') {
			this.serviceMetrics[service].cacheMisses++;
		} else if (type === 'redisHit') {
			this.serviceMetrics[service].redisHits++;
		}
	}
	getCacheMetrics(service) {
		return (
			this.serviceMetrics[service] || {
				cacheHits: 0,
				cacheMisses: 0,
				redisHits: 0
			}
		);
	}
	getMemoryCache(service) {
		return this.memoryCache.get(service) || null;
	}
	async get(key, service) {
		const namespacedKey = this.getNamespacedKey(service, key);
		try {
			const serviceMemoryCache = this.memoryCache.get(service);
			if (serviceMemoryCache) {
				const memoryEntry = serviceMemoryCache.get(namespacedKey);
				if (memoryEntry) {
					if (
						memoryEntry.expiration &&
						Date.now() > memoryEntry.expiration
					) {
						serviceMemoryCache.delete(namespacedKey);
						this.logger.info(
							`Memory cache expired for key: ${namespacedKey}`
						);
					} else {
						this.memoryCacheLRU.set(namespacedKey, Date.now());
						this.updateMetrics(service, 'hit');
						this.logger.info(
							`Memory cache hit for key: ${namespacedKey}`
						);
						return memoryEntry.value;
					}
				}
			}
			this.updateMetrics(service, 'miss');
			this.logger.info(`Cache miss for key: ${namespacedKey}`);
			return null;
		} catch (error) {
			this.handleCacheError(
				error,
				'CACHE_GET_ERROR',
				{ key, service },
				`Error fetching key ${namespacedKey} from cache for service ${service}`
			);
			return null;
		}
	}
	async set(key, value, service, expirationInSeconds) {
		const namespacedKey = this.getNamespacedKey(service, key);
		try {
			const expiration = expirationInSeconds
				? Date.now() + Number(expirationInSeconds) * 1000
				: Date.now() + this.getServiceTTL(service) * 1000;
			let serviceMemoryCache = this.memoryCache.get(service);
			if (!serviceMemoryCache) {
				serviceMemoryCache = new Map();
				this.memoryCache.set(service, serviceMemoryCache);
			}
			serviceMemoryCache.set(namespacedKey, { value, expiration });
			this.memoryCacheLRU.set(namespacedKey, Date.now());
			this.logger.info(
				`Key ${namespacedKey} set with TTL ${expirationInSeconds || this.getServiceTTL(service)} seconds in both memory and Redis cache`
			);
		} catch (error) {
			this.handleCacheError(
				error,
				'CACHE_SET_ERROR',
				{ key, service, expirationInSeconds },
				`Error setting key ${namespacedKey} in cache for service ${service}`
			);
		}
	}
	async exists(key, service) {
		const namespacedKey = this.getNamespacedKey(service, key);
		try {
			const serviceMemoryCache = this.memoryCache.get(service);
			if (serviceMemoryCache?.has(namespacedKey)) {
				this.logger.info(
					`Key ${namespacedKey} exists in memory cache, checked by service ${service}`
				);
				this.updateMetrics(service, 'hit');
				return true;
			}
			this.logger.info(
				`Key ${namespacedKey} does not exist in memory, checked by service ${service}`
			);
			this.updateMetrics(service, 'miss');
			return false;
		} catch (error) {
			this.handleCacheError(
				error,
				'CACHE_EXISTS_ERROR',
				{ key, service },
				`Error checking existence of key ${namespacedKey} for service ${service}`
			);
			return false;
		}
	}
	async del(key, service) {
		const namespacedKey = this.getNamespacedKey(service, key);
		try {
			const serviceMemoryCache = this.memoryCache.get(service);
			if (serviceMemoryCache) {
				serviceMemoryCache.delete(namespacedKey);
				this.logger.info(
					`Key ${namespacedKey} deleted from memory cache by service ${service}`
				);
			}
		} catch (error) {
			this.handleCacheError(
				error,
				'CACHE_DELETE_ERROR',
				{ key, service },
				`Error deleting key ${namespacedKey} from cache for service ${service}`
			);
		}
	}
	async increment(key, service, expirationInSeconds) {
		const namespacedKey = this.getNamespacedKey(service, key);
		try {
			let serviceMemoryCache = this.memoryCache.get(service);
			let newValue = null;
			if (serviceMemoryCache) {
				const memoryEntry = serviceMemoryCache.get(namespacedKey);
				if (memoryEntry && typeof memoryEntry.value === 'number') {
					memoryEntry.value += 1;
					newValue = memoryEntry.value;
					this.logger.info(
						`Memory cache incremented for key: ${namespacedKey} by service: ${service}`
					);
				}
			}
			if (!serviceMemoryCache || typeof newValue !== 'number') {
				newValue = 1;
				if (!serviceMemoryCache) {
					serviceMemoryCache = new Map();
					this.memoryCache.set(service, serviceMemoryCache);
				}
				const expiration = expirationInSeconds
					? Date.now() + expirationInSeconds * 1000
					: Date.now() + this.getServiceTTL(service) * 1000;
				serviceMemoryCache.set(namespacedKey, {
					value: newValue,
					expiration
				});
				this.logger.info(
					`Initialized incremented value in memory cache for key: ${namespacedKey} by service: ${service}`
				);
			}
			return newValue;
		} catch (error) {
			this.handleCacheError(
				error,
				'CACHE_INCREMENT_ERROR',
				{
					reason: `Cache increment failed for key ${key}`,
					key: key || 'unknown',
					expiration: expirationInSeconds || 'unknown',
					service: service || 'unknown'
				},
				`Error incrementing key ${namespacedKey} in cache for service ${service}`
			);
			return null;
		}
	}
	async flushCache(service) {
		try {
			const serviceMemoryCache = this.memoryCache.get(service);
			if (serviceMemoryCache) {
				serviceMemoryCache.clear();
				this.memoryCache.delete(service);
				this.logger.info(
					`Memory cache flushed for service: ${service}`
				);
			} else {
				this.logger.warn(
					`No memory cache found for service: ${service}`
				);
			}
		} catch (error) {
			this.handleCacheError(
				error,
				'CACHE_FLUSH_ERROR',
				{
					reason: `Cache flush failed for service ${service}`,
					service: service || 'unknown'
				},
				`Error flushing cache for service ${service}`
			);
		}
	}
	cleanupExpiredEntries() {
		withRetry(
			() => {
				for (const [service, cache] of this.memoryCache.entries()) {
					for (const [key, { expiration }] of cache.entries()) {
						if (expiration && Date.now() > expiration) {
							cache.delete(key);
							this.logger.info(
								`Expired memory cache entry removed for key: ${key} from service: ${service}`
							);
						}
					}
				}
			},
			3,
			1000
		).catch(error => {
			this.logger.error(
				`Error cleaning up expired memory cache entries after retries: ${error}`
			);
		});
	}
	async clearNamespace(service) {
		try {
			const serviceMemoryCache = this.memoryCache.get(service);
			if (serviceMemoryCache) {
				serviceMemoryCache.clear();
				this.memoryCache.delete(service);
				this.logger.info(
					`Memory cache cleared for service: ${service}`
				);
			} else {
				this.logger.warn(
					`No memory cache found for service: ${service}`
				);
			}
		} catch (error) {
			this.handleCacheError(
				error,
				'CACHE_CLEAR_NAMESPACE_ERROR',
				{ service },
				`Error clearing cache for service ${service}`
			);
		}
	}
	async closeConnection() {
		try {
			this.logger.info(
				'No connection to close for memory cache *(LAYER 2 NOT IMPLEMENTED'
			);
		} catch (error) {
			this.handleCacheError(
				error,
				'CACHE_CLOSE_CONNECTION_ERROR',
				{
					reason: `Cache connection close failed`
				},
				`Error closing cache connection`
			);
		}
	}
	async shutdown() {
		try {
			this.logger.info('Clearing memory cache in Cache Service...');
			this.memoryCache.clear();
			this.memoryCacheLRU.clear();
			this.logger.info('Memory cache cleared successfully.');
			this.logger.info('Cache service shutdown completed.');
		} catch (error) {
			this.handleCacheError(
				error,
				'CACHE_SHUTDOWN_ERROR',
				{},
				`Error shutting down Cache Service`
			);
		}
	}
	handleCacheError(error, errorHeader, errorDetails, customMessage) {
		const errorMessage = `${customMessage}: ${error}\n${error instanceof Error ? error.stack : ''}`;
		this.errorLogger.logError(errorMessage);
		const cacheError = new this.errorHandler.ErrorClasses.CacheServiceError(
			errorHeader,
			{
				details: errorDetails,
				exposeToClient: false
			}
		);
		this.errorHandler.handleError({
			error: cacheError
		});
	}
}
//# sourceMappingURL=data:application/json;base64,
