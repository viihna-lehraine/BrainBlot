import fs from 'fs';
import path from 'path';
import { RateLimiterMemory } from 'rate-limiter-flexible';
import { LoggerServiceFactory } from '../index/factory/subfactories/LoggerServiceFactory.mjs';
import { ErrorHandlerServiceFactory } from '../index/factory/subfactories/ErrorHandlerServiceFactory.mjs';
import { CacheLayerServiceFactory } from '../index/factory/subfactories/CacheLayerServiceFactory.mjs';
import { EnvConfigServiceFactory } from '../index/factory/subfactories/EnvConfigServiceFactory.mjs';
import { ResourceManagerFactory } from '../index/factory/subfactories/ResourceManagerFactory.mjs';
export class GatekeeperService {
	static instance = null;
	logger;
	errorLogger;
	errorHandler;
	envConfig;
	cacheService;
	resourceManager;
	RATE_LIMIT_BASE_POINTS;
	RATE_LIMIT_BASE_DURATION;
	SYNC_INTERVAL;
	rateLimiter;
	blacklistKey = 'ipBlacklist';
	whitelistKey = 'ipWhitelist';
	rateLimitPrefix = 'rateLimit_';
	blacklist = [];
	whitelist = [];
	globalRateLimitStats = new Map();
	constructor(
		logger,
		errorLogger,
		errorHandler,
		envConfig,
		cacheService,
		resourceManager
	) {
		this.logger = logger;
		this.errorLogger = errorLogger;
		this.errorHandler = errorHandler;
		this.envConfig = envConfig;
		this.cacheService = cacheService;
		this.resourceManager = resourceManager;
		this.RATE_LIMIT_BASE_POINTS = Number(
			this.envConfig.getEnvVariable('rateLimiterBasePoints')
		);
		this.RATE_LIMIT_BASE_DURATION = Number(
			this.envConfig.getEnvVariable('rateLimiterBaseDuration')
		);
		this.SYNC_INTERVAL =
			Number(this.envConfig.getEnvVariable('blacklistSyncInterval')) ||
			3600000;
		this.rateLimiter = new RateLimiterMemory({
			points: this.RATE_LIMIT_BASE_POINTS,
			duration: this.RATE_LIMIT_BASE_DURATION
		});
		this.preInitIpBlacklist();
		this.preInitIpWhitelist();
		setInterval(
			() => this.syncBlacklistFromCacheToFile(),
			this.SYNC_INTERVAL
		);
	}
	static async getInstance() {
		if (!GatekeeperService.instance) {
			const logger = await LoggerServiceFactory.getLoggerService();
			const errorLogger =
				await LoggerServiceFactory.getErrorLoggerService();
			const errorHandler =
				await ErrorHandlerServiceFactory.getErrorHandlerService();
			const envConfig =
				await EnvConfigServiceFactory.getEnvConfigService();
			const cacheService =
				await CacheLayerServiceFactory.getCacheService();
			const resourceManager =
				await ResourceManagerFactory.getResourceManager();
			GatekeeperService.instance = new GatekeeperService(
				logger,
				errorLogger,
				errorHandler,
				envConfig,
				cacheService,
				resourceManager
			);
		}
		return GatekeeperService.instance;
	}
	async initialize() {
		await Promise.all([this.loadIpBlacklist(), this.loadWhitelist()]);
		this.resetGlobalRateLimitStats();
		await this.syncBlacklistFromCacheToFile();
	}
	async dynamicRateLimiter() {
		if (!this.rateLimiter) {
			this.rateLimiter = new RateLimiterMemory({
				points: this.RATE_LIMIT_BASE_POINTS,
				duration: this.RATE_LIMIT_BASE_DURATION
			});
		}
		const cpuUsage = this.calculateCpuUsage();
		const memoryUsage =
			this.resourceManager.getMemoryUsage().heapUsedPercentage;
		const adjustedPoints = this.adjustRateLimitBasedOnResources(
			cpuUsage,
			memoryUsage
		);
		this.rateLimiter.points = adjustedPoints;
	}
	updateGlobalRateLimitStats(ip, remainingPoints) {
		this.globalRateLimitStats.set(ip, remainingPoints);
	}
	resetGlobalRateLimitStats() {
		setInterval(() => this.globalRateLimitStats.clear(), 60000);
		this.logger.info('Global rate limit stats reset.');
	}
	calculateCpuUsage() {
		const cpuUsages = this.resourceManager
			.getCpuUsage()
			.map(cpu => parseFloat(cpu.usage));
		return cpuUsages.reduce((a, b) => a + b, 0) / cpuUsages.length;
	}
	adjustRateLimitBasedOnResources(cpu, memory) {
		if (cpu > 80 || memory > 80) {
			this.logger.warn(
				`High resource usage detected. CPU: ${cpu}%, Memory: ${memory}%`
			);
			return Math.max(1, this.RATE_LIMIT_BASE_POINTS / 2);
		}
		return this.RATE_LIMIT_BASE_POINTS;
	}
	rateLimitMiddleware() {
		return async (req, res, next) => {
			const ip = req.ip || 'unknown';
			const rateLimitKey = `${this.rateLimitPrefix}${ip}`;
			if (!this.rateLimiter) {
				this.rateLimiter = new RateLimiterMemory({
					points: this.RATE_LIMIT_BASE_POINTS,
					duration: this.RATE_LIMIT_BASE_DURATION
				});
			}
			if (this.whitelist.includes(ip)) {
				return next();
			}
			try {
				let rateLimitInfo = await this.cacheService.get(
					rateLimitKey,
					'bouncerService'
				);
				if (rateLimitInfo === null) {
					const rateLimitRes = await this.rateLimiter.consume(ip);
					rateLimitInfo = rateLimitRes.remainingPoints;
				}
				if (!rateLimitInfo) {
					return this.triggerRateLimitWarning(
						ip,
						this.RATE_LIMIT_BASE_POINTS,
						next
					);
				}
				if (rateLimitInfo <= 2) {
					return this.triggerRateLimitWarning(
						ip,
						rateLimitInfo,
						next
					);
				}
				await this.cacheService.set(
					rateLimitKey,
					rateLimitInfo,
					'bouncerService',
					60
				);
				await this.incrementRateLimit(ip);
				next();
			} catch (error) {
				this.handleDependencyError(
					'rateLimitMiddleware',
					error,
					req,
					res,
					next
				);
			}
		};
	}
	triggerRateLimitWarning(ip, points, next) {
		this.logger.info(
			`Rate limit warning for IP ${ip}. Remaining points: ${points}`
		);
		next(new this.errorHandler.ErrorClasses.RateLimitErrorWarning(points));
	}
	async incrementRateLimit(ip) {
		const rateLimitKey = `${this.rateLimitPrefix}${ip}`;
		const basePoints = Number(
			this.envConfig.getEnvVariable('rateLimiterBasePoints')
		);
		const baseDuration = Number(
			this.envConfig.getEnvVariable('rateLimiterBaseDuration')
		);
		try {
			let currentPoints = await this.cacheService.get(
				rateLimitKey,
				'gatekeeperService'
			);
			if (currentPoints === null) {
				currentPoints = basePoints;
			}
			if (currentPoints > 0) {
				currentPoints -= 1;
				await this.cacheService.set(
					rateLimitKey,
					currentPoints,
					'gatekeeperService',
					60
				);
			} else {
				const backoffMultiplier =
					(await this.cacheService.get(
						`backoff_${ip}`,
						'gatekeeperService'
					)) || 1;
				const newDuration = baseDuration * backoffMultiplier;
				await this.cacheService.set(
					rateLimitKey,
					basePoints,
					'bouncerService',
					newDuration
				);
				await this.cacheService.set(
					`backoff_${ip}`,
					backoffMultiplier + 1,
					'gatekeeperService',
					60
				);
				this.logger.info(
					`Exponential backoff applied for IP ${ip}: ${newDuration} ms`
				);
			}
			this.updateGlobalRateLimitStats(ip, currentPoints);
		} catch (error) {
			this.logger.error(
				`Failed to increment rate limit for IP ${ip}: ${error}`
			);
		}
	}
	slowdownMiddleware() {
		const slowdownThreshold = Number(
			this.envConfig.getEnvVariable('slowdownThreshold')
		);
		return (req, res, next) => {
			const requestTime = Date.now();
			this.handleSlowdown(req, res, next, requestTime, slowdownThreshold);
		};
	}
	handleSlowdown(req, res, next, requestTime, slowdownThreshold) {
		if (!req.session) return next();
		const timeDiff = requestTime - (req.session.lastRequestTime || 0);
		req.session.lastRequestTime = requestTime;
		if (timeDiff < slowdownThreshold) {
			const waitTime = slowdownThreshold - timeDiff;
			this.logger.warn(
				`Rapid request detected from IP: ${req.ip}. Delaying response by ${waitTime} ms`
			);
			setTimeout(() => next(), waitTime);
		} else {
			next();
		}
	}
	throttleRequests() {
		return async (req, res, next) => {
			try {
				const tooBusy = (await import('toobusy-js')).default;
				if (tooBusy()) {
					this.logger.warn(
						`Server too busy, blocking request from ${req.ip}`
					);
					return res
						.status(503)
						.json({ error: 'Server too busy, try again later.' });
				}
				return next();
			} catch (error) {
				this.handleDependencyError(
					'throttleRequests',
					error,
					req,
					res,
					next
				);
			}
		};
	}
	ipBlacklistMiddleware() {
		return async (req, res, next) => {
			const clientIp = req.ip;
			if (!clientIp) {
				res.status(500).json({ error: 'Bad request' });
				return;
			}
			if (this.whitelist.includes(clientIp)) {
				return next();
			}
			try {
				if (await this.isTemporarilyBlacklisted(clientIp)) {
					this.logger.info(
						`Temporarily blocked request from IP: ${clientIp}`
					);
					res.status(403).json({
						error: 'Access temporarily denied.'
					});
					return;
				}
				if (this.blacklist.includes(clientIp)) {
					this.logger.info(
						`Blocked request from blacklisted IP: ${clientIp}`
					);
					res.status(403).json({ error: 'Access denied' });
					return;
				}
				next();
			} catch (error) {
				this.logger.error(`Error in IP blacklist middleware: ${error}`);
				res.status(500).json({ error: 'Internal server error' });
			}
		};
	}
	async loadIpBlacklist() {
		try {
			const cachedBlacklist = await this.cacheService.get(
				this.blacklistKey,
				'bouncerService'
			);
			if (!cachedBlacklist) {
				this.logger.info(
					'IP blacklist not found in cache, loading from file...'
				);
				await this.loadIpBlacklistFromFile();
			} else {
				this.blacklist = cachedBlacklist;
			}
		} catch (error) {
			this.logger.error(
				`Error loading IP blacklist: ${error instanceof Error ? error.message : 'Unknown error'}`
			);
			await this.loadIpBlacklistFromFile();
		}
	}
	async loadWhitelist() {
		this.whitelist = this.envConfig
			.getEnvVariable('ipWhitelistPath')
			.split(',');
		this.logger.info(
			`Whitelist initialized with ${this.whitelist.length} IPs.`
		);
	}
	async saveIpBlacklist() {
		try {
			await this.cacheService.set(
				this.blacklistKey,
				this.blacklist,
				'gatekeeperService',
				3600
			);
		} catch (error) {
			this.logger.error(`Error saving IP blacklist to Redis: ${error}`);
		}
		await this.saveIpBlacklistToFile();
	}
	async loadIpBlacklistFromFile() {
		const filePath = this.getFilePath('serverDataFilePath1');
		await this.concurrentFileAccessSafety(async () => {
			try {
				if (fs.existsSync(filePath)) {
					this.blacklist = JSON.parse(
						fs.readFileSync(filePath, 'utf8')
					);
				}
			} catch (error) {
				this.logger.error(
					`Error loading IP blacklist from file: ${error}`
				);
			}
		});
	}
	async saveIpBlacklistToFile() {
		const filePath = this.getFilePath('serverDataFilePath2');
		await this.concurrentFileAccessSafety(async () => {
			try {
				fs.writeFileSync(filePath, JSON.stringify(this.blacklist));
			} catch (error) {
				this.logger.error(
					`Error saving IP blacklist to file: ${error}`
				);
			}
		});
	}
	async addIpToBlacklist(ip) {
		if (!this.blacklist.includes(ip)) {
			this.blacklist.push(ip);
			await this.saveIpBlacklist();
			this.logger.info(`IP ${ip} added to blacklist.`);
		}
	}
	async removeIpFromBlacklist(ip) {
		this.blacklist = this.blacklist.filter(
			blacklistedIp => blacklistedIp !== ip
		);
		await this.saveIpBlacklist();
		this.logger.info(`IP ${ip} removed from blacklist.`);
	}
	async temporaryBlacklist(ip) {
		const temporaryBlacklistKey = `temporaryBlacklist_${ip}`;
		await this.cacheService.set(
			temporaryBlacklistKey,
			'true',
			'gatekeeperService',
			3600
		);
		this.logger.info(`IP ${ip} temporarily blacklisted for 1 hour.`);
	}
	async isTemporarilyBlacklisted(ip) {
		const temporaryBlacklistKey = `temporaryBlacklist_${ip}`;
		const result = await this.cacheService.get(
			temporaryBlacklistKey,
			'gatekeeperService'
		);
		return result === 'true';
	}
	async isBlacklisted(ip) {
		try {
			await this.loadIpBlacklist();
			return this.blacklist.includes(ip);
		} catch (error) {
			this.logger.error(
				`Error checking if IP ${ip} is blacklisted: ${error}`
			);
			return false;
		}
	}
	async isBlacklistedOrTemporarilyBlacklisted(ip) {
		try {
			const isBlacklisted = await this.isBlacklisted(ip);
			const isTemporarilyBlacklisted =
				await this.isTemporarilyBlacklisted(ip);
			return { isBlacklisted, isTemporarilyBlacklisted };
		} catch (error) {
			this.logger.error(
				`Error checking if IP ${ip} is blacklisted or temporarily blacklisted: ${error}`
			);
			return { isBlacklisted: false, isTemporarilyBlacklisted: false };
		}
	}
	async preInitIpBlacklist() {
		try {
			const cachedBlacklist = await this.cacheService.get(
				this.blacklistKey,
				'gatekeeperService'
			);
			if (!cachedBlacklist) {
				this.logger.info(
					'IP blacklist not found in cache, loading from file...'
				);
				await this.loadIpBlacklist();
				await this.saveIpBlacklist();
				this.logger.info(
					'IP blacklist loaded from file and saved to cache.'
				);
			} else {
				this.blacklist = cachedBlacklist;
				this.logger.info('IP blacklist initialized from cache.');
			}
		} catch (error) {
			this.errorLogger.logWarn(
				`Failed to load IP blacklist from cache or file.\n${String(error)}`
			);
			await this.loadIpBlacklist();
		}
	}
	async preInitIpWhitelist() {
		try {
			const cachedWhitelist = await this.cacheService.get(
				this.whitelistKey,
				'gatekeeperService'
			);
			if (!cachedWhitelist) {
				this.logger.info(
					'IP whitelist not found in cache, loading from configuration...'
				);
				await this.loadWhitelist();
				await this.cacheService.set(
					this.whitelistKey,
					this.whitelist,
					'gatekeeperService',
					3600
				);
			} else {
				this.whitelist = cachedWhitelist;
			}
		} catch (error) {
			this.logger.error(
				`Error initializing IP whitelist: ${error instanceof Error ? error.message : 'Unknown error'}`
			);
		}
	}
	async syncBlacklistFromCacheToFile() {
		try {
			const blacklist = await this.cacheService.get(
				this.blacklistKey,
				'gatekeeperService'
			);
			if (blacklist) {
				this.blacklist = blacklist;
				await this.saveIpBlacklistToFile();
				this.logger.info(
					'IP blacklist successfully synced from cache to file.'
				);
			} else {
				this.logger.warn('No IP blacklist found in cache during sync.');
			}
		} catch (error) {
			this.logger.error(
				`Error syncing IP blacklist from cache to file: ${error}`
			);
		}
	}
	handleDependencyError(middleware, error, req, res, next) {
		const expressMiddlewareError =
			new this.errorHandler.ErrorClasses.DependencyErrorFatal(
				`Fatal error occurred while executing '${middleware}': ${error instanceof Error ? error.message : 'Unknown error'}`,
				{ dependency: middleware }
			);
		this.errorLogger.logError(expressMiddlewareError.message);
		this.errorHandler.expressErrorHandler()(
			expressMiddlewareError,
			req,
			res,
			next
		);
	}
	getFilePath(envVariable) {
		return path.resolve(
			__dirname,
			this.envConfig.getEnvVariable(envVariable)
		);
	}
	async concurrentFileAccessSafety(fileOperation) {
		try {
			await fileOperation();
		} catch (error) {
			this.logger.error('Error during concurrent file access.');
			throw error;
		}
	}
	async shutdown() {
		try {
			this.logger.info('Shutting down GatekeeperService...');
			if (this.SYNC_INTERVAL) {
				clearInterval(this.SYNC_INTERVAL);
				this.logger.info('Stopped IP blacklist sync interval.');
			}
			this.globalRateLimitStats.clear();
			this.logger.info('Cleared global rate limit stats.');
			this.rateLimiter = null;
			this.logger.info('Rate limiter memory cleared.');
			GatekeeperService.instance = null;
			this.logger.info('GatekeeperService shutdown completed.');
		} catch (error) {
			const shutdownError =
				new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
					`Error during GatekeeperService shutdown: ${error instanceof Error ? error.message : 'Unknown error'}`
				);
			this.errorLogger.logError(shutdownError.message);
			this.errorHandler.handleError({ error: shutdownError });
		}
	}
}
//# sourceMappingURL=data:application/json;base64,
