import { LoggerServiceFactory } from '../index/factory/subfactories/LoggerServiceFactory.mjs';
import { ErrorHandlerServiceFactory } from '../index/factory/subfactories/ErrorHandlerServiceFactory.mjs';
export class PassportAuthMiddlewareService {
	static instance = null;
	logger;
	errorLogger;
	errorHandler;
	constructor(logger, errorLogger, errorHandler) {
		this.logger = logger;
		this.errorLogger = errorLogger;
		this.errorHandler = errorHandler;
	}
	static async getInstance() {
		if (!PassportAuthMiddlewareService.instance) {
			const logger = await LoggerServiceFactory.getLoggerService();
			const errorLogger =
				await LoggerServiceFactory.getErrorLoggerService();
			const errorHandler =
				await ErrorHandlerServiceFactory.getErrorHandlerService();
			PassportAuthMiddlewareService.instance =
				new PassportAuthMiddlewareService(
					logger,
					errorLogger,
					errorHandler
				);
		}
		return PassportAuthMiddlewareService.instance;
	}
	initializePassportAuthMiddleware({
		passport,
		authenticateOptions,
		validateDependencies
	}) {
		validateDependencies(
			[
				{ name: 'passport', instance: passport },
				{ name: 'authenticateOptions', instance: authenticateOptions }
			],
			this.logger
		);
		return (req, res, next) => {
			try {
				passport.authenticate(
					'jwt',
					authenticateOptions,
					(err, user) => {
						if (err) {
							this.logger.error(
								`Passport authentication error: ${err.message}`
							);
							res.status(500).json({
								error: 'Internal Server Error'
							});
							return;
						}
						if (!user) {
							this.logger.warn('Unauthorized access attempt');
							res.status(401).json({ error: 'Unauthorized' });
							return;
						}
						req.user = user;
						return next();
					}
				)(req, res, next);
			} catch (expressError) {
				this.handleError(expressError, req, res, next);
			}
		};
	}
	async shutdown() {
		try {
			this.logger.info('Shutting down Passport middleware service...');
			PassportAuthMiddlewareService.instance = null;
			this.logger.info('Passport middleware service has been shut down.');
		} catch (error) {
			this.errorLogger.logError(
				`Error shutting down Passport middleware service: ${error instanceof Error ? error.message : error}`
			);
		}
	}
	handleError(expressError, req, res, next) {
		const middleware = 'PassportMiddlewareService';
		const expressMiddlewareError =
			new this.errorHandler.ErrorClasses.ExpressError(
				`Fatal error: Execution of ${middleware} failed\nShutting down...\n${
					expressError instanceof Error
						? expressError.message
						: 'Unknown error'
				}`,
				{
					utility: middleware,
					originalError: expressError
				}
			);
		this.errorLogger.logError(expressMiddlewareError.message);
		this.errorHandler.expressErrorHandler()(
			expressMiddlewareError,
			req,
			res,
			next
		);
		res.status(500).json({ error: 'Internal Server Error' });
	}
}
//# sourceMappingURL=data:application/json;base64,
