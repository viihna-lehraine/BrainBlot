import { validateDependencies } from '../utils/helpers.mjs';
import bcrypt from 'bcrypt';
import crypto from 'crypto';
import { UserMFA } from '../models/UserMFA.mjs';
import { LoggerServiceFactory } from '../index/factory/subfactories/LoggerServiceFactory.mjs';
import { ErrorHandlerServiceFactory } from '../index/factory/subfactories/ErrorHandlerServiceFactory.mjs';
export class BackupCodeService {
	static instance = null;
	logger;
	errorLogger;
	errorHandler;
	constructor(logger, errorLogger, errorHandler) {
		this.logger = logger;
		this.errorLogger = errorLogger;
		this.errorHandler = errorHandler;
	}
	static async getInstance() {
		if (!BackupCodeService.instance) {
			const logger = await LoggerServiceFactory.getLoggerService();
			const errorLogger =
				await LoggerServiceFactory.getErrorLoggerService();
			const errorHandler =
				await ErrorHandlerServiceFactory.getErrorHandlerService();
			BackupCodeService.instance = new BackupCodeService(
				logger,
				errorLogger,
				errorHandler
			);
		}
		return BackupCodeService.instance;
	}
	async generateBackupCodes(id) {
		try {
			validateDependencies([{ name: 'id', instance: id }], this.logger);
			const backupCodes = [];
			for (let i = 0; i < 16; i++) {
				const code = crypto.randomBytes(4).toString('hex');
				const hashedCode = await bcrypt.hash(code, 10);
				backupCodes.push({ code: hashedCode, used: false });
			}
			await this.saveBackupCodesToDatabase(id, backupCodes);
			return backupCodes.map(backupCode => backupCode.code);
		} catch (utilError) {
			const utilityError =
				new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
					`Failed to generate backup codes for user ${id}: ${utilError instanceof Error ? utilError.message : utilError}`,
					{ exposeToClient: false }
				);
			this.errorLogger.logError(utilityError.message);
			this.errorHandler.handleError({ error: utilityError });
			return [''];
		}
	}
	async verifyBackupCode(id, inputCode) {
		try {
			validateDependencies(
				[
					{ name: 'id', instance: id },
					{ name: 'inputCode', instance: inputCode }
				],
				this.logger
			);
			const storedCodes = await this.getBackupCodesFromDatabase(id);
			if (!storedCodes || storedCodes.length === 0) {
				this.logger.info(`No backup codes found for user ${id}`);
				return false;
			}
			for (const storedCode of storedCodes) {
				const match = await bcrypt.compare(inputCode, storedCode.code);
				if (match && !storedCode.used) {
					storedCode.used = true;
					await this.updateBackupCodesInDatabase(id, storedCodes);
					return true;
				}
			}
			this.logger.debug(`Backup code verification failed for user ${id}`);
			return false;
		} catch (utilError) {
			const utilityError =
				new this.errorHandler.ErrorClasses.DependencyErrorRecoverable(
					`Failed to verify backup code for user ${id}: ${utilError instanceof Error ? utilError.message : utilError}`
				);
			this.errorLogger.logError(utilityError.message);
			this.errorHandler.handleError({ error: utilityError });
			return false;
		}
	}
	async saveBackupCodesToDatabase(id, backupCodes) {
		try {
			validateDependencies(
				[
					{ name: 'id', instance: id },
					{ name: 'backupCodes', instance: backupCodes }
				],
				this.logger
			);
			const user = await UserMFA.findByPk(id);
			if (!user) {
				this.logger.warn(`User with ID ${id} not found`);
				return;
			}
			const backupCodesAsStrings = backupCodes.map(
				codeObj => codeObj.code
			);
			user.backupCodes = backupCodesAsStrings;
			await user.save();
		} catch (utilError) {
			const utilityError =
				new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
					`Failed to save backup codes for user ${id}: ${utilError instanceof Error ? utilError.message : utilError}`,
					{ exposeToClient: false }
				);
			this.errorLogger.logError(utilityError.message);
			this.errorHandler.handleError({ error: utilityError });
		}
	}
	async getBackupCodesFromDatabase(id) {
		try {
			validateDependencies([{ name: 'id', instance: id }], this.logger);
			const user = await UserMFA.findByPk(id);
			if (!user || !user.backupCodes) {
				this.logger.warn(`No backup codes found for user ${id}`);
				return;
			}
			return user.backupCodes.map(code => ({ code, used: false }));
		} catch (utilError) {
			const utilityError =
				new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
					`Failed to get backup codes for user ${id}: ${utilError instanceof Error ? utilError.message : utilError}`,
					{ exposeToClient: false }
				);
			this.errorLogger.logError(utilityError.message);
			this.errorHandler.handleError({ error: utilityError });
			return [];
		}
	}
	async updateBackupCodesInDatabase(id, backupCodes) {
		try {
			validateDependencies(
				[
					{ name: 'id', instance: id },
					{ name: 'backupCodes', instance: backupCodes }
				],
				this.logger
			);
			const user = await UserMFA.findByPk(id);
			if (!user) {
				this.logger.warn(`User with ID ${id} not found`);
				return;
			}
			const backupCodesAsStrings = backupCodes.map(
				codeObj => codeObj.code
			);
			user.backupCodes = backupCodesAsStrings;
			await user.save();
		} catch (utilError) {
			const utilityError =
				new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
					`Failed to update backup codes for user ${id}: ${utilError instanceof Error ? utilError.message : utilError}`,
					{ exposeToClient: false }
				);
			this.errorLogger.logError(utilityError.message);
			this.errorHandler.handleError({ error: utilityError });
		}
	}
	async shutdown() {
		try {
			this.logger.info('Shutting down BackupCodeService...');
			BackupCodeService.instance = null;
			this.logger.info('BackupCodeService shutdown successfully.');
		} catch (error) {
			this.errorLogger.logError(
				`Error shutting down BackupCodeService: ${error instanceof Error ? error.message : error}`
			);
		}
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFja3VwQ29kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hdXRoL0JhY2t1cENvZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0EsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDeEQsT0FBTyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBQzVCLE9BQU8sTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUM1QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDNUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFDMUYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sMERBQTBELENBQUM7QUFFdEcsTUFBTSxPQUFPLGlCQUFpQjtJQUNyQixNQUFNLENBQUMsUUFBUSxHQUE2QixJQUFJLENBQUM7SUFDakQsTUFBTSxDQUE0QjtJQUNsQyxXQUFXLENBQThCO0lBQ3pDLFlBQVksQ0FBK0I7SUFFbkQsWUFDQyxNQUFpQyxFQUNqQyxXQUF3QyxFQUN4QyxZQUEwQztRQUUxQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztJQUNsQyxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXO1FBQzlCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNqQyxNQUFNLE1BQU0sR0FBRyxNQUFNLG9CQUFvQixDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDN0QsTUFBTSxXQUFXLEdBQ2hCLE1BQU0sb0JBQW9CLENBQUMscUJBQXFCLEVBQUUsQ0FBQztZQUNwRCxNQUFNLFlBQVksR0FDakIsTUFBTSwwQkFBMEIsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1lBRTNELGlCQUFpQixDQUFDLFFBQVEsR0FBRyxJQUFJ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QUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FDMUYsQ0FBQztRQUNILENBQUM7SUFDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0QXBwTG9nZ2VyU2VydmljZUludGVyZmFjZSxcblx0QmFja3VwQ29kZVNlcnZpY2VJbnRlcmZhY2UsXG5cdEVycm9yTG9nZ2VyU2VydmljZUludGVyZmFjZSxcblx0RXJyb3JIYW5kbGVyU2VydmljZUludGVyZmFjZVxufSBmcm9tICcuLi9pbmRleC9pbnRlcmZhY2VzL21haW4nO1xuaW1wb3J0IHsgQmFja3VwQ29kZUludGVyZmFjZSB9IGZyb20gJy4uL2luZGV4L2ludGVyZmFjZXMvbWFpbic7XG5pbXBvcnQgeyB2YWxpZGF0ZURlcGVuZGVuY2llcyB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IGJjcnlwdCBmcm9tICdiY3J5cHQnO1xuaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IHsgVXNlck1GQSB9IGZyb20gJy4uL21vZGVscy9Vc2VyTUZBJztcbmltcG9ydCB7IExvZ2dlclNlcnZpY2VGYWN0b3J5IH0gZnJvbSAnLi4vaW5kZXgvZmFjdG9yeS9zdWJmYWN0b3JpZXMvTG9nZ2VyU2VydmljZUZhY3RvcnknO1xuaW1wb3J0IHsgRXJyb3JIYW5kbGVyU2VydmljZUZhY3RvcnkgfSBmcm9tICcuLi9pbmRleC9mYWN0b3J5L3N1YmZhY3Rvcmllcy9FcnJvckhhbmRsZXJTZXJ2aWNlRmFjdG9yeSc7XG5cbmV4cG9ydCBjbGFzcyBCYWNrdXBDb2RlU2VydmljZSBpbXBsZW1lbnRzIEJhY2t1cENvZGVTZXJ2aWNlSW50ZXJmYWNlIHtcblx0cHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IEJhY2t1cENvZGVTZXJ2aWNlIHwgbnVsbCA9IG51bGw7XG5cdHByaXZhdGUgbG9nZ2VyOiBBcHBMb2dnZXJTZXJ2aWNlSW50ZXJmYWNlO1xuXHRwcml2YXRlIGVycm9yTG9nZ2VyOiBFcnJvckxvZ2dlclNlcnZpY2VJbnRlcmZhY2U7XG5cdHByaXZhdGUgZXJyb3JIYW5kbGVyOiBFcnJvckhhbmRsZXJTZXJ2aWNlSW50ZXJmYWNlO1xuXG5cdHByaXZhdGUgY29uc3RydWN0b3IoXG5cdFx0bG9nZ2VyOiBBcHBMb2dnZXJTZXJ2aWNlSW50ZXJmYWNlLFxuXHRcdGVycm9yTG9nZ2VyOiBFcnJvckxvZ2dlclNlcnZpY2VJbnRlcmZhY2UsXG5cdFx0ZXJyb3JIYW5kbGVyOiBFcnJvckhhbmRsZXJTZXJ2aWNlSW50ZXJmYWNlXG5cdCkge1xuXHRcdHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xuXHRcdHRoaXMuZXJyb3JMb2dnZXIgPSBlcnJvckxvZ2dlcjtcblx0XHR0aGlzLmVycm9ySGFuZGxlciA9IGVycm9ySGFuZGxlcjtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0SW5zdGFuY2UoKTogUHJvbWlzZTxCYWNrdXBDb2RlU2VydmljZT4ge1xuXHRcdGlmICghQmFja3VwQ29kZVNlcnZpY2UuaW5zdGFuY2UpIHtcblx0XHRcdGNvbnN0IGxvZ2dlciA9IGF3YWl0IExvZ2dlclNlcnZpY2VGYWN0b3J5LmdldExvZ2dlclNlcnZpY2UoKTtcblx0XHRcdGNvbnN0IGVycm9yTG9nZ2VyID1cblx0XHRcdFx0YXdhaXQgTG9nZ2VyU2VydmljZUZhY3RvcnkuZ2V0RXJyb3JMb2dnZXJTZXJ2aWNlKCk7XG5cdFx0XHRjb25zdCBlcnJvckhhbmRsZXIgPVxuXHRcdFx0XHRhd2FpdCBFcnJvckhhbmRsZXJTZXJ2aWNlRmFjdG9yeS5nZXRFcnJvckhhbmRsZXJTZXJ2aWNlKCk7XG5cblx0XHRcdEJhY2t1cENvZGVTZXJ2aWNlLmluc3RhbmNlID0gbmV3IEJhY2t1cENvZGVTZXJ2aWNlKFxuXHRcdFx0XHRsb2dnZXIsXG5cdFx0XHRcdGVycm9yTG9nZ2VyLFxuXHRcdFx0XHRlcnJvckhhbmRsZXJcblx0XHRcdCk7XG5cdFx0fVxuXHRcdHJldHVybiBCYWNrdXBDb2RlU2VydmljZS5pbnN0YW5jZTtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBnZW5lcmF0ZUJhY2t1cENvZGVzKGlkOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG5cdFx0dHJ5IHtcblx0XHRcdHZhbGlkYXRlRGVwZW5kZW5jaWVzKFt7IG5hbWU6ICdpZCcsIGluc3RhbmNlOiBpZCB9XSwgdGhpcy5sb2dnZXIpO1xuXG5cdFx0XHRjb25zdCBiYWNrdXBDb2RlczogQmFja3VwQ29kZUludGVyZmFjZVtdID0gW107XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcblx0XHRcdFx0Y29uc3QgY29kZSA9IGNyeXB0by5yYW5kb21CeXRlcyg0KS50b1N0cmluZygnaGV4Jyk7XG5cdFx0XHRcdGNvbnN0IGhhc2hlZENvZGUgPSBhd2FpdCBiY3J5cHQuaGFzaChjb2RlLCAxMCk7XG5cdFx0XHRcdGJhY2t1cENvZGVzLnB1c2goeyBjb2RlOiBoYXNoZWRDb2RlLCB1c2VkOiBmYWxzZSB9KTtcblx0XHRcdH1cblxuXHRcdFx0YXdhaXQgdGhpcy5zYXZlQmFja3VwQ29kZXNUb0RhdGFiYXNlKGlkLCBiYWNrdXBDb2Rlcyk7XG5cblx0XHRcdHJldHVybiBiYWNrdXBDb2Rlcy5tYXAoYmFja3VwQ29kZSA9PiBiYWNrdXBDb2RlLmNvZGUpO1xuXHRcdH0gY2F0Y2ggKHV0aWxFcnJvcikge1xuXHRcdFx0Y29uc3QgdXRpbGl0eUVycm9yID1cblx0XHRcdFx0bmV3IHRoaXMuZXJyb3JIYW5kbGVyLkVycm9yQ2xhc3Nlcy5VdGlsaXR5RXJyb3JSZWNvdmVyYWJsZShcblx0XHRcdFx0XHRgRmFpbGVkIHRvIGdlbmVyYXRlIGJhY2t1cCBjb2RlcyBmb3IgdXNlciAke2lkfTogJHt1dGlsRXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IHV0aWxFcnJvci5tZXNzYWdlIDogdXRpbEVycm9yfWAsXG5cdFx0XHRcdFx0eyBleHBvc2VUb0NsaWVudDogZmFsc2UgfVxuXHRcdFx0XHQpO1xuXHRcdFx0dGhpcy5lcnJvckxvZ2dlci5sb2dFcnJvcih1dGlsaXR5RXJyb3IubWVzc2FnZSk7XG5cdFx0XHR0aGlzLmVycm9ySGFuZGxlci5oYW5kbGVFcnJvcih7IGVycm9yOiB1dGlsaXR5RXJyb3IgfSk7XG5cdFx0XHRyZXR1cm4gWycnXTtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgdmVyaWZ5QmFja3VwQ29kZShcblx0XHRpZDogc3RyaW5nLFxuXHRcdGlucHV0Q29kZTogc3RyaW5nXG5cdCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuXHRcdHRyeSB7XG5cdFx0XHR2YWxpZGF0ZURlcGVuZGVuY2llcyhcblx0XHRcdFx0W1xuXHRcdFx0XHRcdHsgbmFtZTogJ2lkJywgaW5zdGFuY2U6IGlkIH0sXG5cdFx0XHRcdFx0eyBuYW1lOiAnaW5wdXRDb2RlJywgaW5zdGFuY2U6IGlucHV0Q29kZSB9XG5cdFx0XHRcdF0sXG5cdFx0XHRcdHRoaXMubG9nZ2VyXG5cdFx0XHQpO1xuXG5cdFx0XHRjb25zdCBzdG9yZWRDb2RlcyA9IGF3YWl0IHRoaXMuZ2V0QmFja3VwQ29kZXNGcm9tRGF0YWJhc2UoaWQpO1xuXG5cdFx0XHRpZiAoIXN0b3JlZENvZGVzIHx8IHN0b3JlZENvZGVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHR0aGlzLmxvZ2dlci5pbmZvKGBObyBiYWNrdXAgY29kZXMgZm91bmQgZm9yIHVzZXIgJHtpZH1gKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKGNvbnN0IHN0b3JlZENvZGUgb2Ygc3RvcmVkQ29kZXMpIHtcblx0XHRcdFx0Y29uc3QgbWF0Y2ggPSBhd2FpdCBiY3J5cHQuY29tcGFyZShpbnB1dENvZGUsIHN0b3JlZENvZGUuY29kZSk7XG5cdFx0XHRcdGlmIChtYXRjaCAmJiAhc3RvcmVkQ29kZS51c2VkKSB7XG5cdFx0XHRcdFx0c3RvcmVkQ29kZS51c2VkID0gdHJ1ZTtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnVwZGF0ZUJhY2t1cENvZGVzSW5EYXRhYmFzZShpZCwgc3RvcmVkQ29kZXMpO1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMubG9nZ2VyLmRlYnVnKGBCYWNrdXAgY29kZSB2ZXJpZmljYXRpb24gZmFpbGVkIGZvciB1c2VyICR7aWR9YCk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSBjYXRjaCAodXRpbEVycm9yKSB7XG5cdFx0XHRjb25zdCB1dGlsaXR5RXJyb3IgPVxuXHRcdFx0XHRuZXcgdGhpcy5lcnJvckhhbmRsZXIuRXJyb3JDbGFzc2VzLkRlcGVuZGVuY3lFcnJvclJlY292ZXJhYmxlKFxuXHRcdFx0XHRcdGBGYWlsZWQgdG8gdmVyaWZ5IGJhY2t1cCBjb2RlIGZvciB1c2VyICR7aWR9OiAke3V0aWxFcnJvciBpbnN0YW5jZW9mIEVycm9yID8gdXRpbEVycm9yLm1lc3NhZ2UgOiB1dGlsRXJyb3J9YFxuXHRcdFx0XHQpO1xuXHRcdFx0dGhpcy5lcnJvckxvZ2dlci5sb2dFcnJvcih1dGlsaXR5RXJyb3IubWVzc2FnZSk7XG5cdFx0XHR0aGlzLmVycm9ySGFuZGxlci5oYW5kbGVFcnJvcih7IGVycm9yOiB1dGlsaXR5RXJyb3IgfSk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIGFzeW5jIHNhdmVCYWNrdXBDb2Rlc1RvRGF0YWJhc2UoXG5cdFx0aWQ6IHN0cmluZyxcblx0XHRiYWNrdXBDb2RlczogQmFja3VwQ29kZUludGVyZmFjZVtdXG5cdCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdHRyeSB7XG5cdFx0XHR2YWxpZGF0ZURlcGVuZGVuY2llcyhcblx0XHRcdFx0W1xuXHRcdFx0XHRcdHsgbmFtZTogJ2lkJywgaW5zdGFuY2U6IGlkIH0sXG5cdFx0XHRcdFx0eyBuYW1lOiAnYmFja3VwQ29kZXMnLCBpbnN0YW5jZTogYmFja3VwQ29kZXMgfVxuXHRcdFx0XHRdLFxuXHRcdFx0XHR0aGlzLmxvZ2dlclxuXHRcdFx0KTtcblxuXHRcdFx0Y29uc3QgdXNlciA9IGF3YWl0IFVzZXJNRkEuZmluZEJ5UGsoaWQpO1xuXG5cdFx0XHRpZiAoIXVzZXIpIHtcblx0XHRcdFx0dGhpcy5sb2dnZXIud2FybihgVXNlciB3aXRoIElEICR7aWR9IG5vdCBmb3VuZGApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGJhY2t1cENvZGVzQXNTdHJpbmdzID0gYmFja3VwQ29kZXMubWFwKFxuXHRcdFx0XHRjb2RlT2JqID0+IGNvZGVPYmouY29kZVxuXHRcdFx0KTtcblx0XHRcdHVzZXIuYmFja3VwQ29kZXMgPSBiYWNrdXBDb2Rlc0FzU3RyaW5ncztcblx0XHRcdGF3YWl0IHVzZXIuc2F2ZSgpO1xuXHRcdH0gY2F0Y2ggKHV0aWxFcnJvcikge1xuXHRcdFx0Y29uc3QgdXRpbGl0eUVycm9yID1cblx0XHRcdFx0bmV3IHRoaXMuZXJyb3JIYW5kbGVyLkVycm9yQ2xhc3Nlcy5VdGlsaXR5RXJyb3JSZWNvdmVyYWJsZShcblx0XHRcdFx0XHRgRmFpbGVkIHRvIHNhdmUgYmFja3VwIGNvZGVzIGZvciB1c2VyICR7aWR9OiAke3V0aWxFcnJvciBpbnN0YW5jZW9mIEVycm9yID8gdXRpbEVycm9yLm1lc3NhZ2UgOiB1dGlsRXJyb3J9YCxcblx0XHRcdFx0XHR7IGV4cG9zZVRvQ2xpZW50OiBmYWxzZSB9XG5cdFx0XHRcdCk7XG5cdFx0XHR0aGlzLmVycm9yTG9nZ2VyLmxvZ0Vycm9yKHV0aWxpdHlFcnJvci5tZXNzYWdlKTtcblx0XHRcdHRoaXMuZXJyb3JIYW5kbGVyLmhhbmRsZUVycm9yKHsgZXJyb3I6IHV0aWxpdHlFcnJvciB9KTtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgZ2V0QmFja3VwQ29kZXNGcm9tRGF0YWJhc2UoXG5cdFx0aWQ6IHN0cmluZ1xuXHQpOiBQcm9taXNlPEJhY2t1cENvZGVJbnRlcmZhY2VbXSB8IHVuZGVmaW5lZD4ge1xuXHRcdHRyeSB7XG5cdFx0XHR2YWxpZGF0ZURlcGVuZGVuY2llcyhbeyBuYW1lOiAnaWQnLCBpbnN0YW5jZTogaWQgfV0sIHRoaXMubG9nZ2VyKTtcblxuXHRcdFx0Y29uc3QgdXNlciA9IGF3YWl0IFVzZXJNRkEuZmluZEJ5UGsoaWQpO1xuXG5cdFx0XHRpZiAoIXVzZXIgfHwgIXVzZXIuYmFja3VwQ29kZXMpIHtcblx0XHRcdFx0dGhpcy5sb2dnZXIud2FybihgTm8gYmFja3VwIGNvZGVzIGZvdW5kIGZvciB1c2VyICR7aWR9YCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVzZXIuYmFja3VwQ29kZXMubWFwKFxuXHRcdFx0XHRjb2RlID0+ICh7IGNvZGUsIHVzZWQ6IGZhbHNlIH0pIGFzIEJhY2t1cENvZGVJbnRlcmZhY2Vcblx0XHRcdCk7XG5cdFx0fSBjYXRjaCAodXRpbEVycm9yKSB7XG5cdFx0XHRjb25zdCB1dGlsaXR5RXJyb3IgPVxuXHRcdFx0XHRuZXcgdGhpcy5lcnJvckhhbmRsZXIuRXJyb3JDbGFzc2VzLlV0aWxpdHlFcnJvclJlY292ZXJhYmxlKFxuXHRcdFx0XHRcdGBGYWlsZWQgdG8gZ2V0IGJhY2t1cCBjb2RlcyBmb3IgdXNlciAke2lkfTogJHt1dGlsRXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IHV0aWxFcnJvci5tZXNzYWdlIDogdXRpbEVycm9yfWAsXG5cdFx0XHRcdFx0eyBleHBvc2VUb0NsaWVudDogZmFsc2UgfVxuXHRcdFx0XHQpO1xuXHRcdFx0dGhpcy5lcnJvckxvZ2dlci5sb2dFcnJvcih1dGlsaXR5RXJyb3IubWVzc2FnZSk7XG5cdFx0XHR0aGlzLmVycm9ySGFuZGxlci5oYW5kbGVFcnJvcih7IGVycm9yOiB1dGlsaXR5RXJyb3IgfSk7XG5cdFx0XHRyZXR1cm4gW107XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIGFzeW5jIHVwZGF0ZUJhY2t1cENvZGVzSW5EYXRhYmFzZShcblx0XHRpZDogc3RyaW5nLFxuXHRcdGJhY2t1cENvZGVzOiBCYWNrdXBDb2RlSW50ZXJmYWNlW11cblx0KTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0dHJ5IHtcblx0XHRcdHZhbGlkYXRlRGVwZW5kZW5jaWVzKFxuXHRcdFx0XHRbXG5cdFx0XHRcdFx0eyBuYW1lOiAnaWQnLCBpbnN0YW5jZTogaWQgfSxcblx0XHRcdFx0XHR7IG5hbWU6ICdiYWNrdXBDb2RlcycsIGluc3RhbmNlOiBiYWNrdXBDb2RlcyB9XG5cdFx0XHRcdF0sXG5cdFx0XHRcdHRoaXMubG9nZ2VyXG5cdFx0XHQpO1xuXG5cdFx0XHRjb25zdCB1c2VyID0gYXdhaXQgVXNlck1GQS5maW5kQnlQayhpZCk7XG5cblx0XHRcdGlmICghdXNlcikge1xuXHRcdFx0XHR0aGlzLmxvZ2dlci53YXJuKGBVc2VyIHdpdGggSUQgJHtpZH0gbm90IGZvdW5kYCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgYmFja3VwQ29kZXNBc1N0cmluZ3MgPSBiYWNrdXBDb2Rlcy5tYXAoXG5cdFx0XHRcdGNvZGVPYmogPT4gY29kZU9iai5jb2RlXG5cdFx0XHQpO1xuXHRcdFx0dXNlci5iYWNrdXBDb2RlcyA9IGJhY2t1cENvZGVzQXNTdHJpbmdzO1xuXHRcdFx0YXdhaXQgdXNlci5zYXZlKCk7XG5cdFx0fSBjYXRjaCAodXRpbEVycm9yKSB7XG5cdFx0XHRjb25zdCB1dGlsaXR5RXJyb3IgPVxuXHRcdFx0XHRuZXcgdGhpcy5lcnJvckhhbmRsZXIuRXJyb3JDbGFzc2VzLlV0aWxpdHlFcnJvclJlY292ZXJhYmxlKFxuXHRcdFx0XHRcdGBGYWlsZWQgdG8gdXBkYXRlIGJhY2t1cCBjb2RlcyBmb3IgdXNlciAke2lkfTogJHt1dGlsRXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IHV0aWxFcnJvci5tZXNzYWdlIDogdXRpbEVycm9yfWAsXG5cdFx0XHRcdFx0eyBleHBvc2VUb0NsaWVudDogZmFsc2UgfVxuXHRcdFx0XHQpO1xuXHRcdFx0dGhpcy5lcnJvckxvZ2dlci5sb2dFcnJvcih1dGlsaXR5RXJyb3IubWVzc2FnZSk7XG5cdFx0XHR0aGlzLmVycm9ySGFuZGxlci5oYW5kbGVFcnJvcih7IGVycm9yOiB1dGlsaXR5RXJyb3IgfSk7XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIGFzeW5jIHNodXRkb3duKCk6IFByb21pc2U8dm9pZD4ge1xuXHRcdHRyeSB7XG5cdFx0XHR0aGlzLmxvZ2dlci5pbmZvKCdTaHV0dGluZyBkb3duIEJhY2t1cENvZGVTZXJ2aWNlLi4uJyk7XG5cblx0XHRcdEJhY2t1cENvZGVTZXJ2aWNlLmluc3RhbmNlID0gbnVsbDtcblxuXHRcdFx0dGhpcy5sb2dnZXIuaW5mbygnQmFja3VwQ29kZVNlcnZpY2Ugc2h1dGRvd24gc3VjY2Vzc2Z1bGx5LicpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHR0aGlzLmVycm9yTG9nZ2VyLmxvZ0Vycm9yKFxuXHRcdFx0XHRgRXJyb3Igc2h1dHRpbmcgZG93biBCYWNrdXBDb2RlU2VydmljZTogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IGVycm9yfWBcblx0XHRcdCk7XG5cdFx0fVxuXHR9XG59XG4iXX0=
