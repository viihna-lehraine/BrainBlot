import jwt from 'jsonwebtoken';
import { withRetry } from '../utils/helpers.mjs';
import { LoggerServiceFactory } from '../index/factory/subfactories/LoggerServiceFactory.mjs';
import { ErrorHandlerServiceFactory } from '../index/factory/subfactories/ErrorHandlerServiceFactory.mjs';
import { CacheLayerServiceFactory } from '../index/factory/subfactories/CacheLayerServiceFactory.mjs';
import { VaultServiceFactory } from '../index/factory/subfactories/VaultServiceFactory.mjs';
export class JWTService {
	static instance = null;
	logger;
	errorLogger;
	errorHandler;
	cacheService;
	vault;
	constructor() {}
	static async getInstance() {
		if (!JWTService.instance) {
			const logger = await LoggerServiceFactory.getLoggerService();
			const errorLogger =
				await LoggerServiceFactory.getErrorLoggerService();
			const errorHandler =
				await ErrorHandlerServiceFactory.getErrorHandlerService();
			const cacheService =
				await CacheLayerServiceFactory.getCacheService();
			const vault = await VaultServiceFactory.getVaultService();
			JWTService.instance = new JWTService();
			JWTService.instance.logger = logger;
			JWTService.instance.errorLogger = errorLogger;
			JWTService.instance.errorHandler = errorHandler;
			JWTService.instance.cacheService = cacheService;
			JWTService.instance.vault = vault;
		}
		return JWTService.instance;
	}
	async generateJWT(id, username) {
		try {
			const secret = await withRetry(
				() => this.vault.retrieveSecret('JWT_SECRET', secret => secret),
				3,
				500
			);
			if (!secret) {
				const utilityError =
					new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
						`Failed to retrieve JWT secret in 'generateJwt'`
					);
				this.errorLogger.logWarn(utilityError.message);
				this.errorHandler.handleError({ error: utilityError });
				return '';
			}
			return jwt.sign({ id, username }, secret, {
				expiresIn: '1h'
			});
		} catch (error) {
			const utilityError =
				new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
					`Failed to generate JWT in 'generateJwt': ${error instanceof Error ? error.message : error}`
				);
			this.errorLogger.logWarn(utilityError.message);
			this.errorHandler.handleError({ error: utilityError });
			return '';
		}
	}
	async verifyJWT(token) {
		try {
			const cachedResult = await this.cacheService.get(
				`jwt:${token}`,
				'jwtService'
			);
			if (cachedResult) {
				return cachedResult;
			}
			const secret = await withRetry(
				() => this.vault.retrieveSecret('JWT_SECRET', secret => secret),
				3,
				500
			);
			if (!secret) {
				const utilityError =
					new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
						`Failed to retrieve JWT secret in 'verifyJwt'`
					);
				this.errorLogger.logWarn(utilityError.message);
				this.errorHandler.handleError({ error: utilityError });
				return null;
			}
			const verifiedToken = jwt.verify(token, secret);
			if (typeof verifiedToken !== 'string') {
				const ttl = verifiedToken.exp
					? verifiedToken.exp * 1000 - Date.now()
					: 3600 * 1000;
				await this.cacheService.set(
					`jwt:${token}`,
					verifiedToken,
					'jwtService',
					Math.max(ttl, 5000)
				);
			}
			return verifiedToken;
		} catch (error) {
			const utilityError =
				new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
					`Failed to verify JWT in 'verifyJwt': ${error instanceof Error ? error.message : error}`
				);
			this.errorLogger.logWarn(utilityError.message);
			this.errorHandler.handleError({ error: utilityError });
			return null;
		}
	}
	async shutdown() {
		try {
			this.logger.info('Clearing JWTService cache before shutdown...');
			await this.cacheService.clearNamespace('jwtService');
			this.logger.info('JWTService cache cleared successfully.');
			JWTService.instance = null;
			this.logger.info('JWTService shutdown completed.');
		} catch (error) {
			const utilityError =
				new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
					`Error during JWTService shutdown: ${error instanceof Error ? error.message : error}`
				);
			this.errorLogger.logError(utilityError.message);
			this.errorHandler.handleError({ error: utilityError });
		}
	}
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSldULmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2F1dGgvSldULnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLE9BQU8sR0FBbUIsTUFBTSxjQUFjLENBQUM7QUFDL0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQzFGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBQ3RHLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBQ2xHLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1EQUFtRCxDQUFDO0FBRXhGLE1BQU0sT0FBTyxVQUFVO0lBQ2QsTUFBTSxDQUFDLFFBQVEsR0FBc0IsSUFBSSxDQUFDO0lBRTFDLE1BQU0sQ0FBNkI7SUFDbkMsV0FBVyxDQUErQjtJQUMxQyxZQUFZLENBQWdDO0lBQzVDLFlBQVksQ0FBeUI7SUFDckMsS0FBSyxDQUF5QjtJQUV0QyxnQkFBdUIsQ0FBQztJQUVqQixNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVc7UUFDOUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUMxQixNQUFNLE1BQU0sR0FBRyxNQUFNLG9CQUFvQixDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDN0QsTUFBTSxXQUFXLEdBQ2hCLE1BQU0sb0JBQW9CLENBQUMscUJBQXFCLEVBQUUsQ0FBQztZQUNwRCxNQUFNLFlBQVksR0FDakIsTUFBTSwwQkFBMEIsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1lBQzNELE1BQU0sWUFBWSxHQUNqQixNQUFNLHdCQUF3QixDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ2xELE1BQU0sS0FBSyxHQUFHLE1BQU0sbUJBQW1CLENBQUMsZUFBZSxFQUFFLENBQUM7WUFFMUQsVUFBVSxDQUFDLFFBQVEsR0FBRyxJQUFJLFVBQVUs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QUNKLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLDhDQUE4QyxDQUFDLENBQUM7WUFDakUsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUVyRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO1lBQzNELFVBQVUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1lBQzNCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEQsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDaEIsTUFBTSxZQUFZLEdBQ2pCLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsdUJBQXVCLENBQ3pELHFDQUFxQyxLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FDckYsQ0FBQztZQUNILElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoRCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBQ3hELENBQUM7SUFDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0QXBwTG9nZ2VyU2VydmljZUludGVyZmFjZSxcblx0Q2FjaGVTZXJ2aWNlSW50ZXJmYWNlLFxuXHRFcnJvckxvZ2dlclNlcnZpY2VJbnRlcmZhY2UsXG5cdEVycm9ySGFuZGxlclNlcnZpY2VJbnRlcmZhY2UsXG5cdEpXVFNlcnZpY2VJbnRlcmZhY2UsXG5cdFZhdWx0U2VydmljZUludGVyZmFjZVxufSBmcm9tICcuLi9pbmRleC9pbnRlcmZhY2VzL21haW4nO1xuaW1wb3J0IGp3dCwgeyBKd3RQYXlsb2FkIH0gZnJvbSAnanNvbndlYnRva2VuJztcbmltcG9ydCB7IHdpdGhSZXRyeSB9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IHsgTG9nZ2VyU2VydmljZUZhY3RvcnkgfSBmcm9tICcuLi9pbmRleC9mYWN0b3J5L3N1YmZhY3Rvcmllcy9Mb2dnZXJTZXJ2aWNlRmFjdG9yeSc7XG5pbXBvcnQgeyBFcnJvckhhbmRsZXJTZXJ2aWNlRmFjdG9yeSB9IGZyb20gJy4uL2luZGV4L2ZhY3Rvcnkvc3ViZmFjdG9yaWVzL0Vycm9ySGFuZGxlclNlcnZpY2VGYWN0b3J5JztcbmltcG9ydCB7IENhY2hlTGF5ZXJTZXJ2aWNlRmFjdG9yeSB9IGZyb20gJy4uL2luZGV4L2ZhY3Rvcnkvc3ViZmFjdG9yaWVzL0NhY2hlTGF5ZXJTZXJ2aWNlRmFjdG9yeSc7XG5pbXBvcnQgeyBWYXVsdFNlcnZpY2VGYWN0b3J5IH0gZnJvbSAnLi4vaW5kZXgvZmFjdG9yeS9zdWJmYWN0b3JpZXMvVmF1bHRTZXJ2aWNlRmFjdG9yeSc7XG5cbmV4cG9ydCBjbGFzcyBKV1RTZXJ2aWNlIGltcGxlbWVudHMgSldUU2VydmljZUludGVyZmFjZSB7XG5cdHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBKV1RTZXJ2aWNlIHwgbnVsbCA9IG51bGw7XG5cblx0cHJpdmF0ZSBsb2dnZXIhOiBBcHBMb2dnZXJTZXJ2aWNlSW50ZXJmYWNlO1xuXHRwcml2YXRlIGVycm9yTG9nZ2VyITogRXJyb3JMb2dnZXJTZXJ2aWNlSW50ZXJmYWNlO1xuXHRwcml2YXRlIGVycm9ySGFuZGxlciE6IEVycm9ySGFuZGxlclNlcnZpY2VJbnRlcmZhY2U7XG5cdHByaXZhdGUgY2FjaGVTZXJ2aWNlITogQ2FjaGVTZXJ2aWNlSW50ZXJmYWNlO1xuXHRwcml2YXRlIHZhdWx0ITogVmF1bHRTZXJ2aWNlSW50ZXJmYWNlO1xuXG5cdHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxuXG5cdHB1YmxpYyBzdGF0aWMgYXN5bmMgZ2V0SW5zdGFuY2UoKTogUHJvbWlzZTxKV1RTZXJ2aWNlPiB7XG5cdFx0aWYgKCFKV1RTZXJ2aWNlLmluc3RhbmNlKSB7XG5cdFx0XHRjb25zdCBsb2dnZXIgPSBhd2FpdCBMb2dnZXJTZXJ2aWNlRmFjdG9yeS5nZXRMb2dnZXJTZXJ2aWNlKCk7XG5cdFx0XHRjb25zdCBlcnJvckxvZ2dlciA9XG5cdFx0XHRcdGF3YWl0IExvZ2dlclNlcnZpY2VGYWN0b3J5LmdldEVycm9yTG9nZ2VyU2VydmljZSgpO1xuXHRcdFx0Y29uc3QgZXJyb3JIYW5kbGVyID1cblx0XHRcdFx0YXdhaXQgRXJyb3JIYW5kbGVyU2VydmljZUZhY3RvcnkuZ2V0RXJyb3JIYW5kbGVyU2VydmljZSgpO1xuXHRcdFx0Y29uc3QgY2FjaGVTZXJ2aWNlID1cblx0XHRcdFx0YXdhaXQgQ2FjaGVMYXllclNlcnZpY2VGYWN0b3J5LmdldENhY2hlU2VydmljZSgpO1xuXHRcdFx0Y29uc3QgdmF1bHQgPSBhd2FpdCBWYXVsdFNlcnZpY2VGYWN0b3J5LmdldFZhdWx0U2VydmljZSgpO1xuXG5cdFx0XHRKV1RTZXJ2aWNlLmluc3RhbmNlID0gbmV3IEpXVFNlcnZpY2UoKTtcblx0XHRcdEpXVFNlcnZpY2UuaW5zdGFuY2UubG9nZ2VyID0gbG9nZ2VyO1xuXHRcdFx0SldUU2VydmljZS5pbnN0YW5jZS5lcnJvckxvZ2dlciA9IGVycm9yTG9nZ2VyO1xuXHRcdFx0SldUU2VydmljZS5pbnN0YW5jZS5lcnJvckhhbmRsZXIgPSBlcnJvckhhbmRsZXI7XG5cdFx0XHRKV1RTZXJ2aWNlLmluc3RhbmNlLmNhY2hlU2VydmljZSA9IGNhY2hlU2VydmljZTtcblx0XHRcdEpXVFNlcnZpY2UuaW5zdGFuY2UudmF1bHQgPSB2YXVsdDtcblx0XHR9XG5cblx0XHRyZXR1cm4gSldUU2VydmljZS5pbnN0YW5jZTtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyBnZW5lcmF0ZUpXVChpZDogc3RyaW5nLCB1c2VybmFtZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3Qgc2VjcmV0ID0gYXdhaXQgd2l0aFJldHJ5KFxuXHRcdFx0XHQoKSA9PiB0aGlzLnZhdWx0LnJldHJpZXZlU2VjcmV0KCdKV1RfU0VDUkVUJywgc2VjcmV0ID0+IHNlY3JldCksXG5cdFx0XHRcdDMsXG5cdFx0XHRcdDUwMFxuXHRcdFx0KTtcblxuXHRcdFx0aWYgKCFzZWNyZXQpIHtcblx0XHRcdFx0Y29uc3QgdXRpbGl0eUVycm9yID1cblx0XHRcdFx0XHRuZXcgdGhpcy5lcnJvckhhbmRsZXIuRXJyb3JDbGFzc2VzLlV0aWxpdHlFcnJvclJlY292ZXJhYmxlKFxuXHRcdFx0XHRcdFx0YEZhaWxlZCB0byByZXRyaWV2ZSBKV1Qgc2VjcmV0IGluICdnZW5lcmF0ZUp3dCdgXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0dGhpcy5lcnJvckxvZ2dlci5sb2dXYXJuKHV0aWxpdHlFcnJvci5tZXNzYWdlKTtcblx0XHRcdFx0dGhpcy5lcnJvckhhbmRsZXIuaGFuZGxlRXJyb3IoeyBlcnJvcjogdXRpbGl0eUVycm9yIH0pO1xuXHRcdFx0XHRyZXR1cm4gJyc7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBqd3Quc2lnbih7IGlkLCB1c2VybmFtZSB9LCBzZWNyZXQsIHtcblx0XHRcdFx0ZXhwaXJlc0luOiAnMWgnXG5cdFx0XHR9KTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0Y29uc3QgdXRpbGl0eUVycm9yID1cblx0XHRcdFx0bmV3IHRoaXMuZXJyb3JIYW5kbGVyLkVycm9yQ2xhc3Nlcy5VdGlsaXR5RXJyb3JSZWNvdmVyYWJsZShcblx0XHRcdFx0XHRgRmFpbGVkIHRvIGdlbmVyYXRlIEpXVCBpbiAnZ2VuZXJhdGVKd3QnOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogZXJyb3J9YFxuXHRcdFx0XHQpO1xuXHRcdFx0dGhpcy5lcnJvckxvZ2dlci5sb2dXYXJuKHV0aWxpdHlFcnJvci5tZXNzYWdlKTtcblx0XHRcdHRoaXMuZXJyb3JIYW5kbGVyLmhhbmRsZUVycm9yKHsgZXJyb3I6IHV0aWxpdHlFcnJvciB9KTtcblx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgYXN5bmMgdmVyaWZ5SldUKHRva2VuOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZyB8IEp3dFBheWxvYWQgfCBudWxsPiB7XG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IGNhY2hlZFJlc3VsdCA9IGF3YWl0IHRoaXMuY2FjaGVTZXJ2aWNlLmdldDxcblx0XHRcdFx0c3RyaW5nIHwgSnd0UGF5bG9hZFxuXHRcdFx0Pihgand0OiR7dG9rZW59YCwgJ2p3dFNlcnZpY2UnKTtcblxuXHRcdFx0aWYgKGNhY2hlZFJlc3VsdCkge1xuXHRcdFx0XHRyZXR1cm4gY2FjaGVkUmVzdWx0O1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBzZWNyZXQgPSBhd2FpdCB3aXRoUmV0cnkoXG5cdFx0XHRcdCgpID0+IHRoaXMudmF1bHQucmV0cmlldmVTZWNyZXQoJ0pXVF9TRUNSRVQnLCBzZWNyZXQgPT4gc2VjcmV0KSxcblx0XHRcdFx0Myxcblx0XHRcdFx0NTAwXG5cdFx0XHQpO1xuXG5cdFx0XHRpZiAoIXNlY3JldCkge1xuXHRcdFx0XHRjb25zdCB1dGlsaXR5RXJyb3IgPVxuXHRcdFx0XHRcdG5ldyB0aGlzLmVycm9ySGFuZGxlci5FcnJvckNsYXNzZXMuVXRpbGl0eUVycm9yUmVjb3ZlcmFibGUoXG5cdFx0XHRcdFx0XHRgRmFpbGVkIHRvIHJldHJpZXZlIEpXVCBzZWNyZXQgaW4gJ3ZlcmlmeUp3dCdgXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0dGhpcy5lcnJvckxvZ2dlci5sb2dXYXJuKHV0aWxpdHlFcnJvci5tZXNzYWdlKTtcblx0XHRcdFx0dGhpcy5lcnJvckhhbmRsZXIuaGFuZGxlRXJyb3IoeyBlcnJvcjogdXRpbGl0eUVycm9yIH0pO1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgdmVyaWZpZWRUb2tlbiA9IGp3dC52ZXJpZnkodG9rZW4sIHNlY3JldCkgYXNcblx0XHRcdFx0fCBzdHJpbmdcblx0XHRcdFx0fCBKd3RQYXlsb2FkO1xuXG5cdFx0XHRpZiAodHlwZW9mIHZlcmlmaWVkVG9rZW4gIT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdGNvbnN0IHR0bCA9IHZlcmlmaWVkVG9rZW4uZXhwXG5cdFx0XHRcdFx0PyB2ZXJpZmllZFRva2VuLmV4cCAqIDEwMDAgLSBEYXRlLm5vdygpXG5cdFx0XHRcdFx0OiAzNjAwICogMTAwMDtcblx0XHRcdFx0YXdhaXQgdGhpcy5jYWNoZVNlcnZpY2Uuc2V0KFxuXHRcdFx0XHRcdGBqd3Q6JHt0b2tlbn1gLFxuXHRcdFx0XHRcdHZlcmlmaWVkVG9rZW4sXG5cdFx0XHRcdFx0J2p3dFNlcnZpY2UnLFxuXHRcdFx0XHRcdE1hdGgubWF4KHR0bCwgNTAwMClcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZlcmlmaWVkVG9rZW47XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGNvbnN0IHV0aWxpdHlFcnJvciA9XG5cdFx0XHRcdG5ldyB0aGlzLmVycm9ySGFuZGxlci5FcnJvckNsYXNzZXMuVXRpbGl0eUVycm9yUmVjb3ZlcmFibGUoXG5cdFx0XHRcdFx0YEZhaWxlZCB0byB2ZXJpZnkgSldUIGluICd2ZXJpZnlKd3QnOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogZXJyb3J9YFxuXHRcdFx0XHQpO1xuXHRcdFx0dGhpcy5lcnJvckxvZ2dlci5sb2dXYXJuKHV0aWxpdHlFcnJvci5tZXNzYWdlKTtcblx0XHRcdHRoaXMuZXJyb3JIYW5kbGVyLmhhbmRsZUVycm9yKHsgZXJyb3I6IHV0aWxpdHlFcnJvciB9KTtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBhc3luYyBzaHV0ZG93bigpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHR0cnkge1xuXHRcdFx0dGhpcy5sb2dnZXIuaW5mbygnQ2xlYXJpbmcgSldUU2VydmljZSBjYWNoZSBiZWZvcmUgc2h1dGRvd24uLi4nKTtcblx0XHRcdGF3YWl0IHRoaXMuY2FjaGVTZXJ2aWNlLmNsZWFyTmFtZXNwYWNlKCdqd3RTZXJ2aWNlJyk7XG5cblx0XHRcdHRoaXMubG9nZ2VyLmluZm8oJ0pXVFNlcnZpY2UgY2FjaGUgY2xlYXJlZCBzdWNjZXNzZnVsbHkuJyk7XG5cdFx0XHRKV1RTZXJ2aWNlLmluc3RhbmNlID0gbnVsbDtcblx0XHRcdHRoaXMubG9nZ2VyLmluZm8oJ0pXVFNlcnZpY2Ugc2h1dGRvd24gY29tcGxldGVkLicpO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRjb25zdCB1dGlsaXR5RXJyb3IgPVxuXHRcdFx0XHRuZXcgdGhpcy5lcnJvckhhbmRsZXIuRXJyb3JDbGFzc2VzLlV0aWxpdHlFcnJvclJlY292ZXJhYmxlKFxuXHRcdFx0XHRcdGBFcnJvciBkdXJpbmcgSldUU2VydmljZSBzaHV0ZG93bjogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IGVycm9yfWBcblx0XHRcdFx0KTtcblx0XHRcdHRoaXMuZXJyb3JMb2dnZXIubG9nRXJyb3IodXRpbGl0eUVycm9yLm1lc3NhZ2UpO1xuXHRcdFx0dGhpcy5lcnJvckhhbmRsZXIuaGFuZGxlRXJyb3IoeyBlcnJvcjogdXRpbGl0eUVycm9yIH0pO1xuXHRcdH1cblx0fVxufVxuIl19
