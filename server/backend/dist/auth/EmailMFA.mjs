import { CacheLayerServiceFactory } from '../index/factory/subfactories/CacheLayerServiceFactory.mjs';
import { ErrorHandlerServiceFactory } from '../index/factory/subfactories/ErrorHandlerServiceFactory.mjs';
import { LoggerServiceFactory } from '../index/factory/subfactories/LoggerServiceFactory.mjs';
import { VaultServiceFactory } from '../index/factory/subfactories/VaultServiceFactory.mjs';
export class EmailMFAService {
	static instance = null;
	cacheService;
	logger;
	errorLogger;
	errorHandler;
	vault;
	constructor() {}
	static async getInstance() {
		if (!EmailMFAService.instance) {
			const cacheService =
				await CacheLayerServiceFactory.getCacheService();
			const logger = await LoggerServiceFactory.getLoggerService();
			const errorLogger =
				await LoggerServiceFactory.getErrorLoggerService();
			const errorHandler =
				await ErrorHandlerServiceFactory.getErrorHandlerService();
			const vault = await VaultServiceFactory.getVaultService();
			EmailMFAService.instance = new EmailMFAService();
			EmailMFAService.instance.cacheService = cacheService;
			EmailMFAService.instance.logger = logger;
			EmailMFAService.instance.errorLogger = errorLogger;
			EmailMFAService.instance.errorHandler = errorHandler;
			EmailMFAService.instance.vault = vault;
		}
		return EmailMFAService.instance;
	}
	async generateEmailMFACode({ bcrypt, jwt }) {
		try {
			const emailMFACode = await bcrypt.genSalt(6);
			const key = await this.vault.retrieveSecret(
				'EMAIL_MFA_KEY',
				secret => secret
			);
			if (typeof key !== 'string') {
				this.logger.warn(
					'Valid Email MFA key not found during email 2FA code generation'
				);
				return { emailMFACode: '', emailMFAToken: '' };
			}
			const emailMFAToken = jwt.sign({ emailMFACode }, key, {
				expiresIn: '30m'
			});
			return { emailMFACode, emailMFAToken };
		} catch (utilError) {
			const utilityError =
				new this.errorHandler.ErrorClasses.UtilityErrorRecoverable(
					`Error generating email 2FA code: ${
						utilError instanceof Error
							? utilError.message
							: utilError
					}`
				);
			this.errorLogger.logError(utilityError.message);
			this.errorHandler.handleError({ error: utilityError });
			return { emailMFACode: '', emailMFAToken: '' };
		}
	}
	async verifyEmailMFACode(email, submittedCode) {
		try {
			const cachedToken = await this.cacheService.get(
				`mfaToken:${email}`,
				'auth'
			);
			if (!cachedToken) {
				this.logger.warn(
					`MFA token not found or expired for email: ${email}`
				);
				throw new this.errorHandler.ErrorClasses.InvalidInputError(
					'MFA token expired or invalid'
				);
			}
			const jwt = await this.loadJwt();
			const emailMFAKey = await this.vault.retrieveSecret(
				'EMAIL_MFA_KEY',
				secret => secret
			);
			if (!emailMFAKey) {
				this.logger.warn(
					'Valid Email MFA key not found during email 2FA code verification'
				);
				return false;
			}
			const decodedToken = jwt.verify(cachedToken, emailMFAKey);
			if (
				!decodedToken ||
				typeof decodedToken.emailMFACode !== 'string'
			) {
				this.logger.warn(
					`Invalid token structure during MFA verification for email: ${email}`
				);
				return false;
			}
			if (decodedToken.emailMFACode !== submittedCode) {
				this.logger.warn(`Invalid MFA code for email: ${email}`);
				return false;
			}
			await this.cacheService.del(`mfaToken:${email}`, 'auth');
			this.logger.info(`MFA verification successful for email: ${email}`);
			return true;
		} catch (error) {
			this.logger.error(`Error verifying MFA for email: ${email}`, {
				error
			});
			throw error;
		}
	}
	async shutdown() {
		try {
			this.logger.info('Clearing MFA tokens from cache...');
			await this.cacheService.clearNamespace('auth');
			EmailMFAService.instance = null;
			this.logger.info('EmailMFAService shutdown successfully.');
		} catch (error) {
			this.errorLogger.logError(
				`Error shutting down EmailMFAService: ${error instanceof Error ? error.message : error}`
			);
		}
	}
	async loadJwt() {
		return (await import('jsonwebtoken')).default;
	}
}
//# sourceMappingURL=data:application/json;base64,
