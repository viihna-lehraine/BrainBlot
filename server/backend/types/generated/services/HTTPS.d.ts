import { Sequelize } from 'sequelize';
import { Application } from 'express';
import { HTTPSServerInterface } from '../index/interfaces/main';
export declare class HTTPSServer implements HTTPSServerInterface {
    static instance: HTTPSServer | null;
    private accessControlMiddleware;
    private authController;
    private backupCodeService;
    private baseRouter;
    private cacheService;
    private csrfMiddleware;
    private databaseController;
    private emailMFAService;
    private errorLogger;
    private errorHandler;
    private envConfig;
    private fido2Service;
    private gatekeeperService;
    private healthCheckService;
    private helmetMiddleware;
    private jwtAuthMiddlewareService;
    private jwtService;
    private logger;
    private mailerService;
    private middlewareStatusService;
    private multerUploadService;
    private passportAuthMiddlewareService;
    private passportService;
    private passwordService;
    private resourceManager;
    private rootMiddlewareService;
    private totpService;
    private userController;
    private vault;
    private yubicoOTPService;
    private server;
    private app;
    private sequelize;
    private shuttingDown;
    private connections;
    private options;
    private port;
    private requestTimeout;
    private shutdownTimeout;
    private constructor();
    private initializeServices;
    static getInstance(app: Application, sequelize: Sequelize): Promise<HTTPSServer>;
    initialize(): Promise<void>;
    private mountRouters;
    private declareHTTPSServerOptions;
    startServer(): Promise<void>;
    private setupGracefulShutdown;
    private closeConnections;
    shutdownServer(): Promise<void>;
    getHTTPSServerInfo(): Promise<Record<string, unknown>>;
    getHTTPSServerMetrics(serviceName: string): Promise<Record<string, unknown>>;
    private shutDownLayer20Services;
    private shutDownLayer19Services;
    private shutDownLayer17Services;
    private shutDownLayer16Services;
    private shutDownLayer15Services;
    private shutDownLayer14Services;
    private shutDownLayer13Services;
    private shutDownLayer12Services;
    private shutDownLayer11Services;
    private shutDownLayer10Services;
    private shutDownLayer9Services;
    private shutDownLayer8Services;
    private shutDownLayer7Services;
    private shutDownLayer6Services;
    private shutDownLayer5Services;
    private shutDownLayer4Services;
    private shutDownLayer3Services;
    private shutDownLayer2Services;
    private shutDownLayer1Services;
    private handleHTTPSServerErrorRecoverable;
    private handleHTTPSServerErrorFatal;
}
//# sourceMappingURL=HTTPS.d.ts.map